Temporary file created: C:\Users\andre\AppData\Local\Temp\tmpt9r60z2q.cpp
LSP process started successfully.
Request sent with method initialize
Handling response from LSP
Received response: {
    "id": 0,
    "jsonrpc": "2.0",
    "result": {
        "capabilities": {
            "astProvider": true,
            "callHierarchyProvider": true,
            "clangdInlayHintsProvider": true,
            "codeActionProvider": true,
            "compilationDatabase": {
                "automaticReload": true
            },
            "completionProvider": {
                "resolveProvider": false,
                "triggerCharacters": [
                    ".",
                    "<",
                    ">",
                    ":",
                    "\"",
                    "/",
                    "*"
                ]
            },
            "declarationProvider": true,
            "definitionProvider": true,
            "documentFormattingProvider": true,
            "documentHighlightProvider": true,
            "documentLinkProvider": {
                "resolveProvider": false
            },
            "documentOnTypeFormattingProvider": {
                "firstTriggerCharacter": "\n",
                "moreTriggerCharacter": []
            },
            "documentRangeFormattingProvider": true,
            "documentSymbolProvider": true,
            "executeCommandProvider": {
                "commands": [
                    "clangd.applyFix",
                    "clangd.applyRename",
                    "clangd.applyTweak"
                ]
            },
            "foldingRangeProvider": true,
            "hoverProvider": true,
            "implementationProvider": true,
            "inactiveRegionsProvider": true,
            "inlayHintProvider": true,
            "memoryUsageProvider": true,
            "referencesProvider": true,
            "renameProvider": true,
            "selectionRangeProvider": true,
            "semanticTokensProvider": {
                "full": {
                    "delta": true
                },
                "legend": {
                    "tokenModifiers": [
                        "declaration",
                        "definition",
                        "deprecated",
                        "deduced",
                        "readonly",
                        "static",
                        "abstract",
                        "virtual",
                        "dependentName",
                        "defaultLibrary",
                        "usedAsMutableReference",
                        "usedAsMutablePointer",
                        "constructorOrDestructor",
                        "userDefined",
                        "functionScope",
                        "classScope",
                        "fileScope",
                        "globalScope"
                    ],
                    "tokenTypes": [
                        "variable",
                        "variable",
                        "parameter",
                        "function",
                        "method",
                        "function",
                        "property",
                        "variable",
                        "class",
                        "interface",
                        "enum",
                        "enumMember",
                        "type",
                        "type",
                        "unknown",
                        "namespace",
                        "typeParameter",
                        "concept",
                        "type",
                        "macro",
                        "modifier",
                        "operator",
                        "bracket",
                        "label",
                        "comment"
                    ]
                },
                "range": false
            },
            "signatureHelpProvider": {
                "triggerCharacters": [
                    "(",
                    ")",
                    "{",
                    "}",
                    "<",
                    ">",
                    ","
                ]
            },
            "standardTypeHierarchyProvider": true,
            "textDocumentSync": {
                "change": 2,
                "openClose": true,
                "save": true
            },
            "typeDefinitionProvider": true,
            "typeHierarchyProvider": true,
            "workspaceSymbolProvider": true
        },
        "serverInfo": {
            "name": "clangd",
            "version": "clangd version 20.1.0 windows x86_64-pc-windows-msvc"
        }
    }
}
LSP initialized successfully.
Request sent with method textDocument/didOpen
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpt9r60z2q.cpp",
        "version": 0
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpt9r60z2q.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <valarray>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <valarray>"
                },
                "filterText": "indirect_array",
                "insertText": "indirect_array",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022indirect_array<class Ty>",
                "score": 0.4805881977081299,
                "sortText": "4109f058indirect_array",
                "textEdit": {
                    "newText": "indirect_array",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <initializer_list>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <initializer_list>"
                },
                "filterText": "initializer_list",
                "insertText": "initializer_list",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022initializer_list<class Elem>",
                "score": 0.4805881977081299,
                "sortText": "4109f058initializer_list",
                "textEdit": {
                    "newText": "initializer_list",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>\nfrom <iterator>"
                },
                "filterText": "input_iterator_tag",
                "insertText": "input_iterator_tag",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022input_iterator_tag",
                "score": 0.4805881977081299,
                "sortText": "4109f058input_iterator_tag",
                "textEdit": {
                    "newText": "input_iterator_tag",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "integral_constant",
                "insertText": "integral_constant",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022integral_constant<class Ty, Ty Val>",
                "score": 0.4805881977081299,
                "sortText": "4109f058integral_constant",
                "textEdit": {
                    "newText": "integral_constant",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ios>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ios>"
                },
                "filterText": "io_errc",
                "insertText": "io_errc",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022io_errc",
                "score": 0.4805881977081299,
                "sortText": "4109f058io_errc",
                "textEdit": {
                    "newText": "io_errc",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "is_arithmetic",
                "insertText": "is_arithmetic",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022is_arithmetic<class Ty>",
                "score": 0.4805881977081299,
                "sortText": "4109f058is_arithmetic",
                "textEdit": {
                    "newText": "is_arithmetic",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>"
                },
                "filterText": "is_error_code_enum",
                "insertText": "is_error_code_enum",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022is_error_code_enum<class Enum>",
                "score": 0.4805881977081299,
                "sortText": "4109f058is_error_code_enum",
                "textEdit": {
                    "newText": "is_error_code_enum",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>"
                },
                "filterText": "is_error_condition_enum",
                "insertText": "is_error_condition_enum",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022is_error_condition_enum<class Enum>",
                "score": 0.4805881977081299,
                "sortText": "4109f058is_error_condition_enum",
                "textEdit": {
                    "newText": "is_error_condition_enum",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "is_floating_point",
                "insertText": "is_floating_point",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022is_floating_point<class Ty>",
                "score": 0.4805881977081299,
                "sortText": "4109f058is_floating_point",
                "textEdit": {
                    "newText": "is_floating_point",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "is_integral",
                "insertText": "is_integral",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022is_integral<class Ty>",
                "score": 0.4805881977081299,
                "sortText": "4109f058is_integral",
                "textEdit": {
                    "newText": "is_integral",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "is_same",
                "insertText": "is_same",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022is_same<class Ty1, class Ty2>",
                "score": 0.4805881977081299,
                "sortText": "4109f058is_same",
                "textEdit": {
                    "newText": "is_same",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "iterator_traits",
                "insertText": "iterator_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022iterator_traits<class Iter>",
                "score": 0.4805881977081299,
                "sortText": "4109f058iterator_traits",
                "textEdit": {
                    "newText": "iterator_traits",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "IC_AFFINE",
                "insertText": "IC_AFFINE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022IC_AFFINE",
                "score": 0.45130085945129395,
                "sortText": "4118ef18IC_AFFINE",
                "textEdit": {
                    "newText": "IC_AFFINE",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "IC_PROJECTIVE",
                "insertText": "IC_PROJECTIVE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022IC_PROJECTIVE",
                "score": 0.45130085945129395,
                "sortText": "4118ef18IC_PROJECTIVE",
                "textEdit": {
                    "newText": "IC_PROJECTIVE",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdint.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdint.h>"
                },
                "filterText": "INT16_C",
                "insertText": "INT16_C",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022INT16_C(x)",
                "score": 0.45130085945129395,
                "sortText": "4118ef18INT16_C",
                "textEdit": {
                    "newText": "INT16_C",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT16_MAX",
                "insertText": "INT16_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT16_MAX",
                "score": 0.45130085945129395,
                "sortText": "4118ef18INT16_MAX",
                "textEdit": {
                    "newText": "INT16_MAX",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT16_MIN",
                "insertText": "INT16_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT16_MIN",
                "score": 0.45130085945129395,
                "sortText": "4118ef18INT16_MIN",
                "textEdit": {
                    "newText": "INT16_MIN",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdint.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdint.h>"
                },
                "filterText": "INT32_C",
                "insertText": "INT32_C",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022INT32_C(x)",
                "score": 0.45130085945129395,
                "sortText": "4118ef18INT32_C",
                "textEdit": {
                    "newText": "INT32_C",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT32_MAX",
                "insertText": "INT32_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT32_MAX",
                "score": 0.45130085945129395,
                "sortText": "4118ef18INT32_MAX",
                "textEdit": {
                    "newText": "INT32_MAX",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT32_MIN",
                "insertText": "INT32_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT32_MIN",
                "score": 0.45130085945129395,
                "sortText": "4118ef18INT32_MIN",
                "textEdit": {
                    "newText": "INT32_MIN",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdint.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdint.h>"
                },
                "filterText": "INT64_C",
                "insertText": "INT64_C",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022INT64_C(x)",
                "score": 0.45130085945129395,
                "sortText": "4118ef18INT64_C",
                "textEdit": {
                    "newText": "INT64_C",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT64_MAX",
                "insertText": "INT64_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT64_MAX",
                "score": 0.45130085945129395,
                "sortText": "4118ef18INT64_MAX",
                "textEdit": {
                    "newText": "INT64_MAX",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT64_MIN",
                "insertText": "INT64_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT64_MIN",
                "score": 0.45130085945129395,
                "sortText": "4118ef18INT64_MIN",
                "textEdit": {
                    "newText": "INT64_MIN",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdint.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdint.h>"
                },
                "filterText": "INT8_C",
                "insertText": "INT8_C",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022INT8_C(x)",
                "score": 0.45130085945129395,
                "sortText": "4118ef18INT8_C",
                "textEdit": {
                    "newText": "INT8_C",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT8_MAX",
                "insertText": "INT8_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT8_MAX",
                "score": 0.45130085945129395,
                "sortText": "4118ef18INT8_MAX",
                "textEdit": {
                    "newText": "INT8_MAX",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT8_MIN",
                "insertText": "INT8_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT8_MIN",
                "score": 0.45130085945129395,
                "sortText": "4118ef18INT8_MIN",
                "textEdit": {
                    "newText": "INT8_MIN",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdint.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdint.h>"
                },
                "filterText": "INTMAX_C",
                "insertText": "INTMAX_C",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022INTMAX_C(x)",
                "score": 0.45130085945129395,
                "sortText": "4118ef18INTMAX_C",
                "textEdit": {
                    "newText": "INTMAX_C",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INTMAX_MAX",
                "insertText": "INTMAX_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INTMAX_MAX",
                "score": 0.45130085945129395,
                "sortText": "4118ef18INTMAX_MAX",
                "textEdit": {
                    "newText": "INTMAX_MAX",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INTMAX_MIN",
                "insertText": "INTMAX_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INTMAX_MIN",
                "score": 0.45130085945129395,
                "sortText": "4118ef18INTMAX_MIN",
                "textEdit": {
                    "newText": "INTMAX_MIN",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INTPTR_MAX",
                "insertText": "INTPTR_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INTPTR_MAX",
                "score": 0.45130085945129395,
                "sortText": "4118ef18INTPTR_MAX",
                "textEdit": {
                    "newText": "INTPTR_MAX",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INTPTR_MIN",
                "insertText": "INTPTR_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INTPTR_MIN",
                "score": 0.45130085945129395,
                "sortText": "4118ef18INTPTR_MIN",
                "textEdit": {
                    "newText": "INTPTR_MIN",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_FAST16_MAX",
                "insertText": "INT_FAST16_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_FAST16_MAX",
                "score": 0.45130085945129395,
                "sortText": "4118ef18INT_FAST16_MAX",
                "textEdit": {
                    "newText": "INT_FAST16_MAX",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_FAST16_MIN",
                "insertText": "INT_FAST16_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_FAST16_MIN",
                "score": 0.45130085945129395,
                "sortText": "4118ef18INT_FAST16_MIN",
                "textEdit": {
                    "newText": "INT_FAST16_MIN",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_FAST32_MAX",
                "insertText": "INT_FAST32_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_FAST32_MAX",
                "score": 0.45130085945129395,
                "sortText": "4118ef18INT_FAST32_MAX",
                "textEdit": {
                    "newText": "INT_FAST32_MAX",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_FAST32_MIN",
                "insertText": "INT_FAST32_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_FAST32_MIN",
                "score": 0.45130085945129395,
                "sortText": "4118ef18INT_FAST32_MIN",
                "textEdit": {
                    "newText": "INT_FAST32_MIN",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_FAST64_MAX",
                "insertText": "INT_FAST64_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_FAST64_MAX",
                "score": 0.45130085945129395,
                "sortText": "4118ef18INT_FAST64_MAX",
                "textEdit": {
                    "newText": "INT_FAST64_MAX",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_FAST64_MIN",
                "insertText": "INT_FAST64_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_FAST64_MIN",
                "score": 0.45130085945129395,
                "sortText": "4118ef18INT_FAST64_MIN",
                "textEdit": {
                    "newText": "INT_FAST64_MIN",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_FAST8_MAX",
                "insertText": "INT_FAST8_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_FAST8_MAX",
                "score": 0.45130085945129395,
                "sortText": "4118ef18INT_FAST8_MAX",
                "textEdit": {
                    "newText": "INT_FAST8_MAX",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_FAST8_MIN",
                "insertText": "INT_FAST8_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_FAST8_MIN",
                "score": 0.45130085945129395,
                "sortText": "4118ef18INT_FAST8_MIN",
                "textEdit": {
                    "newText": "INT_FAST8_MIN",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_LEAST16_MAX",
                "insertText": "INT_LEAST16_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_LEAST16_MAX",
                "score": 0.45130085945129395,
                "sortText": "4118ef18INT_LEAST16_MAX",
                "textEdit": {
                    "newText": "INT_LEAST16_MAX",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_LEAST16_MIN",
                "insertText": "INT_LEAST16_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_LEAST16_MIN",
                "score": 0.45130085945129395,
                "sortText": "4118ef18INT_LEAST16_MIN",
                "textEdit": {
                    "newText": "INT_LEAST16_MIN",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_LEAST32_MAX",
                "insertText": "INT_LEAST32_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_LEAST32_MAX",
                "score": 0.45130085945129395,
                "sortText": "4118ef18INT_LEAST32_MAX",
                "textEdit": {
                    "newText": "INT_LEAST32_MAX",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_LEAST32_MIN",
                "insertText": "INT_LEAST32_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_LEAST32_MIN",
                "score": 0.45130085945129395,
                "sortText": "4118ef18INT_LEAST32_MIN",
                "textEdit": {
                    "newText": "INT_LEAST32_MIN",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_LEAST64_MAX",
                "insertText": "INT_LEAST64_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_LEAST64_MAX",
                "score": 0.45130085945129395,
                "sortText": "4118ef18INT_LEAST64_MAX",
                "textEdit": {
                    "newText": "INT_LEAST64_MAX",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_LEAST64_MIN",
                "insertText": "INT_LEAST64_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_LEAST64_MIN",
                "score": 0.45130085945129395,
                "sortText": "4118ef18INT_LEAST64_MIN",
                "textEdit": {
                    "newText": "INT_LEAST64_MIN",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_LEAST8_MAX",
                "insertText": "INT_LEAST8_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_LEAST8_MAX",
                "score": 0.45130085945129395,
                "sortText": "4118ef18INT_LEAST8_MAX",
                "textEdit": {
                    "newText": "INT_LEAST8_MAX",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_LEAST8_MIN",
                "insertText": "INT_LEAST8_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_LEAST8_MIN",
                "score": 0.45130085945129395,
                "sortText": "4118ef18INT_LEAST8_MIN",
                "textEdit": {
                    "newText": "INT_LEAST8_MIN",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "imag",
                "insertText": "imag",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022imag(const complex<Ty> &Left)",
                "score": 0.3249107301235199,
                "sortText": "4159a54dimag",
                "textEdit": {
                    "newText": "imag",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Upgrade_to_double<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "imag",
                "insertText": "imag",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022imag(Ty)",
                "score": 0.3249107301235199,
                "sortText": "4159a54dimag",
                "textEdit": {
                    "newText": "imag",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ios>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "ios_base &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ios>"
                },
                "filterText": "internal",
                "insertText": "internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022internal(ios_base &Iosbase)",
                "score": 0.31765320897102356,
                "sortText": "415d5c8finternal",
                "textEdit": {
                    "newText": "internal",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ios>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "const error_category &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ios>"
                },
                "filterText": "iostream_category",
                "insertText": "iostream_category",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022iostream_category()",
                "score": 0.31765320897102356,
                "sortText": "415d5c8fiostream_category",
                "textEdit": {
                    "newText": "iostream_category",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int16_t",
                "insertText": "int16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int16_t",
                "score": 0.31161969900131226,
                "sortText": "41607362int16_t",
                "textEdit": {
                    "newText": "int16_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int32_t",
                "insertText": "int32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int32_t",
                "score": 0.31161969900131226,
                "sortText": "41607362int32_t",
                "textEdit": {
                    "newText": "int32_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int64_t",
                "insertText": "int64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int64_t",
                "score": 0.31161969900131226,
                "sortText": "41607362int64_t",
                "textEdit": {
                    "newText": "int64_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int8_t",
                "insertText": "int8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int8_t",
                "score": 0.31161969900131226,
                "sortText": "41607362int8_t",
                "textEdit": {
                    "newText": "int8_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_fast16_t",
                "insertText": "int_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int_fast16_t",
                "score": 0.31161969900131226,
                "sortText": "41607362int_fast16_t",
                "textEdit": {
                    "newText": "int_fast16_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_fast32_t",
                "insertText": "int_fast32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int_fast32_t",
                "score": 0.31161969900131226,
                "sortText": "41607362int_fast32_t",
                "textEdit": {
                    "newText": "int_fast32_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_fast64_t",
                "insertText": "int_fast64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int_fast64_t",
                "score": 0.31161969900131226,
                "sortText": "41607362int_fast64_t",
                "textEdit": {
                    "newText": "int_fast64_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_fast8_t",
                "insertText": "int_fast8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int_fast8_t",
                "score": 0.31161969900131226,
                "sortText": "41607362int_fast8_t",
                "textEdit": {
                    "newText": "int_fast8_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_least16_t",
                "insertText": "int_least16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int_least16_t",
                "score": 0.31161969900131226,
                "sortText": "41607362int_least16_t",
                "textEdit": {
                    "newText": "int_least16_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_least32_t",
                "insertText": "int_least32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int_least32_t",
                "score": 0.31161969900131226,
                "sortText": "41607362int_least32_t",
                "textEdit": {
                    "newText": "int_least32_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_least64_t",
                "insertText": "int_least64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int_least64_t",
                "score": 0.31161969900131226,
                "sortText": "41607362int_least64_t",
                "textEdit": {
                    "newText": "int_least64_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_least8_t",
                "insertText": "int_least8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int_least8_t",
                "score": 0.31161969900131226,
                "sortText": "41607362int_least8_t",
                "textEdit": {
                    "newText": "int_least8_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "intmax_t",
                "insertText": "intmax_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022intmax_t",
                "score": 0.31161969900131226,
                "sortText": "41607362intmax_t",
                "textEdit": {
                    "newText": "intmax_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "isgreaterequal",
                "insertText": "isgreaterequal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022isgreaterequal(long double Xx, long double Yx)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2isgreaterequal",
                "textEdit": {
                    "newText": "isgreaterequal",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "isnormal",
                "insertText": "isnormal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022isnormal(long double Xx)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2isnormal",
                "textEdit": {
                    "newText": "isnormal",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "is_arithmetic_v",
                "insertText": "is_arithmetic_v",
                "insertTextFormat": 1,
                "kind": 6,
                "label": "\u2022is_arithmetic_v<class Ty>",
                "score": 0.2376122921705246,
                "sortText": "418caf5dis_arithmetic_v",
                "textEdit": {
                    "newText": "is_arithmetic_v",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>"
                },
                "filterText": "is_error_code_enum_v",
                "insertText": "is_error_code_enum_v",
                "insertTextFormat": 1,
                "kind": 6,
                "label": "\u2022is_error_code_enum_v<class Ty>",
                "score": 0.2376122921705246,
                "sortText": "418caf5dis_error_code_enum_v",
                "textEdit": {
                    "newText": "is_error_code_enum_v",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>"
                },
                "filterText": "is_error_condition_enum_v",
                "insertText": "is_error_condition_enum_v",
                "insertTextFormat": 1,
                "kind": 6,
                "label": "\u2022is_error_condition_enum_v<class Ty>",
                "score": 0.2376122921705246,
                "sortText": "418caf5dis_error_condition_enum_v",
                "textEdit": {
                    "newText": "is_error_condition_enum_v",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "is_floating_point_v",
                "insertText": "is_floating_point_v",
                "insertTextFormat": 1,
                "kind": 6,
                "label": "\u2022is_floating_point_v<class Ty>",
                "score": 0.2376122921705246,
                "sortText": "418caf5dis_floating_point_v",
                "textEdit": {
                    "newText": "is_floating_point_v",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "is_integral_v",
                "insertText": "is_integral_v",
                "insertTextFormat": 1,
                "kind": 6,
                "label": "\u2022is_integral_v<class Ty>",
                "score": 0.2376122921705246,
                "sortText": "418caf5dis_integral_v",
                "textEdit": {
                    "newText": "is_integral_v",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "is_same_v",
                "insertText": "is_same_v",
                "insertTextFormat": 1,
                "kind": 6,
                "label": "\u2022is_same_v<class Ty1, class Ty2>",
                "score": 0.2376122921705246,
                "sortText": "418caf5dis_same_v",
                "textEdit": {
                    "newText": "is_same_v",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cinttypes>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cinttypes>"
                },
                "filterText": "imaxabs",
                "insertText": "imaxabs",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022imaxabs",
                "score": 0.15522432327270508,
                "sortText": "41e10ce0imaxabs",
                "textEdit": {
                    "newText": "imaxabs",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cinttypes>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cinttypes>"
                },
                "filterText": "imaxdiv",
                "insertText": "imaxdiv",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022imaxdiv",
                "score": 0.15522432327270508,
                "sortText": "41e10ce0imaxdiv",
                "textEdit": {
                    "newText": "imaxdiv",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cinttypes>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cinttypes>"
                },
                "filterText": "imaxdiv_t",
                "insertText": "imaxdiv_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022imaxdiv_t",
                "score": 0.15522432327270508,
                "sortText": "41e10ce0imaxdiv_t",
                "textEdit": {
                    "newText": "imaxdiv_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cctype>"
                },
                "filterText": "isalnum",
                "insertText": "isalnum",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022isalnum",
                "score": 0.15522432327270508,
                "sortText": "41e10ce0isalnum",
                "textEdit": {
                    "newText": "isalnum",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cctype>"
                },
                "filterText": "isalpha",
                "insertText": "isalpha",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022isalpha",
                "score": 0.15522432327270508,
                "sortText": "41e10ce0isalpha",
                "textEdit": {
                    "newText": "isalpha",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cctype>"
                },
                "filterText": "isblank",
                "insertText": "isblank",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022isblank",
                "score": 0.15522432327270508,
                "sortText": "41e10ce0isblank",
                "textEdit": {
                    "newText": "isblank",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cctype>"
                },
                "filterText": "iscntrl",
                "insertText": "iscntrl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iscntrl",
                "score": 0.15522432327270508,
                "sortText": "41e10ce0iscntrl",
                "textEdit": {
                    "newText": "iscntrl",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cctype>"
                },
                "filterText": "isdigit",
                "insertText": "isdigit",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022isdigit",
                "score": 0.15522432327270508,
                "sortText": "41e10ce0isdigit",
                "textEdit": {
                    "newText": "isdigit",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cctype>"
                },
                "filterText": "isgraph",
                "insertText": "isgraph",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022isgraph",
                "score": 0.15522432327270508,
                "sortText": "41e10ce0isgraph",
                "textEdit": {
                    "newText": "isgraph",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cctype>"
                },
                "filterText": "islower",
                "insertText": "islower",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022islower",
                "score": 0.15522432327270508,
                "sortText": "41e10ce0islower",
                "textEdit": {
                    "newText": "islower",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cctype>"
                },
                "filterText": "isprint",
                "insertText": "isprint",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022isprint",
                "score": 0.15522432327270508,
                "sortText": "41e10ce0isprint",
                "textEdit": {
                    "newText": "isprint",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cctype>"
                },
                "filterText": "ispunct",
                "insertText": "ispunct",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022ispunct",
                "score": 0.15522432327270508,
                "sortText": "41e10ce0ispunct",
                "textEdit": {
                    "newText": "ispunct",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cctype>"
                },
                "filterText": "isspace",
                "insertText": "isspace",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022isspace",
                "score": 0.15522432327270508,
                "sortText": "41e10ce0isspace",
                "textEdit": {
                    "newText": "isspace",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cctype>"
                },
                "filterText": "isupper",
                "insertText": "isupper",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022isupper",
                "score": 0.15522432327270508,
                "sortText": "41e10ce0isupper",
                "textEdit": {
                    "newText": "isupper",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "iswalnum",
                "insertText": "iswalnum",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iswalnum",
                "score": 0.15522432327270508,
                "sortText": "41e10ce0iswalnum",
                "textEdit": {
                    "newText": "iswalnum",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "iswalpha",
                "insertText": "iswalpha",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iswalpha",
                "score": 0.15522432327270508,
                "sortText": "41e10ce0iswalpha",
                "textEdit": {
                    "newText": "iswalpha",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "iswblank",
                "insertText": "iswblank",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iswblank",
                "score": 0.15522432327270508,
                "sortText": "41e10ce0iswblank",
                "textEdit": {
                    "newText": "iswblank",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "iswcntrl",
                "insertText": "iswcntrl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iswcntrl",
                "score": 0.15522432327270508,
                "sortText": "41e10ce0iswcntrl",
                "textEdit": {
                    "newText": "iswcntrl",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "iswctype",
                "insertText": "iswctype",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iswctype",
                "score": 0.15522432327270508,
                "sortText": "41e10ce0iswctype",
                "textEdit": {
                    "newText": "iswctype",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "iswdigit",
                "insertText": "iswdigit",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iswdigit",
                "score": 0.15522432327270508,
                "sortText": "41e10ce0iswdigit",
                "textEdit": {
                    "newText": "iswdigit",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "iswgraph",
                "insertText": "iswgraph",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iswgraph",
                "score": 0.15522432327270508,
                "sortText": "41e10ce0iswgraph",
                "textEdit": {
                    "newText": "iswgraph",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "iswlower",
                "insertText": "iswlower",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iswlower",
                "score": 0.15522432327270508,
                "sortText": "41e10ce0iswlower",
                "textEdit": {
                    "newText": "iswlower",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "iswprint",
                "insertText": "iswprint",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iswprint",
                "score": 0.15522432327270508,
                "sortText": "41e10ce0iswprint",
                "textEdit": {
                    "newText": "iswprint",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "iswpunct",
                "insertText": "iswpunct",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iswpunct",
                "score": 0.15522432327270508,
                "sortText": "41e10ce0iswpunct",
                "textEdit": {
                    "newText": "iswpunct",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "iswspace",
                "insertText": "iswspace",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iswspace",
                "score": 0.15522432327270508,
                "sortText": "41e10ce0iswspace",
                "textEdit": {
                    "newText": "iswspace",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "iswupper",
                "insertText": "iswupper",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iswupper",
                "score": 0.15522432327270508,
                "sortText": "41e10ce0iswupper",
                "textEdit": {
                    "newText": "iswupper",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "iswxdigit",
                "insertText": "iswxdigit",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iswxdigit",
                "score": 0.15522432327270508,
                "sortText": "41e10ce0iswxdigit",
                "textEdit": {
                    "newText": "iswxdigit",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['int', 'indirect_array', 'initializer_list', 'input_iterator_tag', 'integral_constant', 'io_errc', 'is_arithmetic', 'is_error_code_enum', 'is_error_condition_enum', 'is_floating_point', 'is_integral', 'is_same', 'iterator_traits', 'IC_AFFINE', 'IC_PROJECTIVE', 'INT16_C', 'INT16_MAX', 'INT16_MIN', 'INT32_C', 'INT32_MAX', 'INT32_MIN', 'INT64_C', 'INT64_MAX', 'INT64_MIN', 'INT8_C', 'INT8_MAX', 'INT8_MIN', 'INTMAX_C', 'INTMAX_MAX', 'INTMAX_MIN', 'INTPTR_MAX', 'INTPTR_MIN', 'INT_FAST16_MAX', 'INT_FAST16_MIN', 'INT_FAST32_MAX', 'INT_FAST32_MIN', 'INT_FAST64_MAX', 'INT_FAST64_MIN', 'INT_FAST8_MAX', 'INT_FAST8_MIN', 'INT_LEAST16_MAX', 'INT_LEAST16_MIN', 'INT_LEAST32_MAX', 'INT_LEAST32_MIN', 'INT_LEAST64_MAX', 'INT_LEAST64_MIN', 'INT_LEAST8_MAX', 'INT_LEAST8_MIN', 'imag', 'imag', 'internal', 'iostream_category', 'int16_t', 'int32_t', 'int64_t', 'int8_t', 'int_fast16_t', 'int_fast32_t', 'int_fast64_t', 'int_fast8_t', 'int_least16_t', 'int_least32_t', 'int_least64_t', 'int_least8_t', 'intmax_t', 'isgreaterequal', 'isnormal', 'is_arithmetic_v', 'is_error_code_enum_v', 'is_error_condition_enum_v', 'is_floating_point_v', 'is_integral_v', 'is_same_v', 'imaxabs', 'imaxdiv', 'imaxdiv_t', 'isalnum', 'isalpha', 'isblank', 'iscntrl', 'isdigit', 'isgraph', 'islower', 'isprint', 'ispunct', 'isspace', 'isupper', 'iswalnum', 'iswalpha', 'iswblank', 'iswcntrl', 'iswctype', 'iswdigit', 'iswgraph', 'iswlower', 'iswprint', 'iswpunct', 'iswspace', 'iswupper', 'iswxdigit']
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpt9r60z2q.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "wbuffer_convert",
                "insertText": "wbuffer_convert",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022wbuffer_convert<class Codecvt, class Elem, class Traits>",
                "score": 0.4805881977081299,
                "sortText": "4109f058wbuffer_convert",
                "textEdit": {
                    "newText": "wbuffer_convert",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "wcmatch",
                "insertText": "wcmatch",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022wcmatch",
                "score": 0.4805881977081299,
                "sortText": "4109f058wcmatch",
                "textEdit": {
                    "newText": "wcmatch",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "weak_ptr",
                "insertText": "weak_ptr",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022weak_ptr<class Ty>",
                "score": 0.4805881977081299,
                "sortText": "4109f058weak_ptr",
                "textEdit": {
                    "newText": "weak_ptr",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "weibull_distribution",
                "insertText": "weibull_distribution",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022weibull_distribution<class Ty>",
                "score": 0.4805881977081299,
                "sortText": "4109f058weibull_distribution",
                "textEdit": {
                    "newText": "weibull_distribution",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <fstream>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <fstream>"
                },
                "filterText": "wfilebuf",
                "insertText": "wfilebuf",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022wfilebuf",
                "score": 0.4805881977081299,
                "sortText": "4109f058wfilebuf",
                "textEdit": {
                    "newText": "wfilebuf",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <fstream>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <fstream>"
                },
                "filterText": "wfstream",
                "insertText": "wfstream",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022wfstream",
                "score": 0.4805881977081299,
                "sortText": "4109f058wfstream",
                "textEdit": {
                    "newText": "wfstream",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <fstream>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <fstream>"
                },
                "filterText": "wifstream",
                "insertText": "wifstream",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022wifstream",
                "score": 0.4805881977081299,
                "sortText": "4109f058wifstream",
                "textEdit": {
                    "newText": "wifstream",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ios>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ios>"
                },
                "filterText": "wios",
                "insertText": "wios",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022wios",
                "score": 0.4805881977081299,
                "sortText": "4109f058wios",
                "textEdit": {
                    "newText": "wios",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <istream>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <istream>"
                },
                "filterText": "wiostream",
                "insertText": "wiostream",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022wiostream",
                "score": 0.4805881977081299,
                "sortText": "4109f058wiostream",
                "textEdit": {
                    "newText": "wiostream",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <istream>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <istream>"
                },
                "filterText": "wistream",
                "insertText": "wistream",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022wistream",
                "score": 0.4805881977081299,
                "sortText": "4109f058wistream",
                "textEdit": {
                    "newText": "wistream",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <sstream>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <sstream>"
                },
                "filterText": "wistringstream",
                "insertText": "wistringstream",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022wistringstream",
                "score": 0.4805881977081299,
                "sortText": "4109f058wistringstream",
                "textEdit": {
                    "newText": "wistringstream",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <fstream>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <fstream>"
                },
                "filterText": "wofstream",
                "insertText": "wofstream",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022wofstream",
                "score": 0.4805881977081299,
                "sortText": "4109f058wofstream",
                "textEdit": {
                    "newText": "wofstream",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ostream>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ostream>"
                },
                "filterText": "wostream",
                "insertText": "wostream",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022wostream",
                "score": 0.4805881977081299,
                "sortText": "4109f058wostream",
                "textEdit": {
                    "newText": "wostream",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <sstream>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <sstream>"
                },
                "filterText": "wostringstream",
                "insertText": "wostringstream",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022wostringstream",
                "score": 0.4805881977081299,
                "sortText": "4109f058wostringstream",
                "textEdit": {
                    "newText": "wostringstream",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "wregex",
                "insertText": "wregex",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022wregex",
                "score": 0.4805881977081299,
                "sortText": "4109f058wregex",
                "textEdit": {
                    "newText": "wregex",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <streambuf>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <streambuf>"
                },
                "filterText": "wstreambuf",
                "insertText": "wstreambuf",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022wstreambuf",
                "score": 0.4805881977081299,
                "sortText": "4109f058wstreambuf",
                "textEdit": {
                    "newText": "wstreambuf",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iosfwd>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iosfwd>"
                },
                "filterText": "wstreampos",
                "insertText": "wstreampos",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022wstreampos",
                "score": 0.4805881977081299,
                "sortText": "4109f058wstreampos",
                "textEdit": {
                    "newText": "wstreampos",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "wstring_convert",
                "insertText": "wstring_convert",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022wstring_convert<class Codecvt, class Elem, class Walloc, class Balloc>",
                "score": 0.4805881977081299,
                "sortText": "4109f058wstring_convert",
                "textEdit": {
                    "newText": "wstring_convert",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <sstream>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <sstream>"
                },
                "filterText": "wstringbuf",
                "insertText": "wstringbuf",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022wstringbuf",
                "score": 0.4805881977081299,
                "sortText": "4109f058wstringbuf",
                "textEdit": {
                    "newText": "wstringbuf",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <sstream>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <sstream>"
                },
                "filterText": "wstringstream",
                "insertText": "wstringstream",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022wstringstream",
                "score": 0.4805881977081299,
                "sortText": "4109f058wstringstream",
                "textEdit": {
                    "newText": "wstringstream",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwchar>"
                },
                "filterText": "WEOF",
                "insertText": "WEOF",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022WEOF",
                "score": 0.45130085945129395,
                "sortText": "4118ef18WEOF",
                "textEdit": {
                    "newText": "WEOF",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "WINT_MAX",
                "insertText": "WINT_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022WINT_MAX",
                "score": 0.45130085945129395,
                "sortText": "4118ef18WINT_MAX",
                "textEdit": {
                    "newText": "WINT_MAX",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "WINT_MIN",
                "insertText": "WINT_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022WINT_MIN",
                "score": 0.45130085945129395,
                "sortText": "4118ef18WINT_MIN",
                "textEdit": {
                    "newText": "WINT_MIN",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstring.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstring.h>"
                },
                "filterText": "wcswcs",
                "insertText": "wcswcs",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022wcswcs",
                "score": 0.45130085945129395,
                "sortText": "4118ef18wcswcs",
                "textEdit": {
                    "newText": "wcswcs",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <istream>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "basic_istream<Elem, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <istream>"
                },
                "filterText": "ws",
                "insertText": "ws",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ws(basic_istream<Elem, Traits> &Istr)",
                "score": 0.3249107301235199,
                "sortText": "4159a54dws",
                "textEdit": {
                    "newText": "ws",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "wctrans_t",
                "insertText": "wctrans_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022wctrans_t",
                "score": 0.31161969900131226,
                "sortText": "41607362wctrans_t",
                "textEdit": {
                    "newText": "wctrans_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "decltype(details::_WhenAllImpl<typename ::std::iterator_traits<Iterator>::value_type::result_type, Iterator>::_Perform(TaskOptions, Begin, End))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> Creates a task that will complete successfully when all of the tasks supplied as arguments complete successfully.\n</summary> <typeparam name=\"_Iterator\"> The type of the input iterator.\n</typeparam> <param name=\"_Begin\"> The position of the first element in the range of elements to be combined into the resulting task.\n</param> <param name=\"_End\"> The position of the first element beyond the range of elements to be combined into the resulting task.\n</param> <returns> A task that completes successfully when all of the input tasks have completed successfully. If the input tasks are of type <c>T</c>,\nthe output of this function will be a <c>task&lt;std::vector&lt;T&gt;&gt;</c>. If the input tasks are of type <c>void</c> the output task will also be a <c>task&lt;void&gt;</c>.\n</returns> <remarks> If one of the tasks is canceled or throws an exception, the returned task will complete early, in the canceled state, and the exception,\nif one is encountered, will be thrown if you call <c>get()</c> or <c>wait()</c> on that task.\n</remarks> <seealso cref=\"Task Parallelism (Concurrency Runtime)\"/>"
                },
                "filterText": "when_all",
                "insertText": "Concurrency::when_all",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::when_all(Iterator Begin, Iterator End, const task_options &TaskOptions = task_options())",
                "score": 0.2575438320636749,
                "sortText": "417c2337when_all",
                "textEdit": {
                    "newText": "Concurrency::when_all",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "decltype(details::_WhenAnyImpl<typename ::std::iterator_traits<Iterator>::value_type::result_type, Iterator>::_Perform(CancellationToken._GetImplValue(), Begin, End))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> Creates a task that will complete successfully when any of the tasks supplied as arguments completes successfully.\n</summary> <typeparam name=\"_Iterator\"> The type of the input iterator.\n</typeparam> <param name=\"_Begin\"> The position of the first element in the range of elements to be combined into the resulting task.\n</param> <param name=\"_End\"> The position of the first element beyond the range of elements to be combined into the resulting task.\n</param> <param name=\"_CancellationToken\"> The cancellation token which controls cancellation of the returned task. If you do not provide a cancellation token, the resulting task will receive the cancellation token of the task that causes it to complete.\n</param> <returns> A task that completes successfully when any one of the input tasks has completed successfully. If the input tasks are of type <c>T</c>,\nthe output of this function will be a <c>task&lt;std::pair&lt;T, size_t&gt;&gt;></c>, where the first element of the pair is the result of the completing task, and the second element is the index of the task that finished. If the input tasks are of type <c>void</c> the output is a <c>task&lt;size_t&gt;</c>, where the result is the index of the completing task.\n</returns> <seealso cref=\"Task Parallelism (Concurrency Runtime)\"/>"
                },
                "filterText": "when_any",
                "insertText": "Concurrency::when_any",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::when_any(Iterator Begin, Iterator End, cancellation_token CancellationToken)",
                "score": 0.2575438320636749,
                "sortText": "417c2337when_any",
                "textEdit": {
                    "newText": "Concurrency::when_any",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "decltype(details::_WhenAnyImpl<typename ::std::iterator_traits<Iterator>::value_type::result_type, Iterator>::_Perform(TaskOptions, Begin, End))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> Creates a task that will complete successfully when any of the tasks supplied as arguments completes successfully.\n</summary> <typeparam name=\"_Iterator\"> The type of the input iterator.\n</typeparam> <param name=\"_Begin\"> The position of the first element in the range of elements to be combined into the resulting task.\n</param> <param name=\"_End\"> The position of the first element beyond the range of elements to be combined into the resulting task.\n</param> <returns> A task that completes successfully when any one of the input tasks has completed successfully. If the input tasks are of type <c>T</c>,\nthe output of this function will be a <c>task&lt;std::pair&lt;T, size_t&gt;&gt;></c>, where the first element of the pair is the result of the completing task, and the second element is the index of the task that finished. If the input tasks are of type <c>void</c> the output is a <c>task&lt;size_t&gt;</c>, where the result is the index of the completing task.\n</returns> <seealso cref=\"Task Parallelism (Concurrency Runtime)\"/>"
                },
                "filterText": "when_any",
                "insertText": "Concurrency::when_any",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::when_any(Iterator Begin, Iterator End, const task_options &TaskOptions = task_options())",
                "score": 0.2575438320636749,
                "sortText": "417c2337when_any",
                "textEdit": {
                    "newText": "Concurrency::when_any",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstring.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstring.h>"
                },
                "filterText": "wcscat_s",
                "insertText": "wcscat_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcscat_s(wchar_t *Destination, rsize_t SizeInWords, const wchar_t *Source)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2wcscat_s",
                "textEdit": {
                    "newText": "wcscat_s",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstring.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstring.h>"
                },
                "filterText": "wcscat_s",
                "insertText": "wcscat_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcscat_s(wchar_t (&Destination)[Size], const wchar_t *Source)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2wcscat_s",
                "textEdit": {
                    "newText": "wcscat_s",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "wchar_t *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwchar>"
                },
                "filterText": "wcschr",
                "insertText": "wcschr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcschr(wchar_t *String, wchar_t C)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2wcschr",
                "textEdit": {
                    "newText": "wcschr",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwchar>"
                },
                "filterText": "wcscmp",
                "insertText": "wcscmp",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcscmp(const wchar_t *String1, const wchar_t *String2)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2wcscmp",
                "textEdit": {
                    "newText": "wcscmp",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwchar>"
                },
                "filterText": "wcscoll",
                "insertText": "wcscoll",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcscoll(const wchar_t *String1, const wchar_t *String2)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2wcscoll",
                "textEdit": {
                    "newText": "wcscoll",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstring.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstring.h>"
                },
                "filterText": "wcscpy_s",
                "insertText": "wcscpy_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcscpy_s(wchar_t *Destination, rsize_t SizeInWords, const wchar_t *Source)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2wcscpy_s",
                "textEdit": {
                    "newText": "wcscpy_s",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstring.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstring.h>"
                },
                "filterText": "wcscpy_s",
                "insertText": "wcscpy_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcscpy_s(wchar_t (&Destination)[Size], const wchar_t *Source)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2wcscpy_s",
                "textEdit": {
                    "newText": "wcscpy_s",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwchar>"
                },
                "filterText": "wcscspn",
                "insertText": "wcscspn",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcscspn(const wchar_t *String, const wchar_t *Control)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2wcscspn",
                "textEdit": {
                    "newText": "wcscspn",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwchar>"
                },
                "filterText": "wcsftime",
                "insertText": "wcsftime",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcsftime(wchar_t *Buffer, size_t SizeInWords, const wchar_t *Format, const struct tm *Tm)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2wcsftime",
                "textEdit": {
                    "newText": "wcsftime",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwchar>"
                },
                "filterText": "wcslen",
                "insertText": "wcslen",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcslen(const wchar_t *String)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2wcslen",
                "textEdit": {
                    "newText": "wcslen",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstring.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstring.h>"
                },
                "filterText": "wcsncat_s",
                "insertText": "wcsncat_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcsncat_s(wchar_t *Destination, rsize_t SizeInWords, const wchar_t *Source, rsize_t MaxCount)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2wcsncat_s",
                "textEdit": {
                    "newText": "wcsncat_s",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstring.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstring.h>"
                },
                "filterText": "wcsncat_s",
                "insertText": "wcsncat_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcsncat_s(wchar_t (&Destination)[Size], const wchar_t *Source, size_t Count)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2wcsncat_s",
                "textEdit": {
                    "newText": "wcsncat_s",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwchar>"
                },
                "filterText": "wcsncmp",
                "insertText": "wcsncmp",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcsncmp(const wchar_t *String1, const wchar_t *String2, size_t MaxCount)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2wcsncmp",
                "textEdit": {
                    "newText": "wcsncmp",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstring.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstring.h>"
                },
                "filterText": "wcsncpy_s",
                "insertText": "wcsncpy_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcsncpy_s(wchar_t (&Destination)[Size], const wchar_t *Source, size_t Count)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2wcsncpy_s",
                "textEdit": {
                    "newText": "wcsncpy_s",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstring.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstring.h>"
                },
                "filterText": "wcsncpy_s",
                "insertText": "wcsncpy_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcsncpy_s(wchar_t *Destination, rsize_t SizeInWords, const wchar_t *Source, rsize_t MaxCount)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2wcsncpy_s",
                "textEdit": {
                    "newText": "wcsncpy_s",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstring.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstring.h>"
                },
                "filterText": "wcsnlen",
                "insertText": "wcsnlen",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcsnlen(const wchar_t *Source, size_t MaxCount)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2wcsnlen",
                "textEdit": {
                    "newText": "wcsnlen",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstring.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstring.h>"
                },
                "filterText": "wcsnlen_s",
                "insertText": "wcsnlen_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcsnlen_s(const wchar_t *Source, size_t MaxCount)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2wcsnlen_s",
                "textEdit": {
                    "newText": "wcsnlen_s",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "const wchar_t *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwchar>"
                },
                "filterText": "wcspbrk",
                "insertText": "wcspbrk",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcspbrk(const wchar_t *String, const wchar_t *Control)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2wcspbrk",
                "textEdit": {
                    "newText": "wcspbrk",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "wchar_t *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwchar>"
                },
                "filterText": "wcspbrk",
                "insertText": "wcspbrk",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcspbrk(wchar_t *String, const wchar_t *Control)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2wcspbrk",
                "textEdit": {
                    "newText": "wcspbrk",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "wchar_t *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwchar>"
                },
                "filterText": "wcsrchr",
                "insertText": "wcsrchr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcsrchr(wchar_t *String, wchar_t C)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2wcsrchr",
                "textEdit": {
                    "newText": "wcsrchr",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwchar>"
                },
                "filterText": "wcsspn",
                "insertText": "wcsspn",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcsspn(const wchar_t *String, const wchar_t *Control)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2wcsspn",
                "textEdit": {
                    "newText": "wcsspn",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "wchar_t *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwchar>"
                },
                "filterText": "wcsstr",
                "insertText": "wcsstr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcsstr(wchar_t *String, const wchar_t *SubStr)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2wcsstr",
                "textEdit": {
                    "newText": "wcsstr",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwchar>"
                },
                "filterText": "wcstod",
                "insertText": "wcstod",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcstod(const wchar_t *String, wchar_t **EndPtr)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2wcstod",
                "textEdit": {
                    "newText": "wcstod",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwchar>"
                },
                "filterText": "wcstof",
                "insertText": "wcstof",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcstof(const wchar_t *String, wchar_t **EndPtr)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2wcstof",
                "textEdit": {
                    "newText": "wcstof",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstring.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "wchar_t *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstring.h>"
                },
                "filterText": "wcstok_s",
                "insertText": "wcstok_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcstok_s(wchar_t *String, const wchar_t *Delimiter, wchar_t **Context)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2wcstok_s",
                "textEdit": {
                    "newText": "wcstok_s",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwchar>"
                },
                "filterText": "wcstol",
                "insertText": "wcstol",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcstol(const wchar_t *String, wchar_t **EndPtr, int Radix)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2wcstol",
                "textEdit": {
                    "newText": "wcstol",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwchar>"
                },
                "filterText": "wcstold",
                "insertText": "wcstold",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcstold(const wchar_t *String, wchar_t **EndPtr)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2wcstold",
                "textEdit": {
                    "newText": "wcstold",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwchar>"
                },
                "filterText": "wcstoll",
                "insertText": "wcstoll",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcstoll(const wchar_t *String, wchar_t **EndPtr, int Radix)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2wcstoll",
                "textEdit": {
                    "newText": "wcstoll",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "wcstombs_s",
                "insertText": "wcstombs_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcstombs_s(size_t *PtNumOfCharConverted, char *Dst, size_t DstSizeInBytes, const wchar_t *Src, size_t MaxCountInBytes)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2wcstombs_s",
                "textEdit": {
                    "newText": "wcstombs_s",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "wcstombs_s",
                "insertText": "wcstombs_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcstombs_s(size_t *PtNumOfCharConverted, char (&Dest)[Size], const wchar_t *Source, size_t MaxCount)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2wcstombs_s",
                "textEdit": {
                    "newText": "wcstombs_s",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "unsigned long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwchar>"
                },
                "filterText": "wcstoul",
                "insertText": "wcstoul",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcstoul(const wchar_t *String, wchar_t **EndPtr, int Radix)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2wcstoul",
                "textEdit": {
                    "newText": "wcstoul",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "unsigned long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwchar>"
                },
                "filterText": "wcstoull",
                "insertText": "wcstoull",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcstoull(const wchar_t *String, wchar_t **EndPtr, int Radix)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2wcstoull",
                "textEdit": {
                    "newText": "wcstoull",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwchar>"
                },
                "filterText": "wcsxfrm",
                "insertText": "wcsxfrm",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcsxfrm(wchar_t *Destination, const wchar_t *Source, size_t MaxCount)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2wcsxfrm",
                "textEdit": {
                    "newText": "wcsxfrm",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "wctomb_s",
                "insertText": "wctomb_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wctomb_s(int *SizeConverted, char *MbCh, rsize_t SizeInBytes, wchar_t WCh)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2wctomb_s",
                "textEdit": {
                    "newText": "wctomb_s",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "wctrans_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "wctrans",
                "insertText": "wctrans",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wctrans(const char *name)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2wctrans",
                "textEdit": {
                    "newText": "wctrans",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "wctype_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "wctype",
                "insertText": "wctype",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wctype(const char *name)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2wctype",
                "textEdit": {
                    "newText": "wctype",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwchar>"
                },
                "filterText": "wprintf",
                "insertText": "wprintf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wprintf(const wchar_t *const Format, ...)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2wprintf",
                "textEdit": {
                    "newText": "wprintf",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstdio.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstdio.h>"
                },
                "filterText": "wprintf_s",
                "insertText": "wprintf_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wprintf_s(const wchar_t *const Format, ...)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2wprintf_s",
                "textEdit": {
                    "newText": "wprintf_s",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstdio.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstdio.h>"
                },
                "filterText": "wscanf_s",
                "insertText": "wscanf_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wscanf_s(const wchar_t *const Format, ...)",
                "score": 0.24304720759391785,
                "sortText": "41871ea2wscanf_s",
                "textEdit": {
                    "newText": "wscanf_s",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "detail": "wostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "wcerr",
                "insertText": "wcerr",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " wcerr",
                "score": 0.2376122921705246,
                "sortText": "418caf5dwcerr",
                "textEdit": {
                    "newText": "wcerr",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "detail": "wistream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "wcin",
                "insertText": "wcin",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " wcin",
                "score": 0.2376122921705246,
                "sortText": "418caf5dwcin",
                "textEdit": {
                    "newText": "wcin",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "detail": "wostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "wclog",
                "insertText": "wclog",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " wclog",
                "score": 0.2376122921705246,
                "sortText": "418caf5dwclog",
                "textEdit": {
                    "newText": "wclog",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "detail": "wostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "wcout",
                "insertText": "wcout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " wcout",
                "score": 0.2376122921705246,
                "sortText": "418caf5dwcout",
                "textEdit": {
                    "newText": "wcout",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "wchar_t *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwchar>"
                },
                "filterText": "wcscat",
                "insertText": "wcscat",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcscat(wchar_t *Destination, const wchar_t *Source)",
                "score": 0.17058880627155304,
                "sortText": "41d1512bwcscat",
                "textEdit": {
                    "newText": "wcscat",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "wchar_t *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwchar>"
                },
                "filterText": "wcscpy",
                "insertText": "wcscpy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcscpy(wchar_t *Destination, const wchar_t *Source)",
                "score": 0.17058880627155304,
                "sortText": "41d1512bwcscpy",
                "textEdit": {
                    "newText": "wcscpy",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstring.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "wchar_t *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstring.h>"
                },
                "filterText": "wcsdup",
                "insertText": "wcsdup",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcsdup(const wchar_t *String)",
                "score": 0.17058880627155304,
                "sortText": "41d1512bwcsdup",
                "textEdit": {
                    "newText": "wcsdup",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstring.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstring.h>"
                },
                "filterText": "wcsicmp",
                "insertText": "wcsicmp",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcsicmp(const wchar_t *String1, const wchar_t *String2)",
                "score": 0.17058880627155304,
                "sortText": "41d1512bwcsicmp",
                "textEdit": {
                    "newText": "wcsicmp",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstring.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstring.h>"
                },
                "filterText": "wcsicoll",
                "insertText": "wcsicoll",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcsicoll(const wchar_t *String1, const wchar_t *String2)",
                "score": 0.17058880627155304,
                "sortText": "41d1512bwcsicoll",
                "textEdit": {
                    "newText": "wcsicoll",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstring.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "wchar_t *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstring.h>"
                },
                "filterText": "wcslwr",
                "insertText": "wcslwr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcslwr(wchar_t *String)",
                "score": 0.17058880627155304,
                "sortText": "41d1512bwcslwr",
                "textEdit": {
                    "newText": "wcslwr",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "wchar_t *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwchar>"
                },
                "filterText": "wcsncat",
                "insertText": "wcsncat",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcsncat(wchar_t *Destination, const wchar_t *Source, size_t Count)",
                "score": 0.17058880627155304,
                "sortText": "41d1512bwcsncat",
                "textEdit": {
                    "newText": "wcsncat",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "wchar_t *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwchar>"
                },
                "filterText": "wcsncpy",
                "insertText": "wcsncpy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcsncpy(wchar_t *Destination, const wchar_t *Source, size_t Count)",
                "score": 0.17058880627155304,
                "sortText": "41d1512bwcsncpy",
                "textEdit": {
                    "newText": "wcsncpy",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstring.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstring.h>"
                },
                "filterText": "wcsnicmp",
                "insertText": "wcsnicmp",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcsnicmp(const wchar_t *String1, const wchar_t *String2, size_t MaxCount)",
                "score": 0.17058880627155304,
                "sortText": "41d1512bwcsnicmp",
                "textEdit": {
                    "newText": "wcsnicmp",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstring.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "wchar_t *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstring.h>"
                },
                "filterText": "wcsnset",
                "insertText": "wcsnset",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcsnset(wchar_t *String, wchar_t Value, size_t MaxCount)",
                "score": 0.17058880627155304,
                "sortText": "41d1512bwcsnset",
                "textEdit": {
                    "newText": "wcsnset",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstring.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "wchar_t *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstring.h>"
                },
                "filterText": "wcsrev",
                "insertText": "wcsrev",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcsrev(wchar_t *String)",
                "score": 0.17058880627155304,
                "sortText": "41d1512bwcsrev",
                "textEdit": {
                    "newText": "wcsrev",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstring.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "wchar_t *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstring.h>"
                },
                "filterText": "wcsset",
                "insertText": "wcsset",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcsset(wchar_t *String, wchar_t Value)",
                "score": 0.17058880627155304,
                "sortText": "41d1512bwcsset",
                "textEdit": {
                    "newText": "wcsset",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "wchar_t *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwchar>"
                },
                "filterText": "wcstok",
                "insertText": "wcstok",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcstok(wchar_t *String, const wchar_t *Delimiter)",
                "score": 0.17058880627155304,
                "sortText": "41d1512bwcstok",
                "textEdit": {
                    "newText": "wcstok",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "wchar_t *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwchar>"
                },
                "filterText": "wcstok",
                "insertText": "wcstok",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcstok(wchar_t *String, const wchar_t *Delimiter, wchar_t **Context)",
                "score": 0.17058880627155304,
                "sortText": "41d1512bwcstok",
                "textEdit": {
                    "newText": "wcstok",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "wcstombs",
                "insertText": "wcstombs",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcstombs(char *Dest, const wchar_t *Source, size_t MaxCount)",
                "score": 0.17058880627155304,
                "sortText": "41d1512bwcstombs",
                "textEdit": {
                    "newText": "wcstombs",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstring.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "wchar_t *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstring.h>"
                },
                "filterText": "wcsupr",
                "insertText": "wcsupr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcsupr(wchar_t *String)",
                "score": 0.17058880627155304,
                "sortText": "41d1512bwcsupr",
                "textEdit": {
                    "newText": "wcsupr",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "wctomb",
                "insertText": "wctomb",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wctomb(char *MbCh, wchar_t WCh)",
                "score": 0.17058880627155304,
                "sortText": "41d1512bwctomb",
                "textEdit": {
                    "newText": "wctomb",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwchar>"
                },
                "filterText": "wscanf",
                "insertText": "wscanf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wscanf(const wchar_t *const Format, ...)",
                "score": 0.17058880627155304,
                "sortText": "41d1512bwscanf",
                "textEdit": {
                    "newText": "wscanf",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEPROTOTYPE"
                },
                "filterText": "wrong_protocol_type",
                "insertText": "errc::wrong_protocol_type",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::wrong_protocol_type",
                "score": 0.1620454639196396,
                "sortText": "41da10c1wrong_protocol_type",
                "textEdit": {
                    "newText": "errc::wrong_protocol_type",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cinttypes>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cinttypes>"
                },
                "filterText": "wcstoimax",
                "insertText": "wcstoimax",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022wcstoimax",
                "score": 0.15522432327270508,
                "sortText": "41e10ce0wcstoimax",
                "textEdit": {
                    "newText": "wcstoimax",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cinttypes>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cinttypes>"
                },
                "filterText": "wcstoumax",
                "insertText": "wcstoumax",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022wcstoumax",
                "score": 0.15522432327270508,
                "sortText": "41e10ce0wcstoumax",
                "textEdit": {
                    "newText": "wcstoumax",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "wctrans",
                "insertText": "wctrans",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022wctrans",
                "score": 0.15522432327270508,
                "sortText": "41e10ce0wctrans",
                "textEdit": {
                    "newText": "wctrans",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "wctrans_t",
                "insertText": "wctrans_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022wctrans_t",
                "score": 0.15522432327270508,
                "sortText": "41e10ce0wctrans_t",
                "textEdit": {
                    "newText": "wctrans_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "wctype",
                "insertText": "wctype",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022wctype",
                "score": 0.15522432327270508,
                "sortText": "41e10ce0wctype",
                "textEdit": {
                    "newText": "wctype",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "wctype_t",
                "insertText": "wctype_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022wctype_t",
                "score": 0.15522432327270508,
                "sortText": "41e10ce0wctype_t",
                "textEdit": {
                    "newText": "wctype_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "weak_ptr",
                "insertText": "tr1::weak_ptr",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::weak_ptr",
                "score": 0.12495598196983337,
                "sortText": "42001714weak_ptr",
                "textEdit": {
                    "newText": "tr1::weak_ptr",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "weibull_distribution",
                "insertText": "tr1::weibull_distribution",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::weibull_distribution",
                "score": 0.12495598196983337,
                "sortText": "42001714weibull_distribution",
                "textEdit": {
                    "newText": "tr1::weibull_distribution",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['wchar_t', 'wbuffer_convert', 'wcmatch', 'weak_ptr', 'weibull_distribution', 'wfilebuf', 'wfstream', 'wifstream', 'wios', 'wiostream', 'wistream', 'wistringstream', 'wofstream', 'wostream', 'wostringstream', 'wregex', 'wstreambuf', 'wstreampos', 'wstring_convert', 'wstringbuf', 'wstringstream', 'WEOF', 'WINT_MAX', 'WINT_MIN', 'wcswcs', 'ws', 'wctrans_t', 'Concurrency::when_all', 'Concurrency::when_any', 'Concurrency::when_any', 'wcscat_s', 'wcscat_s', 'wcschr', 'wcscmp', 'wcscoll', 'wcscpy_s', 'wcscpy_s', 'wcscspn', 'wcsftime', 'wcslen', 'wcsncat_s', 'wcsncat_s', 'wcsncmp', 'wcsncpy_s', 'wcsncpy_s', 'wcsnlen', 'wcsnlen_s', 'wcspbrk', 'wcspbrk', 'wcsrchr', 'wcsspn', 'wcsstr', 'wcstod', 'wcstof', 'wcstok_s', 'wcstol', 'wcstold', 'wcstoll', 'wcstombs_s', 'wcstombs_s', 'wcstoul', 'wcstoull', 'wcsxfrm', 'wctomb_s', 'wctrans', 'wctype', 'wprintf', 'wprintf_s', 'wscanf_s', 'wcerr', 'wcin', 'wclog', 'wcout', 'wcscat', 'wcscpy', 'wcsdup', 'wcsicmp', 'wcsicoll', 'wcslwr', 'wcsncat', 'wcsncpy', 'wcsnicmp', 'wcsnset', 'wcsrev', 'wcsset', 'wcstok', 'wcstok', 'wcstombs', 'wcsupr', 'wctomb', 'wscanf', 'errc::wrong_protocol_type', 'wcstoimax', 'wcstoumax', 'wctrans', 'wctrans_t', 'wctype', 'wctype_t', 'tr1::weak_ptr', 'tr1::weibull_distribution']
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpt9r60z2q.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "decltype(details::_WhenAllImpl<typename ::std::iterator_traits<Iterator>::value_type::result_type, Iterator>::_Perform(TaskOptions, Begin, End))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> Creates a task that will complete successfully when all of the tasks supplied as arguments complete successfully.\n</summary> <typeparam name=\"_Iterator\"> The type of the input iterator.\n</typeparam> <param name=\"_Begin\"> The position of the first element in the range of elements to be combined into the resulting task.\n</param> <param name=\"_End\"> The position of the first element beyond the range of elements to be combined into the resulting task.\n</param> <returns> A task that completes successfully when all of the input tasks have completed successfully. If the input tasks are of type <c>T</c>,\nthe output of this function will be a <c>task&lt;std::vector&lt;T&gt;&gt;</c>. If the input tasks are of type <c>void</c> the output task will also be a <c>task&lt;void&gt;</c>.\n</returns> <remarks> If one of the tasks is canceled or throws an exception, the returned task will complete early, in the canceled state, and the exception,\nif one is encountered, will be thrown if you call <c>get()</c> or <c>wait()</c> on that task.\n</remarks> <seealso cref=\"Task Parallelism (Concurrency Runtime)\"/>"
                },
                "filterText": "when_all",
                "insertText": "Concurrency::when_all",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::when_all(Iterator Begin, Iterator End, const task_options &TaskOptions = task_options())",
                "score": 0.2575438320636749,
                "sortText": "417c2337when_all",
                "textEdit": {
                    "newText": "Concurrency::when_all",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "decltype(details::_WhenAnyImpl<typename ::std::iterator_traits<Iterator>::value_type::result_type, Iterator>::_Perform(TaskOptions, Begin, End))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> Creates a task that will complete successfully when any of the tasks supplied as arguments completes successfully.\n</summary> <typeparam name=\"_Iterator\"> The type of the input iterator.\n</typeparam> <param name=\"_Begin\"> The position of the first element in the range of elements to be combined into the resulting task.\n</param> <param name=\"_End\"> The position of the first element beyond the range of elements to be combined into the resulting task.\n</param> <returns> A task that completes successfully when any one of the input tasks has completed successfully. If the input tasks are of type <c>T</c>,\nthe output of this function will be a <c>task&lt;std::pair&lt;T, size_t&gt;&gt;></c>, where the first element of the pair is the result of the completing task, and the second element is the index of the task that finished. If the input tasks are of type <c>void</c> the output is a <c>task&lt;size_t&gt;</c>, where the result is the index of the completing task.\n</returns> <seealso cref=\"Task Parallelism (Concurrency Runtime)\"/>"
                },
                "filterText": "when_any",
                "insertText": "Concurrency::when_any",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::when_any(Iterator Begin, Iterator End, const task_options &TaskOptions = task_options())",
                "score": 0.2575438320636749,
                "sortText": "417c2337when_any",
                "textEdit": {
                    "newText": "Concurrency::when_any",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "decltype(details::_WhenAnyImpl<typename ::std::iterator_traits<Iterator>::value_type::result_type, Iterator>::_Perform(CancellationToken._GetImplValue(), Begin, End))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> Creates a task that will complete successfully when any of the tasks supplied as arguments completes successfully.\n</summary> <typeparam name=\"_Iterator\"> The type of the input iterator.\n</typeparam> <param name=\"_Begin\"> The position of the first element in the range of elements to be combined into the resulting task.\n</param> <param name=\"_End\"> The position of the first element beyond the range of elements to be combined into the resulting task.\n</param> <param name=\"_CancellationToken\"> The cancellation token which controls cancellation of the returned task. If you do not provide a cancellation token, the resulting task will receive the cancellation token of the task that causes it to complete.\n</param> <returns> A task that completes successfully when any one of the input tasks has completed successfully. If the input tasks are of type <c>T</c>,\nthe output of this function will be a <c>task&lt;std::pair&lt;T, size_t&gt;&gt;></c>, where the first element of the pair is the result of the completing task, and the second element is the index of the task that finished. If the input tasks are of type <c>void</c> the output is a <c>task&lt;size_t&gt;</c>, where the result is the index of the completing task.\n</returns> <seealso cref=\"Task Parallelism (Concurrency Runtime)\"/>"
                },
                "filterText": "when_any",
                "insertText": "Concurrency::when_any",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::when_any(Iterator Begin, Iterator End, cancellation_token CancellationToken)",
                "score": 0.2575438320636749,
                "sortText": "417c2337when_any",
                "textEdit": {
                    "newText": "Concurrency::when_any",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> A convenient extension to Concurrency: loop until a condition is no longer met </summary> <param name=\"_Func\"> A function representing the body of the loop. It will be invoked at least once and then repetitively as long as it returns true.\n</param>"
                },
                "filterText": "do_while",
                "insertText": "Concurrency::details::do_while",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::details::do_while(::std::enable_if_t<true, ::std::function<Ty ()>> Func)",
                "score": 0.2575438320636749,
                "sortText": "423a34d2do_while",
                "textEdit": {
                    "newText": "Concurrency::details::do_while",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['Concurrency::when_all', 'Concurrency::when_any', 'Concurrency::when_any', 'Concurrency::details::do_while']
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpt9r60z2q.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> A convenient extension to Concurrency: loop until a condition is no longer met </summary> <param name=\"_Func\"> A function representing the body of the loop. It will be invoked at least once and then repetitively as long as it returns true.\n</param>"
                },
                "filterText": "do_while",
                "insertText": "Concurrency::details::do_while",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::details::do_while(::std::enable_if_t<true, ::std::function<Ty ()>> Func)",
                "score": 0.2575438320636749,
                "sortText": "41e62915do_while",
                "textEdit": {
                    "newText": "Concurrency::details::do_while",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['Concurrency::details::do_while']
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpt9r60z2q.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> A convenient extension to Concurrency: loop until a condition is no longer met </summary> <param name=\"_Func\"> A function representing the body of the loop. It will be invoked at least once and then repetitively as long as it returns true.\n</param>"
                },
                "filterText": "do_while",
                "insertText": "Concurrency::details::do_while",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::details::do_while(::std::enable_if_t<true, ::std::function<Ty ()>> Func)",
                "score": 0.2575438320636749,
                "sortText": "41cab06cdo_while",
                "textEdit": {
                    "newText": "Concurrency::details::do_while",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 3,
                            "line": 8
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['Concurrency::details::do_while']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'w'",
                "range": {
                    "end": {
                        "character": 4,
                        "line": 8
                    },
                    "start": {
                        "character": 3,
                        "line": 8
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header chrono is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 2
                    },
                    "start": {
                        "character": 0,
                        "line": 2
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpt9r60z2q.cpp",
        "version": 2
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=8, column=3, column_end = 4, message=Use of undeclared identifier 'w')]
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'w'",
                "range": {
                    "end": {
                        "character": 4,
                        "line": 8
                    },
                    "start": {
                        "character": 3,
                        "line": 8
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header chrono is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 2
                    },
                    "start": {
                        "character": 0,
                        "line": 2
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpt9r60z2q.cpp",
        "version": 2
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=8, column=3, column_end = 4, message=Use of undeclared identifier 'w')]
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_lparen_after",
                "message": "Expected '(' after 'while'",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 10
                    },
                    "start": {
                        "character": 0,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected",
                "message": "Expected '}'\n\ntmpt9r60z2q.cpp:8:1: note: to match this '{'",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 10
                    },
                    "start": {
                        "character": 1,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "message": "To match this '{'\n\ntmpt9r60z2q.cpp:11:2: error: expected '}'",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 7
                    },
                    "start": {
                        "character": 0,
                        "line": 7
                    }
                },
                "severity": 3
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header chrono is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 2
                    },
                    "start": {
                        "character": 0,
                        "line": 2
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpt9r60z2q.cpp",
        "version": 10
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=10, column=0, column_end = 1, message=Expected '(' after 'while'), Error(line=10, column=1, column_end = 1, message=Expected '}'

tmpt9r60z2q.cpp:8:1: note: to match this '{')]
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": null
}
Received hover response.
Hover response does not contain 'contents'.
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpt9r60z2q.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpt9r60z2q.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpt9r60z2q.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_expression",
                "message": "Expected expression",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 10
                    },
                    "start": {
                        "character": 0,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected",
                "message": "Expected '}'\n\ntmpt9r60z2q.cpp:8:1: note: to match this '{'",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 10
                    },
                    "start": {
                        "character": 1,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "message": "To match this '{'\n\ntmpt9r60z2q.cpp:11:2: error: expected '}'",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 7
                    },
                    "start": {
                        "character": 0,
                        "line": 7
                    }
                },
                "severity": 3
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header chrono is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 2
                    },
                    "start": {
                        "character": 0,
                        "line": 2
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpt9r60z2q.cpp",
        "version": 16
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=10, column=0, column_end = 1, message=Expected expression), Error(line=10, column=1, column_end = 1, message=Expected '}'

tmpt9r60z2q.cpp:8:1: note: to match this '{')]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpt9r60z2q.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "detail": "int",
                "filterText": "main",
                "insertText": "main",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " main()",
                "score": 1.5303630828857422,
                "sortText": "403c1d10main",
                "textEdit": {
                    "newText": "main",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.513861060142517,
                "sortText": "403e39cdstd",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_compare_exchange_strong",
                "insertText": "atomic_compare_exchange_strong",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_compare_exchange_strong(volatile atomic<Ty> *const Mem, _Identity_t<Ty> *const Expected, const _Identity_t<Ty> Desired)",
                "score": 1.033745288848877,
                "sortText": "407bae3catomic_compare_exchange_strong",
                "textEdit": {
                    "newText": "atomic_compare_exchange_strong",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_compare_exchange_strong",
                "insertText": "atomic_compare_exchange_strong",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_compare_exchange_strong(shared_ptr<Ty> *Ptr, shared_ptr<Ty> *Exp, shared_ptr<Ty> Value)",
                "score": 1.033745288848877,
                "sortText": "407bae3catomic_compare_exchange_strong",
                "textEdit": {
                    "newText": "atomic_compare_exchange_strong",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_compare_exchange_strong",
                "insertText": "atomic_compare_exchange_strong",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_compare_exchange_strong(atomic<Ty> *const Mem, _Identity_t<Ty> *const Expected, const _Identity_t<Ty> Desired)",
                "score": 1.033745288848877,
                "sortText": "407bae3catomic_compare_exchange_strong",
                "textEdit": {
                    "newText": "atomic_compare_exchange_strong",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_compare_exchange_strong_explicit",
                "insertText": "atomic_compare_exchange_strong_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_compare_exchange_strong_explicit(volatile atomic<Ty> *const Mem, _Identity_t<Ty> *const Expected, const _Identity_t<Ty> Desired, const memory_order Success, const memory_order Failure)",
                "score": 1.033745288848877,
                "sortText": "407bae3catomic_compare_exchange_strong_explicit",
                "textEdit": {
                    "newText": "atomic_compare_exchange_strong_explicit",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_compare_exchange_strong_explicit",
                "insertText": "atomic_compare_exchange_strong_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_compare_exchange_strong_explicit(atomic<Ty> *const Mem, _Identity_t<Ty> *const Expected, const _Identity_t<Ty> Desired, const memory_order Success, const memory_order Failure)",
                "score": 1.033745288848877,
                "sortText": "407bae3catomic_compare_exchange_strong_explicit",
                "textEdit": {
                    "newText": "atomic_compare_exchange_strong_explicit",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_compare_exchange_strong_explicit",
                "insertText": "atomic_compare_exchange_strong_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_compare_exchange_strong_explicit(shared_ptr<Ty> *Ptr, shared_ptr<Ty> *Exp, shared_ptr<Ty> Value, memory_order, memory_order)",
                "score": 1.033745288848877,
                "sortText": "407bae3catomic_compare_exchange_strong_explicit",
                "textEdit": {
                    "newText": "atomic_compare_exchange_strong_explicit",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_compare_exchange_weak",
                "insertText": "atomic_compare_exchange_weak",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_compare_exchange_weak(volatile atomic<Ty> *const Mem, _Identity_t<Ty> *const Expected, const _Identity_t<Ty> Desired)",
                "score": 1.033745288848877,
                "sortText": "407bae3catomic_compare_exchange_weak",
                "textEdit": {
                    "newText": "atomic_compare_exchange_weak",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_compare_exchange_weak",
                "insertText": "atomic_compare_exchange_weak",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_compare_exchange_weak(atomic<Ty> *const Mem, _Identity_t<Ty> *const Expected, const _Identity_t<Ty> Desired)",
                "score": 1.033745288848877,
                "sortText": "407bae3catomic_compare_exchange_weak",
                "textEdit": {
                    "newText": "atomic_compare_exchange_weak",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_compare_exchange_weak",
                "insertText": "atomic_compare_exchange_weak",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_compare_exchange_weak(shared_ptr<Ty> *Ptr, shared_ptr<Ty> *Exp, shared_ptr<Ty> Value)",
                "score": 1.033745288848877,
                "sortText": "407bae3catomic_compare_exchange_weak",
                "textEdit": {
                    "newText": "atomic_compare_exchange_weak",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_compare_exchange_weak_explicit",
                "insertText": "atomic_compare_exchange_weak_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_compare_exchange_weak_explicit(volatile atomic<Ty> *const Mem, _Identity_t<Ty> *const Expected, const _Identity_t<Ty> Desired, const memory_order Success, const memory_order Failure)",
                "score": 1.033745288848877,
                "sortText": "407bae3catomic_compare_exchange_weak_explicit",
                "textEdit": {
                    "newText": "atomic_compare_exchange_weak_explicit",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_compare_exchange_weak_explicit",
                "insertText": "atomic_compare_exchange_weak_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_compare_exchange_weak_explicit(shared_ptr<Ty> *Ptr, shared_ptr<Ty> *Exp, shared_ptr<Ty> Value, memory_order, memory_order)",
                "score": 1.033745288848877,
                "sortText": "407bae3catomic_compare_exchange_weak_explicit",
                "textEdit": {
                    "newText": "atomic_compare_exchange_weak_explicit",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_compare_exchange_weak_explicit",
                "insertText": "atomic_compare_exchange_weak_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_compare_exchange_weak_explicit(atomic<Ty> *const Mem, _Identity_t<Ty> *const Expected, const _Identity_t<Ty> Desired, const memory_order Success, const memory_order Failure)",
                "score": 1.033745288848877,
                "sortText": "407bae3catomic_compare_exchange_weak_explicit",
                "textEdit": {
                    "newText": "atomic_compare_exchange_weak_explicit",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_test_and_set",
                "insertText": "atomic_flag_test_and_set",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_test_and_set(atomic_flag *const Flag)",
                "score": 1.033745288848877,
                "sortText": "407bae3catomic_flag_test_and_set",
                "textEdit": {
                    "newText": "atomic_flag_test_and_set",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_test_and_set",
                "insertText": "atomic_flag_test_and_set",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_test_and_set(volatile atomic_flag *const Flag)",
                "score": 1.033745288848877,
                "sortText": "407bae3catomic_flag_test_and_set",
                "textEdit": {
                    "newText": "atomic_flag_test_and_set",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_test_and_set_explicit",
                "insertText": "atomic_flag_test_and_set_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_test_and_set_explicit(atomic_flag *const Flag, const memory_order Order)",
                "score": 1.033745288848877,
                "sortText": "407bae3catomic_flag_test_and_set_explicit",
                "textEdit": {
                    "newText": "atomic_flag_test_and_set_explicit",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_test_and_set_explicit",
                "insertText": "atomic_flag_test_and_set_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_test_and_set_explicit(volatile atomic_flag *const Flag, const memory_order Order)",
                "score": 1.033745288848877,
                "sortText": "407bae3catomic_flag_test_and_set_explicit",
                "textEdit": {
                    "newText": "atomic_flag_test_and_set_explicit",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_is_lock_free",
                "insertText": "atomic_is_lock_free",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_is_lock_free(const shared_ptr<Ty> *)",
                "score": 1.033745288848877,
                "sortText": "407bae3catomic_is_lock_free",
                "textEdit": {
                    "newText": "atomic_is_lock_free",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_is_lock_free",
                "insertText": "atomic_is_lock_free",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_is_lock_free(const atomic<Ty> *Mem)",
                "score": 1.033745288848877,
                "sortText": "407bae3catomic_is_lock_free",
                "textEdit": {
                    "newText": "atomic_is_lock_free",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_is_lock_free",
                "insertText": "atomic_is_lock_free",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_is_lock_free(const volatile atomic<Ty> *Mem)",
                "score": 1.033745288848877,
                "sortText": "407bae3catomic_is_lock_free",
                "textEdit": {
                    "newText": "atomic_is_lock_free",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "equal",
                "insertText": "equal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022equal(const InIt1 First1, const InIt1 Last1, const InIt2 First2)",
                "score": 1.033745288848877,
                "sortText": "407bae3cequal",
                "textEdit": {
                    "newText": "equal",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "equal",
                "insertText": "equal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022equal(const InIt1 First1, const InIt1 Last1, const InIt2 First2, const InIt2 Last2, Pr Pred)",
                "score": 1.033745288848877,
                "sortText": "407bae3cequal",
                "textEdit": {
                    "newText": "equal",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "equal",
                "insertText": "equal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022equal(const InIt1 First1, const InIt1 Last1, const InIt2 First2, Pr Pred)",
                "score": 1.033745288848877,
                "sortText": "407bae3cequal",
                "textEdit": {
                    "newText": "equal",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "lexicographical_compare",
                "insertText": "lexicographical_compare",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022lexicographical_compare(const InIt1 First1, const InIt1 Last1, const InIt2 First2, const InIt2 Last2, Pr Pred)",
                "score": 1.033745288848877,
                "sortText": "407bae3clexicographical_compare",
                "textEdit": {
                    "newText": "lexicographical_compare",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xstring>"
                },
                "filterText": "operator!=",
                "insertText": "operator!=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator!=(const basic_string<Elem, Traits, Alloc> &Left, const Elem *const Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator!=",
                "textEdit": {
                    "newText": "operator!=",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "operator!=",
                "insertText": "operator!=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator!=(const istreambuf_iterator<Elem, Traits> &Left, const istreambuf_iterator<Elem, Traits> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator!=",
                "textEdit": {
                    "newText": "operator!=",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "operator!=",
                "insertText": "operator!=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator!=(const unique_ptr<Ty1, Dx1> &Left, const unique_ptr<Ty2, Dx2> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator!=",
                "textEdit": {
                    "newText": "operator!=",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "operator!=",
                "insertText": "operator!=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator!=(nullptr_t, const unique_ptr<Ty, Dx> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator!=",
                "textEdit": {
                    "newText": "operator!=",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "operator!=",
                "insertText": "operator!=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator!=(const shared_ptr<Ty1> &Left, const shared_ptr<Ty2> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator!=",
                "textEdit": {
                    "newText": "operator!=",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator!=",
                "insertText": "operator!=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator!=(const reverse_iterator<BidIt1> &Left, const reverse_iterator<BidIt2> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator!=",
                "textEdit": {
                    "newText": "operator!=",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "operator!=",
                "insertText": "operator!=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator!=(const shared_ptr<Ty> &Left, nullptr_t)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator!=",
                "textEdit": {
                    "newText": "operator!=",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xstring>"
                },
                "filterText": "operator!=",
                "insertText": "operator!=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator!=(const basic_string<Elem, Traits, Alloc> &Left, const basic_string<Elem, Traits, Alloc> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator!=",
                "textEdit": {
                    "newText": "operator!=",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xstring>"
                },
                "filterText": "operator!=",
                "insertText": "operator!=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator!=(const Elem *const Left, const basic_string<Elem, Traits, Alloc> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator!=",
                "textEdit": {
                    "newText": "operator!=",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "operator!=",
                "insertText": "operator!=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator!=(const istream_iterator<Ty, Elem, Traits, Diff> &Left, const istream_iterator<Ty, Elem, Traits, Diff> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator!=",
                "textEdit": {
                    "newText": "operator!=",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "operator!=",
                "insertText": "operator!=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator!=(nullptr_t, const shared_ptr<Ty> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator!=",
                "textEdit": {
                    "newText": "operator!=",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "operator!=",
                "insertText": "operator!=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator!=(const unique_ptr<Ty, Dx> &Left, nullptr_t)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator!=",
                "textEdit": {
                    "newText": "operator!=",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "operator<",
                "insertText": "operator<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<(nullptr_t, const shared_ptr<Ty> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator<",
                "textEdit": {
                    "newText": "operator<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator<",
                "insertText": "operator<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<(const reverse_iterator<BidIt1> &Left, const reverse_iterator<BidIt2> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator<",
                "textEdit": {
                    "newText": "operator<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "operator<",
                "insertText": "operator<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<(const shared_ptr<Ty1> &Left, const shared_ptr<Ty2> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator<",
                "textEdit": {
                    "newText": "operator<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xstring>"
                },
                "filterText": "operator<",
                "insertText": "operator<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<(const basic_string<Elem, Traits, Alloc> &Left, const basic_string<Elem, Traits, Alloc> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator<",
                "textEdit": {
                    "newText": "operator<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "operator<",
                "insertText": "operator<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<(const unique_ptr<Ty1, Dx1> &Left, const unique_ptr<Ty2, Dx2> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator<",
                "textEdit": {
                    "newText": "operator<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xstring>"
                },
                "filterText": "operator<",
                "insertText": "operator<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<(const Elem *const Left, const basic_string<Elem, Traits, Alloc> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator<",
                "textEdit": {
                    "newText": "operator<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "operator<",
                "insertText": "operator<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<(const unique_ptr<Ty, Dx> &Left, nullptr_t)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator<",
                "textEdit": {
                    "newText": "operator<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "operator<",
                "insertText": "operator<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<(const shared_ptr<Ty> &Left, nullptr_t)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator<",
                "textEdit": {
                    "newText": "operator<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "operator<",
                "insertText": "operator<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<(nullptr_t, const unique_ptr<Ty, Dx> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator<",
                "textEdit": {
                    "newText": "operator<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xstring>"
                },
                "filterText": "operator<",
                "insertText": "operator<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<(const basic_string<Elem, Traits, Alloc> &Left, const Elem *const Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator<",
                "textEdit": {
                    "newText": "operator<",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xstring>"
                },
                "filterText": "operator<=",
                "insertText": "operator<=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<=(const Elem *const Left, const basic_string<Elem, Traits, Alloc> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator<=",
                "textEdit": {
                    "newText": "operator<=",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "operator<=",
                "insertText": "operator<=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<=(const unique_ptr<Ty, Dx> &Left, nullptr_t)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator<=",
                "textEdit": {
                    "newText": "operator<=",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "operator<=",
                "insertText": "operator<=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<=(nullptr_t, const shared_ptr<Ty> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator<=",
                "textEdit": {
                    "newText": "operator<=",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "operator<=",
                "insertText": "operator<=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<=(nullptr_t, const unique_ptr<Ty, Dx> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator<=",
                "textEdit": {
                    "newText": "operator<=",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator<=",
                "insertText": "operator<=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<=(const move_iterator<Iter1> &Left, const move_iterator<Iter2> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator<=",
                "textEdit": {
                    "newText": "operator<=",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xstring>"
                },
                "filterText": "operator<=",
                "insertText": "operator<=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<=(const basic_string<Elem, Traits, Alloc> &Left, const Elem *const Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator<=",
                "textEdit": {
                    "newText": "operator<=",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xstring>"
                },
                "filterText": "operator<=",
                "insertText": "operator<=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<=(const basic_string<Elem, Traits, Alloc> &Left, const basic_string<Elem, Traits, Alloc> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator<=",
                "textEdit": {
                    "newText": "operator<=",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "operator<=",
                "insertText": "operator<=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<=(const shared_ptr<Ty> &Left, nullptr_t)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator<=",
                "textEdit": {
                    "newText": "operator<=",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "operator<=",
                "insertText": "operator<=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<=(const shared_ptr<Ty1> &Left, const shared_ptr<Ty2> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator<=",
                "textEdit": {
                    "newText": "operator<=",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "operator<=",
                "insertText": "operator<=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<=(const unique_ptr<Ty1, Dx1> &Left, const unique_ptr<Ty2, Dx2> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator<=",
                "textEdit": {
                    "newText": "operator<=",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "operator==",
                "insertText": "operator==",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator==(const shared_ptr<Ty> &Left, nullptr_t)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator==",
                "textEdit": {
                    "newText": "operator==",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xstring>"
                },
                "filterText": "operator==",
                "insertText": "operator==",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator==(const basic_string<Elem, Traits, Alloc> &Left, const Elem *const Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator==",
                "textEdit": {
                    "newText": "operator==",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator==",
                "insertText": "operator==",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator==(const reverse_iterator<BidIt1> &Left, const reverse_iterator<BidIt2> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator==",
                "textEdit": {
                    "newText": "operator==",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "operator==",
                "insertText": "operator==",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator==(const istreambuf_iterator<Elem, Traits> &Left, const istreambuf_iterator<Elem, Traits> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator==",
                "textEdit": {
                    "newText": "operator==",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "operator==",
                "insertText": "operator==",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator==(const shared_ptr<Ty1> &Left, const shared_ptr<Ty2> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator==",
                "textEdit": {
                    "newText": "operator==",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "operator==",
                "insertText": "operator==",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator==(const istream_iterator<Ty, Elem, Traits, Diff> &Left, const istream_iterator<Ty, Elem, Traits, Diff> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator==",
                "textEdit": {
                    "newText": "operator==",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "operator==",
                "insertText": "operator==",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator==(const unique_ptr<Ty, Dx> &Left, nullptr_t)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator==",
                "textEdit": {
                    "newText": "operator==",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "operator==",
                "insertText": "operator==",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator==(nullptr_t, const unique_ptr<Ty, Dx> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator==",
                "textEdit": {
                    "newText": "operator==",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "operator==",
                "insertText": "operator==",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator==(const unique_ptr<Ty1, Dx1> &Left, const unique_ptr<Ty2, Dx2> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator==",
                "textEdit": {
                    "newText": "operator==",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xstring>"
                },
                "filterText": "operator==",
                "insertText": "operator==",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator==(const Elem *const Left, const basic_string<Elem, Traits, Alloc> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator==",
                "textEdit": {
                    "newText": "operator==",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "operator==",
                "insertText": "operator==",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator==(nullptr_t, const shared_ptr<Ty> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator==",
                "textEdit": {
                    "newText": "operator==",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xstring>"
                },
                "filterText": "operator==",
                "insertText": "operator==",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator==(const basic_string<Elem, Traits, Alloc> &Left, const basic_string<Elem, Traits, Alloc> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator==",
                "textEdit": {
                    "newText": "operator==",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xstring>"
                },
                "filterText": "operator>",
                "insertText": "operator>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>(const Elem *const Left, const basic_string<Elem, Traits, Alloc> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator>",
                "textEdit": {
                    "newText": "operator>",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xstring>"
                },
                "filterText": "operator>",
                "insertText": "operator>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>(const basic_string<Elem, Traits, Alloc> &Left, const basic_string<Elem, Traits, Alloc> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator>",
                "textEdit": {
                    "newText": "operator>",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "operator>",
                "insertText": "operator>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>(const shared_ptr<Ty1> &Left, const shared_ptr<Ty2> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator>",
                "textEdit": {
                    "newText": "operator>",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "operator>",
                "insertText": "operator>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>(const unique_ptr<Ty1, Dx1> &Left, const unique_ptr<Ty2, Dx2> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator>",
                "textEdit": {
                    "newText": "operator>",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "operator>",
                "insertText": "operator>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>(nullptr_t, const shared_ptr<Ty> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator>",
                "textEdit": {
                    "newText": "operator>",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator>",
                "insertText": "operator>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>(const reverse_iterator<BidIt1> &Left, const reverse_iterator<BidIt2> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator>",
                "textEdit": {
                    "newText": "operator>",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "operator>",
                "insertText": "operator>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>(const unique_ptr<Ty, Dx> &Left, nullptr_t)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator>",
                "textEdit": {
                    "newText": "operator>",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "operator>",
                "insertText": "operator>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>(nullptr_t, const unique_ptr<Ty, Dx> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator>",
                "textEdit": {
                    "newText": "operator>",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xstring>"
                },
                "filterText": "operator>",
                "insertText": "operator>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>(const basic_string<Elem, Traits, Alloc> &Left, const Elem *const Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator>",
                "textEdit": {
                    "newText": "operator>",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "operator>",
                "insertText": "operator>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>(const shared_ptr<Ty> &Left, nullptr_t)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator>",
                "textEdit": {
                    "newText": "operator>",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "operator>=",
                "insertText": "operator>=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>=(nullptr_t, const shared_ptr<Ty> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator>=",
                "textEdit": {
                    "newText": "operator>=",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xstring>"
                },
                "filterText": "operator>=",
                "insertText": "operator>=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>=(const Elem *const Left, const basic_string<Elem, Traits, Alloc> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator>=",
                "textEdit": {
                    "newText": "operator>=",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "operator>=",
                "insertText": "operator>=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>=(const unique_ptr<Ty, Dx> &Left, nullptr_t)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator>=",
                "textEdit": {
                    "newText": "operator>=",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator>=",
                "insertText": "operator>=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>=(const move_iterator<Iter1> &Left, const move_iterator<Iter2> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator>=",
                "textEdit": {
                    "newText": "operator>=",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xstring>"
                },
                "filterText": "operator>=",
                "insertText": "operator>=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>=(const basic_string<Elem, Traits, Alloc> &Left, const Elem *const Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator>=",
                "textEdit": {
                    "newText": "operator>=",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "operator>=",
                "insertText": "operator>=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>=(const unique_ptr<Ty1, Dx1> &Left, const unique_ptr<Ty2, Dx2> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator>=",
                "textEdit": {
                    "newText": "operator>=",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "operator>=",
                "insertText": "operator>=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>=(nullptr_t, const unique_ptr<Ty, Dx> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator>=",
                "textEdit": {
                    "newText": "operator>=",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xstring>"
                },
                "filterText": "operator>=",
                "insertText": "operator>=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>=(const basic_string<Elem, Traits, Alloc> &Left, const basic_string<Elem, Traits, Alloc> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator>=",
                "textEdit": {
                    "newText": "operator>=",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "operator>=",
                "insertText": "operator>=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>=(const shared_ptr<Ty1> &Left, const shared_ptr<Ty2> &Right)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator>=",
                "textEdit": {
                    "newText": "operator>=",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 3
                            },
                            "start": {
                                "character": 0,
                                "line": 3
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "operator>=",
                "insertText": "operator>=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>=(const shared_ptr<Ty> &Left, nullptr_t)",
                "score": 1.033745288848877,
                "sortText": "407bae3coperator>=",
                "textEdit": {
                    "newText": "operator>=",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "alignas",
                "insertText": "alignas",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignas(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7alignas",
                "textEdit": {
                    "newText": "alignas",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "alignof",
                "insertText": "alignof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignof(type)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7alignof",
                "textEdit": {
                    "newText": "alignof",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 8
                        },
                        "start": {
                            "character": 9,
                            "line": 8
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['main', 'std', 'atomic_compare_exchange_strong', 'atomic_compare_exchange_strong', 'atomic_compare_exchange_strong', 'atomic_compare_exchange_strong_explicit', 'atomic_compare_exchange_strong_explicit', 'atomic_compare_exchange_strong_explicit', 'atomic_compare_exchange_weak', 'atomic_compare_exchange_weak', 'atomic_compare_exchange_weak', 'atomic_compare_exchange_weak_explicit', 'atomic_compare_exchange_weak_explicit', 'atomic_compare_exchange_weak_explicit', 'atomic_flag_test_and_set', 'atomic_flag_test_and_set', 'atomic_flag_test_and_set_explicit', 'atomic_flag_test_and_set_explicit', 'atomic_is_lock_free', 'atomic_is_lock_free', 'atomic_is_lock_free', 'equal', 'equal', 'equal', 'lexicographical_compare', 'operator!=', 'operator!=', 'operator!=', 'operator!=', 'operator!=', 'operator!=', 'operator!=', 'operator!=', 'operator!=', 'operator!=', 'operator!=', 'operator!=', 'operator<', 'operator<', 'operator<', 'operator<', 'operator<', 'operator<', 'operator<', 'operator<', 'operator<', 'operator<', 'operator<=', 'operator<=', 'operator<=', 'operator<=', 'operator<=', 'operator<=', 'operator<=', 'operator<=', 'operator<=', 'operator<=', 'operator==', 'operator==', 'operator==', 'operator==', 'operator==', 'operator==', 'operator==', 'operator==', 'operator==', 'operator==', 'operator==', 'operator==', 'operator>', 'operator>', 'operator>', 'operator>', 'operator>', 'operator>', 'operator>', 'operator>', 'operator>', 'operator>', 'operator>=', 'operator>=', 'operator>=', 'operator>=', 'operator>=', 'operator>=', 'operator>=', 'operator>=', 'operator>=', 'operator>=', '_Nonnull', '_Null_unspecified', '_Nullable', 'alignas', 'alignof', 'auto', 'bool', 'char', 'char16_t', 'char32_t', 'class']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected",
                "message": "Expected ')'\n\ntmpt9r60z2q.cpp:9:9: note: to match this '('",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 10
                    },
                    "start": {
                        "character": 0,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "message": "To match this '('\n\ntmpt9r60z2q.cpp:11:1: error: expected ')'",
                "range": {
                    "end": {
                        "character": 9,
                        "line": 8
                    },
                    "start": {
                        "character": 8,
                        "line": 8
                    }
                },
                "severity": 3
            },
            {
                "code": "expected_statement",
                "message": "Expected statement",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 10
                    },
                    "start": {
                        "character": 0,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header chrono is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 2
                    },
                    "start": {
                        "character": 0,
                        "line": 2
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpt9r60z2q.cpp",
        "version": 18
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=10, column=0, column_end = 1, message=Expected ')'

tmpt9r60z2q.cpp:9:9: note: to match this '('), Error(line=10, column=0, column_end = 1, message=Expected statement)]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpt9r60z2q.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpt9r60z2q.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpt9r60z2q.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_statement",
                "message": "Expected statement",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 10
                    },
                    "start": {
                        "character": 0,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header chrono is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 2
                    },
                    "start": {
                        "character": 0,
                        "line": 2
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpt9r60z2q.cpp",
        "version": 24
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=10, column=0, column_end = 1, message=Expected statement)]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpt9r60z2q.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_statement",
                "message": "Expected statement",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 11
                    },
                    "start": {
                        "character": 0,
                        "line": 11
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header chrono is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 2
                    },
                    "start": {
                        "character": 0,
                        "line": 2
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpt9r60z2q.cpp",
        "version": 26
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=11, column=0, column_end = 1, message=Expected statement)]
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": null
}
Received hover response.
Hover response does not contain 'contents'.
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpt9r60z2q.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpt9r60z2q.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpt9r60z2q.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpt9r60z2q.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected",
                "message": "Expected '}'\n\ntmpt9r60z2q.cpp:8:1: note: to match this '{'",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 11
                    },
                    "start": {
                        "character": 1,
                        "line": 11
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "message": "To match this '{'\n\ntmpt9r60z2q.cpp:12:2: error: expected '}'",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 7
                    },
                    "start": {
                        "character": 0,
                        "line": 7
                    }
                },
                "severity": 3
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header chrono is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 2
                    },
                    "start": {
                        "character": 0,
                        "line": 2
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpt9r60z2q.cpp",
        "version": 32
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=11, column=1, column_end = 1, message=Expected '}'

tmpt9r60z2q.cpp:8:1: note: to match this '{')]
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header chrono is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 2
                    },
                    "start": {
                        "character": 0,
                        "line": 2
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpt9r60z2q.cpp",
        "version": 34
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpt9r60z2q.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpt9r60z2q.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpt9r60z2q.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpt9r60z2q.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
