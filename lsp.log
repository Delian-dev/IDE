Temporary file created: C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
LSP process started successfully.
Request sent with method initialize
Handling response from LSP
Received response: {
    "id": 0,
    "jsonrpc": "2.0",
    "result": {
        "capabilities": {
            "astProvider": true,
            "callHierarchyProvider": true,
            "clangdInlayHintsProvider": true,
            "codeActionProvider": true,
            "compilationDatabase": {
                "automaticReload": true
            },
            "completionProvider": {
                "resolveProvider": false,
                "triggerCharacters": [
                    ".",
                    "<",
                    ">",
                    ":",
                    "\"",
                    "/",
                    "*"
                ]
            },
            "declarationProvider": true,
            "definitionProvider": true,
            "documentFormattingProvider": true,
            "documentHighlightProvider": true,
            "documentLinkProvider": {
                "resolveProvider": false
            },
            "documentOnTypeFormattingProvider": {
                "firstTriggerCharacter": "\n",
                "moreTriggerCharacter": []
            },
            "documentRangeFormattingProvider": true,
            "documentSymbolProvider": true,
            "executeCommandProvider": {
                "commands": [
                    "clangd.applyFix",
                    "clangd.applyRename",
                    "clangd.applyTweak"
                ]
            },
            "foldingRangeProvider": true,
            "hoverProvider": true,
            "implementationProvider": true,
            "inactiveRegionsProvider": true,
            "inlayHintProvider": true,
            "memoryUsageProvider": true,
            "referencesProvider": true,
            "renameProvider": true,
            "selectionRangeProvider": true,
            "semanticTokensProvider": {
                "full": {
                    "delta": true
                },
                "legend": {
                    "tokenModifiers": [
                        "declaration",
                        "definition",
                        "deprecated",
                        "deduced",
                        "readonly",
                        "static",
                        "abstract",
                        "virtual",
                        "dependentName",
                        "defaultLibrary",
                        "usedAsMutableReference",
                        "usedAsMutablePointer",
                        "constructorOrDestructor",
                        "userDefined",
                        "functionScope",
                        "classScope",
                        "fileScope",
                        "globalScope"
                    ],
                    "tokenTypes": [
                        "variable",
                        "variable",
                        "parameter",
                        "function",
                        "method",
                        "function",
                        "property",
                        "variable",
                        "class",
                        "interface",
                        "enum",
                        "enumMember",
                        "type",
                        "type",
                        "unknown",
                        "namespace",
                        "typeParameter",
                        "concept",
                        "type",
                        "macro",
                        "modifier",
                        "operator",
                        "bracket",
                        "label",
                        "comment"
                    ]
                },
                "range": false
            },
            "signatureHelpProvider": {
                "triggerCharacters": [
                    "(",
                    ")",
                    "{",
                    "}",
                    "<",
                    ">",
                    ","
                ]
            },
            "standardTypeHierarchyProvider": true,
            "textDocumentSync": {
                "change": 2,
                "openClose": true,
                "save": true
            },
            "typeDefinitionProvider": true,
            "typeHierarchyProvider": true,
            "workspaceSymbolProvider": true
        },
        "serverInfo": {
            "name": "clangd",
            "version": "clangd version 20.1.0 windows x86_64-pc-windows-msvc"
        }
    }
}
LSP initialized successfully.
Request sent with method textDocument/didOpen
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 0
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": [
            {
                "filterText": "define",
                "insertText": "define",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " define macro",
                "score": 0.787254273891449,
                "sortText": "40b67681define",
                "textEdit": {
                    "newText": "define",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 0
                        },
                        "start": {
                            "character": 1,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "define",
                "insertText": "define",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " define macro(args)",
                "score": 0.787254273891449,
                "sortText": "40b67681define",
                "textEdit": {
                    "newText": "define",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 0
                        },
                        "start": {
                            "character": 1,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "error",
                "insertText": "error",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " error message",
                "score": 0.787254273891449,
                "sortText": "40b67681error",
                "textEdit": {
                    "newText": "error",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 0
                        },
                        "start": {
                            "character": 1,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "if",
                "insertText": "if",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " if condition",
                "score": 0.787254273891449,
                "sortText": "40b67681if",
                "textEdit": {
                    "newText": "if",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 0
                        },
                        "start": {
                            "character": 1,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "ifdef",
                "insertText": "ifdef",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " ifdef macro",
                "score": 0.787254273891449,
                "sortText": "40b67681ifdef",
                "textEdit": {
                    "newText": "ifdef",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 0
                        },
                        "start": {
                            "character": 1,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "ifndef",
                "insertText": "ifndef",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " ifndef macro",
                "score": 0.787254273891449,
                "sortText": "40b67681ifndef",
                "textEdit": {
                    "newText": "ifndef",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 0
                        },
                        "start": {
                            "character": 1,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "include",
                "insertText": "include",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " include <header>",
                "score": 0.787254273891449,
                "sortText": "40b67681include",
                "textEdit": {
                    "newText": "include",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 0
                        },
                        "start": {
                            "character": 1,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "include",
                "insertText": "include",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " include \"header\"",
                "score": 0.787254273891449,
                "sortText": "40b67681include",
                "textEdit": {
                    "newText": "include",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 0
                        },
                        "start": {
                            "character": 1,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "include_next",
                "insertText": "include_next",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " include_next \"header\"",
                "score": 0.787254273891449,
                "sortText": "40b67681include_next",
                "textEdit": {
                    "newText": "include_next",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 0
                        },
                        "start": {
                            "character": 1,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "include_next",
                "insertText": "include_next",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " include_next <header>",
                "score": 0.787254273891449,
                "sortText": "40b67681include_next",
                "textEdit": {
                    "newText": "include_next",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 0
                        },
                        "start": {
                            "character": 1,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "line",
                "insertText": "line",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " line number \"filename\"",
                "score": 0.787254273891449,
                "sortText": "40b67681line",
                "textEdit": {
                    "newText": "line",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 0
                        },
                        "start": {
                            "character": 1,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "line",
                "insertText": "line",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " line number",
                "score": 0.787254273891449,
                "sortText": "40b67681line",
                "textEdit": {
                    "newText": "line",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 0
                        },
                        "start": {
                            "character": 1,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "pragma",
                "insertText": "pragma",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " pragma arguments",
                "score": 0.787254273891449,
                "sortText": "40b67681pragma",
                "textEdit": {
                    "newText": "pragma",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 0
                        },
                        "start": {
                            "character": 1,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "undef",
                "insertText": "undef",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " undef macro",
                "score": 0.787254273891449,
                "sortText": "40b67681undef",
                "textEdit": {
                    "newText": "undef",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 0
                        },
                        "start": {
                            "character": 1,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "warning",
                "insertText": "warning",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " warning message",
                "score": 0.787254273891449,
                "sortText": "40b67681warning",
                "textEdit": {
                    "newText": "warning",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 0
                        },
                        "start": {
                            "character": 1,
                            "line": 0
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['define', 'define', 'error', 'if', 'ifdef', 'ifndef', 'include', 'include', 'include_next', 'include_next', 'line', 'line', 'pragma', 'undef', 'warning']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 4
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 4
    }
}
Diagnostics received from LSP.
Errors received: []
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": [
            {
                "filterText": "if",
                "insertText": "if",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " if condition",
                "score": 0.787254273891449,
                "sortText": "40b67681if",
                "textEdit": {
                    "newText": "if",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 0
                        },
                        "start": {
                            "character": 1,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "ifdef",
                "insertText": "ifdef",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " ifdef macro",
                "score": 0.787254273891449,
                "sortText": "40b67681ifdef",
                "textEdit": {
                    "newText": "ifdef",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 0
                        },
                        "start": {
                            "character": 1,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "ifndef",
                "insertText": "ifndef",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " ifndef macro",
                "score": 0.787254273891449,
                "sortText": "40b67681ifndef",
                "textEdit": {
                    "newText": "ifndef",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 0
                        },
                        "start": {
                            "character": 1,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "include",
                "insertText": "include",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " include <header>",
                "score": 0.787254273891449,
                "sortText": "40b67681include",
                "textEdit": {
                    "newText": "include",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 0
                        },
                        "start": {
                            "character": 1,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "include",
                "insertText": "include",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " include \"header\"",
                "score": 0.787254273891449,
                "sortText": "40b67681include",
                "textEdit": {
                    "newText": "include",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 0
                        },
                        "start": {
                            "character": 1,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "include_next",
                "insertText": "include_next",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " include_next <header>",
                "score": 0.787254273891449,
                "sortText": "40b67681include_next",
                "textEdit": {
                    "newText": "include_next",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 0
                        },
                        "start": {
                            "character": 1,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "include_next",
                "insertText": "include_next",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " include_next \"header\"",
                "score": 0.787254273891449,
                "sortText": "40b67681include_next",
                "textEdit": {
                    "newText": "include_next",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 0
                        },
                        "start": {
                            "character": 1,
                            "line": 0
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['if', 'ifdef', 'ifndef', 'include', 'include', 'include_next', 'include_next']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_invalid_directive",
                "message": "Invalid preprocessing directive",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 0
                    },
                    "start": {
                        "character": 1,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 5
    }
}
Diagnostics received from LSP.
Errors received: [[0, [1, 2]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": [
            {
                "filterText": "include",
                "insertText": "include",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " include \"header\"",
                "score": 0.787254273891449,
                "sortText": "40b67681include",
                "textEdit": {
                    "newText": "include",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 0
                        },
                        "start": {
                            "character": 1,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "include",
                "insertText": "include",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " include <header>",
                "score": 0.787254273891449,
                "sortText": "40b67681include",
                "textEdit": {
                    "newText": "include",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 0
                        },
                        "start": {
                            "character": 1,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "include_next",
                "insertText": "include_next",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " include_next <header>",
                "score": 0.787254273891449,
                "sortText": "40b67681include_next",
                "textEdit": {
                    "newText": "include_next",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 0
                        },
                        "start": {
                            "character": 1,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "include_next",
                "insertText": "include_next",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " include_next \"header\"",
                "score": 0.787254273891449,
                "sortText": "40b67681include_next",
                "textEdit": {
                    "newText": "include_next",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 0
                        },
                        "start": {
                            "character": 1,
                            "line": 0
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['include', 'include', 'include_next', 'include_next']
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_invalid_directive",
                "message": "Invalid preprocessing directive",
                "range": {
                    "end": {
                        "character": 4,
                        "line": 0
                    },
                    "start": {
                        "character": 1,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 7
    }
}
Diagnostics received from LSP.
Errors received: [[0, [1, 4]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_invalid_directive",
                "message": "Invalid preprocessing directive",
                "range": {
                    "end": {
                        "character": 5,
                        "line": 0
                    },
                    "start": {
                        "character": 1,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 8
    }
}
Diagnostics received from LSP.
Errors received: [[0, [1, 5]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_invalid_directive",
                "message": "Invalid preprocessing directive",
                "range": {
                    "end": {
                        "character": 6,
                        "line": 0
                    },
                    "start": {
                        "character": 1,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 9
    }
}
Diagnostics received from LSP.
Errors received: [[0, [1, 6]]]
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_invalid_directive",
                "message": "Invalid preprocessing directive",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 0
                    },
                    "start": {
                        "character": 1,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 10
    }
}
Diagnostics received from LSP.
Errors received: [[0, [1, 7]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_invalid_directive",
                "message": "Invalid preprocessing directive",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 0
                    },
                    "start": {
                        "character": 1,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 11
    }
}
Diagnostics received from LSP.
Errors received: [[0, [1, 8]]]
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": null
}
Received hover response.
Hover response does not contain 'contents'.
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_invalid_directive",
                "message": "Invalid preprocessing directive",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 0
                    },
                    "start": {
                        "character": 1,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 12
    }
}
Diagnostics received from LSP.
Errors received: [[0, [1, 7]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_invalid_directive",
                "message": "Invalid preprocessing directive",
                "range": {
                    "end": {
                        "character": 6,
                        "line": 0
                    },
                    "start": {
                        "character": 1,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 13
    }
}
Diagnostics received from LSP.
Errors received: [[0, [1, 6]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_invalid_directive",
                "message": "Invalid preprocessing directive",
                "range": {
                    "end": {
                        "character": 5,
                        "line": 0
                    },
                    "start": {
                        "character": 1,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 14
    }
}
Diagnostics received from LSP.
Errors received: [[0, [1, 5]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_invalid_directive",
                "message": "Invalid preprocessing directive",
                "range": {
                    "end": {
                        "character": 4,
                        "line": 0
                    },
                    "start": {
                        "character": 1,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 15
    }
}
Diagnostics received from LSP.
Errors received: [[0, [1, 4]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_invalid_directive",
                "message": "Invalid preprocessing directive",
                "range": {
                    "end": {
                        "character": 5,
                        "line": 0
                    },
                    "start": {
                        "character": 1,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 16
    }
}
Diagnostics received from LSP.
Errors received: [[0, [1, 5]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": [
            {
                "filterText": "include",
                "insertText": "include",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " include \"header\"",
                "score": 0.787254273891449,
                "sortText": "40b67681include",
                "textEdit": {
                    "newText": "include",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 0
                        },
                        "start": {
                            "character": 1,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "include",
                "insertText": "include",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " include <header>",
                "score": 0.787254273891449,
                "sortText": "40b67681include",
                "textEdit": {
                    "newText": "include",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 0
                        },
                        "start": {
                            "character": 1,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "include_next",
                "insertText": "include_next",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " include_next <header>",
                "score": 0.787254273891449,
                "sortText": "40b67681include_next",
                "textEdit": {
                    "newText": "include_next",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 0
                        },
                        "start": {
                            "character": 1,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "include_next",
                "insertText": "include_next",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " include_next \"header\"",
                "score": 0.787254273891449,
                "sortText": "40b67681include_next",
                "textEdit": {
                    "newText": "include_next",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 0
                        },
                        "start": {
                            "character": 1,
                            "line": 0
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['include', 'include', 'include_next', 'include_next']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_invalid_directive",
                "message": "Invalid preprocessing directive",
                "range": {
                    "end": {
                        "character": 4,
                        "line": 0
                    },
                    "start": {
                        "character": 1,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 17
    }
}
Diagnostics received from LSP.
Errors received: [[0, [1, 4]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": [
            {
                "filterText": "include",
                "insertText": "include",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " include \"header\"",
                "score": 0.787254273891449,
                "sortText": "40b67681include",
                "textEdit": {
                    "newText": "include",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 0
                        },
                        "start": {
                            "character": 1,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "include",
                "insertText": "include",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " include <header>",
                "score": 0.787254273891449,
                "sortText": "40b67681include",
                "textEdit": {
                    "newText": "include",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 0
                        },
                        "start": {
                            "character": 1,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "include_next",
                "insertText": "include_next",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " include_next <header>",
                "score": 0.787254273891449,
                "sortText": "40b67681include_next",
                "textEdit": {
                    "newText": "include_next",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 0
                        },
                        "start": {
                            "character": 1,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "include_next",
                "insertText": "include_next",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " include_next \"header\"",
                "score": 0.787254273891449,
                "sortText": "40b67681include_next",
                "textEdit": {
                    "newText": "include_next",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 0
                        },
                        "start": {
                            "character": 1,
                            "line": 0
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['include', 'include', 'include_next', 'include_next']
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_invalid_directive",
                "message": "Invalid preprocessing directive",
                "range": {
                    "end": {
                        "character": 3,
                        "line": 0
                    },
                    "start": {
                        "character": 1,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 18
    }
}
Diagnostics received from LSP.
Errors received: [[0, [1, 3]]]
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": null
}
Received hover response.
Hover response does not contain 'contents'.
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_invalid_directive",
                "message": "Invalid preprocessing directive",
                "range": {
                    "end": {
                        "character": 4,
                        "line": 0
                    },
                    "start": {
                        "character": 1,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 19
    }
}
Diagnostics received from LSP.
Errors received: [[0, [1, 4]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 20
    }
}
Diagnostics received from LSP.
Errors received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_expects_filename",
                "message": "Expected \"FILENAME\" or <FILENAME>",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 0
                    },
                    "start": {
                        "character": 8,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 20
    }
}
Diagnostics received from LSP.
Errors received: [[0, [8, 8]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_expects_filename",
                "message": "Expected \"FILENAME\" or <FILENAME>",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 0
                    },
                    "start": {
                        "character": 8,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 23
    }
}
Diagnostics received from LSP.
Errors received: [[0, [8, 8]]]
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_expects_filename",
                "message": "Expected \"FILENAME\" or <FILENAME>",
                "range": {
                    "end": {
                        "character": 9,
                        "line": 0
                    },
                    "start": {
                        "character": 9,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 23
    }
}
Diagnostics received from LSP.
Errors received: [[0, [9, 9]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "filterText": "ehdata_forceinclude.h>",
                "insertText": "ehdata_forceinclude.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " ehdata_forceinclude.h>",
                "score": 0.8444338440895081,
                "sortText": "40a7d32fehdata_forceinclude.h>",
                "textEdit": {
                    "newText": "ehdata_forceinclude.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "ADSIid.h>",
                "insertText": "ADSIid.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " ADSIid.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681ADSIid.h>",
                "textEdit": {
                    "newText": "ADSIid.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "AF_Irda.h>",
                "insertText": "AF_Irda.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " AF_Irda.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681AF_Irda.h>",
                "textEdit": {
                    "newText": "AF_Irda.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "ATLComMem.h>",
                "insertText": "ATLComMem.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " ATLComMem.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681ATLComMem.h>",
                "textEdit": {
                    "newText": "ATLComMem.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "ATLComTime.h>",
                "insertText": "ATLComTime.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " ATLComTime.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681ATLComTime.h>",
                "textEdit": {
                    "newText": "ATLComTime.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "AccCtrl.h>",
                "insertText": "AccCtrl.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " AccCtrl.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681AccCtrl.h>",
                "textEdit": {
                    "newText": "AccCtrl.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "AclAPI.h>",
                "insertText": "AclAPI.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " AclAPI.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681AclAPI.h>",
                "textEdit": {
                    "newText": "AclAPI.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "AclUI.h>",
                "insertText": "AclUI.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " AclUI.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681AclUI.h>",
                "textEdit": {
                    "newText": "AclUI.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "ActivScp.h>",
                "insertText": "ActivScp.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " ActivScp.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681ActivScp.h>",
                "textEdit": {
                    "newText": "ActivScp.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "ActiveDS.h>",
                "insertText": "ActiveDS.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " ActiveDS.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681ActiveDS.h>",
                "textEdit": {
                    "newText": "ActiveDS.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "ActivityCoordinator.h>",
                "insertText": "ActivityCoordinator.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " ActivityCoordinator.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681ActivityCoordinator.h>",
                "textEdit": {
                    "newText": "ActivityCoordinator.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "ActivityCoordinatorTypes.h>",
                "insertText": "ActivityCoordinatorTypes.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " ActivityCoordinatorTypes.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681ActivityCoordinatorTypes.h>",
                "textEdit": {
                    "newText": "ActivityCoordinatorTypes.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "AdsDb.h>",
                "insertText": "AdsDb.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " AdsDb.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681AdsDb.h>",
                "textEdit": {
                    "newText": "AdsDb.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "AdsErr.h>",
                "insertText": "AdsErr.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " AdsErr.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681AdsErr.h>",
                "textEdit": {
                    "newText": "AdsErr.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "AdsHlp.h>",
                "insertText": "AdsHlp.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " AdsHlp.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681AdsHlp.h>",
                "textEdit": {
                    "newText": "AdsHlp.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "AdsProp.h>",
                "insertText": "AdsProp.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " AdsProp.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681AdsProp.h>",
                "textEdit": {
                    "newText": "AdsProp.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "Adsnms.h>",
                "insertText": "Adsnms.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " Adsnms.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681Adsnms.h>",
                "textEdit": {
                    "newText": "Adsnms.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "Adssts.h>",
                "insertText": "Adssts.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " Adssts.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681Adssts.h>",
                "textEdit": {
                    "newText": "Adssts.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "AdtGen.h>",
                "insertText": "AdtGen.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " AdtGen.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681AdtGen.h>",
                "textEdit": {
                    "newText": "AdtGen.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "AppxPackaging.h>",
                "insertText": "AppxPackaging.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " AppxPackaging.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681AppxPackaging.h>",
                "textEdit": {
                    "newText": "AppxPackaging.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "Asptlb.h>",
                "insertText": "Asptlb.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " Asptlb.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681Asptlb.h>",
                "textEdit": {
                    "newText": "Asptlb.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "AtscPsipParser.h>",
                "insertText": "AtscPsipParser.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " AtscPsipParser.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681AtscPsipParser.h>",
                "textEdit": {
                    "newText": "AtscPsipParser.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "AudioAPOTypes.h>",
                "insertText": "AudioAPOTypes.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " AudioAPOTypes.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681AudioAPOTypes.h>",
                "textEdit": {
                    "newText": "AudioAPOTypes.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "AudioEngineEndpoint.h>",
                "insertText": "AudioEngineEndpoint.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " AudioEngineEndpoint.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681AudioEngineEndpoint.h>",
                "textEdit": {
                    "newText": "AudioEngineEndpoint.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "AudioSessionTypes.h>",
                "insertText": "AudioSessionTypes.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " AudioSessionTypes.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681AudioSessionTypes.h>",
                "textEdit": {
                    "newText": "AudioSessionTypes.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "Audioclient.h>",
                "insertText": "Audioclient.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " Audioclient.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681Audioclient.h>",
                "textEdit": {
                    "newText": "Audioclient.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "AuthZ.h>",
                "insertText": "AuthZ.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " AuthZ.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681AuthZ.h>",
                "textEdit": {
                    "newText": "AuthZ.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "Authif.h>",
                "insertText": "Authif.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " Authif.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681Authif.h>",
                "textEdit": {
                    "newText": "Authif.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "AviFmt.h>",
                "insertText": "AviFmt.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " AviFmt.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681AviFmt.h>",
                "textEdit": {
                    "newText": "AviFmt.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "BiDiSpl.h>",
                "insertText": "BiDiSpl.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " BiDiSpl.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681BiDiSpl.h>",
                "textEdit": {
                    "newText": "BiDiSpl.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "Bits.h>",
                "insertText": "Bits.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " Bits.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681Bits.h>",
                "textEdit": {
                    "newText": "Bits.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "Bits3_0.h>",
                "insertText": "Bits3_0.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " Bits3_0.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681Bits3_0.h>",
                "textEdit": {
                    "newText": "Bits3_0.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "BitsMsg.h>",
                "insertText": "BitsMsg.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " BitsMsg.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681BitsMsg.h>",
                "textEdit": {
                    "newText": "BitsMsg.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "CDOSys.h>",
                "insertText": "CDOSys.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " CDOSys.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681CDOSys.h>",
                "textEdit": {
                    "newText": "CDOSys.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "CDOSysErr.h>",
                "insertText": "CDOSysErr.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " CDOSysErr.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681CDOSysErr.h>",
                "textEdit": {
                    "newText": "CDOSysErr.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "CDOSysStr.h>",
                "insertText": "CDOSysStr.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " CDOSysStr.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681CDOSysStr.h>",
                "textEdit": {
                    "newText": "CDOSysStr.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "CallConv.Inc>",
                "insertText": "CallConv.Inc>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " CallConv.Inc>",
                "score": 0.787254273891449,
                "sortText": "40b67681CallConv.Inc>",
                "textEdit": {
                    "newText": "CallConv.Inc>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "CameraUIControl.h>",
                "insertText": "CameraUIControl.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " CameraUIControl.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681CameraUIControl.h>",
                "textEdit": {
                    "newText": "CameraUIControl.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "CastingInterop.h>",
                "insertText": "CastingInterop.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " CastingInterop.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681CastingInterop.h>",
                "textEdit": {
                    "newText": "CastingInterop.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "CertAdm.h>",
                "insertText": "CertAdm.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " CertAdm.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681CertAdm.h>",
                "textEdit": {
                    "newText": "CertAdm.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "CertBCli.h>",
                "insertText": "CertBCli.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " CertBCli.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681CertBCli.h>",
                "textEdit": {
                    "newText": "CertBCli.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "CertBase.h>",
                "insertText": "CertBase.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " CertBase.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681CertBase.h>",
                "textEdit": {
                    "newText": "CertBase.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "CertCli.h>",
                "insertText": "CertCli.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " CertCli.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681CertCli.h>",
                "textEdit": {
                    "newText": "CertCli.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "CertEnc.h>",
                "insertText": "CertEnc.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " CertEnc.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681CertEnc.h>",
                "textEdit": {
                    "newText": "CertEnc.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "CertExit.h>",
                "insertText": "CertExit.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " CertExit.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681CertExit.h>",
                "textEdit": {
                    "newText": "CertExit.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "CertMod.h>",
                "insertText": "CertMod.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " CertMod.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681CertMod.h>",
                "textEdit": {
                    "newText": "CertMod.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "CertPol.h>",
                "insertText": "CertPol.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " CertPol.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681CertPol.h>",
                "textEdit": {
                    "newText": "CertPol.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "CertPolEng.h>",
                "insertText": "CertPolEng.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " CertPolEng.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681CertPolEng.h>",
                "textEdit": {
                    "newText": "CertPolEng.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "CertSrv.h>",
                "insertText": "CertSrv.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " CertSrv.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681CertSrv.h>",
                "textEdit": {
                    "newText": "CertSrv.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "CertView.h>",
                "insertText": "CertView.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " CertView.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681CertView.h>",
                "textEdit": {
                    "newText": "CertView.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "Certif.h>",
                "insertText": "Certif.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " Certif.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681Certif.h>",
                "textEdit": {
                    "newText": "Certif.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "ChPtrArr.h>",
                "insertText": "ChPtrArr.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " ChPtrArr.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681ChPtrArr.h>",
                "textEdit": {
                    "newText": "ChPtrArr.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "ChStrArr.h>",
                "insertText": "ChStrArr.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " ChStrArr.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681ChStrArr.h>",
                "textEdit": {
                    "newText": "ChStrArr.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "ChString.h>",
                "insertText": "ChString.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " ChString.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681ChString.h>",
                "textEdit": {
                    "newText": "ChString.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "CiError.h>",
                "insertText": "CiError.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " CiError.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681CiError.h>",
                "textEdit": {
                    "newText": "CiError.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "CimFs.h>",
                "insertText": "CimFs.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " CimFs.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681CimFs.h>",
                "textEdit": {
                    "newText": "CimFs.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "CluAdmEx.h>",
                "insertText": "CluAdmEx.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " CluAdmEx.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681CluAdmEx.h>",
                "textEdit": {
                    "newText": "CluAdmEx.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "ClusApi.h>",
                "insertText": "ClusApi.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " ClusApi.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681ClusApi.h>",
                "textEdit": {
                    "newText": "ClusApi.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "CmnQuery.h>",
                "insertText": "CmnQuery.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " CmnQuery.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681CmnQuery.h>",
                "textEdit": {
                    "newText": "CmnQuery.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "CodeAnalysis/",
                "insertText": "CodeAnalysis/",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " CodeAnalysis/",
                "score": 0.787254273891449,
                "sortText": "40b67681CodeAnalysis/",
                "textEdit": {
                    "newText": "CodeAnalysis/",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "ColorDlg.h>",
                "insertText": "ColorDlg.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " ColorDlg.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681ColorDlg.h>",
                "textEdit": {
                    "newText": "ColorDlg.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "ComAdmin.h>",
                "insertText": "ComAdmin.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " ComAdmin.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681ComAdmin.h>",
                "textEdit": {
                    "newText": "ComAdmin.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "ComSvcs.h>",
                "insertText": "ComSvcs.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " ComSvcs.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681ComSvcs.h>",
                "textEdit": {
                    "newText": "ComSvcs.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "CommCtrl.h>",
                "insertText": "CommCtrl.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " CommCtrl.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681CommCtrl.h>",
                "textEdit": {
                    "newText": "CommCtrl.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "CompPkgSup.h>",
                "insertText": "CompPkgSup.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " CompPkgSup.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681CompPkgSup.h>",
                "textEdit": {
                    "newText": "CompPkgSup.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "ContactAggregation.h>",
                "insertText": "ContactAggregation.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " ContactAggregation.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681ContactAggregation.h>",
                "textEdit": {
                    "newText": "ContactAggregation.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "CoreWindow.h>",
                "insertText": "CoreWindow.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " CoreWindow.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681CoreWindow.h>",
                "textEdit": {
                    "newText": "CoreWindow.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "Cpl.h>",
                "insertText": "Cpl.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " Cpl.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681Cpl.h>",
                "textEdit": {
                    "newText": "Cpl.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "Cplext.h>",
                "insertText": "Cplext.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " Cplext.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681Cplext.h>",
                "textEdit": {
                    "newText": "Cplext.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "CustCntl.h>",
                "insertText": "CustCntl.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " CustCntl.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681CustCntl.h>",
                "textEdit": {
                    "newText": "CustCntl.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "D2DErr.h>",
                "insertText": "D2DErr.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " D2DErr.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681D2DErr.h>",
                "textEdit": {
                    "newText": "D2DErr.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "DLNADeviceInterfaceIds.h>",
                "insertText": "DLNADeviceInterfaceIds.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " DLNADeviceInterfaceIds.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681DLNADeviceInterfaceIds.h>",
                "textEdit": {
                    "newText": "DLNADeviceInterfaceIds.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "DLNAMetadataProviderProperties.h>",
                "insertText": "DLNAMetadataProviderProperties.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " DLNAMetadataProviderProperties.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681DLNAMetadataProviderProperties.h>",
                "textEdit": {
                    "newText": "DLNAMetadataProviderProperties.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "DSAdmin.h>",
                "insertText": "DSAdmin.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " DSAdmin.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681DSAdmin.h>",
                "textEdit": {
                    "newText": "DSAdmin.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "DSAttrib.h>",
                "insertText": "DSAttrib.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " DSAttrib.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681DSAttrib.h>",
                "textEdit": {
                    "newText": "DSAttrib.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "DSClient.h>",
                "insertText": "DSClient.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " DSClient.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681DSClient.h>",
                "textEdit": {
                    "newText": "DSClient.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "DSQuery.h>",
                "insertText": "DSQuery.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " DSQuery.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681DSQuery.h>",
                "textEdit": {
                    "newText": "DSQuery.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "DSRole.h>",
                "insertText": "DSRole.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " DSRole.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681DSRole.h>",
                "textEdit": {
                    "newText": "DSRole.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "DXGIMessages.h>",
                "insertText": "DXGIMessages.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " DXGIMessages.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681DXGIMessages.h>",
                "textEdit": {
                    "newText": "DXGIMessages.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "DXProgrammableCapture.h>",
                "insertText": "DXProgrammableCapture.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " DXProgrammableCapture.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681DXProgrammableCapture.h>",
                "textEdit": {
                    "newText": "DXProgrammableCapture.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "DbgEng.h>",
                "insertText": "DbgEng.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " DbgEng.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681DbgEng.h>",
                "textEdit": {
                    "newText": "DbgEng.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "DbgHelp.h>",
                "insertText": "DbgHelp.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " DbgHelp.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681DbgHelp.h>",
                "textEdit": {
                    "newText": "DbgHelp.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "DbgModel.h>",
                "insertText": "DbgModel.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " DbgModel.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681DbgModel.h>",
                "textEdit": {
                    "newText": "DbgModel.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "DbgProp.h>",
                "insertText": "DbgProp.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " DbgProp.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681DbgProp.h>",
                "textEdit": {
                    "newText": "DbgProp.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "Dbt.h>",
                "insertText": "Dbt.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " Dbt.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681Dbt.h>",
                "textEdit": {
                    "newText": "Dbt.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "DefaultBrowserSyncSettings.h>",
                "insertText": "DefaultBrowserSyncSettings.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " DefaultBrowserSyncSettings.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681DefaultBrowserSyncSettings.h>",
                "textEdit": {
                    "newText": "DefaultBrowserSyncSettings.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "DeleteBrowsingHistory.h>",
                "insertText": "DeleteBrowsingHistory.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " DeleteBrowsingHistory.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681DeleteBrowsingHistory.h>",
                "textEdit": {
                    "newText": "DeleteBrowsingHistory.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "DeviceCategories.h>",
                "insertText": "DeviceCategories.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " DeviceCategories.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681DeviceCategories.h>",
                "textEdit": {
                    "newText": "DeviceCategories.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "DhcpCSdk.h>",
                "insertText": "DhcpCSdk.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " DhcpCSdk.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681DhcpCSdk.h>",
                "textEdit": {
                    "newText": "DhcpCSdk.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "DhcpSSdk.h>",
                "insertText": "DhcpSSdk.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " DhcpSSdk.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681DhcpSSdk.h>",
                "textEdit": {
                    "newText": "DhcpSSdk.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "Dhcpv6cSdk.h>",
                "insertText": "Dhcpv6cSdk.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " Dhcpv6cSdk.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681Dhcpv6cSdk.h>",
                "textEdit": {
                    "newText": "Dhcpv6cSdk.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "DiagnosticDataQuery.h>",
                "insertText": "DiagnosticDataQuery.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " DiagnosticDataQuery.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681DiagnosticDataQuery.h>",
                "textEdit": {
                    "newText": "DiagnosticDataQuery.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "DiagnosticDataQueryTypes.h>",
                "insertText": "DiagnosticDataQueryTypes.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " DiagnosticDataQueryTypes.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681DiagnosticDataQueryTypes.h>",
                "textEdit": {
                    "newText": "DiagnosticDataQueryTypes.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "Digitalv.h>",
                "insertText": "Digitalv.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " Digitalv.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681Digitalv.h>",
                "textEdit": {
                    "newText": "Digitalv.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "Dimm.h>",
                "insertText": "Dimm.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " Dimm.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681Dimm.h>",
                "textEdit": {
                    "newText": "Dimm.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "DirectML.h>",
                "insertText": "DirectML.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " DirectML.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681DirectML.h>",
                "textEdit": {
                    "newText": "DirectML.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "DirectXCollision.h>",
                "insertText": "DirectXCollision.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " DirectXCollision.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681DirectXCollision.h>",
                "textEdit": {
                    "newText": "DirectXCollision.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "DirectXColors.h>",
                "insertText": "DirectXColors.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " DirectXColors.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681DirectXColors.h>",
                "textEdit": {
                    "newText": "DirectXColors.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "DirectXMath.h>",
                "insertText": "DirectXMath.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " DirectXMath.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681DirectXMath.h>",
                "textEdit": {
                    "newText": "DirectXMath.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "DirectXPackedVector.h>",
                "insertText": "DirectXPackedVector.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " DirectXPackedVector.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681DirectXPackedVector.h>",
                "textEdit": {
                    "newText": "DirectXPackedVector.h>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['ehdata_forceinclude.h>', 'ADSIid.h>', 'AF_Irda.h>', 'ATLComMem.h>', 'ATLComTime.h>', 'AccCtrl.h>', 'AclAPI.h>', 'AclUI.h>', 'ActivScp.h>', 'ActiveDS.h>', 'ActivityCoordinator.h>', 'ActivityCoordinatorTypes.h>', 'AdsDb.h>', 'AdsErr.h>', 'AdsHlp.h>', 'AdsProp.h>', 'Adsnms.h>', 'Adssts.h>', 'AdtGen.h>', 'AppxPackaging.h>', 'Asptlb.h>', 'AtscPsipParser.h>', 'AudioAPOTypes.h>', 'AudioEngineEndpoint.h>', 'AudioSessionTypes.h>', 'Audioclient.h>', 'AuthZ.h>', 'Authif.h>', 'AviFmt.h>', 'BiDiSpl.h>', 'Bits.h>', 'Bits3_0.h>', 'BitsMsg.h>', 'CDOSys.h>', 'CDOSysErr.h>', 'CDOSysStr.h>', 'CallConv.Inc>', 'CameraUIControl.h>', 'CastingInterop.h>', 'CertAdm.h>', 'CertBCli.h>', 'CertBase.h>', 'CertCli.h>', 'CertEnc.h>', 'CertExit.h>', 'CertMod.h>', 'CertPol.h>', 'CertPolEng.h>', 'CertSrv.h>', 'CertView.h>', 'Certif.h>', 'ChPtrArr.h>', 'ChStrArr.h>', 'ChString.h>', 'CiError.h>', 'CimFs.h>', 'CluAdmEx.h>', 'ClusApi.h>', 'CmnQuery.h>', 'CodeAnalysis/', 'ColorDlg.h>', 'ComAdmin.h>', 'ComSvcs.h>', 'CommCtrl.h>', 'CompPkgSup.h>', 'ContactAggregation.h>', 'CoreWindow.h>', 'Cpl.h>', 'Cplext.h>', 'CustCntl.h>', 'D2DErr.h>', 'DLNADeviceInterfaceIds.h>', 'DLNAMetadataProviderProperties.h>', 'DSAdmin.h>', 'DSAttrib.h>', 'DSClient.h>', 'DSQuery.h>', 'DSRole.h>', 'DXGIMessages.h>', 'DXProgrammableCapture.h>', 'DbgEng.h>', 'DbgHelp.h>', 'DbgModel.h>', 'DbgProp.h>', 'Dbt.h>', 'DefaultBrowserSyncSettings.h>', 'DeleteBrowsingHistory.h>', 'DeviceCategories.h>', 'DhcpCSdk.h>', 'DhcpSSdk.h>', 'Dhcpv6cSdk.h>', 'DiagnosticDataQuery.h>', 'DiagnosticDataQueryTypes.h>', 'Digitalv.h>', 'Dimm.h>', 'DirectML.h>', 'DirectXCollision.h>', 'DirectXColors.h>', 'DirectXMath.h>', 'DirectXPackedVector.h>']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_expects_filename",
                "message": "Expected \"FILENAME\" or <FILENAME>",
                "range": {
                    "end": {
                        "character": 9,
                        "line": 0
                    },
                    "start": {
                        "character": 9,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 24
    }
}
Diagnostics received from LSP.
Errors received: [[0, [9, 9]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected",
                "message": "Expected '>'\n\ntmpu8w1xu5x.cpp:1:10: note: to match this '<'",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 0
                    },
                    "start": {
                        "character": 10,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "message": "To match this '<'\n\ntmpu8w1xu5x.cpp:1:11: error: expected '>'",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 0
                    },
                    "start": {
                        "character": 9,
                        "line": 0
                    }
                },
                "severity": 3
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 24
    }
}
Diagnostics received from LSP.
Errors received: [[0, [10, 10]]]
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "filterText": "IAccess.h>",
                "insertText": "IAccess.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " IAccess.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681IAccess.h>",
                "textEdit": {
                    "newText": "IAccess.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "IChannelCredentials.h>",
                "insertText": "IChannelCredentials.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " IChannelCredentials.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681IChannelCredentials.h>",
                "textEdit": {
                    "newText": "IChannelCredentials.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "IContact.h>",
                "insertText": "IContact.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " IContact.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681IContact.h>",
                "textEdit": {
                    "newText": "IContact.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "IContactProperties.h>",
                "insertText": "IContactProperties.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " IContactProperties.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681IContactProperties.h>",
                "textEdit": {
                    "newText": "IContactProperties.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "IContentPrefetcherTaskTrigger.h>",
                "insertText": "IContentPrefetcherTaskTrigger.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " IContentPrefetcherTaskTrigger.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681IContentPrefetcherTaskTrigger.h>",
                "textEdit": {
                    "newText": "IContentPrefetcherTaskTrigger.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "IDLMULTI.H>",
                "insertText": "IDLMULTI.H>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " IDLMULTI.H>",
                "score": 0.787254273891449,
                "sortText": "40b67681IDLMULTI.H>",
                "textEdit": {
                    "newText": "IDLMULTI.H>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "IDispIds.h>",
                "insertText": "IDispIds.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " IDispIds.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681IDispIds.h>",
                "textEdit": {
                    "newText": "IDispIds.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "IE12Plugin.h>",
                "insertText": "IE12Plugin.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " IE12Plugin.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681IE12Plugin.h>",
                "textEdit": {
                    "newText": "IE12Plugin.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "IEDial.h>",
                "insertText": "IEDial.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " IEDial.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681IEDial.h>",
                "textEdit": {
                    "newText": "IEDial.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "IEObj.h>",
                "insertText": "IEObj.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " IEObj.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681IEObj.h>",
                "textEdit": {
                    "newText": "IEObj.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "IEPMapi.h>",
                "insertText": "IEPMapi.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " IEPMapi.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681IEPMapi.h>",
                "textEdit": {
                    "newText": "IEPMapi.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "IEProcess.h>",
                "insertText": "IEProcess.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " IEProcess.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681IEProcess.h>",
                "textEdit": {
                    "newText": "IEProcess.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "IIScnfg.h>",
                "insertText": "IIScnfg.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " IIScnfg.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681IIScnfg.h>",
                "textEdit": {
                    "newText": "IIScnfg.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "IImgCtx.h>",
                "insertText": "IImgCtx.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " IImgCtx.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681IImgCtx.h>",
                "textEdit": {
                    "newText": "IImgCtx.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "IMessage.h>",
                "insertText": "IMessage.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " IMessage.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681IMessage.h>",
                "textEdit": {
                    "newText": "IMessage.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "IMessageDispatcher.h>",
                "insertText": "IMessageDispatcher.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " IMessageDispatcher.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681IMessageDispatcher.h>",
                "textEdit": {
                    "newText": "IMessageDispatcher.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "IPExport.h>",
                "insertText": "IPExport.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " IPExport.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681IPExport.h>",
                "textEdit": {
                    "newText": "IPExport.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "IPTypes.h>",
                "insertText": "IPTypes.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " IPTypes.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681IPTypes.h>",
                "textEdit": {
                    "newText": "IPTypes.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "ISysmon.h>",
                "insertText": "ISysmon.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " ISysmon.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681ISysmon.h>",
                "textEdit": {
                    "newText": "ISysmon.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "Iadmext.h>",
                "insertText": "Iadmext.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " Iadmext.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681Iadmext.h>",
                "textEdit": {
                    "newText": "Iadmext.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "Iadmw.h>",
                "insertText": "Iadmw.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " Iadmw.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681Iadmw.h>",
                "textEdit": {
                    "newText": "Iadmw.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "Iads.h>",
                "insertText": "Iads.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " Iads.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681Iads.h>",
                "textEdit": {
                    "newText": "Iads.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "Icm.h>",
                "insertText": "Icm.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " Icm.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681Icm.h>",
                "textEdit": {
                    "newText": "Icm.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "IcmpAPI.h>",
                "insertText": "IcmpAPI.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " IcmpAPI.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681IcmpAPI.h>",
                "textEdit": {
                    "newText": "IcmpAPI.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "IdentityCommon.h>",
                "insertText": "IdentityCommon.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " IdentityCommon.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681IdentityCommon.h>",
                "textEdit": {
                    "newText": "IdentityCommon.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "IdentityProvider.h>",
                "insertText": "IdentityProvider.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " IdentityProvider.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681IdentityProvider.h>",
                "textEdit": {
                    "newText": "IdentityProvider.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "IdentityStore.h>",
                "insertText": "IdentityStore.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " IdentityStore.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681IdentityStore.h>",
                "textEdit": {
                    "newText": "IdentityStore.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "Ilogobj.Hxx>",
                "insertText": "Ilogobj.Hxx>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " Ilogobj.Hxx>",
                "score": 0.787254273891449,
                "sortText": "40b67681Ilogobj.Hxx>",
                "textEdit": {
                    "newText": "Ilogobj.Hxx>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "ImageHlp.h>",
                "insertText": "ImageHlp.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " ImageHlp.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681ImageHlp.h>",
                "textEdit": {
                    "newText": "ImageHlp.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "ImageTranscode.h>",
                "insertText": "ImageTranscode.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " ImageTranscode.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681ImageTranscode.h>",
                "textEdit": {
                    "newText": "ImageTranscode.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "Ime.h>",
                "insertText": "Ime.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " Ime.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681Ime.h>",
                "textEdit": {
                    "newText": "Ime.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "ImgUtil.h>",
                "insertText": "ImgUtil.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " ImgUtil.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681ImgUtil.h>",
                "textEdit": {
                    "newText": "ImgUtil.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "InetReg.h>",
                "insertText": "InetReg.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " InetReg.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681InetReg.h>",
                "textEdit": {
                    "newText": "InetReg.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "InetSDK.h>",
                "insertText": "InetSDK.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " InetSDK.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681InetSDK.h>",
                "textEdit": {
                    "newText": "InetSDK.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "InkPresenterDesktop.h>",
                "insertText": "InkPresenterDesktop.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " InkPresenterDesktop.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681InkPresenterDesktop.h>",
                "textEdit": {
                    "newText": "InkPresenterDesktop.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "InputEventFlags.h>",
                "insertText": "InputEventFlags.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " InputEventFlags.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681InputEventFlags.h>",
                "textEdit": {
                    "newText": "InputEventFlags.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "InputScope.h>",
                "insertText": "InputScope.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " InputScope.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681InputScope.h>",
                "textEdit": {
                    "newText": "InputScope.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "Instance.h>",
                "insertText": "Instance.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " Instance.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681Instance.h>",
                "textEdit": {
                    "newText": "Instance.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "IntShCut.h>",
                "insertText": "IntShCut.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " IntShCut.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681IntShCut.h>",
                "textEdit": {
                    "newText": "IntShCut.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "InteractionContext.h>",
                "insertText": "InteractionContext.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " InteractionContext.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681InteractionContext.h>",
                "textEdit": {
                    "newText": "InteractionContext.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "Ipinfoid.h>",
                "insertText": "Ipinfoid.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " Ipinfoid.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681Ipinfoid.h>",
                "textEdit": {
                    "newText": "Ipinfoid.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "Iprtrmib.h>",
                "insertText": "Iprtrmib.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " Iprtrmib.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681Iprtrmib.h>",
                "textEdit": {
                    "newText": "Iprtrmib.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "IpxConst.h>",
                "insertText": "IpxConst.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " IpxConst.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681IpxConst.h>",
                "textEdit": {
                    "newText": "IpxConst.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "Ipxrip.h>",
                "insertText": "Ipxrip.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " Ipxrip.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681Ipxrip.h>",
                "textEdit": {
                    "newText": "Ipxrip.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "Ipxrtdef.h>",
                "insertText": "Ipxrtdef.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " Ipxrtdef.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681Ipxrtdef.h>",
                "textEdit": {
                    "newText": "Ipxrtdef.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "Ipxsap.h>",
                "insertText": "Ipxsap.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " Ipxsap.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681Ipxsap.h>",
                "textEdit": {
                    "newText": "Ipxsap.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "Ipxtfflt.h>",
                "insertText": "Ipxtfflt.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " Ipxtfflt.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681Ipxtfflt.h>",
                "textEdit": {
                    "newText": "Ipxtfflt.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "IsGuids.h>",
                "insertText": "IsGuids.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " IsGuids.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681IsGuids.h>",
                "textEdit": {
                    "newText": "IsGuids.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "IsolatedAppLauncher.h>",
                "insertText": "IsolatedAppLauncher.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " IsolatedAppLauncher.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681IsolatedAppLauncher.h>",
                "textEdit": {
                    "newText": "IsolatedAppLauncher.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "IsolatedWindowsEnvironmentUtils.h>",
                "insertText": "IsolatedWindowsEnvironmentUtils.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " IsolatedWindowsEnvironmentUtils.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681IsolatedWindowsEnvironmentUtils.h>",
                "textEdit": {
                    "newText": "IsolatedWindowsEnvironmentUtils.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "IssPer16.h>",
                "insertText": "IssPer16.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " IssPer16.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681IssPer16.h>",
                "textEdit": {
                    "newText": "IssPer16.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "Iwamreg.h>",
                "insertText": "Iwamreg.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " Iwamreg.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681Iwamreg.h>",
                "textEdit": {
                    "newText": "Iwamreg.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "i_cryptasn1tls.h>",
                "insertText": "i_cryptasn1tls.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " i_cryptasn1tls.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681i_cryptasn1tls.h>",
                "textEdit": {
                    "newText": "i_cryptasn1tls.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "ia32intrin.h>",
                "insertText": "ia32intrin.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " ia32intrin.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681ia32intrin.h>",
                "textEdit": {
                    "newText": "ia32intrin.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "icftypes.h>",
                "insertText": "icftypes.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " icftypes.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681icftypes.h>",
                "textEdit": {
                    "newText": "icftypes.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "icodecapi.h>",
                "insertText": "icodecapi.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " icodecapi.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681icodecapi.h>",
                "textEdit": {
                    "newText": "icodecapi.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "icrsint.h>",
                "insertText": "icrsint.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " icrsint.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681icrsint.h>",
                "textEdit": {
                    "newText": "icrsint.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "icu.h>",
                "insertText": "icu.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " icu.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681icu.h>",
                "textEdit": {
                    "newText": "icu.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "icucommon.h>",
                "insertText": "icucommon.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " icucommon.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681icucommon.h>",
                "textEdit": {
                    "newText": "icucommon.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "icui18n.h>",
                "insertText": "icui18n.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " icui18n.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681icui18n.h>",
                "textEdit": {
                    "newText": "icui18n.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "icwcfg.h>",
                "insertText": "icwcfg.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " icwcfg.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681icwcfg.h>",
                "textEdit": {
                    "newText": "icwcfg.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "ieautomation.h>",
                "insertText": "ieautomation.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " ieautomation.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681ieautomation.h>",
                "textEdit": {
                    "newText": "ieautomation.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "iewebdriver.h>",
                "insertText": "iewebdriver.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " iewebdriver.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681iewebdriver.h>",
                "textEdit": {
                    "newText": "iewebdriver.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "iextag.h>",
                "insertText": "iextag.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " iextag.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681iextag.h>",
                "textEdit": {
                    "newText": "iextag.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "ifdef.h>",
                "insertText": "ifdef.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " ifdef.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681ifdef.h>",
                "textEdit": {
                    "newText": "ifdef.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "ifmib.h>",
                "insertText": "ifmib.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " ifmib.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681ifmib.h>",
                "textEdit": {
                    "newText": "ifmib.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "iiisext.h>",
                "insertText": "iiisext.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " iiisext.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681iiisext.h>",
                "textEdit": {
                    "newText": "iiisext.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "iisrsta.h>",
                "insertText": "iisrsta.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " iisrsta.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681iisrsta.h>",
                "textEdit": {
                    "newText": "iisrsta.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "iiswebsocket.h>",
                "insertText": "iiswebsocket.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " iiswebsocket.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681iiswebsocket.h>",
                "textEdit": {
                    "newText": "iiswebsocket.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "iketypes.h>",
                "insertText": "iketypes.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " iketypes.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681iketypes.h>",
                "textEdit": {
                    "newText": "iketypes.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "il21dec.h>",
                "insertText": "il21dec.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " il21dec.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681il21dec.h>",
                "textEdit": {
                    "newText": "il21dec.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "imapi.h>",
                "insertText": "imapi.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " imapi.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681imapi.h>",
                "textEdit": {
                    "newText": "imapi.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "imapi2.h>",
                "insertText": "imapi2.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " imapi2.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681imapi2.h>",
                "textEdit": {
                    "newText": "imapi2.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "imapi2error.h>",
                "insertText": "imapi2error.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " imapi2error.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681imapi2error.h>",
                "textEdit": {
                    "newText": "imapi2error.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "imapi2fs.h>",
                "insertText": "imapi2fs.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " imapi2fs.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681imapi2fs.h>",
                "textEdit": {
                    "newText": "imapi2fs.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "imapi2fserror.h>",
                "insertText": "imapi2fserror.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " imapi2fserror.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681imapi2fserror.h>",
                "textEdit": {
                    "newText": "imapi2fserror.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "imapierror.h>",
                "insertText": "imapierror.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " imapierror.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681imapierror.h>",
                "textEdit": {
                    "newText": "imapierror.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "ime_cmodes.h>",
                "insertText": "ime_cmodes.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " ime_cmodes.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681ime_cmodes.h>",
                "textEdit": {
                    "newText": "ime_cmodes.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "imepad.h>",
                "insertText": "imepad.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " imepad.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681imepad.h>",
                "textEdit": {
                    "newText": "imepad.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "imgerror.h>",
                "insertText": "imgerror.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " imgerror.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681imgerror.h>",
                "textEdit": {
                    "newText": "imgerror.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "imm.h>",
                "insertText": "imm.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " imm.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681imm.h>",
                "textEdit": {
                    "newText": "imm.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "immdev.h>",
                "insertText": "immdev.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " immdev.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681immdev.h>",
                "textEdit": {
                    "newText": "immdev.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "immintrin.h>",
                "insertText": "immintrin.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " immintrin.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681immintrin.h>",
                "textEdit": {
                    "newText": "immintrin.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "in6addr.h>",
                "insertText": "in6addr.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " in6addr.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681in6addr.h>",
                "textEdit": {
                    "newText": "in6addr.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "inaddr.h>",
                "insertText": "inaddr.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " inaddr.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681inaddr.h>",
                "textEdit": {
                    "newText": "inaddr.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "indexsrv.h>",
                "insertText": "indexsrv.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " indexsrv.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681indexsrv.h>",
                "textEdit": {
                    "newText": "indexsrv.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "infocard.h>",
                "insertText": "infocard.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " infocard.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681infocard.h>",
                "textEdit": {
                    "newText": "infocard.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "infotech.h>",
                "insertText": "infotech.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " infotech.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681infotech.h>",
                "textEdit": {
                    "newText": "infotech.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "infstr.h>",
                "insertText": "infstr.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " infstr.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681infstr.h>",
                "textEdit": {
                    "newText": "infstr.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "initguid.h>",
                "insertText": "initguid.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " initguid.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681initguid.h>",
                "textEdit": {
                    "newText": "initguid.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "initializer_list>",
                "insertText": "initializer_list>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " initializer_list>",
                "score": 0.787254273891449,
                "sortText": "40b67681initializer_list>",
                "textEdit": {
                    "newText": "initializer_list>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "inked.h>",
                "insertText": "inked.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " inked.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681inked.h>",
                "textEdit": {
                    "newText": "inked.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "inkrenderer.h>",
                "insertText": "inkrenderer.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " inkrenderer.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681inkrenderer.h>",
                "textEdit": {
                    "newText": "inkrenderer.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "inputpaneinterop.h>",
                "insertText": "inputpaneinterop.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " inputpaneinterop.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681inputpaneinterop.h>",
                "textEdit": {
                    "newText": "inputpaneinterop.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "inputpanelconfiguration.h>",
                "insertText": "inputpanelconfiguration.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " inputpanelconfiguration.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681inputpanelconfiguration.h>",
                "textEdit": {
                    "newText": "inputpanelconfiguration.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "inspectable.h>",
                "insertText": "inspectable.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " inspectable.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681inspectable.h>",
                "textEdit": {
                    "newText": "inspectable.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "interlockedapi.h>",
                "insertText": "interlockedapi.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " interlockedapi.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681interlockedapi.h>",
                "textEdit": {
                    "newText": "interlockedapi.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "internal_concurrent_hash.h>",
                "insertText": "internal_concurrent_hash.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " internal_concurrent_hash.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681internal_concurrent_hash.h>",
                "textEdit": {
                    "newText": "internal_concurrent_hash.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "internal_split_ordered_list.h>",
                "insertText": "internal_split_ordered_list.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " internal_split_ordered_list.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681internal_split_ordered_list.h>",
                "textEdit": {
                    "newText": "internal_split_ordered_list.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "intrin.h>",
                "insertText": "intrin.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " intrin.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681intrin.h>",
                "textEdit": {
                    "newText": "intrin.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['IAccess.h>', 'IChannelCredentials.h>', 'IContact.h>', 'IContactProperties.h>', 'IContentPrefetcherTaskTrigger.h>', 'IDLMULTI.H>', 'IDispIds.h>', 'IE12Plugin.h>', 'IEDial.h>', 'IEObj.h>', 'IEPMapi.h>', 'IEProcess.h>', 'IIScnfg.h>', 'IImgCtx.h>', 'IMessage.h>', 'IMessageDispatcher.h>', 'IPExport.h>', 'IPTypes.h>', 'ISysmon.h>', 'Iadmext.h>', 'Iadmw.h>', 'Iads.h>', 'Icm.h>', 'IcmpAPI.h>', 'IdentityCommon.h>', 'IdentityProvider.h>', 'IdentityStore.h>', 'Ilogobj.Hxx>', 'ImageHlp.h>', 'ImageTranscode.h>', 'Ime.h>', 'ImgUtil.h>', 'InetReg.h>', 'InetSDK.h>', 'InkPresenterDesktop.h>', 'InputEventFlags.h>', 'InputScope.h>', 'Instance.h>', 'IntShCut.h>', 'InteractionContext.h>', 'Ipinfoid.h>', 'Iprtrmib.h>', 'IpxConst.h>', 'Ipxrip.h>', 'Ipxrtdef.h>', 'Ipxsap.h>', 'Ipxtfflt.h>', 'IsGuids.h>', 'IsolatedAppLauncher.h>', 'IsolatedWindowsEnvironmentUtils.h>', 'IssPer16.h>', 'Iwamreg.h>', 'i_cryptasn1tls.h>', 'ia32intrin.h>', 'icftypes.h>', 'icodecapi.h>', 'icrsint.h>', 'icu.h>', 'icucommon.h>', 'icui18n.h>', 'icwcfg.h>', 'ieautomation.h>', 'iewebdriver.h>', 'iextag.h>', 'ifdef.h>', 'ifmib.h>', 'iiisext.h>', 'iisrsta.h>', 'iiswebsocket.h>', 'iketypes.h>', 'il21dec.h>', 'imapi.h>', 'imapi2.h>', 'imapi2error.h>', 'imapi2fs.h>', 'imapi2fserror.h>', 'imapierror.h>', 'ime_cmodes.h>', 'imepad.h>', 'imgerror.h>', 'imm.h>', 'immdev.h>', 'immintrin.h>', 'in6addr.h>', 'inaddr.h>', 'indexsrv.h>', 'infocard.h>', 'infotech.h>', 'infstr.h>', 'initguid.h>', 'initializer_list>', 'inked.h>', 'inkrenderer.h>', 'inputpaneinterop.h>', 'inputpanelconfiguration.h>', 'inspectable.h>', 'interlockedapi.h>', 'internal_concurrent_hash.h>', 'internal_split_ordered_list.h>', 'intrin.h>']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected",
                "message": "Expected '>'\n\ntmpu8w1xu5x.cpp:1:10: note: to match this '<'",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 0
                    },
                    "start": {
                        "character": 10,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "message": "To match this '<'\n\ntmpu8w1xu5x.cpp:1:11: error: expected '>'",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 0
                    },
                    "start": {
                        "character": 9,
                        "line": 0
                    }
                },
                "severity": 3
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 25
    }
}
Diagnostics received from LSP.
Errors received: [[0, [10, 10]]]
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected",
                "message": "Expected '>'\n\ntmpu8w1xu5x.cpp:1:10: note: to match this '<'",
                "range": {
                    "end": {
                        "character": 11,
                        "line": 0
                    },
                    "start": {
                        "character": 11,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "message": "To match this '<'\n\ntmpu8w1xu5x.cpp:1:12: error: expected '>'",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 0
                    },
                    "start": {
                        "character": 9,
                        "line": 0
                    }
                },
                "severity": 3
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 25
    }
}
Diagnostics received from LSP.
Errors received: [[0, [11, 11]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": [
            {
                "filterText": "io.h>",
                "insertText": "io.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " io.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681io.h>",
                "textEdit": {
                    "newText": "io.h>",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "ioapiset.h>",
                "insertText": "ioapiset.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " ioapiset.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681ioapiset.h>",
                "textEdit": {
                    "newText": "ioapiset.h>",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "ioevent.h>",
                "insertText": "ioevent.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " ioevent.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681ioevent.h>",
                "textEdit": {
                    "newText": "ioevent.h>",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "iomanip>",
                "insertText": "iomanip>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " iomanip>",
                "score": 0.787254273891449,
                "sortText": "40b67681iomanip>",
                "textEdit": {
                    "newText": "iomanip>",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "ioringapi.h>",
                "insertText": "ioringapi.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " ioringapi.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681ioringapi.h>",
                "textEdit": {
                    "newText": "ioringapi.h>",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "ios>",
                "insertText": "ios>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " ios>",
                "score": 0.787254273891449,
                "sortText": "40b67681ios>",
                "textEdit": {
                    "newText": "ios>",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "iosfwd>",
                "insertText": "iosfwd>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " iosfwd>",
                "score": 0.787254273891449,
                "sortText": "40b67681iosfwd>",
                "textEdit": {
                    "newText": "iosfwd>",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "iostream>",
                "insertText": "iostream>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " iostream>",
                "score": 0.787254273891449,
                "sortText": "40b67681iostream>",
                "textEdit": {
                    "newText": "iostream>",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "IEObj.h>",
                "insertText": "IEObj.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " IEObj.h>",
                "score": 0.787254273891449,
                "sortText": "40e8d8e1IEObj.h>",
                "textEdit": {
                    "newText": "IEObj.h>",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "internal_split_ordered_list.h>",
                "insertText": "internal_split_ordered_list.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " internal_split_ordered_list.h>",
                "score": 0.787254273891449,
                "sortText": "41041421internal_split_ordered_list.h>",
                "textEdit": {
                    "newText": "internal_split_ordered_list.h>",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "corecrt_io.h>",
                "insertText": "corecrt_io.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " corecrt_io.h>",
                "score": 0.787254273891449,
                "sortText": "4168d8e1corecrt_io.h>",
                "textEdit": {
                    "newText": "corecrt_io.h>",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "winbio_ioctl.h>",
                "insertText": "winbio_ioctl.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " winbio_ioctl.h>",
                "score": 0.787254273891449,
                "sortText": "4168d8e1winbio_ioctl.h>",
                "textEdit": {
                    "newText": "winbio_ioctl.h>",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "GenericUsbFnIoctl.h>",
                "insertText": "GenericUsbFnIoctl.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " GenericUsbFnIoctl.h>",
                "score": 0.787254273891449,
                "sortText": "42367681GenericUsbFnIoctl.h>",
                "textEdit": {
                    "newText": "GenericUsbFnIoctl.h>",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "GPIOButtonTypes.h>",
                "insertText": "GPIOButtonTypes.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " GPIOButtonTypes.h>",
                "score": 0.787254273891449,
                "sortText": "80000000GPIOButtonTypes.h>",
                "textEdit": {
                    "newText": "GPIOButtonTypes.h>",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['io.h>', 'ioapiset.h>', 'ioevent.h>', 'iomanip>', 'ioringapi.h>', 'ios>', 'iosfwd>', 'iostream>', 'IEObj.h>', 'internal_split_ordered_list.h>', 'corecrt_io.h>', 'winbio_ioctl.h>', 'GenericUsbFnIoctl.h>', 'GPIOButtonTypes.h>']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected",
                "message": "Expected '>'\n\ntmpu8w1xu5x.cpp:1:10: note: to match this '<'",
                "range": {
                    "end": {
                        "character": 11,
                        "line": 0
                    },
                    "start": {
                        "character": 11,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "message": "To match this '<'\n\ntmpu8w1xu5x.cpp:1:12: error: expected '>'",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 0
                    },
                    "start": {
                        "character": 9,
                        "line": 0
                    }
                },
                "severity": 3
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 26
    }
}
Diagnostics received from LSP.
Errors received: [[0, [11, 11]]]
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected",
                "message": "Expected '>'\n\ntmpu8w1xu5x.cpp:1:10: note: to match this '<'",
                "range": {
                    "end": {
                        "character": 12,
                        "line": 0
                    },
                    "start": {
                        "character": 12,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "message": "To match this '<'\n\ntmpu8w1xu5x.cpp:1:13: error: expected '>'",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 0
                    },
                    "start": {
                        "character": 9,
                        "line": 0
                    }
                },
                "severity": 3
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 26
    }
}
Diagnostics received from LSP.
Errors received: [[0, [12, 12]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": [
            {
                "filterText": "ios>",
                "insertText": "ios>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " ios>",
                "score": 0.787254273891449,
                "sortText": "40b67681ios>",
                "textEdit": {
                    "newText": "ios>",
                    "range": {
                        "end": {
                            "character": 13,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "iosfwd>",
                "insertText": "iosfwd>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " iosfwd>",
                "score": 0.787254273891449,
                "sortText": "40b67681iosfwd>",
                "textEdit": {
                    "newText": "iosfwd>",
                    "range": {
                        "end": {
                            "character": 13,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "iostream>",
                "insertText": "iostream>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " iostream>",
                "score": 0.787254273891449,
                "sortText": "40b67681iostream>",
                "textEdit": {
                    "newText": "iostream>",
                    "range": {
                        "end": {
                            "character": 13,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['ios>', 'iosfwd>', 'iostream>']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected",
                "message": "Expected '>'\n\ntmpu8w1xu5x.cpp:1:10: note: to match this '<'",
                "range": {
                    "end": {
                        "character": 12,
                        "line": 0
                    },
                    "start": {
                        "character": 12,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "message": "To match this '<'\n\ntmpu8w1xu5x.cpp:1:13: error: expected '>'",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 0
                    },
                    "start": {
                        "character": 9,
                        "line": 0
                    }
                },
                "severity": 3
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 27
    }
}
Diagnostics received from LSP.
Errors received: [[0, [12, 12]]]
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected",
                "message": "Expected '>'\n\ntmpu8w1xu5x.cpp:1:10: note: to match this '<'",
                "range": {
                    "end": {
                        "character": 13,
                        "line": 0
                    },
                    "start": {
                        "character": 13,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "message": "To match this '<'\n\ntmpu8w1xu5x.cpp:1:14: error: expected '>'",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 0
                    },
                    "start": {
                        "character": 9,
                        "line": 0
                    }
                },
                "severity": 3
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 27
    }
}
Diagnostics received from LSP.
Errors received: [[0, [13, 13]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected",
                "message": "Expected '>'\n\ntmpu8w1xu5x.cpp:1:10: note: to match this '<'",
                "range": {
                    "end": {
                        "character": 13,
                        "line": 0
                    },
                    "start": {
                        "character": 13,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "message": "To match this '<'\n\ntmpu8w1xu5x.cpp:1:14: error: expected '>'",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 0
                    },
                    "start": {
                        "character": 9,
                        "line": 0
                    }
                },
                "severity": 3
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 28
    }
}
Diagnostics received from LSP.
Errors received: [[0, [13, 13]]]
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected",
                "message": "Expected '>'\n\ntmpu8w1xu5x.cpp:1:10: note: to match this '<'",
                "range": {
                    "end": {
                        "character": 14,
                        "line": 0
                    },
                    "start": {
                        "character": 14,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "message": "To match this '<'\n\ntmpu8w1xu5x.cpp:1:15: error: expected '>'",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 0
                    },
                    "start": {
                        "character": 9,
                        "line": 0
                    }
                },
                "severity": 3
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 28
    }
}
Diagnostics received from LSP.
Errors received: [[0, [14, 14]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 29
    }
}
Diagnostics received from LSP.
Errors received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 29
    }
}
Diagnostics received from LSP.
Errors received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 30
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 1.5456733703613281,
                "sortText": "403a2760size_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "type_info",
                "insertText": "type_info",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " type_info",
                "score": 1.0411033630371094,
                "sortText": "407abd20type_info",
                "textEdit": {
                    "newText": "type_info",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR32_T_LOCK_FREE",
                "score": 0.9372367262840271,
                "sortText": "40901141ATOMIC_CHAR32_T_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR32_T_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR_LOCK_FREE",
                "insertText": "ATOMIC_CHAR_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR_LOCK_FREE",
                "score": 0.9372367262840271,
                "sortText": "40901141ATOMIC_CHAR_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_FLAG_INIT",
                "insertText": "ATOMIC_FLAG_INIT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_FLAG_INIT",
                "score": 0.9372367262840271,
                "sortText": "40901141ATOMIC_FLAG_INIT",
                "textEdit": {
                    "newText": "ATOMIC_FLAG_INIT",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_INT_LOCK_FREE",
                "insertText": "ATOMIC_INT_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_INT_LOCK_FREE",
                "score": 0.9372367262840271,
                "sortText": "40901141ATOMIC_INT_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_INT_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_LLONG_LOCK_FREE",
                "insertText": "ATOMIC_LLONG_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_LLONG_LOCK_FREE",
                "score": 0.9372367262840271,
                "sortText": "40901141ATOMIC_LLONG_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_LLONG_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_LONG_LOCK_FREE",
                "insertText": "ATOMIC_LONG_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_LONG_LOCK_FREE",
                "score": 0.9372367262840271,
                "sortText": "40901141ATOMIC_LONG_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_LONG_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_SHORT_LOCK_FREE",
                "insertText": "ATOMIC_SHORT_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_SHORT_LOCK_FREE",
                "score": 0.9372367262840271,
                "sortText": "40901141ATOMIC_SHORT_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_SHORT_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_VAR_INIT",
                "insertText": "ATOMIC_VAR_INIT",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ATOMIC_VAR_INIT(_Value)",
                "score": 0.9372367262840271,
                "sortText": "40901141ATOMIC_VAR_INIT",
                "textEdit": {
                    "newText": "ATOMIC_VAR_INIT",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_WCHAR_T_LOCK_FREE",
                "insertText": "ATOMIC_WCHAR_T_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_WCHAR_T_LOCK_FREE",
                "score": 0.9372367262840271,
                "sortText": "40901141ATOMIC_WCHAR_T_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_WCHAR_T_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7a_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7a_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7a_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "alignas",
                "insertText": "alignas",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignas(expression)",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aalignas",
                "textEdit": {
                    "newText": "alignas",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "asm",
                "insertText": "asm",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " asm(string-literal)",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aasm",
                "textEdit": {
                    "newText": "asm",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aauto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7abool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7achar",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7achar16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7achar32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aclass",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aconst",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aconstexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7adecltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7adouble",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aenum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "extern",
                "insertText": "extern",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " extern",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aextern",
                "textEdit": {
                    "newText": "extern",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7afloat",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "inline",
                "insertText": "inline",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " inline",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7ainline",
                "textEdit": {
                    "newText": "inline",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aint",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7along",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "namespace",
                "insertText": "namespace",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " namespace name = namespace;",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7anamespace",
                "textEdit": {
                    "newText": "namespace",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aoperator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7ashort",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7asigned",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "static",
                "insertText": "static",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " static",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7astatic",
                "textEdit": {
                    "newText": "static",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "static_assert",
                "insertText": "static_assert",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_assert(expression, message);",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7astatic_assert",
                "textEdit": {
                    "newText": "static_assert",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7astruct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "template",
                "insertText": "template",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " template",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7atemplate",
                "textEdit": {
                    "newText": "template",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "template",
                "insertText": "template",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " template",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7atemplate",
                "textEdit": {
                    "newText": "template",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "thread_local",
                "insertText": "thread_local",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " thread_local",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7athread_local",
                "textEdit": {
                    "newText": "thread_local",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "typedef",
                "insertText": "typedef",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typedef type name;",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7atypedef",
                "textEdit": {
                    "newText": "typedef",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7atypename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aunion",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aunsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using name = type;",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7ausing",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using qualifier::name;",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7ausing",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "using namespace",
                "insertText": "using namespace",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using namespace identifier;",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7ausing namespace",
                "textEdit": {
                    "newText": "using namespace",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7avoid",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7avolatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7awchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic",
                "insertText": "std::atomic",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022std::atomic<class Ty>",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic",
                "textEdit": {
                    "newText": "std::atomic",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_bool",
                "insertText": "std::atomic_bool",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::atomic_bool",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic_bool",
                "textEdit": {
                    "newText": "std::atomic_bool",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_char",
                "insertText": "std::atomic_char",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::atomic_char",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic_char",
                "textEdit": {
                    "newText": "std::atomic_char",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_char32_t",
                "insertText": "std::atomic_char32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::atomic_char32_t",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic_char32_t",
                "textEdit": {
                    "newText": "std::atomic_char32_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag",
                "insertText": "std::atomic_flag",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022std::atomic_flag",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic_flag",
                "textEdit": {
                    "newText": "std::atomic_flag",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int",
                "insertText": "std::atomic_int",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::atomic_int",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic_int",
                "textEdit": {
                    "newText": "std::atomic_int",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int16_t",
                "insertText": "std::atomic_int16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::atomic_int16_t",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic_int16_t",
                "textEdit": {
                    "newText": "std::atomic_int16_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int32_t",
                "insertText": "std::atomic_int32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::atomic_int32_t",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic_int32_t",
                "textEdit": {
                    "newText": "std::atomic_int32_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int64_t",
                "insertText": "std::atomic_int64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::atomic_int64_t",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic_int64_t",
                "textEdit": {
                    "newText": "std::atomic_int64_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int8_t",
                "insertText": "std::atomic_int8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::atomic_int8_t",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic_int8_t",
                "textEdit": {
                    "newText": "std::atomic_int8_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast16_t",
                "insertText": "std::atomic_int_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::atomic_int_fast16_t",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic_int_fast16_t",
                "textEdit": {
                    "newText": "std::atomic_int_fast16_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast32_t",
                "insertText": "std::atomic_int_fast32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::atomic_int_fast32_t",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic_int_fast32_t",
                "textEdit": {
                    "newText": "std::atomic_int_fast32_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast64_t",
                "insertText": "std::atomic_int_fast64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::atomic_int_fast64_t",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic_int_fast64_t",
                "textEdit": {
                    "newText": "std::atomic_int_fast64_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast8_t",
                "insertText": "std::atomic_int_fast8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::atomic_int_fast8_t",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic_int_fast8_t",
                "textEdit": {
                    "newText": "std::atomic_int_fast8_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least16_t",
                "insertText": "std::atomic_int_least16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::atomic_int_least16_t",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic_int_least16_t",
                "textEdit": {
                    "newText": "std::atomic_int_least16_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least32_t",
                "insertText": "std::atomic_int_least32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::atomic_int_least32_t",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic_int_least32_t",
                "textEdit": {
                    "newText": "std::atomic_int_least32_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least64_t",
                "insertText": "std::atomic_int_least64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::atomic_int_least64_t",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic_int_least64_t",
                "textEdit": {
                    "newText": "std::atomic_int_least64_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least8_t",
                "insertText": "std::atomic_int_least8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::atomic_int_least8_t",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic_int_least8_t",
                "textEdit": {
                    "newText": "std::atomic_int_least8_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_intmax_t",
                "insertText": "std::atomic_intmax_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::atomic_intmax_t",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic_intmax_t",
                "textEdit": {
                    "newText": "std::atomic_intmax_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_intptr_t",
                "insertText": "std::atomic_intptr_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::atomic_intptr_t",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic_intptr_t",
                "textEdit": {
                    "newText": "std::atomic_intptr_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_llong",
                "insertText": "std::atomic_llong",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::atomic_llong",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic_llong",
                "textEdit": {
                    "newText": "std::atomic_llong",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ptrdiff_t",
                "insertText": "std::atomic_ptrdiff_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::atomic_ptrdiff_t",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic_ptrdiff_t",
                "textEdit": {
                    "newText": "std::atomic_ptrdiff_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_schar",
                "insertText": "std::atomic_schar",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::atomic_schar",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic_schar",
                "textEdit": {
                    "newText": "std::atomic_schar",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_short",
                "insertText": "std::atomic_short",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::atomic_short",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic_short",
                "textEdit": {
                    "newText": "std::atomic_short",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_size_t",
                "insertText": "std::atomic_size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::atomic_size_t",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic_size_t",
                "textEdit": {
                    "newText": "std::atomic_size_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uchar",
                "insertText": "std::atomic_uchar",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::atomic_uchar",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic_uchar",
                "textEdit": {
                    "newText": "std::atomic_uchar",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint",
                "insertText": "std::atomic_uint",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::atomic_uint",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic_uint",
                "textEdit": {
                    "newText": "std::atomic_uint",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint32_t",
                "insertText": "std::atomic_uint32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::atomic_uint32_t",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic_uint32_t",
                "textEdit": {
                    "newText": "std::atomic_uint32_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint64_t",
                "insertText": "std::atomic_uint64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::atomic_uint64_t",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic_uint64_t",
                "textEdit": {
                    "newText": "std::atomic_uint64_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast16_t",
                "insertText": "std::atomic_uint_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::atomic_uint_fast16_t",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic_uint_fast16_t",
                "textEdit": {
                    "newText": "std::atomic_uint_fast16_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast64_t",
                "insertText": "std::atomic_uint_fast64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::atomic_uint_fast64_t",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic_uint_fast64_t",
                "textEdit": {
                    "newText": "std::atomic_uint_fast64_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast8_t",
                "insertText": "std::atomic_uint_fast8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::atomic_uint_fast8_t",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic_uint_fast8_t",
                "textEdit": {
                    "newText": "std::atomic_uint_fast8_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_least16_t",
                "insertText": "std::atomic_uint_least16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::atomic_uint_least16_t",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic_uint_least16_t",
                "textEdit": {
                    "newText": "std::atomic_uint_least16_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_least32_t",
                "insertText": "std::atomic_uint_least32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::atomic_uint_least32_t",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic_uint_least32_t",
                "textEdit": {
                    "newText": "std::atomic_uint_least32_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_least8_t",
                "insertText": "std::atomic_uint_least8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::atomic_uint_least8_t",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic_uint_least8_t",
                "textEdit": {
                    "newText": "std::atomic_uint_least8_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uintmax_t",
                "insertText": "std::atomic_uintmax_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::atomic_uintmax_t",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic_uintmax_t",
                "textEdit": {
                    "newText": "std::atomic_uintmax_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uintptr_t",
                "insertText": "std::atomic_uintptr_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::atomic_uintptr_t",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic_uintptr_t",
                "textEdit": {
                    "newText": "std::atomic_uintptr_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ulong",
                "insertText": "std::atomic_ulong",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::atomic_ulong",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic_ulong",
                "textEdit": {
                    "newText": "std::atomic_ulong",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ushort",
                "insertText": "std::atomic_ushort",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::atomic_ushort",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic_ushort",
                "textEdit": {
                    "newText": "std::atomic_ushort",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_wchar_t",
                "insertText": "std::atomic_wchar_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::atomic_wchar_t",
                "score": 0.6313035488128662,
                "sortText": "40de62e4atomic_wchar_t",
                "textEdit": {
                    "newText": "std::atomic_wchar_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "__INCLUDE_LEVEL__",
                "insertText": "__INCLUDE_LEVEL__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __INCLUDE_LEVEL__",
                "score": 0.596724271774292,
                "sortText": "40e73d14__INCLUDE_LEVEL__",
                "textEdit": {
                    "newText": "__INCLUDE_LEVEL__",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "__has_include",
                "insertText": "__has_include",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_include",
                "score": 0.596724271774292,
                "sortText": "40e73d14__has_include",
                "textEdit": {
                    "newText": "__has_include",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "__has_include_next",
                "insertText": "__has_include_next",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_include_next",
                "score": 0.596724271774292,
                "sortText": "40e73d14__has_include_next",
                "textEdit": {
                    "newText": "__has_include_next",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "_ATOMIC_CHOOSE_INTRINSIC",
                "insertText": "_ATOMIC_CHOOSE_INTRINSIC",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_ATOMIC_CHOOSE_INTRINSIC",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_ATOMIC_CHOOSE_INTRINSIC",
                "textEdit": {
                    "newText": "_ATOMIC_CHOOSE_INTRINSIC",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "_ATOMIC_POST_LOAD_BARRIER_AS_NEEDED",
                "insertText": "_ATOMIC_POST_LOAD_BARRIER_AS_NEEDED",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_ATOMIC_POST_LOAD_BARRIER_AS_NEEDED",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_ATOMIC_POST_LOAD_BARRIER_AS_NEEDED",
                "textEdit": {
                    "newText": "_ATOMIC_POST_LOAD_BARRIER_AS_NEEDED",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "_ATOMIC_STORE_32_SEQ_CST",
                "insertText": "_ATOMIC_STORE_32_SEQ_CST",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_ATOMIC_STORE_32_SEQ_CST",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_ATOMIC_STORE_32_SEQ_CST",
                "textEdit": {
                    "newText": "_ATOMIC_STORE_32_SEQ_CST",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "_ATOMIC_STORE_32_SEQ_CST_X86_X64",
                "insertText": "_ATOMIC_STORE_32_SEQ_CST_X86_X64",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_ATOMIC_STORE_32_SEQ_CST_X86_X64",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_ATOMIC_STORE_32_SEQ_CST_X86_X64",
                "textEdit": {
                    "newText": "_ATOMIC_STORE_32_SEQ_CST_X86_X64",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "_ATOMIC_STORE_64_SEQ_CST",
                "insertText": "_ATOMIC_STORE_64_SEQ_CST",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_ATOMIC_STORE_64_SEQ_CST",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_ATOMIC_STORE_64_SEQ_CST",
                "textEdit": {
                    "newText": "_ATOMIC_STORE_64_SEQ_CST",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['size_t', 'type_info', 'ATOMIC_CHAR32_T_LOCK_FREE', 'ATOMIC_CHAR_LOCK_FREE', 'ATOMIC_FLAG_INIT', 'ATOMIC_INT_LOCK_FREE', 'ATOMIC_LLONG_LOCK_FREE', 'ATOMIC_LONG_LOCK_FREE', 'ATOMIC_SHORT_LOCK_FREE', 'ATOMIC_VAR_INIT', 'ATOMIC_WCHAR_T_LOCK_FREE', '_Nonnull', '_Null_unspecified', '_Nullable', 'alignas', 'asm', 'auto', 'bool', 'char', 'char16_t', 'char32_t', 'class', 'const', 'constexpr', 'decltype', 'double', 'enum', 'extern', 'float', 'inline', 'int', 'long', 'namespace', 'operator', 'short', 'signed', 'static', 'static_assert', 'struct', 'template', 'template', 'thread_local', 'typedef', 'typename', 'union', 'unsigned', 'using', 'using', 'using namespace', 'void', 'volatile', 'wchar_t', 'std::atomic', 'std::atomic_bool', 'std::atomic_char', 'std::atomic_char32_t', 'std::atomic_flag', 'std::atomic_int', 'std::atomic_int16_t', 'std::atomic_int32_t', 'std::atomic_int64_t', 'std::atomic_int8_t', 'std::atomic_int_fast16_t', 'std::atomic_int_fast32_t', 'std::atomic_int_fast64_t', 'std::atomic_int_fast8_t', 'std::atomic_int_least16_t', 'std::atomic_int_least32_t', 'std::atomic_int_least64_t', 'std::atomic_int_least8_t', 'std::atomic_intmax_t', 'std::atomic_intptr_t', 'std::atomic_llong', 'std::atomic_ptrdiff_t', 'std::atomic_schar', 'std::atomic_short', 'std::atomic_size_t', 'std::atomic_uchar', 'std::atomic_uint', 'std::atomic_uint32_t', 'std::atomic_uint64_t', 'std::atomic_uint_fast16_t', 'std::atomic_uint_fast64_t', 'std::atomic_uint_fast8_t', 'std::atomic_uint_least16_t', 'std::atomic_uint_least32_t', 'std::atomic_uint_least8_t', 'std::atomic_uintmax_t', 'std::atomic_uintptr_t', 'std::atomic_ulong', 'std::atomic_ushort', 'std::atomic_wchar_t', '__INCLUDE_LEVEL__', '__has_include', '__has_include_next', '_ATOMIC_CHOOSE_INTRINSIC', '_ATOMIC_POST_LOAD_BARRIER_AS_NEEDED', '_ATOMIC_STORE_32_SEQ_CST', '_ATOMIC_STORE_32_SEQ_CST_X86_X64', '_ATOMIC_STORE_64_SEQ_CST']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 31
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdint.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdint.h>"
                },
                "filterText": "UINT16_C",
                "insertText": "UINT16_C",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022UINT16_C(x)",
                "score": 0.9372367262840271,
                "sortText": "40901141UINT16_C",
                "textEdit": {
                    "newText": "UINT16_C",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "UINT16_MAX",
                "insertText": "UINT16_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022UINT16_MAX",
                "score": 0.9372367262840271,
                "sortText": "40901141UINT16_MAX",
                "textEdit": {
                    "newText": "UINT16_MAX",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdint.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdint.h>"
                },
                "filterText": "UINT32_C",
                "insertText": "UINT32_C",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022UINT32_C(x)",
                "score": 0.9372367262840271,
                "sortText": "40901141UINT32_C",
                "textEdit": {
                    "newText": "UINT32_C",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "UINT32_MAX",
                "insertText": "UINT32_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022UINT32_MAX",
                "score": 0.9372367262840271,
                "sortText": "40901141UINT32_MAX",
                "textEdit": {
                    "newText": "UINT32_MAX",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdint.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdint.h>"
                },
                "filterText": "UINT64_C",
                "insertText": "UINT64_C",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022UINT64_C(x)",
                "score": 0.9372367262840271,
                "sortText": "40901141UINT64_C",
                "textEdit": {
                    "newText": "UINT64_C",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "UINT64_MAX",
                "insertText": "UINT64_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022UINT64_MAX",
                "score": 0.9372367262840271,
                "sortText": "40901141UINT64_MAX",
                "textEdit": {
                    "newText": "UINT64_MAX",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdint.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdint.h>"
                },
                "filterText": "UINT8_C",
                "insertText": "UINT8_C",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022UINT8_C(x)",
                "score": 0.9372367262840271,
                "sortText": "40901141UINT8_C",
                "textEdit": {
                    "newText": "UINT8_C",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "UINT8_MAX",
                "insertText": "UINT8_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022UINT8_MAX",
                "score": 0.9372367262840271,
                "sortText": "40901141UINT8_MAX",
                "textEdit": {
                    "newText": "UINT8_MAX",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdint.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdint.h>"
                },
                "filterText": "UINTMAX_C",
                "insertText": "UINTMAX_C",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022UINTMAX_C(x)",
                "score": 0.9372367262840271,
                "sortText": "40901141UINTMAX_C",
                "textEdit": {
                    "newText": "UINTMAX_C",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "UINTMAX_MAX",
                "insertText": "UINTMAX_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022UINTMAX_MAX",
                "score": 0.9372367262840271,
                "sortText": "40901141UINTMAX_MAX",
                "textEdit": {
                    "newText": "UINTMAX_MAX",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "UINTPTR_MAX",
                "insertText": "UINTPTR_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022UINTPTR_MAX",
                "score": 0.9372367262840271,
                "sortText": "40901141UINTPTR_MAX",
                "textEdit": {
                    "newText": "UINTPTR_MAX",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "UINT_FAST16_MAX",
                "insertText": "UINT_FAST16_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022UINT_FAST16_MAX",
                "score": 0.9372367262840271,
                "sortText": "40901141UINT_FAST16_MAX",
                "textEdit": {
                    "newText": "UINT_FAST16_MAX",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "UINT_FAST32_MAX",
                "insertText": "UINT_FAST32_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022UINT_FAST32_MAX",
                "score": 0.9372367262840271,
                "sortText": "40901141UINT_FAST32_MAX",
                "textEdit": {
                    "newText": "UINT_FAST32_MAX",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "UINT_FAST64_MAX",
                "insertText": "UINT_FAST64_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022UINT_FAST64_MAX",
                "score": 0.9372367262840271,
                "sortText": "40901141UINT_FAST64_MAX",
                "textEdit": {
                    "newText": "UINT_FAST64_MAX",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "UINT_FAST8_MAX",
                "insertText": "UINT_FAST8_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022UINT_FAST8_MAX",
                "score": 0.9372367262840271,
                "sortText": "40901141UINT_FAST8_MAX",
                "textEdit": {
                    "newText": "UINT_FAST8_MAX",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "UINT_LEAST16_MAX",
                "insertText": "UINT_LEAST16_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022UINT_LEAST16_MAX",
                "score": 0.9372367262840271,
                "sortText": "40901141UINT_LEAST16_MAX",
                "textEdit": {
                    "newText": "UINT_LEAST16_MAX",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "UINT_LEAST32_MAX",
                "insertText": "UINT_LEAST32_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022UINT_LEAST32_MAX",
                "score": 0.9372367262840271,
                "sortText": "40901141UINT_LEAST32_MAX",
                "textEdit": {
                    "newText": "UINT_LEAST32_MAX",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "UINT_LEAST64_MAX",
                "insertText": "UINT_LEAST64_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022UINT_LEAST64_MAX",
                "score": 0.9372367262840271,
                "sortText": "40901141UINT_LEAST64_MAX",
                "textEdit": {
                    "newText": "UINT_LEAST64_MAX",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "UINT_LEAST8_MAX",
                "insertText": "UINT_LEAST8_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022UINT_LEAST8_MAX",
                "score": 0.9372367262840271,
                "sortText": "40901141UINT_LEAST8_MAX",
                "textEdit": {
                    "newText": "UINT_LEAST8_MAX",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_math.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_math.h>"
                },
                "filterText": "UNDERFLOW",
                "insertText": "UNDERFLOW",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022UNDERFLOW",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5UNDERFLOW",
                "textEdit": {
                    "newText": "UNDERFLOW",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <climits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <climits>"
                },
                "filterText": "UCHAR_MAX",
                "insertText": "UCHAR_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022UCHAR_MAX",
                "score": 0.8624388575553894,
                "sortText": "40a33735UCHAR_MAX",
                "textEdit": {
                    "newText": "UCHAR_MAX",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <climits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <climits>"
                },
                "filterText": "UINT_MAX",
                "insertText": "UINT_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022UINT_MAX",
                "score": 0.8624388575553894,
                "sortText": "40a33735UINT_MAX",
                "textEdit": {
                    "newText": "UINT_MAX",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <climits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <climits>"
                },
                "filterText": "ULLONG_MAX",
                "insertText": "ULLONG_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ULLONG_MAX",
                "score": 0.8624388575553894,
                "sortText": "40a33735ULLONG_MAX",
                "textEdit": {
                    "newText": "ULLONG_MAX",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <limits.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <limits.h>"
                },
                "filterText": "ULONG_LONG_MAX",
                "insertText": "ULONG_LONG_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ULONG_LONG_MAX",
                "score": 0.8624388575553894,
                "sortText": "40a33735ULONG_LONG_MAX",
                "textEdit": {
                    "newText": "ULONG_LONG_MAX",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <climits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <climits>"
                },
                "filterText": "ULONG_MAX",
                "insertText": "ULONG_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ULONG_MAX",
                "score": 0.8624388575553894,
                "sortText": "40a33735ULONG_MAX",
                "textEdit": {
                    "newText": "ULONG_MAX",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <climits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <climits>"
                },
                "filterText": "USHRT_MAX",
                "insertText": "USHRT_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022USHRT_MAX",
                "score": 0.8624388575553894,
                "sortText": "40a33735USHRT_MAX",
                "textEdit": {
                    "newText": "USHRT_MAX",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aunion",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aunsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using qualifier::name;",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7ausing",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using name = type;",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7ausing",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "using namespace",
                "insertText": "using namespace",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using namespace identifier;",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7ausing namespace",
                "textEdit": {
                    "newText": "using namespace",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "uint16_t",
                "insertText": "uint16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022uint16_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67uint16_t",
                "textEdit": {
                    "newText": "uint16_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "uint32_t",
                "insertText": "uint32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022uint32_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67uint32_t",
                "textEdit": {
                    "newText": "uint32_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "uint64_t",
                "insertText": "uint64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022uint64_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67uint64_t",
                "textEdit": {
                    "newText": "uint64_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "uint8_t",
                "insertText": "uint8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022uint8_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67uint8_t",
                "textEdit": {
                    "newText": "uint8_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "uint_fast16_t",
                "insertText": "uint_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022uint_fast16_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67uint_fast16_t",
                "textEdit": {
                    "newText": "uint_fast16_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "uint_fast32_t",
                "insertText": "uint_fast32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022uint_fast32_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67uint_fast32_t",
                "textEdit": {
                    "newText": "uint_fast32_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "uint_fast64_t",
                "insertText": "uint_fast64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022uint_fast64_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67uint_fast64_t",
                "textEdit": {
                    "newText": "uint_fast64_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "uint_fast8_t",
                "insertText": "uint_fast8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022uint_fast8_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67uint_fast8_t",
                "textEdit": {
                    "newText": "uint_fast8_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "uint_least16_t",
                "insertText": "uint_least16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022uint_least16_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67uint_least16_t",
                "textEdit": {
                    "newText": "uint_least16_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "uint_least32_t",
                "insertText": "uint_least32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022uint_least32_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67uint_least32_t",
                "textEdit": {
                    "newText": "uint_least32_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "uint_least64_t",
                "insertText": "uint_least64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022uint_least64_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67uint_least64_t",
                "textEdit": {
                    "newText": "uint_least64_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "uint_least8_t",
                "insertText": "uint_least8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022uint_least8_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67uint_least8_t",
                "textEdit": {
                    "newText": "uint_least8_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "uintmax_t",
                "insertText": "uintmax_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022uintmax_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67uintmax_t",
                "textEdit": {
                    "newText": "uintmax_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "uintptr_t",
                "insertText": "uintptr_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022uintptr_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67uintptr_t",
                "textEdit": {
                    "newText": "uintptr_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string>"
                },
                "filterText": "u16string",
                "insertText": "std::u16string",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::u16string",
                "score": 0.6313035488128662,
                "sortText": "40de62e4u16string",
                "textEdit": {
                    "newText": "std::u16string",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string>"
                },
                "filterText": "u32string",
                "insertText": "std::u32string",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::u32string",
                "score": 0.6313035488128662,
                "sortText": "40de62e4u32string",
                "textEdit": {
                    "newText": "std::u32string",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "unary_function",
                "insertText": "std::unary_function",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022std::unary_function<class Arg, class Result>",
                "score": 0.6313035488128662,
                "sortText": "40de62e4unary_function",
                "textEdit": {
                    "newText": "std::unary_function",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "unary_negate",
                "insertText": "std::unary_negate",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022std::unary_negate<class Fn>",
                "score": 0.6313035488128662,
                "sortText": "40de62e4unary_negate",
                "textEdit": {
                    "newText": "std::unary_negate",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "uniform_int_distribution",
                "insertText": "std::uniform_int_distribution",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022std::uniform_int_distribution<class Ty>",
                "score": 0.6313035488128662,
                "sortText": "40de62e4uniform_int_distribution",
                "textEdit": {
                    "newText": "std::uniform_int_distribution",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "uniform_real_distribution",
                "insertText": "std::uniform_real_distribution",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022std::uniform_real_distribution<class Ty>",
                "score": 0.6313035488128662,
                "sortText": "40de62e4uniform_real_distribution",
                "textEdit": {
                    "newText": "std::uniform_real_distribution",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "unique_lock",
                "insertText": "std::unique_lock",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022std::unique_lock<class Mutex>",
                "score": 0.6313035488128662,
                "sortText": "40de62e4unique_lock",
                "textEdit": {
                    "newText": "std::unique_lock",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "unique_ptr",
                "insertText": "std::unique_ptr",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022std::unique_ptr<class Ty, class Dx>",
                "score": 0.6313035488128662,
                "sortText": "40de62e4unique_ptr",
                "textEdit": {
                    "newText": "std::unique_ptr",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <unordered_set>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <unordered_set>"
                },
                "filterText": "unordered_multiset",
                "insertText": "std::unordered_multiset",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022std::unordered_multiset<class Kty, class Hasher, class Keyeq, class Alloc>",
                "score": 0.6313035488128662,
                "sortText": "40de62e4unordered_multiset",
                "textEdit": {
                    "newText": "std::unordered_multiset",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <unordered_set>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <unordered_set>"
                },
                "filterText": "unordered_set",
                "insertText": "std::unordered_set",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022std::unordered_set<class Kty, class Hasher, class Keyeq, class Alloc>",
                "score": 0.6313035488128662,
                "sortText": "40de62e4unordered_set",
                "textEdit": {
                    "newText": "std::unordered_set",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "uses_allocator",
                "insertText": "std::uses_allocator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022std::uses_allocator<class Ty, class Alloc>",
                "score": 0.6313035488128662,
                "sortText": "40de62e4uses_allocator",
                "textEdit": {
                    "newText": "std::uses_allocator",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "unchecked_array_iterator",
                "insertText": "stdext::unchecked_array_iterator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022stdext::unchecked_array_iterator<class Ptr>",
                "score": 0.5165227055549622,
                "sortText": "40fbc52bunchecked_array_iterator",
                "textEdit": {
                    "newText": "stdext::unchecked_array_iterator",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "uniform_int",
                "insertText": "std::uniform_int",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022std::uniform_int<class Ty>",
                "score": 0.5165227055549622,
                "sortText": "40fbc52buniform_int",
                "textEdit": {
                    "newText": "std::uniform_int",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "uniform_real",
                "insertText": "std::uniform_real",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022std::uniform_real<class Ty>",
                "score": 0.5165227055549622,
                "sortText": "40fbc52buniform_real",
                "textEdit": {
                    "newText": "std::uniform_real",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Ty *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "undeclare_reachable",
                "insertText": "std::undeclare_reachable",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::undeclare_reachable(Ty *Ptr)",
                "score": 0.39251017570495605,
                "sortText": "413708e8undeclare_reachable",
                "textEdit": {
                    "newText": "std::undeclare_reachable",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "NoThrowFwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "uninitialized_copy",
                "insertText": "std::uninitialized_copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::uninitialized_copy(const InIt First, const InIt Last, NoThrowFwdIt Dest)",
                "score": 0.39251017570495605,
                "sortText": "413708e8uninitialized_copy",
                "textEdit": {
                    "newText": "std::uninitialized_copy",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "NoThrowFwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "uninitialized_copy_n",
                "insertText": "std::uninitialized_copy_n",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::uninitialized_copy_n(const InIt First, const Diff Count_raw, NoThrowFwdIt Dest)",
                "score": 0.39251017570495605,
                "sortText": "413708e8uninitialized_copy_n",
                "textEdit": {
                    "newText": "std::uninitialized_copy_n",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "NoThrowFwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "uninitialized_fill_n",
                "insertText": "std::uninitialized_fill_n",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::uninitialized_fill_n(NoThrowFwdIt First, const Diff Count_raw, const Tval &Val)",
                "score": 0.39251017570495605,
                "sortText": "413708e8uninitialized_fill_n",
                "textEdit": {
                    "newText": "std::uninitialized_fill_n",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "unique",
                "insertText": "std::unique",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::unique(FwdIt First, FwdIt Last)",
                "score": 0.39251017570495605,
                "sortText": "413708e8unique",
                "textEdit": {
                    "newText": "std::unique",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "unique",
                "insertText": "std::unique",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::unique(FwdIt First, FwdIt Last, Pr Pred)",
                "score": 0.39251017570495605,
                "sortText": "413708e8unique",
                "textEdit": {
                    "newText": "std::unique",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "unique_copy",
                "insertText": "std::unique_copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::unique_copy(InIt First, InIt Last, OutIt Dest, Pr Pred)",
                "score": 0.39251017570495605,
                "sortText": "413708e8unique_copy",
                "textEdit": {
                    "newText": "std::unique_copy",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "unique_copy",
                "insertText": "std::unique_copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::unique_copy(InIt First, InIt Last, OutIt Dest)",
                "score": 0.39251017570495605,
                "sortText": "413708e8unique_copy",
                "textEdit": {
                    "newText": "std::unique_copy",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "upper_bound",
                "insertText": "std::upper_bound",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::upper_bound(FwdIt First, FwdIt Last, const Ty &Val, Pr Pred)",
                "score": 0.39251017570495605,
                "sortText": "413708e8upper_bound",
                "textEdit": {
                    "newText": "std::upper_bound",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "upper_bound",
                "insertText": "std::upper_bound",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::upper_bound(FwdIt First, FwdIt Last, const Ty &Val)",
                "score": 0.39251017570495605,
                "sortText": "413708e8upper_bound",
                "textEdit": {
                    "newText": "std::upper_bound",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "const Facet &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "use_facet",
                "insertText": "std::use_facet",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::use_facet<class Facet>(const locale &)",
                "score": 0.39251017570495605,
                "sortText": "413708e8use_facet",
                "textEdit": {
                    "newText": "std::use_facet",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "uncaught_exception",
                "insertText": "std::uncaught_exception",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::uncaught_exception()",
                "score": 0.31071850657463074,
                "sortText": "4160e981uncaught_exception",
                "textEdit": {
                    "newText": "std::uncaught_exception",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "uncaught_exceptions",
                "insertText": "std::uncaught_exceptions",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::uncaught_exceptions()",
                "score": 0.31071850657463074,
                "sortText": "4160e981uncaught_exceptions",
                "textEdit": {
                    "newText": "std::uncaught_exceptions",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "undeclare_no_pointers",
                "insertText": "std::undeclare_no_pointers",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::undeclare_no_pointers(char *, size_t)",
                "score": 0.31071850657463074,
                "sortText": "4160e981undeclare_no_pointers",
                "textEdit": {
                    "newText": "std::undeclare_no_pointers",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "uninitialized_fill",
                "insertText": "std::uninitialized_fill",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::uninitialized_fill(const NoThrowFwdIt First, const NoThrowFwdIt Last, const Tval &Val)",
                "score": 0.31071850657463074,
                "sortText": "4160e981uninitialized_fill",
                "textEdit": {
                    "newText": "std::uninitialized_fill",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "ungetc",
                "insertText": "ungetc",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ungetc(int Character, FILE *Stream)",
                "score": 0.27191126346588135,
                "sortText": "4174c80cungetc",
                "textEdit": {
                    "newText": "ungetc",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "ctype_base::(unnamed)",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "upper",
                "insertText": "std::ctype_base::upper",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022std::ctype_base::upper",
                "score": 0.2606603801250458,
                "sortText": "417a8ab9upper",
                "textEdit": {
                    "newText": "std::ctype_base::upper",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "uses_allocator_v",
                "insertText": "std::uses_allocator_v",
                "insertTextFormat": 1,
                "kind": 6,
                "label": "\u2022std::uses_allocator_v<class Ty, class Alloc>",
                "score": 0.2606603801250458,
                "sortText": "417a8ab9uses_allocator_v",
                "textEdit": {
                    "newText": "std::uses_allocator_v",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "uint32_t",
                "insertText": "std::uint32_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::uint32_t",
                "score": 0.23050224781036377,
                "sortText": "4193f738uint32_t",
                "textEdit": {
                    "newText": "std::uint32_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "uint8_t",
                "insertText": "std::uint8_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::uint8_t",
                "score": 0.23050224781036377,
                "sortText": "4193f738uint8_t",
                "textEdit": {
                    "newText": "std::uint8_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "uint_fast16_t",
                "insertText": "std::uint_fast16_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::uint_fast16_t",
                "score": 0.23050224781036377,
                "sortText": "4193f738uint_fast16_t",
                "textEdit": {
                    "newText": "std::uint_fast16_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "uint_fast16_t",
                "insertText": "std::tr1::uint_fast16_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::tr1::uint_fast16_t",
                "score": 0.23050224781036377,
                "sortText": "4193f738uint_fast16_t",
                "textEdit": {
                    "newText": "std::tr1::uint_fast16_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "uint_fast32_t",
                "insertText": "std::tr1::uint_fast32_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::tr1::uint_fast32_t",
                "score": 0.23050224781036377,
                "sortText": "4193f738uint_fast32_t",
                "textEdit": {
                    "newText": "std::tr1::uint_fast32_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "uint_fast64_t",
                "insertText": "std::tr1::uint_fast64_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::tr1::uint_fast64_t",
                "score": 0.23050224781036377,
                "sortText": "4193f738uint_fast64_t",
                "textEdit": {
                    "newText": "std::tr1::uint_fast64_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "uint_fast64_t",
                "insertText": "std::uint_fast64_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::uint_fast64_t",
                "score": 0.23050224781036377,
                "sortText": "4193f738uint_fast64_t",
                "textEdit": {
                    "newText": "std::uint_fast64_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "uint_fast8_t",
                "insertText": "std::tr1::uint_fast8_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::tr1::uint_fast8_t",
                "score": 0.23050224781036377,
                "sortText": "4193f738uint_fast8_t",
                "textEdit": {
                    "newText": "std::tr1::uint_fast8_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "uint_least16_t",
                "insertText": "std::uint_least16_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::uint_least16_t",
                "score": 0.23050224781036377,
                "sortText": "4193f738uint_least16_t",
                "textEdit": {
                    "newText": "std::uint_least16_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "uint_least32_t",
                "insertText": "std::tr1::uint_least32_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::tr1::uint_least32_t",
                "score": 0.23050224781036377,
                "sortText": "4193f738uint_least32_t",
                "textEdit": {
                    "newText": "std::tr1::uint_least32_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "uint_least32_t",
                "insertText": "std::uint_least32_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::uint_least32_t",
                "score": 0.23050224781036377,
                "sortText": "4193f738uint_least32_t",
                "textEdit": {
                    "newText": "std::uint_least32_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "uint_least64_t",
                "insertText": "std::uint_least64_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::uint_least64_t",
                "score": 0.23050224781036377,
                "sortText": "4193f738uint_least64_t",
                "textEdit": {
                    "newText": "std::uint_least64_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "uint_least8_t",
                "insertText": "std::tr1::uint_least8_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::tr1::uint_least8_t",
                "score": 0.23050224781036377,
                "sortText": "4193f738uint_least8_t",
                "textEdit": {
                    "newText": "std::tr1::uint_least8_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "uint_least8_t",
                "insertText": "std::uint_least8_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::uint_least8_t",
                "score": 0.23050224781036377,
                "sortText": "4193f738uint_least8_t",
                "textEdit": {
                    "newText": "std::uint_least8_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "uintmax_t",
                "insertText": "std::tr1::uintmax_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::tr1::uintmax_t",
                "score": 0.23050224781036377,
                "sortText": "4193f738uintmax_t",
                "textEdit": {
                    "newText": "std::tr1::uintmax_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "uintmax_t",
                "insertText": "std::uintmax_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::uintmax_t",
                "score": 0.23050224781036377,
                "sortText": "4193f738uintmax_t",
                "textEdit": {
                    "newText": "std::uintmax_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "uintptr_t",
                "insertText": "std::uintptr_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::uintptr_t",
                "score": 0.23050224781036377,
                "sortText": "4193f738uintptr_t",
                "textEdit": {
                    "newText": "std::uintptr_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "uintptr_t",
                "insertText": "std::tr1::uintptr_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::tr1::uintptr_t",
                "score": 0.23050224781036377,
                "sortText": "4193f738uintptr_t",
                "textEdit": {
                    "newText": "std::tr1::uintptr_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <expected>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <expected>"
                },
                "filterText": "unexpected",
                "insertText": "std::unexpected",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::unexpected",
                "score": 0.23050224781036377,
                "sortText": "4193f738unexpected",
                "textEdit": {
                    "newText": "std::unexpected",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "unexpected_handler",
                "insertText": "std::unexpected_handler",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::unexpected_handler",
                "score": 0.23050224781036377,
                "sortText": "4193f738unexpected_handler",
                "textEdit": {
                    "newText": "std::unexpected_handler",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "uniform_int",
                "insertText": "std::tr1::uniform_int",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::tr1::uniform_int",
                "score": 0.23050224781036377,
                "sortText": "4193f738uniform_int",
                "textEdit": {
                    "newText": "std::tr1::uniform_int",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "uniform_int_distribution",
                "insertText": "std::tr1::uniform_int_distribution",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::tr1::uniform_int_distribution",
                "score": 0.23050224781036377,
                "sortText": "4193f738uniform_int_distribution",
                "textEdit": {
                    "newText": "std::tr1::uniform_int_distribution",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "uniform_real",
                "insertText": "std::tr1::uniform_real",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::tr1::uniform_real",
                "score": 0.23050224781036377,
                "sortText": "4193f738uniform_real",
                "textEdit": {
                    "newText": "std::tr1::uniform_real",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['UINT16_C', 'UINT16_MAX', 'UINT32_C', 'UINT32_MAX', 'UINT64_C', 'UINT64_MAX', 'UINT8_C', 'UINT8_MAX', 'UINTMAX_C', 'UINTMAX_MAX', 'UINTPTR_MAX', 'UINT_FAST16_MAX', 'UINT_FAST32_MAX', 'UINT_FAST64_MAX', 'UINT_FAST8_MAX', 'UINT_LEAST16_MAX', 'UINT_LEAST32_MAX', 'UINT_LEAST64_MAX', 'UINT_LEAST8_MAX', 'UNDERFLOW', 'UCHAR_MAX', 'UINT_MAX', 'ULLONG_MAX', 'ULONG_LONG_MAX', 'ULONG_MAX', 'USHRT_MAX', 'union', 'unsigned', 'using', 'using', 'using namespace', 'uint16_t', 'uint32_t', 'uint64_t', 'uint8_t', 'uint_fast16_t', 'uint_fast32_t', 'uint_fast64_t', 'uint_fast8_t', 'uint_least16_t', 'uint_least32_t', 'uint_least64_t', 'uint_least8_t', 'uintmax_t', 'uintptr_t', 'std::u16string', 'std::u32string', 'std::unary_function', 'std::unary_negate', 'std::uniform_int_distribution', 'std::uniform_real_distribution', 'std::unique_lock', 'std::unique_ptr', 'std::unordered_multiset', 'std::unordered_set', 'std::uses_allocator', 'stdext::unchecked_array_iterator', 'std::uniform_int', 'std::uniform_real', 'std::undeclare_reachable', 'std::uninitialized_copy', 'std::uninitialized_copy_n', 'std::uninitialized_fill_n', 'std::unique', 'std::unique', 'std::unique_copy', 'std::unique_copy', 'std::upper_bound', 'std::upper_bound', 'std::use_facet', 'std::uncaught_exception', 'std::uncaught_exceptions', 'std::undeclare_no_pointers', 'std::uninitialized_fill', 'ungetc', 'std::ctype_base::upper', 'std::uses_allocator_v', 'std::uint32_t', 'std::uint8_t', 'std::uint_fast16_t', 'std::tr1::uint_fast16_t', 'std::tr1::uint_fast32_t', 'std::tr1::uint_fast64_t', 'std::uint_fast64_t', 'std::tr1::uint_fast8_t', 'std::uint_least16_t', 'std::tr1::uint_least32_t', 'std::uint_least32_t', 'std::uint_least64_t', 'std::tr1::uint_least8_t', 'std::uint_least8_t', 'std::tr1::uintmax_t', 'std::uintmax_t', 'std::uintptr_t', 'std::tr1::uintptr_t', 'std::unexpected', 'std::unexpected_handler', 'std::tr1::uniform_int', 'std::tr1::uniform_int_distribution', 'std::tr1::uniform_real']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'u'",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 2
                    },
                    "start": {
                        "character": 0,
                        "line": 2
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 2
                    },
                    "start": {
                        "character": 1,
                        "line": 2
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 32
    }
}
Diagnostics received from LSP.
Errors received: [[2, [0, 1]], [2, [1, 1]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'u'",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 2
                    },
                    "start": {
                        "character": 0,
                        "line": 2
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 2
                    },
                    "start": {
                        "character": 1,
                        "line": 2
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 32
    }
}
Diagnostics received from LSP.
Errors received: [[2, [0, 1]], [2, [1, 1]]]
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using qualifier::name;",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7ausing",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using name = type;",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7ausing",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "using namespace",
                "insertText": "using namespace",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using namespace identifier;",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7ausing namespace",
                "textEdit": {
                    "newText": "using namespace",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <climits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <climits>"
                },
                "filterText": "USHRT_MAX",
                "insertText": "USHRT_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022USHRT_MAX",
                "score": 0.8624388575553894,
                "sortText": "40bed04eUSHRT_MAX",
                "textEdit": {
                    "newText": "USHRT_MAX",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "uses_allocator",
                "insertText": "std::uses_allocator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022std::uses_allocator<class Ty, class Alloc>",
                "score": 0.6313035488128662,
                "sortText": "40de62e4uses_allocator",
                "textEdit": {
                    "newText": "std::uses_allocator",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <unordered_set>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <unordered_set>"
                },
                "filterText": "unordered_set",
                "insertText": "std::unordered_set",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022std::unordered_set<class Kty, class Hasher, class Keyeq, class Alloc>",
                "score": 0.6313035488128662,
                "sortText": "410d9456unordered_set",
                "textEdit": {
                    "newText": "std::unordered_set",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "const Facet &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "use_facet",
                "insertText": "std::use_facet",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::use_facet<class Facet>(const locale &)",
                "score": 0.39251017570495605,
                "sortText": "413708e8use_facet",
                "textEdit": {
                    "newText": "std::use_facet",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "uses_allocator_v",
                "insertText": "std::uses_allocator_v",
                "insertTextFormat": 1,
                "kind": 6,
                "label": "\u2022std::uses_allocator_v<class Ty, class Alloc>",
                "score": 0.2606603801250458,
                "sortText": "417a8ab9uses_allocator_v",
                "textEdit": {
                    "newText": "std::uses_allocator_v",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ushort",
                "insertText": "std::atomic_ushort",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::atomic_ushort",
                "score": 0.6313035488128662,
                "sortText": "418d9456atomic_ushort",
                "textEdit": {
                    "newText": "std::atomic_ushort",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ushort",
                "insertText": "atomic_ushort",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ushort",
                "score": 0.6269034147262573,
                "sortText": "418f44e3atomic_ushort",
                "textEdit": {
                    "newText": "atomic_ushort",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <unordered_set>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <unordered_set>"
                },
                "filterText": "unordered_set",
                "insertText": "std::tr1::unordered_set",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::tr1::unordered_set",
                "score": 0.23050224781036377,
                "sortText": "41cef96aunordered_set",
                "textEdit": {
                    "newText": "std::tr1::unordered_set",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <chrono>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "::std::chrono::duration<double, micro>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <chrono>"
                },
                "filterText": "operator\"\"us",
                "insertText": "std::operator\"\"us",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::operator\"\"us(long double Val)",
                "score": 0.31071850657463074,
                "sortText": "42115e42operator\"\"us",
                "textEdit": {
                    "newText": "std::operator\"\"us",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <chrono>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "::std::chrono::microseconds",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <chrono>"
                },
                "filterText": "operator\"\"us",
                "insertText": "std::operator\"\"us",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::operator\"\"us(unsigned long long Val)",
                "score": 0.31071850657463074,
                "sortText": "42115e42operator\"\"us",
                "textEdit": {
                    "newText": "std::operator\"\"us",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "unsigned short",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_byteswap_ushort",
                "insertText": "_byteswap_ushort",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_byteswap_ushort(unsigned short Number)",
                "score": 0.27191126346588135,
                "sortText": "4274c80c_byteswap_ushort",
                "textEdit": {
                    "newText": "_byteswap_ushort",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_ui64toa_s",
                "insertText": "_ui64toa_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_ui64toa_s(unsigned long long Value, char *Buffer, size_t BufferCount, int Radix)",
                "score": 0.27191126346588135,
                "sortText": "42f4c80c_ui64toa_s",
                "textEdit": {
                    "newText": "_ui64toa_s",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstdlib.h>"
                },
                "filterText": "_ui64tow_s",
                "insertText": "_ui64tow_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_ui64tow_s(unsigned long long Value, wchar_t *Buffer, size_t BufferCount, int Radix)",
                "score": 0.27191126346588135,
                "sortText": "42f4c80c_ui64tow_s",
                "textEdit": {
                    "newText": "_ui64tow_s",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_ultoa_s",
                "insertText": "_ultoa_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_ultoa_s(unsigned long Value, char *Buffer, size_t BufferCount, int Radix)",
                "score": 0.27191126346588135,
                "sortText": "42f4c80c_ultoa_s",
                "textEdit": {
                    "newText": "_ultoa_s",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_ultoa_s",
                "insertText": "_ultoa_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_ultoa_s(unsigned long Value, char (&Buffer)[Size], int Radix)",
                "score": 0.27191126346588135,
                "sortText": "42f4c80c_ultoa_s",
                "textEdit": {
                    "newText": "_ultoa_s",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstdlib.h>"
                },
                "filterText": "_ultow_s",
                "insertText": "_ultow_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_ultow_s(unsigned long Value, wchar_t (&Buffer)[Size], int Radix)",
                "score": 0.27191126346588135,
                "sortText": "42f4c80c_ultow_s",
                "textEdit": {
                    "newText": "_ultow_s",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstdlib.h>"
                },
                "filterText": "_ultow_s",
                "insertText": "_ultow_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_ultow_s(unsigned long Value, wchar_t *Buffer, size_t BufferCount, int Radix)",
                "score": 0.27191126346588135,
                "sortText": "42f4c80c_ultow_s",
                "textEdit": {
                    "newText": "_ultow_s",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 2
                        },
                        "start": {
                            "character": 0,
                            "line": 2
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['using', 'using', 'using namespace', 'USHRT_MAX', 'std::uses_allocator', 'std::unordered_set', 'std::use_facet', 'std::uses_allocator_v', 'std::atomic_ushort', 'atomic_ushort', 'std::tr1::unordered_set', 'std::operator""us', 'std::operator""us', '_byteswap_ushort', '_ui64toa_s', '_ui64tow_s', '_ultoa_s', '_ultoa_s', '_ultow_s', '_ultow_s']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'us'",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 2
                    },
                    "start": {
                        "character": 0,
                        "line": 2
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 2
                    },
                    "start": {
                        "character": 2,
                        "line": 2
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 33
    }
}
Diagnostics received from LSP.
Errors received: [[2, [0, 2]], [2, [2, 2]]]
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": null
}
Received hover response.
Hover response does not contain 'contents'.
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'us'",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 2
                    },
                    "start": {
                        "character": 0,
                        "line": 2
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 2
                    },
                    "start": {
                        "character": 2,
                        "line": 2
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 33
    }
}
Diagnostics received from LSP.
Errors received: [[2, [0, 2]], [2, [2, 2]]]
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'us'",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 2
                    },
                    "start": {
                        "character": 0,
                        "line": 2
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 2
                    },
                    "start": {
                        "character": 2,
                        "line": 2
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 33
    }
}
Diagnostics received from LSP.
Errors received: [[2, [0, 2]], [2, [2, 2]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'usi'",
                "range": {
                    "end": {
                        "character": 3,
                        "line": 2
                    },
                    "start": {
                        "character": 0,
                        "line": 2
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 3,
                        "line": 2
                    },
                    "start": {
                        "character": 3,
                        "line": 2
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 34
    }
}
Diagnostics received from LSP.
Errors received: [[2, [0, 3]], [2, [3, 3]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_namespace_name",
                "message": "Expected namespace name",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 2
                    },
                    "start": {
                        "character": 15,
                        "line": 2
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 35
    }
}
Diagnostics received from LSP.
Errors received: [[2, [15, 15]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR32_T_LOCK_FREE",
                "score": 0.6627365350723267,
                "sortText": "40d656e6ATOMIC_CHAR32_T_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR32_T_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "equal_to",
                "insertText": "std::equal_to",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022std::equal_to<class Ty>",
                "score": 0.5417693853378296,
                "sortText": "40f54e9aequal_to",
                "textEdit": {
                    "newText": "std::equal_to",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "greater",
                "insertText": "std::greater",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022std::greater<class Ty>",
                "score": 0.5417693853378296,
                "sortText": "40f54e9agreater",
                "textEdit": {
                    "newText": "std::greater",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "greater_equal",
                "insertText": "std::greater_equal",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022std::greater_equal<class Ty>",
                "score": 0.5417693853378296,
                "sortText": "40f54e9agreater_equal",
                "textEdit": {
                    "newText": "std::greater_equal",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "iterator",
                "insertText": "std::iterator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022std::iterator<class Category, class Ty, class Diff, class Pointer, class Reference>",
                "score": 0.5417693853378296,
                "sortText": "40f54e9aiterator",
                "textEdit": {
                    "newText": "std::iterator",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "less_equal",
                "insertText": "std::less_equal",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022std::less_equal<class Ty>",
                "score": 0.5417693853378296,
                "sortText": "40f54e9aless_equal",
                "textEdit": {
                    "newText": "std::less_equal",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "minus",
                "insertText": "std::minus",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022std::minus<class Ty>",
                "score": 0.5417693853378296,
                "sortText": "40f54e9aminus",
                "textEdit": {
                    "newText": "std::minus",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "move_iterator",
                "insertText": "std::move_iterator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022std::move_iterator<class Iter>",
                "score": 0.5417693853378296,
                "sortText": "40f54e9amove_iterator",
                "textEdit": {
                    "newText": "std::move_iterator",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "multiplies",
                "insertText": "std::multiplies",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022std::multiplies<class Ty>",
                "score": 0.5417693853378296,
                "sortText": "40f54e9amultiplies",
                "textEdit": {
                    "newText": "std::multiplies",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "not_equal_to",
                "insertText": "std::not_equal_to",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022std::not_equal_to<class Ty>",
                "score": 0.5417693853378296,
                "sortText": "40f54e9anot_equal_to",
                "textEdit": {
                    "newText": "std::not_equal_to",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "plus",
                "insertText": "std::plus",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022std::plus<class Ty>",
                "score": 0.5417693853378296,
                "sortText": "40f54e9aplus",
                "textEdit": {
                    "newText": "std::plus",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "pointer_traits",
                "insertText": "std::pointer_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022std::pointer_traits<class Ty>",
                "score": 0.5417693853378296,
                "sortText": "40f54e9apointer_traits",
                "textEdit": {
                    "newText": "std::pointer_traits",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "reverse_iterator",
                "insertText": "std::reverse_iterator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022std::reverse_iterator<class BidIt>",
                "score": 0.5417693853378296,
                "sortText": "40f54e9areverse_iterator",
                "textEdit": {
                    "newText": "std::reverse_iterator",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_sub",
                "insertText": "std::atomic_fetch_sub",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::atomic_fetch_sub(atomic<Ty> *Mem, const typename atomic<Ty>::difference_type Value)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9atomic_fetch_sub",
                "textEdit": {
                    "newText": "std::atomic_fetch_sub",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Ty *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "begin",
                "insertText": "std::begin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::begin(Ty (&Array)[Size])",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9begin",
                "textEdit": {
                    "newText": "std::begin",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.begin())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "begin",
                "insertText": "std::begin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::begin(Container &Cont)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9begin",
                "textEdit": {
                    "newText": "std::begin",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.begin())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "begin",
                "insertText": "std::begin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::begin(const Container &Cont)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9begin",
                "textEdit": {
                    "newText": "std::begin",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::begin(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "cbegin",
                "insertText": "std::cbegin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::cbegin(const Container &Cont)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9cbegin",
                "textEdit": {
                    "newText": "std::cbegin",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::end(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "cend",
                "insertText": "std::cend",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::cend(const Container &Cont)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9cend",
                "textEdit": {
                    "newText": "std::cend",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy",
                "insertText": "std::copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::copy(InIt First, InIt Last, OutIt Dest)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9copy",
                "textEdit": {
                    "newText": "std::copy",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "BidIt2",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_backward",
                "insertText": "std::copy_backward",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::copy_backward(BidIt1 First, BidIt1 Last, BidIt2 Dest)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9copy_backward",
                "textEdit": {
                    "newText": "std::copy_backward",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_n",
                "insertText": "std::copy_n",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::copy_n(InIt First, Diff Count_raw, OutIt Dest)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9copy_n",
                "textEdit": {
                    "newText": "std::copy_n",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count",
                "insertText": "std::count",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::count(const InIt First, const InIt Last, const Ty &Val)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9count",
                "textEdit": {
                    "newText": "std::count",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::rbegin(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "crbegin",
                "insertText": "std::crbegin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::crbegin(const Container &Cont)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9crbegin",
                "textEdit": {
                    "newText": "std::crbegin",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::rend(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "crend",
                "insertText": "std::crend",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::crend(const Container &Cont)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9crend",
                "textEdit": {
                    "newText": "std::crend",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Ty *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "data",
                "insertText": "std::data",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::data(Ty (&Array)[Size])",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9data",
                "textEdit": {
                    "newText": "std::data",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "const Elem *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "data",
                "insertText": "std::data",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::data(initializer_list<Elem> Ilist)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9data",
                "textEdit": {
                    "newText": "std::data",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.data())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "data",
                "insertText": "std::data",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::data(Container &Cont)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9data",
                "textEdit": {
                    "newText": "std::data",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.data())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "data",
                "insertText": "std::data",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::data(const Container &Cont)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9data",
                "textEdit": {
                    "newText": "std::data",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "distance",
                "insertText": "std::distance",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::distance(InIt First, InIt Last)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9distance",
                "textEdit": {
                    "newText": "std::distance",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.empty())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "empty",
                "insertText": "std::empty",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::empty(const Container &Cont)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9empty",
                "textEdit": {
                    "newText": "std::empty",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.end())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "end",
                "insertText": "std::end",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::end(Container &Cont)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9end",
                "textEdit": {
                    "newText": "std::end",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Ty *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "end",
                "insertText": "std::end",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::end(Ty (&Array)[Size])",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9end",
                "textEdit": {
                    "newText": "std::end",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.end())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "end",
                "insertText": "std::end",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::end(const Container &Cont)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9end",
                "textEdit": {
                    "newText": "std::end",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "fill_n",
                "insertText": "std::fill_n",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::fill_n(OutIt Dest, const Diff Count_raw, const Ty &Val)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9fill_n",
                "textEdit": {
                    "newText": "std::fill_n",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "InIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "find",
                "insertText": "std::find",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::find(InIt First, const InIt Last, const Ty &Val)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9find",
                "textEdit": {
                    "newText": "std::find",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "InIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "find_if",
                "insertText": "std::find_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::find_if(InIt First, const InIt Last, Pr Pred)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9find_if",
                "textEdit": {
                    "newText": "std::find_if",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "lower_bound",
                "insertText": "std::lower_bound",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::lower_bound(FwdIt First, const FwdIt Last, const Ty &Val, Pr Pred)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9lower_bound",
                "textEdit": {
                    "newText": "std::lower_bound",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "lower_bound",
                "insertText": "std::lower_bound",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::lower_bound(FwdIt First, FwdIt Last, const Ty &Val)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9lower_bound",
                "textEdit": {
                    "newText": "std::lower_bound",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "move_iterator<Iter>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "make_move_iterator",
                "insertText": "std::make_move_iterator",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::make_move_iterator(Iter It)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9make_move_iterator",
                "textEdit": {
                    "newText": "std::make_move_iterator",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "reverse_iterator<BidIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "make_reverse_iterator",
                "insertText": "std::make_reverse_iterator",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::make_reverse_iterator(BidIt Iter)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9make_reverse_iterator",
                "textEdit": {
                    "newText": "std::make_reverse_iterator",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "max",
                "insertText": "std::max",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::max(initializer_list<Ty>, Pr)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9max",
                "textEdit": {
                    "newText": "std::max",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "max",
                "insertText": "std::max",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::max(initializer_list<Ty>)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9max",
                "textEdit": {
                    "newText": "std::max",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "max_element",
                "insertText": "std::max_element",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::max_element(FwdIt First, FwdIt Last, Pr Pred)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9max_element",
                "textEdit": {
                    "newText": "std::max_element",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "max_element",
                "insertText": "std::max_element",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::max_element(FwdIt First, FwdIt Last)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9max_element",
                "textEdit": {
                    "newText": "std::max_element",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "min",
                "insertText": "std::min",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::min(initializer_list<Ty>, Pr)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9min",
                "textEdit": {
                    "newText": "std::min",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "min",
                "insertText": "std::min",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::min(initializer_list<Ty>)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9min",
                "textEdit": {
                    "newText": "std::min",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "min_element",
                "insertText": "std::min_element",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::min_element(FwdIt First, FwdIt Last, Pr Pred)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9min_element",
                "textEdit": {
                    "newText": "std::min_element",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "min_element",
                "insertText": "std::min_element",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::min_element(FwdIt First, FwdIt Last)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9min_element",
                "textEdit": {
                    "newText": "std::min_element",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "move",
                "insertText": "std::move",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::move(InIt First, InIt Last, OutIt Dest)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9move",
                "textEdit": {
                    "newText": "std::move",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "BidIt2",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "move_backward",
                "insertText": "std::move_backward",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::move_backward(BidIt1 First, BidIt1 Last, BidIt2 Dest)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9move_backward",
                "textEdit": {
                    "newText": "std::move_backward",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "InIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "next",
                "insertText": "std::next",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::next(InIt First, typename iterator_traits<InIt>::difference_type Off = 1)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9next",
                "textEdit": {
                    "newText": "std::next",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "move_iterator<Iter>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator+",
                "insertText": "std::operator+",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::operator+(typename move_iterator<Iter>::difference_type Off, const move_iterator<Iter> &Right)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9operator+",
                "textEdit": {
                    "newText": "std::operator+",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "reverse_iterator<BidIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator+",
                "insertText": "std::operator+",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::operator+(typename reverse_iterator<BidIt>::difference_type Off, const reverse_iterator<BidIt> &Right)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9operator+",
                "textEdit": {
                    "newText": "std::operator+",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Left.base() - Right.base())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator-",
                "insertText": "std::operator-",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::operator-(const move_iterator<Iter1> &Left, const move_iterator<Iter2> &Right)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9operator-",
                "textEdit": {
                    "newText": "std::operator-",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Right._Get_current() - Left._Get_current())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator-",
                "insertText": "std::operator-",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::operator-(const reverse_iterator<BidIt1> &Left, const reverse_iterator<BidIt2> &Right)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9operator-",
                "textEdit": {
                    "newText": "std::operator-",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "BidIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "prev",
                "insertText": "std::prev",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::prev(BidIt First, typename iterator_traits<BidIt>::difference_type Off = 1)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9prev",
                "textEdit": {
                    "newText": "std::prev",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "reverse_iterator<Ty *>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "rbegin",
                "insertText": "std::rbegin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::rbegin(Ty (&Array)[Size])",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9rbegin",
                "textEdit": {
                    "newText": "std::rbegin",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "reverse_iterator<const Elem *>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "rbegin",
                "insertText": "std::rbegin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::rbegin(initializer_list<Elem> Ilist)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9rbegin",
                "textEdit": {
                    "newText": "std::rbegin",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.rbegin())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "rbegin",
                "insertText": "std::rbegin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::rbegin(const Container &Cont)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9rbegin",
                "textEdit": {
                    "newText": "std::rbegin",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.rbegin())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "rbegin",
                "insertText": "std::rbegin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::rbegin(Container &Cont)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9rbegin",
                "textEdit": {
                    "newText": "std::rbegin",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.rend())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "rend",
                "insertText": "std::rend",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::rend(const Container &Cont)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9rend",
                "textEdit": {
                    "newText": "std::rend",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "reverse_iterator<const Elem *>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "rend",
                "insertText": "std::rend",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::rend(initializer_list<Elem> Ilist)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9rend",
                "textEdit": {
                    "newText": "std::rend",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "reverse_iterator<Ty *>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "rend",
                "insertText": "std::rend",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::rend(Ty (&Array)[Size])",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9rend",
                "textEdit": {
                    "newText": "std::rend",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.rend())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "rend",
                "insertText": "std::rend",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::rend(Container &Cont)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9rend",
                "textEdit": {
                    "newText": "std::rend",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "rotate",
                "insertText": "std::rotate",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::rotate(FwdIt First, FwdIt Mid, FwdIt Last)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9rotate",
                "textEdit": {
                    "newText": "std::rotate",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.size())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "size",
                "insertText": "std::size",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::size(const Container &Cont)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9size",
                "textEdit": {
                    "newText": "std::size",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "upper_bound",
                "insertText": "std::upper_bound",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::upper_bound(FwdIt First, FwdIt Last, const Ty &Val, Pr Pred)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9upper_bound",
                "textEdit": {
                    "newText": "std::upper_bound",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "upper_bound",
                "insertText": "std::upper_bound",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::upper_bound(FwdIt First, FwdIt Last, const Ty &Val)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9upper_bound",
                "textEdit": {
                    "newText": "std::upper_bound",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>\nfrom <iterator>"
                },
                "filterText": "advance",
                "insertText": "std::advance",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::advance(InIt &Where, Diff Off)",
                "score": 0.38679999113082886,
                "sortText": "4139f55aadvance",
                "textEdit": {
                    "newText": "std::advance",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "empty",
                "insertText": "std::empty",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::empty(initializer_list<Elem> Ilist)",
                "score": 0.38679999113082886,
                "sortText": "4139f55aempty",
                "textEdit": {
                    "newText": "std::empty",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "empty",
                "insertText": "std::empty",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::empty(const Ty (&)[Size])",
                "score": 0.38679999113082886,
                "sortText": "4139f55aempty",
                "textEdit": {
                    "newText": "std::empty",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "equal",
                "insertText": "std::equal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::equal(const InIt1 First1, const InIt1 Last1, const InIt2 First2, const InIt2 Last2)",
                "score": 0.38679999113082886,
                "sortText": "4139f55aequal",
                "textEdit": {
                    "newText": "std::equal",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "equal",
                "insertText": "std::equal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::equal(const InIt1 First1, const InIt1 Last1, const InIt2 First2)",
                "score": 0.38679999113082886,
                "sortText": "4139f55aequal",
                "textEdit": {
                    "newText": "std::equal",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "equal",
                "insertText": "std::equal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::equal(const InIt1 First1, const InIt1 Last1, const InIt2 First2, Pr Pred)",
                "score": 0.38679999113082886,
                "sortText": "4139f55aequal",
                "textEdit": {
                    "newText": "std::equal",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "equal",
                "insertText": "std::equal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::equal(const InIt1 First1, const InIt1 Last1, const InIt2 First2, const InIt2 Last2, Pr Pred)",
                "score": 0.38679999113082886,
                "sortText": "4139f55aequal",
                "textEdit": {
                    "newText": "std::equal",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "fill",
                "insertText": "std::fill",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::fill(const FwdIt First, const FwdIt Last, const Ty &Val)",
                "score": 0.38679999113082886,
                "sortText": "4139f55afill",
                "textEdit": {
                    "newText": "std::fill",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "lexicographical_compare",
                "insertText": "std::lexicographical_compare",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::lexicographical_compare(const InIt1 First1, const InIt1 Last1, const InIt2 First2, const InIt2 Last2)",
                "score": 0.38679999113082886,
                "sortText": "4139f55alexicographical_compare",
                "textEdit": {
                    "newText": "std::lexicographical_compare",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "lexicographical_compare",
                "insertText": "std::lexicographical_compare",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::lexicographical_compare(const InIt1 First1, const InIt1 Last1, const InIt2 First2, const InIt2 Last2, Pr Pred)",
                "score": 0.38679999113082886,
                "sortText": "4139f55alexicographical_compare",
                "textEdit": {
                    "newText": "std::lexicographical_compare",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator!=",
                "insertText": "std::operator!=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::operator!=(const reverse_iterator<BidIt1> &Left, const reverse_iterator<BidIt2> &Right)",
                "score": 0.38679999113082886,
                "sortText": "4139f55aoperator!=",
                "textEdit": {
                    "newText": "std::operator!=",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator!=",
                "insertText": "std::operator!=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::operator!=(const move_iterator<Iter1> &Left, const move_iterator<Iter2> &Right)",
                "score": 0.38679999113082886,
                "sortText": "4139f55aoperator!=",
                "textEdit": {
                    "newText": "std::operator!=",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator<",
                "insertText": "std::operator<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::operator<(const move_iterator<Iter1> &Left, const move_iterator<Iter2> &Right)",
                "score": 0.38679999113082886,
                "sortText": "4139f55aoperator<",
                "textEdit": {
                    "newText": "std::operator<",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator<",
                "insertText": "std::operator<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::operator<(const reverse_iterator<BidIt1> &Left, const reverse_iterator<BidIt2> &Right)",
                "score": 0.38679999113082886,
                "sortText": "4139f55aoperator<",
                "textEdit": {
                    "newText": "std::operator<",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator<=",
                "insertText": "std::operator<=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::operator<=(const move_iterator<Iter1> &Left, const move_iterator<Iter2> &Right)",
                "score": 0.38679999113082886,
                "sortText": "4139f55aoperator<=",
                "textEdit": {
                    "newText": "std::operator<=",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator<=",
                "insertText": "std::operator<=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::operator<=(const reverse_iterator<BidIt1> &Left, const reverse_iterator<BidIt2> &Right)",
                "score": 0.38679999113082886,
                "sortText": "4139f55aoperator<=",
                "textEdit": {
                    "newText": "std::operator<=",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator==",
                "insertText": "std::operator==",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::operator==(const move_iterator<Iter1> &Left, const move_iterator<Iter2> &Right)",
                "score": 0.38679999113082886,
                "sortText": "4139f55aoperator==",
                "textEdit": {
                    "newText": "std::operator==",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator==",
                "insertText": "std::operator==",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::operator==(const reverse_iterator<BidIt1> &Left, const reverse_iterator<BidIt2> &Right)",
                "score": 0.38679999113082886,
                "sortText": "4139f55aoperator==",
                "textEdit": {
                    "newText": "std::operator==",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator>",
                "insertText": "std::operator>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::operator>(const reverse_iterator<BidIt1> &Left, const reverse_iterator<BidIt2> &Right)",
                "score": 0.38679999113082886,
                "sortText": "4139f55aoperator>",
                "textEdit": {
                    "newText": "std::operator>",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator>",
                "insertText": "std::operator>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::operator>(const move_iterator<Iter1> &Left, const move_iterator<Iter2> &Right)",
                "score": 0.38679999113082886,
                "sortText": "4139f55aoperator>",
                "textEdit": {
                    "newText": "std::operator>",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator>=",
                "insertText": "std::operator>=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::operator>=(const move_iterator<Iter1> &Left, const move_iterator<Iter2> &Right)",
                "score": 0.38679999113082886,
                "sortText": "4139f55aoperator>=",
                "textEdit": {
                    "newText": "std::operator>=",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator>=",
                "insertText": "std::operator>=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::operator>=(const reverse_iterator<BidIt1> &Left, const reverse_iterator<BidIt2> &Right)",
                "score": 0.38679999113082886,
                "sortText": "4139f55aoperator>=",
                "textEdit": {
                    "newText": "std::operator>=",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "reverse",
                "insertText": "std::reverse",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::reverse(const BidIt First, const BidIt Last)",
                "score": 0.38679999113082886,
                "sortText": "4139f55areverse",
                "textEdit": {
                    "newText": "std::reverse",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "size",
                "insertText": "std::size",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::size(const Ty (&)[Size])",
                "score": 0.38679999113082886,
                "sortText": "4139f55asize",
                "textEdit": {
                    "newText": "std::size",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "_DEBUG_LT_PRED",
                "insertText": "_DEBUG_LT_PRED",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_DEBUG_LT_PRED(pred, x, y)",
                "score": 0.36497002840042114,
                "sortText": "414522a6_DEBUG_LT_PRED",
                "textEdit": {
                    "newText": "_DEBUG_LT_PRED",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "_DEBUG_ORDER_SET_UNWRAPPED",
                "insertText": "_DEBUG_ORDER_SET_UNWRAPPED",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_DEBUG_ORDER_SET_UNWRAPPED(otherIter, first, last, pred)",
                "score": 0.36497002840042114,
                "sortText": "414522a6_DEBUG_ORDER_SET_UNWRAPPED",
                "textEdit": {
                    "newText": "_DEBUG_ORDER_SET_UNWRAPPED",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "_DEBUG_ORDER_UNWRAPPED",
                "insertText": "_DEBUG_ORDER_UNWRAPPED",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_DEBUG_ORDER_UNWRAPPED(first, last, pred)",
                "score": 0.36497002840042114,
                "sortText": "414522a6_DEBUG_ORDER_UNWRAPPED",
                "textEdit": {
                    "newText": "_DEBUG_ORDER_UNWRAPPED",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "_REQUIRE_CPP17_MUTABLE_BIDIRECTIONAL_ITERATOR",
                "insertText": "_REQUIRE_CPP17_MUTABLE_BIDIRECTIONAL_ITERATOR",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_REQUIRE_CPP17_MUTABLE_BIDIRECTIONAL_ITERATOR(_Iter)",
                "score": 0.36497002840042114,
                "sortText": "414522a6_REQUIRE_CPP17_MUTABLE_BIDIRECTIONAL_ITERATOR",
                "textEdit": {
                    "newText": "_REQUIRE_CPP17_MUTABLE_BIDIRECTIONAL_ITERATOR",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "_REQUIRE_CPP17_MUTABLE_ITERATOR",
                "insertText": "_REQUIRE_CPP17_MUTABLE_ITERATOR",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_REQUIRE_CPP17_MUTABLE_ITERATOR(_Iter)",
                "score": 0.36497002840042114,
                "sortText": "414522a6_REQUIRE_CPP17_MUTABLE_ITERATOR",
                "textEdit": {
                    "newText": "_REQUIRE_CPP17_MUTABLE_ITERATOR",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "_USE_STD_VECTOR_ALGORITHMS",
                "insertText": "_USE_STD_VECTOR_ALGORITHMS",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_USE_STD_VECTOR_ALGORITHMS",
                "score": 0.36497002840042114,
                "sortText": "414522a6_USE_STD_VECTOR_ALGORITHMS",
                "textEdit": {
                    "newText": "_USE_STD_VECTOR_ALGORITHMS",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "_USE_STD_VECTOR_FLOATING_ALGORITHMS",
                "insertText": "_USE_STD_VECTOR_FLOATING_ALGORITHMS",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_USE_STD_VECTOR_FLOATING_ALGORITHMS",
                "score": 0.36497002840042114,
                "sortText": "414522a6_USE_STD_VECTOR_FLOATING_ALGORITHMS",
                "textEdit": {
                    "newText": "_USE_STD_VECTOR_FLOATING_ALGORITHMS",
                    "range": {
                        "end": {
                            "character": 16,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['ATOMIC_CHAR32_T_LOCK_FREE', 'std::equal_to', 'std::greater', 'std::greater_equal', 'std::iterator', 'std::less_equal', 'std::minus', 'std::move_iterator', 'std::multiplies', 'std::not_equal_to', 'std::plus', 'std::pointer_traits', 'std::reverse_iterator', 'std::atomic_fetch_sub', 'std::begin', 'std::begin', 'std::begin', 'std::cbegin', 'std::cend', 'std::copy', 'std::copy_backward', 'std::copy_n', 'std::count', 'std::crbegin', 'std::crend', 'std::data', 'std::data', 'std::data', 'std::data', 'std::distance', 'std::empty', 'std::end', 'std::end', 'std::end', 'std::fill_n', 'std::find', 'std::find_if', 'std::lower_bound', 'std::lower_bound', 'std::make_move_iterator', 'std::make_reverse_iterator', 'std::max', 'std::max', 'std::max_element', 'std::max_element', 'std::min', 'std::min', 'std::min_element', 'std::min_element', 'std::move', 'std::move_backward', 'std::next', 'std::operator+', 'std::operator+', 'std::operator-', 'std::operator-', 'std::prev', 'std::rbegin', 'std::rbegin', 'std::rbegin', 'std::rbegin', 'std::rend', 'std::rend', 'std::rend', 'std::rend', 'std::rotate', 'std::size', 'std::upper_bound', 'std::upper_bound', 'std::advance', 'std::empty', 'std::empty', 'std::equal', 'std::equal', 'std::equal', 'std::equal', 'std::fill', 'std::lexicographical_compare', 'std::lexicographical_compare', 'std::operator!=', 'std::operator!=', 'std::operator<', 'std::operator<', 'std::operator<=', 'std::operator<=', 'std::operator==', 'std::operator==', 'std::operator>', 'std::operator>', 'std::operator>=', 'std::operator>=', 'std::reverse', 'std::size', '_DEBUG_LT_PRED', '_DEBUG_ORDER_SET_UNWRAPPED', '_DEBUG_ORDER_UNWRAPPED', '_REQUIRE_CPP17_MUTABLE_BIDIRECTIONAL_ITERATOR', '_REQUIRE_CPP17_MUTABLE_ITERATOR', '_USE_STD_VECTOR_ALGORITHMS', '_USE_STD_VECTOR_FLOATING_ALGORITHMS']
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_namespace_name",
                "message": "Expected namespace name",
                "range": {
                    "end": {
                        "character": 16,
                        "line": 2
                    },
                    "start": {
                        "character": 16,
                        "line": 2
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 36
    }
}
Diagnostics received from LSP.
Errors received: [[2, [16, 16]]]
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": null
}
Received hover response.
Hover response does not contain 'contents'.
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.8423324823379517,
                "sortText": "40142e73std",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "stdext",
                "insertText": "stdext",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " stdext",
                "score": 1.8423324823379517,
                "sortText": "40142e73stdext",
                "textEdit": {
                    "newText": "stdext",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <climits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <climits>"
                },
                "filterText": "SCHAR_MAX",
                "insertText": "SCHAR_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SCHAR_MAX",
                "score": 0.600888729095459,
                "sortText": "40e62c28SCHAR_MAX",
                "textEdit": {
                    "newText": "SCHAR_MAX",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <climits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <climits>"
                },
                "filterText": "SCHAR_MIN",
                "insertText": "SCHAR_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SCHAR_MIN",
                "score": 0.600888729095459,
                "sortText": "40e62c28SCHAR_MIN",
                "textEdit": {
                    "newText": "SCHAR_MIN",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <climits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <climits>"
                },
                "filterText": "SHRT_MAX",
                "insertText": "SHRT_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SHRT_MAX",
                "score": 0.600888729095459,
                "sortText": "40e62c28SHRT_MAX",
                "textEdit": {
                    "newText": "SHRT_MAX",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <climits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <climits>"
                },
                "filterText": "SHRT_MIN",
                "insertText": "SHRT_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SHRT_MIN",
                "score": 0.600888729095459,
                "sortText": "40e62c28SHRT_MIN",
                "textEdit": {
                    "newText": "SHRT_MIN",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "SEEK_CUR",
                "insertText": "SEEK_CUR",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SEEK_CUR",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cSEEK_CUR",
                "textEdit": {
                    "newText": "SEEK_CUR",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "SEEK_END",
                "insertText": "SEEK_END",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SEEK_END",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cSEEK_END",
                "textEdit": {
                    "newText": "SEEK_END",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "SEEK_SET",
                "insertText": "SEEK_SET",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SEEK_SET",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cSEEK_SET",
                "textEdit": {
                    "newText": "SEEK_SET",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_share.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_share.h>"
                },
                "filterText": "SH_DENYNO",
                "insertText": "SH_DENYNO",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SH_DENYNO",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cSH_DENYNO",
                "textEdit": {
                    "newText": "SH_DENYNO",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_share.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_share.h>"
                },
                "filterText": "SH_DENYRD",
                "insertText": "SH_DENYRD",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SH_DENYRD",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cSH_DENYRD",
                "textEdit": {
                    "newText": "SH_DENYRD",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_share.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_share.h>"
                },
                "filterText": "SH_DENYRW",
                "insertText": "SH_DENYRW",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SH_DENYRW",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cSH_DENYRW",
                "textEdit": {
                    "newText": "SH_DENYRW",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_share.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_share.h>"
                },
                "filterText": "SH_DENYWR",
                "insertText": "SH_DENYWR",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SH_DENYWR",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cSH_DENYWR",
                "textEdit": {
                    "newText": "SH_DENYWR",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <csignal>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <csignal>"
                },
                "filterText": "SIGABRT",
                "insertText": "SIGABRT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SIGABRT",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cSIGABRT",
                "textEdit": {
                    "newText": "SIGABRT",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <signal.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <signal.h>"
                },
                "filterText": "SIGABRT_COMPAT",
                "insertText": "SIGABRT_COMPAT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SIGABRT_COMPAT",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cSIGABRT_COMPAT",
                "textEdit": {
                    "newText": "SIGABRT_COMPAT",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <signal.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <signal.h>"
                },
                "filterText": "SIGBREAK",
                "insertText": "SIGBREAK",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SIGBREAK",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cSIGBREAK",
                "textEdit": {
                    "newText": "SIGBREAK",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <csignal>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <csignal>"
                },
                "filterText": "SIGFPE",
                "insertText": "SIGFPE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SIGFPE",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cSIGFPE",
                "textEdit": {
                    "newText": "SIGFPE",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <csignal>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <csignal>"
                },
                "filterText": "SIGILL",
                "insertText": "SIGILL",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SIGILL",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cSIGILL",
                "textEdit": {
                    "newText": "SIGILL",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <csignal>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <csignal>"
                },
                "filterText": "SIGINT",
                "insertText": "SIGINT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SIGINT",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cSIGINT",
                "textEdit": {
                    "newText": "SIGINT",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <csignal>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <csignal>"
                },
                "filterText": "SIGSEGV",
                "insertText": "SIGSEGV",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SIGSEGV",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cSIGSEGV",
                "textEdit": {
                    "newText": "SIGSEGV",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <csignal>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <csignal>"
                },
                "filterText": "SIGTERM",
                "insertText": "SIGTERM",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SIGTERM",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cSIGTERM",
                "textEdit": {
                    "newText": "SIGTERM",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <signal.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <signal.h>"
                },
                "filterText": "SIG_ACK",
                "insertText": "SIG_ACK",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SIG_ACK",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cSIG_ACK",
                "textEdit": {
                    "newText": "SIG_ACK",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <csignal>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <csignal>"
                },
                "filterText": "SIG_DFL",
                "insertText": "SIG_DFL",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SIG_DFL",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cSIG_DFL",
                "textEdit": {
                    "newText": "SIG_DFL",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <csignal>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <csignal>"
                },
                "filterText": "SIG_ERR",
                "insertText": "SIG_ERR",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SIG_ERR",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cSIG_ERR",
                "textEdit": {
                    "newText": "SIG_ERR",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <signal.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <signal.h>"
                },
                "filterText": "SIG_GET",
                "insertText": "SIG_GET",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SIG_GET",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cSIG_GET",
                "textEdit": {
                    "newText": "SIG_GET",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <csignal>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <csignal>"
                },
                "filterText": "SIG_IGN",
                "insertText": "SIG_IGN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SIG_IGN",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cSIG_IGN",
                "textEdit": {
                    "newText": "SIG_IGN",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <signal.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <signal.h>"
                },
                "filterText": "SIG_SGE",
                "insertText": "SIG_SGE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SIG_SGE",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cSIG_SGE",
                "textEdit": {
                    "newText": "SIG_SGE",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "SW_DENORMAL",
                "insertText": "SW_DENORMAL",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SW_DENORMAL",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cSW_DENORMAL",
                "textEdit": {
                    "newText": "SW_DENORMAL",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "SW_INEXACT",
                "insertText": "SW_INEXACT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SW_INEXACT",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cSW_INEXACT",
                "textEdit": {
                    "newText": "SW_INEXACT",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "SW_INVALID",
                "insertText": "SW_INVALID",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SW_INVALID",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cSW_INVALID",
                "textEdit": {
                    "newText": "SW_INVALID",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "SW_OVERFLOW",
                "insertText": "SW_OVERFLOW",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SW_OVERFLOW",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cSW_OVERFLOW",
                "textEdit": {
                    "newText": "SW_OVERFLOW",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "SW_SQRTNEG",
                "insertText": "SW_SQRTNEG",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SW_SQRTNEG",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cSW_SQRTNEG",
                "textEdit": {
                    "newText": "SW_SQRTNEG",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "SW_STACKOVERFLOW",
                "insertText": "SW_STACKOVERFLOW",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SW_STACKOVERFLOW",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cSW_STACKOVERFLOW",
                "textEdit": {
                    "newText": "SW_STACKOVERFLOW",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "SW_STACKUNDERFLOW",
                "insertText": "SW_STACKUNDERFLOW",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SW_STACKUNDERFLOW",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cSW_STACKUNDERFLOW",
                "textEdit": {
                    "newText": "SW_STACKUNDERFLOW",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "SW_UNDERFLOW",
                "insertText": "SW_UNDERFLOW",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SW_UNDERFLOW",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cSW_UNDERFLOW",
                "textEdit": {
                    "newText": "SW_UNDERFLOW",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "SW_UNEMULATED",
                "insertText": "SW_UNEMULATED",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SW_UNEMULATED",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cSW_UNEMULATED",
                "textEdit": {
                    "newText": "SW_UNEMULATED",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "SW_ZERODIVIDE",
                "insertText": "SW_ZERODIVIDE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SW_ZERODIVIDE",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cSW_ZERODIVIDE",
                "textEdit": {
                    "newText": "SW_ZERODIVIDE",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdio.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdio.h>"
                },
                "filterText": "SYS_OPEN",
                "insertText": "SYS_OPEN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SYS_OPEN",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cSYS_OPEN",
                "textEdit": {
                    "newText": "SYS_OPEN",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "status87",
                "insertText": "status87",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022status87",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cstatus87",
                "textEdit": {
                    "newText": "status87",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "sys_errlist",
                "insertText": "sys_errlist",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022sys_errlist",
                "score": 0.5943357944488525,
                "sortText": "40e7d99csys_errlist",
                "textEdit": {
                    "newText": "sys_errlist",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "sys_nerr",
                "insertText": "sys_nerr",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022sys_nerr",
                "score": 0.5943357944488525,
                "sortText": "40e7d99csys_nerr",
                "textEdit": {
                    "newText": "sys_nerr",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <set>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <set>"
                },
                "filterText": "set",
                "insertText": "std::set",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022std::set<class Kty, class Pr, class Alloc>",
                "score": 0.5417693853378296,
                "sortText": "40f54e9aset",
                "textEdit": {
                    "newText": "std::set",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <chrono>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <chrono>"
                },
                "filterText": "system_clock",
                "insertText": "std::chrono::system_clock",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022std::chrono::system_clock",
                "score": 0.5417693853378296,
                "sortText": "40f54e9asystem_clock",
                "textEdit": {
                    "newText": "std::chrono::system_clock",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>"
                },
                "filterText": "system_error",
                "insertText": "std::system_error",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022std::system_error",
                "score": 0.5417693853378296,
                "sortText": "40f54e9asystem_error",
                "textEdit": {
                    "newText": "std::system_error",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <csignal>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <csignal>"
                },
                "filterText": "sig_atomic_t",
                "insertText": "sig_atomic_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022sig_atomic_t",
                "score": 0.48831576108932495,
                "sortText": "4105fb7asig_atomic_t",
                "textEdit": {
                    "newText": "sig_atomic_t",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Fillobj<Elem>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "setfill",
                "insertText": "std::setfill",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::setfill(Elem Ch)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9setfill",
                "textEdit": {
                    "newText": "std::setfill",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.size())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "size",
                "insertText": "std::size",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::size(const Container &Cont)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9size",
                "textEdit": {
                    "newText": "std::size",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <eh.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "unexpected_handler",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <eh.h>"
                },
                "filterText": "set_unexpected",
                "insertText": "set_unexpected",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022set_unexpected(unexpected_handler NewUnexpectedHandler)",
                "score": 0.39086613059043884,
                "sortText": "4137e065set_unexpected",
                "textEdit": {
                    "newText": "set_unexpected",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "const char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strchr",
                "insertText": "strchr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strchr(const char *Str, int Val)",
                "score": 0.39086613059043884,
                "sortText": "4137e065strchr",
                "textEdit": {
                    "newText": "strchr",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "const char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strrchr",
                "insertText": "strrchr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strrchr(const char *Str, int Ch)",
                "score": 0.39086613059043884,
                "sortText": "4137e065strrchr",
                "textEdit": {
                    "newText": "strrchr",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "const char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strstr",
                "insertText": "strstr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strstr(const char *Str, const char *SubStr)",
                "score": 0.39086613059043884,
                "sortText": "4137e065strstr",
                "textEdit": {
                    "newText": "strstr",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplwin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplwin.h>"
                },
                "filterText": "set_ambient_scheduler",
                "insertText": "Concurrency::set_ambient_scheduler",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::set_ambient_scheduler(const ::std::shared_ptr<scheduler_interface> &Scheduler)",
                "score": 0.38679999113082886,
                "sortText": "4139f55aset_ambient_scheduler",
                "textEdit": {
                    "newText": "Concurrency::set_ambient_scheduler",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Smanip<int>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "setbase",
                "insertText": "std::setbase",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::setbase(int)",
                "score": 0.38679999113082886,
                "sortText": "4139f55asetbase",
                "textEdit": {
                    "newText": "std::setbase",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Smanip<ios_base::fmtflags>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "setiosflags",
                "insertText": "std::setiosflags",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::setiosflags(ios_base::fmtflags)",
                "score": 0.38679999113082886,
                "sortText": "4139f55asetiosflags",
                "textEdit": {
                    "newText": "std::setiosflags",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Smanip<streamsize>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "setprecision",
                "insertText": "std::setprecision",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::setprecision(streamsize)",
                "score": 0.38679999113082886,
                "sortText": "4139f55asetprecision",
                "textEdit": {
                    "newText": "std::setprecision",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Smanip<streamsize>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "setw",
                "insertText": "std::setw",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::setw(streamsize)",
                "score": 0.38679999113082886,
                "sortText": "4139f55asetw",
                "textEdit": {
                    "newText": "std::setw",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "size",
                "insertText": "std::size",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::size(const Ty (&)[Size])",
                "score": 0.38679999113082886,
                "sortText": "4139f55asize",
                "textEdit": {
                    "newText": "std::size",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "const error_category &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>"
                },
                "filterText": "system_category",
                "insertText": "std::system_category",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::system_category()",
                "score": 0.38679999113082886,
                "sortText": "4139f55asystem_category",
                "textEdit": {
                    "newText": "std::system_category",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ios>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "std::io_errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ios>"
                },
                "filterText": "stream",
                "insertText": "std::io_errc::stream",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022std::io_errc::stream",
                "score": 0.348242849111557,
                "sortText": "414db31dstream",
                "textEdit": {
                    "newText": "std::io_errc::stream",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdio.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdio.h>"
                },
                "filterText": "scanf_s",
                "insertText": "scanf_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022scanf_s(const char *const Format, ...)",
                "score": 0.34543541073799133,
                "sortText": "414f2317scanf_s",
                "textEdit": {
                    "newText": "scanf_s",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "setvbuf",
                "insertText": "setvbuf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022setvbuf(FILE *Stream, char *Buffer, int Mode, size_t Size)",
                "score": 0.34543541073799133,
                "sortText": "414f2317setvbuf",
                "textEdit": {
                    "newText": "setvbuf",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <csignal>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_crt_signal_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <csignal>"
                },
                "filterText": "signal",
                "insertText": "signal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022signal(int Signal, _crt_signal_t Function)",
                "score": 0.34543541073799133,
                "sortText": "414f2317signal",
                "textEdit": {
                    "newText": "signal",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "snprintf",
                "insertText": "snprintf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022snprintf(char *const Buffer, const size_t BufferCount, const char *const Format, ...)",
                "score": 0.34543541073799133,
                "sortText": "414f2317snprintf",
                "textEdit": {
                    "newText": "snprintf",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "sprintf",
                "insertText": "sprintf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022sprintf(char *const Buffer, const char *const Format, ...)",
                "score": 0.34543541073799133,
                "sortText": "414f2317sprintf",
                "textEdit": {
                    "newText": "sprintf",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdio.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdio.h>"
                },
                "filterText": "sprintf_s",
                "insertText": "sprintf_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022sprintf_s(char *const Buffer, const size_t BufferCount, const char *const Format, ...)",
                "score": 0.34543541073799133,
                "sortText": "414f2317sprintf_s",
                "textEdit": {
                    "newText": "sprintf_s",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdio.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdio.h>"
                },
                "filterText": "sprintf_s",
                "insertText": "sprintf_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022sprintf_s(char (&Buffer)[Size], const char *Format, ...)",
                "score": 0.34543541073799133,
                "sortText": "414f2317sprintf_s",
                "textEdit": {
                    "newText": "sprintf_s",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "srand",
                "insertText": "srand",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022srand(unsigned int Seed)",
                "score": 0.34543541073799133,
                "sortText": "414f2317srand",
                "textEdit": {
                    "newText": "srand",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdio.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdio.h>"
                },
                "filterText": "sscanf_s",
                "insertText": "sscanf_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022sscanf_s(const char *const Buffer, const char *const Format, ...)",
                "score": 0.34543541073799133,
                "sortText": "414f2317sscanf_s",
                "textEdit": {
                    "newText": "sscanf_s",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "strtod",
                "insertText": "strtod",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strtod(const char *String, char **EndPtr)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strtod",
                "textEdit": {
                    "newText": "strtod",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "strtof",
                "insertText": "strtof",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strtof(const char *String, char **EndPtr)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strtof",
                "textEdit": {
                    "newText": "strtof",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "strtol",
                "insertText": "strtol",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strtol(const char *String, char **EndPtr, int Radix)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strtol",
                "textEdit": {
                    "newText": "strtol",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "strtold",
                "insertText": "strtold",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strtold(const char *String, char **EndPtr)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strtold",
                "textEdit": {
                    "newText": "strtold",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "strtoll",
                "insertText": "strtoll",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strtoll(const char *String, char **EndPtr, int Radix)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strtoll",
                "textEdit": {
                    "newText": "strtoll",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "unsigned long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "strtoul",
                "insertText": "strtoul",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strtoul(const char *String, char **EndPtr, int Radix)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strtoul",
                "textEdit": {
                    "newText": "strtoul",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "unsigned long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "strtoull",
                "insertText": "strtoull",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strtoull(const char *String, char **EndPtr, int Radix)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strtoull",
                "textEdit": {
                    "newText": "strtoull",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "system",
                "insertText": "system",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022system(const char *Command)",
                "score": 0.34543541073799133,
                "sortText": "414f2317system",
                "textEdit": {
                    "newText": "system",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "scanf",
                "insertText": "scanf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022scanf(const char *const Format, ...)",
                "score": 0.2942298352718353,
                "sortText": "41695ab5scanf",
                "textEdit": {
                    "newText": "scanf",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "setbuf",
                "insertText": "setbuf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022setbuf(FILE *Stream, char *Buffer)",
                "score": 0.2942298352718353,
                "sortText": "41695ab5setbuf",
                "textEdit": {
                    "newText": "setbuf",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "sscanf",
                "insertText": "sscanf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022sscanf(const char *const Buffer, const char *const Format, ...)",
                "score": 0.2942298352718353,
                "sortText": "41695ab5sscanf",
                "textEdit": {
                    "newText": "sscanf",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "swab",
                "insertText": "swab",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022swab(char *Buf1, char *Buf2, int SizeInBytes)",
                "score": 0.2942298352718353,
                "sortText": "41695ab5swab",
                "textEdit": {
                    "newText": "swab",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strcat",
                "insertText": "std::strcat",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strcat",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strcat",
                "textEdit": {
                    "newText": "std::strcat",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strchr",
                "insertText": "std::strchr",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strchr",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strchr",
                "textEdit": {
                    "newText": "std::strchr",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strcmp",
                "insertText": "std::strcmp",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strcmp",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strcmp",
                "textEdit": {
                    "newText": "std::strcmp",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strcoll",
                "insertText": "std::strcoll",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strcoll",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strcoll",
                "textEdit": {
                    "newText": "std::strcoll",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strcpy",
                "insertText": "std::strcpy",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strcpy",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strcpy",
                "textEdit": {
                    "newText": "std::strcpy",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strcspn",
                "insertText": "std::strcspn",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strcspn",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strcspn",
                "textEdit": {
                    "newText": "std::strcspn",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strerror",
                "insertText": "std::strerror",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strerror",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strerror",
                "textEdit": {
                    "newText": "std::strerror",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "strftime",
                "insertText": "std::strftime",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strftime",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strftime",
                "textEdit": {
                    "newText": "std::strftime",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strlen",
                "insertText": "std::strlen",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strlen",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strlen",
                "textEdit": {
                    "newText": "std::strlen",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strncat",
                "insertText": "std::strncat",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strncat",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strncat",
                "textEdit": {
                    "newText": "std::strncat",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strncmp",
                "insertText": "std::strncmp",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strncmp",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strncmp",
                "textEdit": {
                    "newText": "std::strncmp",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strncpy",
                "insertText": "std::strncpy",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strncpy",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strncpy",
                "textEdit": {
                    "newText": "std::strncpy",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strpbrk",
                "insertText": "std::strpbrk",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strpbrk",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strpbrk",
                "textEdit": {
                    "newText": "std::strpbrk",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strrchr",
                "insertText": "std::strrchr",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strrchr",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strrchr",
                "textEdit": {
                    "newText": "std::strrchr",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strspn",
                "insertText": "std::strspn",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strspn",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strspn",
                "textEdit": {
                    "newText": "std::strspn",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strstr",
                "insertText": "std::strstr",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strstr",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strstr",
                "textEdit": {
                    "newText": "std::strstr",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cinttypes>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cinttypes>"
                },
                "filterText": "strtoimax",
                "insertText": "std::strtoimax",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strtoimax",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strtoimax",
                "textEdit": {
                    "newText": "std::strtoimax",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strtok",
                "insertText": "std::strtok",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strtok",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strtok",
                "textEdit": {
                    "newText": "std::strtok",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cinttypes>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cinttypes>"
                },
                "filterText": "strtoumax",
                "insertText": "std::strtoumax",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strtoumax",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strtoumax",
                "textEdit": {
                    "newText": "std::strtoumax",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strxfrm",
                "insertText": "std::strxfrm",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strxfrm",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strxfrm",
                "textEdit": {
                    "newText": "std::strxfrm",
                    "range": {
                        "end": {
                            "character": 17,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['std', 'stdext', 'SCHAR_MAX', 'SCHAR_MIN', 'SHRT_MAX', 'SHRT_MIN', 'SEEK_CUR', 'SEEK_END', 'SEEK_SET', 'SH_DENYNO', 'SH_DENYRD', 'SH_DENYRW', 'SH_DENYWR', 'SIGABRT', 'SIGABRT_COMPAT', 'SIGBREAK', 'SIGFPE', 'SIGILL', 'SIGINT', 'SIGSEGV', 'SIGTERM', 'SIG_ACK', 'SIG_DFL', 'SIG_ERR', 'SIG_GET', 'SIG_IGN', 'SIG_SGE', 'SW_DENORMAL', 'SW_INEXACT', 'SW_INVALID', 'SW_OVERFLOW', 'SW_SQRTNEG', 'SW_STACKOVERFLOW', 'SW_STACKUNDERFLOW', 'SW_UNDERFLOW', 'SW_UNEMULATED', 'SW_ZERODIVIDE', 'SYS_OPEN', 'status87', 'sys_errlist', 'sys_nerr', 'std::set', 'std::chrono::system_clock', 'std::system_error', 'sig_atomic_t', 'std::setfill', 'std::size', 'set_unexpected', 'strchr', 'strrchr', 'strstr', 'Concurrency::set_ambient_scheduler', 'std::setbase', 'std::setiosflags', 'std::setprecision', 'std::setw', 'std::size', 'std::system_category', 'std::io_errc::stream', 'scanf_s', 'setvbuf', 'signal', 'snprintf', 'sprintf', 'sprintf_s', 'sprintf_s', 'srand', 'sscanf_s', 'strtod', 'strtof', 'strtol', 'strtold', 'strtoll', 'strtoul', 'strtoull', 'system', 'scanf', 'setbuf', 'sscanf', 'swab', 'std::strcat', 'std::strchr', 'std::strcmp', 'std::strcoll', 'std::strcpy', 'std::strcspn', 'std::strerror', 'std::strftime', 'std::strlen', 'std::strncat', 'std::strncmp', 'std::strncpy', 'std::strpbrk', 'std::strrchr', 'std::strspn', 'std::strstr', 'std::strtoimax', 'std::strtok', 'std::strtoumax', 'std::strxfrm']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_semi_after_namespace_name",
                "message": "Expected ';' after namespace name (fix available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 2
                    },
                    "start": {
                        "character": 17,
                        "line": 2
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_namespace_name",
                "message": "Expected namespace name",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 2
                    },
                    "start": {
                        "character": 16,
                        "line": 2
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 37
    }
}
Diagnostics received from LSP.
Errors received: [[2, [17, 17]], [2, [16, 17]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "filterText": "string_literals",
                "insertText": "std::string_literals",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std::string_literals",
                "score": 2.098905563354492,
                "sortText": "3ff9ab88string_literals",
                "textEdit": {
                    "newText": "std::string_literals",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.8423324823379517,
                "sortText": "40142e73std",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "stdext",
                "insertText": "stdext",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " stdext",
                "score": 1.8423324823379517,
                "sortText": "40142e73stdext",
                "textEdit": {
                    "newText": "stdext",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "status87",
                "insertText": "status87",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022status87",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cstatus87",
                "textEdit": {
                    "newText": "status87",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "stderr",
                "insertText": "stderr",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022stderr",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cstderr",
                "textEdit": {
                    "newText": "stderr",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "stdin",
                "insertText": "stdin",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022stdin",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cstdin",
                "textEdit": {
                    "newText": "stdin",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "stdout",
                "insertText": "stdout",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022stdout",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cstdout",
                "textEdit": {
                    "newText": "stdout",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stack>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stack>"
                },
                "filterText": "stack",
                "insertText": "std::stack",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022std::stack<class Ty, class Container>",
                "score": 0.5417693853378296,
                "sortText": "40f54e9astack",
                "textEdit": {
                    "newText": "std::stack",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <streambuf>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <streambuf>"
                },
                "filterText": "streambuf",
                "insertText": "std::streambuf",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::streambuf",
                "score": 0.5417693853378296,
                "sortText": "40f54e9astreambuf",
                "textEdit": {
                    "newText": "std::streambuf",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ios>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ios>\nfrom <streambuf>"
                },
                "filterText": "streamoff",
                "insertText": "std::streamoff",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::streamoff",
                "score": 0.5417693853378296,
                "sortText": "40f54e9astreamoff",
                "textEdit": {
                    "newText": "std::streamoff",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iosfwd>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iosfwd>"
                },
                "filterText": "streampos",
                "insertText": "std::streampos",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::streampos",
                "score": 0.5417693853378296,
                "sortText": "40f54e9astreampos",
                "textEdit": {
                    "newText": "std::streampos",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ios>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ios>"
                },
                "filterText": "streamsize",
                "insertText": "std::streamsize",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::streamsize",
                "score": 0.5417693853378296,
                "sortText": "40f54e9astreamsize",
                "textEdit": {
                    "newText": "std::streamsize",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string>"
                },
                "filterText": "string",
                "insertText": "std::string",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::string",
                "score": 0.5417693853378296,
                "sortText": "40f54e9astring",
                "textEdit": {
                    "newText": "std::string",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <sstream>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <sstream>"
                },
                "filterText": "stringbuf",
                "insertText": "std::stringbuf",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::stringbuf",
                "score": 0.5417693853378296,
                "sortText": "40f54e9astringbuf",
                "textEdit": {
                    "newText": "std::stringbuf",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <sstream>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <sstream>"
                },
                "filterText": "stringstream",
                "insertText": "std::stringstream",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022std::stringstream",
                "score": 0.5417693853378296,
                "sortText": "40f54e9astringstream",
                "textEdit": {
                    "newText": "std::stringstream",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <strstream>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <strstream>"
                },
                "filterText": "strstream",
                "insertText": "std::strstream",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022std::strstream",
                "score": 0.5417693853378296,
                "sortText": "40f54e9astrstream",
                "textEdit": {
                    "newText": "std::strstream",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <strstream>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <strstream>"
                },
                "filterText": "strstreambuf",
                "insertText": "std::strstreambuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022std::strstreambuf",
                "score": 0.5417693853378296,
                "sortText": "40f54e9astrstreambuf",
                "textEdit": {
                    "newText": "std::strstreambuf",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "student_t_distribution",
                "insertText": "std::student_t_distribution",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022std::student_t_distribution<class Ty>",
                "score": 0.5417693853378296,
                "sortText": "40f54e9astudent_t_distribution",
                "textEdit": {
                    "newText": "std::student_t_distribution",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <sys/stat.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <sys/stat.h>"
                },
                "filterText": "stat",
                "insertText": "stat",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022stat",
                "score": 0.4513414204120636,
                "sortText": "4118e9c7stat",
                "textEdit": {
                    "newText": "stat",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "BidIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "stable_partition",
                "insertText": "std::stable_partition",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::stable_partition(BidIt First, BidIt Last, Pr Pred)",
                "score": 0.40636512637138367,
                "sortText": "412ff0e9stable_partition",
                "textEdit": {
                    "newText": "std::stable_partition",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "const char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strchr",
                "insertText": "strchr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strchr(const char *Str, int Val)",
                "score": 0.39086613059043884,
                "sortText": "4137e065strchr",
                "textEdit": {
                    "newText": "strchr",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "const char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strrchr",
                "insertText": "strrchr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strrchr(const char *Str, int Ch)",
                "score": 0.39086613059043884,
                "sortText": "4137e065strrchr",
                "textEdit": {
                    "newText": "strrchr",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "const char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strstr",
                "insertText": "strstr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strstr(const char *Str, const char *SubStr)",
                "score": 0.39086613059043884,
                "sortText": "4137e065strstr",
                "textEdit": {
                    "newText": "strstr",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "stable_sort",
                "insertText": "std::stable_sort",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::stable_sort(const BidIt First, const BidIt Last)",
                "score": 0.38679999113082886,
                "sortText": "4139f55astable_sort",
                "textEdit": {
                    "newText": "std::stable_sort",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "stable_sort",
                "insertText": "std::stable_sort",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::stable_sort(const BidIt First, const BidIt Last, Pr Pred)",
                "score": 0.38679999113082886,
                "sortText": "4139f55astable_sort",
                "textEdit": {
                    "newText": "std::stable_sort",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "file_status",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "status",
                "insertText": "std::experimental::filesystem::status",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::experimental::filesystem::status(const path &)",
                "score": 0.3622940182685852,
                "sortText": "41468166status",
                "textEdit": {
                    "newText": "std::experimental::filesystem::status",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "file_status",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "status",
                "insertText": "std::experimental::filesystem::status",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022std::experimental::filesystem::status(const path &, error_code &)",
                "score": 0.3622940182685852,
                "sortText": "41468166status",
                "textEdit": {
                    "newText": "std::experimental::filesystem::status",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nENOTRECOVERABLE"
                },
                "filterText": "state_not_recoverable",
                "insertText": "std::errc::state_not_recoverable",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022std::errc::state_not_recoverable",
                "score": 0.348242849111557,
                "sortText": "414db31dstate_not_recoverable",
                "textEdit": {
                    "newText": "std::errc::state_not_recoverable",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ios>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "std::io_errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ios>"
                },
                "filterText": "stream",
                "insertText": "std::io_errc::stream",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022std::io_errc::stream",
                "score": 0.348242849111557,
                "sortText": "414db31dstream",
                "textEdit": {
                    "newText": "std::io_errc::stream",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nETIME"
                },
                "filterText": "stream_timeout",
                "insertText": "std::errc::stream_timeout",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022std::errc::stream_timeout",
                "score": 0.348242849111557,
                "sortText": "414db31dstream_timeout",
                "textEdit": {
                    "newText": "std::errc::stream_timeout",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string.h>"
                },
                "filterText": "strcat_s",
                "insertText": "strcat_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strcat_s(char (&Destination)[Size], const char *Source)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strcat_s",
                "textEdit": {
                    "newText": "strcat_s",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string.h>"
                },
                "filterText": "strcat_s",
                "insertText": "strcat_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strcat_s(char *Destination, rsize_t SizeInBytes, const char *Source)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strcat_s",
                "textEdit": {
                    "newText": "strcat_s",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strchr",
                "insertText": "strchr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strchr(char *const String, const int Ch)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strchr",
                "textEdit": {
                    "newText": "strchr",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strcmp",
                "insertText": "strcmp",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strcmp(const char *Str1, const char *Str2)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strcmp",
                "textEdit": {
                    "newText": "strcmp",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strcoll",
                "insertText": "strcoll",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strcoll(const char *String1, const char *String2)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strcoll",
                "textEdit": {
                    "newText": "strcoll",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string.h>"
                },
                "filterText": "strcpy_s",
                "insertText": "strcpy_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strcpy_s(char *Destination, rsize_t SizeInBytes, const char *Source)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strcpy_s",
                "textEdit": {
                    "newText": "strcpy_s",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string.h>"
                },
                "filterText": "strcpy_s",
                "insertText": "strcpy_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strcpy_s(char (&Destination)[Size], const char *Source)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strcpy_s",
                "textEdit": {
                    "newText": "strcpy_s",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strcspn",
                "insertText": "strcspn",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strcspn(const char *Str, const char *Control)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strcspn",
                "textEdit": {
                    "newText": "strcspn",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string.h>"
                },
                "filterText": "strerror_s",
                "insertText": "strerror_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strerror_s(char *Buffer, size_t SizeInBytes, int ErrorNumber)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strerror_s",
                "textEdit": {
                    "newText": "strerror_s",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string.h>"
                },
                "filterText": "strerror_s",
                "insertText": "strerror_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strerror_s(char (&Buffer)[Size], int ErrorMessage)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strerror_s",
                "textEdit": {
                    "newText": "strerror_s",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "strftime",
                "insertText": "strftime",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strftime(char *Buffer, size_t SizeInBytes, const char *Format, const struct tm *Tm)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strftime",
                "textEdit": {
                    "newText": "strftime",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strlen",
                "insertText": "strlen",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strlen(const char *Str)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strlen",
                "textEdit": {
                    "newText": "strlen",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string.h>"
                },
                "filterText": "strncat_s",
                "insertText": "strncat_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strncat_s(char *Destination, rsize_t SizeInBytes, const char *Source, rsize_t MaxCount)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strncat_s",
                "textEdit": {
                    "newText": "strncat_s",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string.h>"
                },
                "filterText": "strncat_s",
                "insertText": "strncat_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strncat_s(char (&Destination)[Size], const char *Source, size_t Count)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strncat_s",
                "textEdit": {
                    "newText": "strncat_s",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strncmp",
                "insertText": "strncmp",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strncmp(const char *Str1, const char *Str2, size_t MaxCount)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strncmp",
                "textEdit": {
                    "newText": "strncmp",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string.h>"
                },
                "filterText": "strncpy_s",
                "insertText": "strncpy_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strncpy_s(char (&Destination)[Size], const char *Source, size_t Count)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strncpy_s",
                "textEdit": {
                    "newText": "strncpy_s",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string.h>"
                },
                "filterText": "strncpy_s",
                "insertText": "strncpy_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strncpy_s(char *Destination, rsize_t SizeInBytes, const char *Source, rsize_t MaxCount)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strncpy_s",
                "textEdit": {
                    "newText": "strncpy_s",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string.h>"
                },
                "filterText": "strnlen",
                "insertText": "strnlen",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strnlen(const char *String, size_t MaxCount)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strnlen",
                "textEdit": {
                    "newText": "strnlen",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string.h>"
                },
                "filterText": "strnlen_s",
                "insertText": "strnlen_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strnlen_s(const char *String, size_t MaxCount)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strnlen_s",
                "textEdit": {
                    "newText": "strnlen_s",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "const char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strpbrk",
                "insertText": "strpbrk",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strpbrk(const char *Str, const char *Control)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strpbrk",
                "textEdit": {
                    "newText": "strpbrk",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strpbrk",
                "insertText": "strpbrk",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strpbrk(char *const String, const char *const Control)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strpbrk",
                "textEdit": {
                    "newText": "strpbrk",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strrchr",
                "insertText": "strrchr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strrchr(char *const String, const int Ch)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strrchr",
                "textEdit": {
                    "newText": "strrchr",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strspn",
                "insertText": "strspn",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strspn(const char *Str, const char *Control)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strspn",
                "textEdit": {
                    "newText": "strspn",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strstr",
                "insertText": "strstr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strstr(char *const String, const char *const SubString)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strstr",
                "textEdit": {
                    "newText": "strstr",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "strtod",
                "insertText": "strtod",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strtod(const char *String, char **EndPtr)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strtod",
                "textEdit": {
                    "newText": "strtod",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "strtof",
                "insertText": "strtof",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strtof(const char *String, char **EndPtr)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strtof",
                "textEdit": {
                    "newText": "strtof",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string.h>"
                },
                "filterText": "strtok_s",
                "insertText": "strtok_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strtok_s(char *String, const char *Delimiter, char **Context)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strtok_s",
                "textEdit": {
                    "newText": "strtok_s",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "strtol",
                "insertText": "strtol",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strtol(const char *String, char **EndPtr, int Radix)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strtol",
                "textEdit": {
                    "newText": "strtol",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "strtold",
                "insertText": "strtold",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strtold(const char *String, char **EndPtr)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strtold",
                "textEdit": {
                    "newText": "strtold",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "strtoll",
                "insertText": "strtoll",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strtoll(const char *String, char **EndPtr, int Radix)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strtoll",
                "textEdit": {
                    "newText": "strtoll",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "unsigned long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "strtoul",
                "insertText": "strtoul",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strtoul(const char *String, char **EndPtr, int Radix)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strtoul",
                "textEdit": {
                    "newText": "strtoul",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "unsigned long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "strtoull",
                "insertText": "strtoull",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strtoull(const char *String, char **EndPtr, int Radix)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strtoull",
                "textEdit": {
                    "newText": "strtoull",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strxfrm",
                "insertText": "strxfrm",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strxfrm(char *Destination, const char *Source, size_t MaxCount)",
                "score": 0.34543541073799133,
                "sortText": "414f2317strxfrm",
                "textEdit": {
                    "newText": "strxfrm",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <sys/stat.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <sys/stat.h>"
                },
                "filterText": "stat",
                "insertText": "stat",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022stat(const char *const FileName, struct stat *const Stat)",
                "score": 0.3203984200954437,
                "sortText": "415bf4bdstat",
                "textEdit": {
                    "newText": "stat",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strcat",
                "insertText": "strcat",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strcat(char *Destination, const char *Source)",
                "score": 0.2942298352718353,
                "sortText": "41695ab5strcat",
                "textEdit": {
                    "newText": "strcat",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string.h>\nDeclarations of functions defined in oldnames.lib:"
                },
                "filterText": "strcmpi",
                "insertText": "strcmpi",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strcmpi(const char *String1, const char *String2)",
                "score": 0.2942298352718353,
                "sortText": "41695ab5strcmpi",
                "textEdit": {
                    "newText": "strcmpi",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strcpy",
                "insertText": "strcpy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strcpy(char *Destination, const char *Source)",
                "score": 0.2942298352718353,
                "sortText": "41695ab5strcpy",
                "textEdit": {
                    "newText": "strcpy",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string.h>"
                },
                "filterText": "strdup",
                "insertText": "strdup",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strdup(const char *String)",
                "score": 0.2942298352718353,
                "sortText": "41695ab5strdup",
                "textEdit": {
                    "newText": "strdup",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strerror",
                "insertText": "strerror",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strerror(int ErrorMessage)",
                "score": 0.2942298352718353,
                "sortText": "41695ab5strerror",
                "textEdit": {
                    "newText": "strerror",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string.h>"
                },
                "filterText": "stricmp",
                "insertText": "stricmp",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022stricmp(const char *String1, const char *String2)",
                "score": 0.2942298352718353,
                "sortText": "41695ab5stricmp",
                "textEdit": {
                    "newText": "stricmp",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string.h>"
                },
                "filterText": "strlwr",
                "insertText": "strlwr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strlwr(char *String)",
                "score": 0.2942298352718353,
                "sortText": "41695ab5strlwr",
                "textEdit": {
                    "newText": "strlwr",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strncat",
                "insertText": "strncat",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strncat(char *Destination, const char *Source, size_t Count)",
                "score": 0.2942298352718353,
                "sortText": "41695ab5strncat",
                "textEdit": {
                    "newText": "strncat",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strncpy",
                "insertText": "strncpy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strncpy(char *Destination, const char *Source, size_t Count)",
                "score": 0.2942298352718353,
                "sortText": "41695ab5strncpy",
                "textEdit": {
                    "newText": "strncpy",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string.h>"
                },
                "filterText": "strnicmp",
                "insertText": "strnicmp",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strnicmp(const char *String1, const char *String2, size_t MaxCount)",
                "score": 0.2942298352718353,
                "sortText": "41695ab5strnicmp",
                "textEdit": {
                    "newText": "strnicmp",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string.h>"
                },
                "filterText": "strnset",
                "insertText": "strnset",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strnset(char *String, int Value, size_t MaxCount)",
                "score": 0.2942298352718353,
                "sortText": "41695ab5strnset",
                "textEdit": {
                    "newText": "strnset",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string.h>"
                },
                "filterText": "strrev",
                "insertText": "strrev",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strrev(char *String)",
                "score": 0.2942298352718353,
                "sortText": "41695ab5strrev",
                "textEdit": {
                    "newText": "strrev",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string.h>"
                },
                "filterText": "strset",
                "insertText": "strset",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strset(char *String, int Value)",
                "score": 0.2942298352718353,
                "sortText": "41695ab5strset",
                "textEdit": {
                    "newText": "strset",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strtok",
                "insertText": "strtok",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strtok(char *String, const char *Delimiter)",
                "score": 0.2942298352718353,
                "sortText": "41695ab5strtok",
                "textEdit": {
                    "newText": "strtok",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string.h>"
                },
                "filterText": "strupr",
                "insertText": "strupr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strupr(char *String)",
                "score": 0.2942298352718353,
                "sortText": "41695ab5strupr",
                "textEdit": {
                    "newText": "strupr",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strcat",
                "insertText": "std::strcat",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strcat",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strcat",
                "textEdit": {
                    "newText": "std::strcat",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strchr",
                "insertText": "std::strchr",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strchr",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strchr",
                "textEdit": {
                    "newText": "std::strchr",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strcmp",
                "insertText": "std::strcmp",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strcmp",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strcmp",
                "textEdit": {
                    "newText": "std::strcmp",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strcoll",
                "insertText": "std::strcoll",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strcoll",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strcoll",
                "textEdit": {
                    "newText": "std::strcoll",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strcpy",
                "insertText": "std::strcpy",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strcpy",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strcpy",
                "textEdit": {
                    "newText": "std::strcpy",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strcspn",
                "insertText": "std::strcspn",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strcspn",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strcspn",
                "textEdit": {
                    "newText": "std::strcspn",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strerror",
                "insertText": "std::strerror",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strerror",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strerror",
                "textEdit": {
                    "newText": "std::strerror",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "strftime",
                "insertText": "std::strftime",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strftime",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strftime",
                "textEdit": {
                    "newText": "std::strftime",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strlen",
                "insertText": "std::strlen",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strlen",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strlen",
                "textEdit": {
                    "newText": "std::strlen",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strncat",
                "insertText": "std::strncat",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strncat",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strncat",
                "textEdit": {
                    "newText": "std::strncat",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strncmp",
                "insertText": "std::strncmp",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strncmp",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strncmp",
                "textEdit": {
                    "newText": "std::strncmp",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strncpy",
                "insertText": "std::strncpy",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strncpy",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strncpy",
                "textEdit": {
                    "newText": "std::strncpy",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strpbrk",
                "insertText": "std::strpbrk",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strpbrk",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strpbrk",
                "textEdit": {
                    "newText": "std::strpbrk",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strrchr",
                "insertText": "std::strrchr",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strrchr",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strrchr",
                "textEdit": {
                    "newText": "std::strrchr",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strspn",
                "insertText": "std::strspn",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strspn",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strspn",
                "textEdit": {
                    "newText": "std::strspn",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strstr",
                "insertText": "std::strstr",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strstr",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strstr",
                "textEdit": {
                    "newText": "std::strstr",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cinttypes>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cinttypes>"
                },
                "filterText": "strtoimax",
                "insertText": "std::strtoimax",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strtoimax",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strtoimax",
                "textEdit": {
                    "newText": "std::strtoimax",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strtok",
                "insertText": "std::strtok",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strtok",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strtok",
                "textEdit": {
                    "newText": "std::strtok",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cinttypes>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cinttypes>"
                },
                "filterText": "strtoumax",
                "insertText": "std::strtoumax",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strtoumax",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strtoumax",
                "textEdit": {
                    "newText": "std::strtoumax",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strxfrm",
                "insertText": "std::strxfrm",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::strxfrm",
                "score": 0.2596149444580078,
                "sortText": "417b13c0strxfrm",
                "textEdit": {
                    "newText": "std::strxfrm",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "student_t_distribution",
                "insertText": "std::tr1::student_t_distribution",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::tr1::student_t_distribution",
                "score": 0.2596149444580078,
                "sortText": "417b13c0student_t_distribution",
                "textEdit": {
                    "newText": "std::tr1::student_t_distribution",
                    "range": {
                        "end": {
                            "character": 18,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['std::string_literals', 'std', 'stdext', 'status87', 'stderr', 'stdin', 'stdout', 'std::stack', 'std::streambuf', 'std::streamoff', 'std::streampos', 'std::streamsize', 'std::string', 'std::stringbuf', 'std::stringstream', 'std::strstream', 'std::strstreambuf', 'std::student_t_distribution', 'stat', 'std::stable_partition', 'strchr', 'strrchr', 'strstr', 'std::stable_sort', 'std::stable_sort', 'std::experimental::filesystem::status', 'std::experimental::filesystem::status', 'std::errc::state_not_recoverable', 'std::io_errc::stream', 'std::errc::stream_timeout', 'strcat_s', 'strcat_s', 'strchr', 'strcmp', 'strcoll', 'strcpy_s', 'strcpy_s', 'strcspn', 'strerror_s', 'strerror_s', 'strftime', 'strlen', 'strncat_s', 'strncat_s', 'strncmp', 'strncpy_s', 'strncpy_s', 'strnlen', 'strnlen_s', 'strpbrk', 'strpbrk', 'strrchr', 'strspn', 'strstr', 'strtod', 'strtof', 'strtok_s', 'strtol', 'strtold', 'strtoll', 'strtoul', 'strtoull', 'strxfrm', 'stat', 'strcat', 'strcmpi', 'strcpy', 'strdup', 'strerror', 'stricmp', 'strlwr', 'strncat', 'strncpy', 'strnicmp', 'strnset', 'strrev', 'strset', 'strtok', 'strupr', 'std::strcat', 'std::strchr', 'std::strcmp', 'std::strcoll', 'std::strcpy', 'std::strcspn', 'std::strerror', 'std::strftime', 'std::strlen', 'std::strncat', 'std::strncmp', 'std::strncpy', 'std::strpbrk', 'std::strrchr', 'std::strspn', 'std::strstr', 'std::strtoimax', 'std::strtok', 'std::strtoumax', 'std::strxfrm', 'std::tr1::student_t_distribution']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_semi_after_namespace_name",
                "message": "Expected ';' after namespace name (fix available)",
                "range": {
                    "end": {
                        "character": 18,
                        "line": 2
                    },
                    "start": {
                        "character": 18,
                        "line": 2
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_namespace_name",
                "message": "Expected namespace name",
                "range": {
                    "end": {
                        "character": 18,
                        "line": 2
                    },
                    "start": {
                        "character": 16,
                        "line": 2
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 38
    }
}
Diagnostics received from LSP.
Errors received: [[2, [18, 18]], [2, [16, 18]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_semi_after_namespace_name",
                "message": "Expected ';' after namespace name (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 2
                    },
                    "start": {
                        "character": 19,
                        "line": 2
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 39
    }
}
Diagnostics received from LSP.
Errors received: [[2, [19, 19]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 40
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 42
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.968748688697815,
                "sortText": "4004000bstd",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 1.5456733703613281,
                "sortText": "403a2760size_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "using namespace",
                "insertText": "using namespace",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using namespace identifier;",
                "score": 1.2914848327636719,
                "sortText": "405ab0a0using namespace",
                "textEdit": {
                    "newText": "using namespace",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "namespace",
                "insertText": "namespace",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " namespace name = namespace;",
                "score": 1.117948293685913,
                "sortText": "4070e712namespace",
                "textEdit": {
                    "newText": "namespace",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using qualifier::name;",
                "score": 1.117948293685913,
                "sortText": "4070e712using",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using name = type;",
                "score": 1.117948293685913,
                "sortText": "4070e712using",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "_iobuf",
                "insertText": "_iobuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " _iobuf",
                "score": 1.0411033630371094,
                "sortText": "407abd20_iobuf",
                "textEdit": {
                    "newText": "_iobuf",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "type_info",
                "insertText": "type_info",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " type_info",
                "score": 1.0411033630371094,
                "sortText": "407abd20type_info",
                "textEdit": {
                    "newText": "type_info",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR32_T_LOCK_FREE",
                "score": 0.9372367262840271,
                "sortText": "40901141ATOMIC_CHAR32_T_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR32_T_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "equal_to",
                "insertText": "equal_to",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022equal_to<class Ty>",
                "score": 0.9031737446784973,
                "sortText": "4098c99bequal_to",
                "textEdit": {
                    "newText": "equal_to",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "greater",
                "insertText": "greater",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022greater<class Ty>",
                "score": 0.9031737446784973,
                "sortText": "4098c99bgreater",
                "textEdit": {
                    "newText": "greater",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "greater_equal",
                "insertText": "greater_equal",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022greater_equal<class Ty>",
                "score": 0.9031737446784973,
                "sortText": "4098c99bgreater_equal",
                "textEdit": {
                    "newText": "greater_equal",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "iterator",
                "insertText": "iterator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022iterator<class Category, class Ty, class Diff, class Pointer, class Reference>",
                "score": 0.9031737446784973,
                "sortText": "4098c99biterator",
                "textEdit": {
                    "newText": "iterator",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "less_equal",
                "insertText": "less_equal",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022less_equal<class Ty>",
                "score": 0.9031737446784973,
                "sortText": "4098c99bless_equal",
                "textEdit": {
                    "newText": "less_equal",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "minus",
                "insertText": "minus",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022minus<class Ty>",
                "score": 0.9031737446784973,
                "sortText": "4098c99bminus",
                "textEdit": {
                    "newText": "minus",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "move_iterator",
                "insertText": "move_iterator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022move_iterator<class Iter>",
                "score": 0.9031737446784973,
                "sortText": "4098c99bmove_iterator",
                "textEdit": {
                    "newText": "move_iterator",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "multiplies",
                "insertText": "multiplies",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022multiplies<class Ty>",
                "score": 0.9031737446784973,
                "sortText": "4098c99bmultiplies",
                "textEdit": {
                    "newText": "multiplies",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "not_equal_to",
                "insertText": "not_equal_to",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022not_equal_to<class Ty>",
                "score": 0.9031737446784973,
                "sortText": "4098c99bnot_equal_to",
                "textEdit": {
                    "newText": "not_equal_to",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "plus",
                "insertText": "plus",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022plus<class Ty>",
                "score": 0.9031737446784973,
                "sortText": "4098c99bplus",
                "textEdit": {
                    "newText": "plus",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "pointer_traits",
                "insertText": "pointer_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022pointer_traits<class Ty>",
                "score": 0.9031737446784973,
                "sortText": "4098c99bpointer_traits",
                "textEdit": {
                    "newText": "pointer_traits",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "reverse_iterator",
                "insertText": "reverse_iterator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022reverse_iterator<class BidIt>",
                "score": 0.9031737446784973,
                "sortText": "4098c99breverse_iterator",
                "textEdit": {
                    "newText": "reverse_iterator",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7a_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7a_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7a_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "alignas",
                "insertText": "alignas",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignas(expression)",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aalignas",
                "textEdit": {
                    "newText": "alignas",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "asm",
                "insertText": "asm",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " asm(string-literal)",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aasm",
                "textEdit": {
                    "newText": "asm",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aauto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7abool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7achar",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7achar16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7achar32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aclass",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aconst",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aconstexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7adecltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7adouble",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aenum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "extern",
                "insertText": "extern",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " extern",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aextern",
                "textEdit": {
                    "newText": "extern",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7afloat",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "inline",
                "insertText": "inline",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " inline",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7ainline",
                "textEdit": {
                    "newText": "inline",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aint",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7along",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aoperator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7ashort",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7asigned",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "static",
                "insertText": "static",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " static",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7astatic",
                "textEdit": {
                    "newText": "static",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "static_assert",
                "insertText": "static_assert",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_assert(expression, message);",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7astatic_assert",
                "textEdit": {
                    "newText": "static_assert",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7astruct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "template",
                "insertText": "template",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " template",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7atemplate",
                "textEdit": {
                    "newText": "template",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "template",
                "insertText": "template",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " template",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7atemplate",
                "textEdit": {
                    "newText": "template",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "thread_local",
                "insertText": "thread_local",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " thread_local",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7athread_local",
                "textEdit": {
                    "newText": "thread_local",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "typedef",
                "insertText": "typedef",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typedef type name;",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7atypedef",
                "textEdit": {
                    "newText": "typedef",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7atypename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aunion",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aunsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7avoid",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7avolatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7awchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "_DEBUG_LT_PRED",
                "insertText": "_DEBUG_LT_PRED",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_DEBUG_LT_PRED(pred, x, y)",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_DEBUG_LT_PRED",
                "textEdit": {
                    "newText": "_DEBUG_LT_PRED",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "_DEBUG_ORDER_SET_UNWRAPPED",
                "insertText": "_DEBUG_ORDER_SET_UNWRAPPED",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_DEBUG_ORDER_SET_UNWRAPPED(otherIter, first, last, pred)",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_DEBUG_ORDER_SET_UNWRAPPED",
                "textEdit": {
                    "newText": "_DEBUG_ORDER_SET_UNWRAPPED",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "_DEBUG_ORDER_UNWRAPPED",
                "insertText": "_DEBUG_ORDER_UNWRAPPED",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_DEBUG_ORDER_UNWRAPPED(first, last, pred)",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_DEBUG_ORDER_UNWRAPPED",
                "textEdit": {
                    "newText": "_DEBUG_ORDER_UNWRAPPED",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "_REQUIRE_CPP17_MUTABLE_BIDIRECTIONAL_ITERATOR",
                "insertText": "_REQUIRE_CPP17_MUTABLE_BIDIRECTIONAL_ITERATOR",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_REQUIRE_CPP17_MUTABLE_BIDIRECTIONAL_ITERATOR(_Iter)",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_REQUIRE_CPP17_MUTABLE_BIDIRECTIONAL_ITERATOR",
                "textEdit": {
                    "newText": "_REQUIRE_CPP17_MUTABLE_BIDIRECTIONAL_ITERATOR",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "_REQUIRE_CPP17_MUTABLE_ITERATOR",
                "insertText": "_REQUIRE_CPP17_MUTABLE_ITERATOR",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_REQUIRE_CPP17_MUTABLE_ITERATOR(_Iter)",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_REQUIRE_CPP17_MUTABLE_ITERATOR",
                "textEdit": {
                    "newText": "_REQUIRE_CPP17_MUTABLE_ITERATOR",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "_USE_STD_VECTOR_ALGORITHMS",
                "insertText": "_USE_STD_VECTOR_ALGORITHMS",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_USE_STD_VECTOR_ALGORITHMS",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_USE_STD_VECTOR_ALGORITHMS",
                "textEdit": {
                    "newText": "_USE_STD_VECTOR_ALGORITHMS",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "_USE_STD_VECTOR_FLOATING_ALGORITHMS",
                "insertText": "_USE_STD_VECTOR_FLOATING_ALGORITHMS",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_USE_STD_VECTOR_FLOATING_ALGORITHMS",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_USE_STD_VECTOR_FLOATING_ALGORITHMS",
                "textEdit": {
                    "newText": "_USE_STD_VECTOR_FLOATING_ALGORITHMS",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_sub",
                "insertText": "atomic_fetch_sub",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_sub(atomic<Ty> *Mem, const typename atomic<Ty>::difference_type Value)",
                "score": 0.4551366865634918,
                "sortText": "4116f853atomic_fetch_sub",
                "textEdit": {
                    "newText": "atomic_fetch_sub",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Ty *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "begin",
                "insertText": "begin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022begin(Ty (&Array)[Size])",
                "score": 0.4551366865634918,
                "sortText": "4116f853begin",
                "textEdit": {
                    "newText": "begin",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.begin())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "begin",
                "insertText": "begin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022begin(Container &Cont)",
                "score": 0.4551366865634918,
                "sortText": "4116f853begin",
                "textEdit": {
                    "newText": "begin",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.begin())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "begin",
                "insertText": "begin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022begin(const Container &Cont)",
                "score": 0.4551366865634918,
                "sortText": "4116f853begin",
                "textEdit": {
                    "newText": "begin",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::begin(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "cbegin",
                "insertText": "cbegin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbegin(const Container &Cont)",
                "score": 0.4551366865634918,
                "sortText": "4116f853cbegin",
                "textEdit": {
                    "newText": "cbegin",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::end(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "cend",
                "insertText": "cend",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cend(const Container &Cont)",
                "score": 0.4551366865634918,
                "sortText": "4116f853cend",
                "textEdit": {
                    "newText": "cend",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy",
                "insertText": "copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy(InIt First, InIt Last, OutIt Dest)",
                "score": 0.4551366865634918,
                "sortText": "4116f853copy",
                "textEdit": {
                    "newText": "copy",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "BidIt2",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_backward",
                "insertText": "copy_backward",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_backward(BidIt1 First, BidIt1 Last, BidIt2 Dest)",
                "score": 0.4551366865634918,
                "sortText": "4116f853copy_backward",
                "textEdit": {
                    "newText": "copy_backward",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_n",
                "insertText": "copy_n",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_n(InIt First, Diff Count_raw, OutIt Dest)",
                "score": 0.4551366865634918,
                "sortText": "4116f853copy_n",
                "textEdit": {
                    "newText": "copy_n",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count",
                "insertText": "count",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count(const InIt First, const InIt Last, const Ty &Val)",
                "score": 0.4551366865634918,
                "sortText": "4116f853count",
                "textEdit": {
                    "newText": "count",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::rbegin(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "crbegin",
                "insertText": "crbegin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022crbegin(const Container &Cont)",
                "score": 0.4551366865634918,
                "sortText": "4116f853crbegin",
                "textEdit": {
                    "newText": "crbegin",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::rend(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "crend",
                "insertText": "crend",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022crend(const Container &Cont)",
                "score": 0.4551366865634918,
                "sortText": "4116f853crend",
                "textEdit": {
                    "newText": "crend",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "const Elem *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "data",
                "insertText": "data",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022data(initializer_list<Elem> Ilist)",
                "score": 0.4551366865634918,
                "sortText": "4116f853data",
                "textEdit": {
                    "newText": "data",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Ty *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "data",
                "insertText": "data",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022data(Ty (&Array)[Size])",
                "score": 0.4551366865634918,
                "sortText": "4116f853data",
                "textEdit": {
                    "newText": "data",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.data())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "data",
                "insertText": "data",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022data(Container &Cont)",
                "score": 0.4551366865634918,
                "sortText": "4116f853data",
                "textEdit": {
                    "newText": "data",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.data())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "data",
                "insertText": "data",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022data(const Container &Cont)",
                "score": 0.4551366865634918,
                "sortText": "4116f853data",
                "textEdit": {
                    "newText": "data",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "distance",
                "insertText": "distance",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022distance(InIt First, InIt Last)",
                "score": 0.4551366865634918,
                "sortText": "4116f853distance",
                "textEdit": {
                    "newText": "distance",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.empty())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "empty",
                "insertText": "empty",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022empty(const Container &Cont)",
                "score": 0.4551366865634918,
                "sortText": "4116f853empty",
                "textEdit": {
                    "newText": "empty",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.end())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "end",
                "insertText": "end",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022end(const Container &Cont)",
                "score": 0.4551366865634918,
                "sortText": "4116f853end",
                "textEdit": {
                    "newText": "end",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.end())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "end",
                "insertText": "end",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022end(Container &Cont)",
                "score": 0.4551366865634918,
                "sortText": "4116f853end",
                "textEdit": {
                    "newText": "end",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Ty *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "end",
                "insertText": "end",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022end(Ty (&Array)[Size])",
                "score": 0.4551366865634918,
                "sortText": "4116f853end",
                "textEdit": {
                    "newText": "end",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "fill_n",
                "insertText": "fill_n",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022fill_n(OutIt Dest, const Diff Count_raw, const Ty &Val)",
                "score": 0.4551366865634918,
                "sortText": "4116f853fill_n",
                "textEdit": {
                    "newText": "fill_n",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "InIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "find",
                "insertText": "find",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022find(InIt First, const InIt Last, const Ty &Val)",
                "score": 0.4551366865634918,
                "sortText": "4116f853find",
                "textEdit": {
                    "newText": "find",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "InIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "find_if",
                "insertText": "find_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022find_if(InIt First, const InIt Last, Pr Pred)",
                "score": 0.4551366865634918,
                "sortText": "4116f853find_if",
                "textEdit": {
                    "newText": "find_if",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "lower_bound",
                "insertText": "lower_bound",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022lower_bound(FwdIt First, FwdIt Last, const Ty &Val)",
                "score": 0.4551366865634918,
                "sortText": "4116f853lower_bound",
                "textEdit": {
                    "newText": "lower_bound",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "lower_bound",
                "insertText": "lower_bound",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022lower_bound(FwdIt First, const FwdIt Last, const Ty &Val, Pr Pred)",
                "score": 0.4551366865634918,
                "sortText": "4116f853lower_bound",
                "textEdit": {
                    "newText": "lower_bound",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "move_iterator<Iter>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "make_move_iterator",
                "insertText": "make_move_iterator",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_move_iterator(Iter It)",
                "score": 0.4551366865634918,
                "sortText": "4116f853make_move_iterator",
                "textEdit": {
                    "newText": "make_move_iterator",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "reverse_iterator<BidIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "make_reverse_iterator",
                "insertText": "make_reverse_iterator",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_reverse_iterator(BidIt Iter)",
                "score": 0.4551366865634918,
                "sortText": "4116f853make_reverse_iterator",
                "textEdit": {
                    "newText": "make_reverse_iterator",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "max",
                "insertText": "max",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022max(initializer_list<Ty>, Pr)",
                "score": 0.4551366865634918,
                "sortText": "4116f853max",
                "textEdit": {
                    "newText": "max",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "max",
                "insertText": "max",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022max(initializer_list<Ty>)",
                "score": 0.4551366865634918,
                "sortText": "4116f853max",
                "textEdit": {
                    "newText": "max",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "max_element",
                "insertText": "max_element",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022max_element(FwdIt First, FwdIt Last, Pr Pred)",
                "score": 0.4551366865634918,
                "sortText": "4116f853max_element",
                "textEdit": {
                    "newText": "max_element",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "max_element",
                "insertText": "max_element",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022max_element(FwdIt First, FwdIt Last)",
                "score": 0.4551366865634918,
                "sortText": "4116f853max_element",
                "textEdit": {
                    "newText": "max_element",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "min",
                "insertText": "min",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022min(initializer_list<Ty>)",
                "score": 0.4551366865634918,
                "sortText": "4116f853min",
                "textEdit": {
                    "newText": "min",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "min",
                "insertText": "min",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022min(initializer_list<Ty>, Pr)",
                "score": 0.4551366865634918,
                "sortText": "4116f853min",
                "textEdit": {
                    "newText": "min",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "min_element",
                "insertText": "min_element",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022min_element(FwdIt First, FwdIt Last)",
                "score": 0.4551366865634918,
                "sortText": "4116f853min_element",
                "textEdit": {
                    "newText": "min_element",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['std', 'size_t', 'using namespace', 'namespace', 'using', 'using', '_iobuf', 'type_info', 'ATOMIC_CHAR32_T_LOCK_FREE', 'equal_to', 'greater', 'greater_equal', 'iterator', 'less_equal', 'minus', 'move_iterator', 'multiplies', 'not_equal_to', 'plus', 'pointer_traits', 'reverse_iterator', '_Nonnull', '_Null_unspecified', '_Nullable', 'alignas', 'asm', 'auto', 'bool', 'char', 'char16_t', 'char32_t', 'class', 'const', 'constexpr', 'decltype', 'double', 'enum', 'extern', 'float', 'inline', 'int', 'long', 'operator', 'short', 'signed', 'static', 'static_assert', 'struct', 'template', 'template', 'thread_local', 'typedef', 'typename', 'union', 'unsigned', 'void', 'volatile', 'wchar_t', '_DEBUG_LT_PRED', '_DEBUG_ORDER_SET_UNWRAPPED', '_DEBUG_ORDER_UNWRAPPED', '_REQUIRE_CPP17_MUTABLE_BIDIRECTIONAL_ITERATOR', '_REQUIRE_CPP17_MUTABLE_ITERATOR', '_USE_STD_VECTOR_ALGORITHMS', '_USE_STD_VECTOR_FLOATING_ALGORITHMS', 'atomic_fetch_sub', 'begin', 'begin', 'begin', 'cbegin', 'cend', 'copy', 'copy_backward', 'copy_n', 'count', 'crbegin', 'crend', 'data', 'data', 'data', 'data', 'distance', 'empty', 'end', 'end', 'end', 'fill_n', 'find', 'find_if', 'lower_bound', 'lower_bound', 'make_move_iterator', 'make_reverse_iterator', 'max', 'max', 'max_element', 'max_element', 'min', 'min', 'min_element']
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 43
    }
}
Diagnostics received from LSP.
Errors received: []
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdint.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdint.h>"
                },
                "filterText": "INT16_C",
                "insertText": "INT16_C",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022INT16_C(x)",
                "score": 0.9372367262840271,
                "sortText": "40901141INT16_C",
                "textEdit": {
                    "newText": "INT16_C",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT16_MAX",
                "insertText": "INT16_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT16_MAX",
                "score": 0.9372367262840271,
                "sortText": "40901141INT16_MAX",
                "textEdit": {
                    "newText": "INT16_MAX",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT16_MIN",
                "insertText": "INT16_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT16_MIN",
                "score": 0.9372367262840271,
                "sortText": "40901141INT16_MIN",
                "textEdit": {
                    "newText": "INT16_MIN",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdint.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdint.h>"
                },
                "filterText": "INT32_C",
                "insertText": "INT32_C",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022INT32_C(x)",
                "score": 0.9372367262840271,
                "sortText": "40901141INT32_C",
                "textEdit": {
                    "newText": "INT32_C",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT32_MAX",
                "insertText": "INT32_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT32_MAX",
                "score": 0.9372367262840271,
                "sortText": "40901141INT32_MAX",
                "textEdit": {
                    "newText": "INT32_MAX",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT32_MIN",
                "insertText": "INT32_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT32_MIN",
                "score": 0.9372367262840271,
                "sortText": "40901141INT32_MIN",
                "textEdit": {
                    "newText": "INT32_MIN",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdint.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdint.h>"
                },
                "filterText": "INT64_C",
                "insertText": "INT64_C",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022INT64_C(x)",
                "score": 0.9372367262840271,
                "sortText": "40901141INT64_C",
                "textEdit": {
                    "newText": "INT64_C",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT64_MAX",
                "insertText": "INT64_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT64_MAX",
                "score": 0.9372367262840271,
                "sortText": "40901141INT64_MAX",
                "textEdit": {
                    "newText": "INT64_MAX",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT64_MIN",
                "insertText": "INT64_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT64_MIN",
                "score": 0.9372367262840271,
                "sortText": "40901141INT64_MIN",
                "textEdit": {
                    "newText": "INT64_MIN",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdint.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdint.h>"
                },
                "filterText": "INT8_C",
                "insertText": "INT8_C",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022INT8_C(x)",
                "score": 0.9372367262840271,
                "sortText": "40901141INT8_C",
                "textEdit": {
                    "newText": "INT8_C",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT8_MAX",
                "insertText": "INT8_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT8_MAX",
                "score": 0.9372367262840271,
                "sortText": "40901141INT8_MAX",
                "textEdit": {
                    "newText": "INT8_MAX",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT8_MIN",
                "insertText": "INT8_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT8_MIN",
                "score": 0.9372367262840271,
                "sortText": "40901141INT8_MIN",
                "textEdit": {
                    "newText": "INT8_MIN",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdint.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdint.h>"
                },
                "filterText": "INTMAX_C",
                "insertText": "INTMAX_C",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022INTMAX_C(x)",
                "score": 0.9372367262840271,
                "sortText": "40901141INTMAX_C",
                "textEdit": {
                    "newText": "INTMAX_C",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INTMAX_MAX",
                "insertText": "INTMAX_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INTMAX_MAX",
                "score": 0.9372367262840271,
                "sortText": "40901141INTMAX_MAX",
                "textEdit": {
                    "newText": "INTMAX_MAX",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INTMAX_MIN",
                "insertText": "INTMAX_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INTMAX_MIN",
                "score": 0.9372367262840271,
                "sortText": "40901141INTMAX_MIN",
                "textEdit": {
                    "newText": "INTMAX_MIN",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INTPTR_MAX",
                "insertText": "INTPTR_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INTPTR_MAX",
                "score": 0.9372367262840271,
                "sortText": "40901141INTPTR_MAX",
                "textEdit": {
                    "newText": "INTPTR_MAX",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INTPTR_MIN",
                "insertText": "INTPTR_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INTPTR_MIN",
                "score": 0.9372367262840271,
                "sortText": "40901141INTPTR_MIN",
                "textEdit": {
                    "newText": "INTPTR_MIN",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_FAST16_MAX",
                "insertText": "INT_FAST16_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_FAST16_MAX",
                "score": 0.9372367262840271,
                "sortText": "40901141INT_FAST16_MAX",
                "textEdit": {
                    "newText": "INT_FAST16_MAX",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_FAST16_MIN",
                "insertText": "INT_FAST16_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_FAST16_MIN",
                "score": 0.9372367262840271,
                "sortText": "40901141INT_FAST16_MIN",
                "textEdit": {
                    "newText": "INT_FAST16_MIN",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_FAST32_MAX",
                "insertText": "INT_FAST32_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_FAST32_MAX",
                "score": 0.9372367262840271,
                "sortText": "40901141INT_FAST32_MAX",
                "textEdit": {
                    "newText": "INT_FAST32_MAX",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_FAST32_MIN",
                "insertText": "INT_FAST32_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_FAST32_MIN",
                "score": 0.9372367262840271,
                "sortText": "40901141INT_FAST32_MIN",
                "textEdit": {
                    "newText": "INT_FAST32_MIN",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_FAST64_MAX",
                "insertText": "INT_FAST64_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_FAST64_MAX",
                "score": 0.9372367262840271,
                "sortText": "40901141INT_FAST64_MAX",
                "textEdit": {
                    "newText": "INT_FAST64_MAX",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_FAST64_MIN",
                "insertText": "INT_FAST64_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_FAST64_MIN",
                "score": 0.9372367262840271,
                "sortText": "40901141INT_FAST64_MIN",
                "textEdit": {
                    "newText": "INT_FAST64_MIN",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_FAST8_MAX",
                "insertText": "INT_FAST8_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_FAST8_MAX",
                "score": 0.9372367262840271,
                "sortText": "40901141INT_FAST8_MAX",
                "textEdit": {
                    "newText": "INT_FAST8_MAX",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_FAST8_MIN",
                "insertText": "INT_FAST8_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_FAST8_MIN",
                "score": 0.9372367262840271,
                "sortText": "40901141INT_FAST8_MIN",
                "textEdit": {
                    "newText": "INT_FAST8_MIN",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_LEAST16_MAX",
                "insertText": "INT_LEAST16_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_LEAST16_MAX",
                "score": 0.9372367262840271,
                "sortText": "40901141INT_LEAST16_MAX",
                "textEdit": {
                    "newText": "INT_LEAST16_MAX",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_LEAST16_MIN",
                "insertText": "INT_LEAST16_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_LEAST16_MIN",
                "score": 0.9372367262840271,
                "sortText": "40901141INT_LEAST16_MIN",
                "textEdit": {
                    "newText": "INT_LEAST16_MIN",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_LEAST32_MAX",
                "insertText": "INT_LEAST32_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_LEAST32_MAX",
                "score": 0.9372367262840271,
                "sortText": "40901141INT_LEAST32_MAX",
                "textEdit": {
                    "newText": "INT_LEAST32_MAX",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_LEAST32_MIN",
                "insertText": "INT_LEAST32_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_LEAST32_MIN",
                "score": 0.9372367262840271,
                "sortText": "40901141INT_LEAST32_MIN",
                "textEdit": {
                    "newText": "INT_LEAST32_MIN",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_LEAST64_MAX",
                "insertText": "INT_LEAST64_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_LEAST64_MAX",
                "score": 0.9372367262840271,
                "sortText": "40901141INT_LEAST64_MAX",
                "textEdit": {
                    "newText": "INT_LEAST64_MAX",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_LEAST64_MIN",
                "insertText": "INT_LEAST64_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_LEAST64_MIN",
                "score": 0.9372367262840271,
                "sortText": "40901141INT_LEAST64_MIN",
                "textEdit": {
                    "newText": "INT_LEAST64_MIN",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_LEAST8_MAX",
                "insertText": "INT_LEAST8_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_LEAST8_MAX",
                "score": 0.9372367262840271,
                "sortText": "40901141INT_LEAST8_MAX",
                "textEdit": {
                    "newText": "INT_LEAST8_MAX",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_LEAST8_MIN",
                "insertText": "INT_LEAST8_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_LEAST8_MIN",
                "score": 0.9372367262840271,
                "sortText": "40901141INT_LEAST8_MIN",
                "textEdit": {
                    "newText": "INT_LEAST8_MIN",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <valarray>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <valarray>"
                },
                "filterText": "indirect_array",
                "insertText": "indirect_array",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022indirect_array<class Ty>",
                "score": 0.9031737446784973,
                "sortText": "4098c99bindirect_array",
                "textEdit": {
                    "newText": "indirect_array",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <initializer_list>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <initializer_list>"
                },
                "filterText": "initializer_list",
                "insertText": "initializer_list",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022initializer_list<class Elem>",
                "score": 0.9031737446784973,
                "sortText": "4098c99binitializer_list",
                "textEdit": {
                    "newText": "initializer_list",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>\nfrom <iterator>"
                },
                "filterText": "input_iterator_tag",
                "insertText": "input_iterator_tag",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022input_iterator_tag",
                "score": 0.9031737446784973,
                "sortText": "4098c99binput_iterator_tag",
                "textEdit": {
                    "newText": "input_iterator_tag",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "insert_iterator",
                "insertText": "insert_iterator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022insert_iterator<class Container>",
                "score": 0.9031737446784973,
                "sortText": "4098c99binsert_iterator",
                "textEdit": {
                    "newText": "insert_iterator",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ios>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ios>"
                },
                "filterText": "io_errc",
                "insertText": "io_errc",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022io_errc",
                "score": 0.9031737446784973,
                "sortText": "4098c99bio_errc",
                "textEdit": {
                    "newText": "io_errc",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ios>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ios>"
                },
                "filterText": "ios_base",
                "insertText": "ios_base",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022ios_base",
                "score": 0.9031737446784973,
                "sortText": "4098c99bios_base",
                "textEdit": {
                    "newText": "ios_base",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>"
                },
                "filterText": "is_error_code_enum",
                "insertText": "is_error_code_enum",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022is_error_code_enum<class Enum>",
                "score": 0.9031737446784973,
                "sortText": "4098c99bis_error_code_enum",
                "textEdit": {
                    "newText": "is_error_code_enum",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>"
                },
                "filterText": "is_error_condition_enum",
                "insertText": "is_error_condition_enum",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022is_error_condition_enum<class Enum>",
                "score": 0.9031737446784973,
                "sortText": "4098c99bis_error_condition_enum",
                "textEdit": {
                    "newText": "is_error_condition_enum",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "istream_iterator",
                "insertText": "istream_iterator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022istream_iterator<class Ty, class Elem, class Traits, class Diff>",
                "score": 0.9031737446784973,
                "sortText": "4098c99bistream_iterator",
                "textEdit": {
                    "newText": "istream_iterator",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "istreambuf_iterator",
                "insertText": "istreambuf_iterator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022istreambuf_iterator<class Elem, class Traits>",
                "score": 0.9031737446784973,
                "sortText": "4098c99bistreambuf_iterator",
                "textEdit": {
                    "newText": "istreambuf_iterator",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "iterator",
                "insertText": "iterator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022iterator<class Category, class Ty, class Diff, class Pointer, class Reference>",
                "score": 0.9031737446784973,
                "sortText": "4098c99biterator",
                "textEdit": {
                    "newText": "iterator",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "iterator_traits",
                "insertText": "iterator_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022iterator_traits<class Iter>",
                "score": 0.9031737446784973,
                "sortText": "4098c99biterator_traits",
                "textEdit": {
                    "newText": "iterator_traits",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "IC_AFFINE",
                "insertText": "IC_AFFINE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022IC_AFFINE",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5IC_AFFINE",
                "textEdit": {
                    "newText": "IC_AFFINE",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "IC_PROJECTIVE",
                "insertText": "IC_PROJECTIVE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022IC_PROJECTIVE",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5IC_PROJECTIVE",
                "textEdit": {
                    "newText": "IC_PROJECTIVE",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <climits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <climits>"
                },
                "filterText": "INT_MAX",
                "insertText": "INT_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_MAX",
                "score": 0.8624388575553894,
                "sortText": "40a33735INT_MAX",
                "textEdit": {
                    "newText": "INT_MAX",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <climits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <climits>"
                },
                "filterText": "INT_MIN",
                "insertText": "INT_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_MIN",
                "score": 0.8624388575553894,
                "sortText": "40a33735INT_MIN",
                "textEdit": {
                    "newText": "INT_MIN",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "inline",
                "insertText": "inline",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " inline",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7ainline",
                "textEdit": {
                    "newText": "inline",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aint",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int16_t",
                "insertText": "int16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int16_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67int16_t",
                "textEdit": {
                    "newText": "int16_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int32_t",
                "insertText": "int32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int32_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67int32_t",
                "textEdit": {
                    "newText": "int32_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int64_t",
                "insertText": "int64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int64_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67int64_t",
                "textEdit": {
                    "newText": "int64_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int8_t",
                "insertText": "int8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int8_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67int8_t",
                "textEdit": {
                    "newText": "int8_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_fast16_t",
                "insertText": "int_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int_fast16_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67int_fast16_t",
                "textEdit": {
                    "newText": "int_fast16_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_fast32_t",
                "insertText": "int_fast32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int_fast32_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67int_fast32_t",
                "textEdit": {
                    "newText": "int_fast32_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_fast64_t",
                "insertText": "int_fast64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int_fast64_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67int_fast64_t",
                "textEdit": {
                    "newText": "int_fast64_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_fast8_t",
                "insertText": "int_fast8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int_fast8_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67int_fast8_t",
                "textEdit": {
                    "newText": "int_fast8_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_least16_t",
                "insertText": "int_least16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int_least16_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67int_least16_t",
                "textEdit": {
                    "newText": "int_least16_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_least32_t",
                "insertText": "int_least32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int_least32_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67int_least32_t",
                "textEdit": {
                    "newText": "int_least32_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_least64_t",
                "insertText": "int_least64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int_least64_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67int_least64_t",
                "textEdit": {
                    "newText": "int_least64_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_least8_t",
                "insertText": "int_least8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int_least8_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67int_least8_t",
                "textEdit": {
                    "newText": "int_least8_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "intmax_t",
                "insertText": "intmax_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022intmax_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67intmax_t",
                "textEdit": {
                    "newText": "intmax_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <sys/types.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <sys/types.h>"
                },
                "filterText": "ino_t",
                "insertText": "ino_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022ino_t",
                "score": 0.5742632150650024,
                "sortText": "40ecfd16ino_t",
                "textEdit": {
                    "newText": "ino_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Upgrade_to_double<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "imag",
                "insertText": "imag",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022imag(Ty)",
                "score": 0.4551366865634918,
                "sortText": "4116f853imag",
                "textEdit": {
                    "newText": "imag",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "imag",
                "insertText": "imag",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022imag(const complex<Ty> &Left)",
                "score": 0.4551366865634918,
                "sortText": "4116f853imag",
                "textEdit": {
                    "newText": "imag",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "insert_iterator<Container>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "inserter",
                "insertText": "inserter",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022inserter(Container &Cont, typename Container::iterator Where)",
                "score": 0.4551366865634918,
                "sortText": "4116f853inserter",
                "textEdit": {
                    "newText": "inserter",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ios>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "const error_category &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ios>"
                },
                "filterText": "iostream_category",
                "insertText": "iostream_category",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022iostream_category()",
                "score": 0.35654914379119873,
                "sortText": "41497264iostream_category",
                "textEdit": {
                    "newText": "iostream_category",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "isnormal",
                "insertText": "isnormal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022isnormal(long double Xx)",
                "score": 0.3079957962036133,
                "sortText": "41624e60isnormal",
                "textEdit": {
                    "newText": "isnormal",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>"
                },
                "filterText": "is_error_code_enum_v",
                "insertText": "is_error_code_enum_v",
                "insertTextFormat": 1,
                "kind": 6,
                "label": "\u2022is_error_code_enum_v<class Ty>",
                "score": 0.2871915400028229,
                "sortText": "416cf53bis_error_code_enum_v",
                "textEdit": {
                    "newText": "is_error_code_enum_v",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>"
                },
                "filterText": "is_error_condition_enum_v",
                "insertText": "is_error_condition_enum_v",
                "insertTextFormat": 1,
                "kind": 6,
                "label": "\u2022is_error_condition_enum_v<class Ty>",
                "score": 0.2871915400028229,
                "sortText": "416cf53bis_error_condition_enum_v",
                "textEdit": {
                    "newText": "is_error_condition_enum_v",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ios>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "ios_base::event",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ios>"
                },
                "filterText": "imbue_event",
                "insertText": "ios_base::imbue_event",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022ios_base::imbue_event",
                "score": 0.256162166595459,
                "sortText": "417cd850imbue_event",
                "textEdit": {
                    "newText": "ios_base::imbue_event",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "itoa",
                "insertText": "itoa",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022itoa(int Value, char *Buffer, int Radix)",
                "score": 0.23015829920768738,
                "sortText": "41945162itoa",
                "textEdit": {
                    "newText": "itoa",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cinttypes>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cinttypes>"
                },
                "filterText": "imaxabs",
                "insertText": "imaxabs",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022imaxabs",
                "score": 0.21920163929462433,
                "sortText": "419f899bimaxabs",
                "textEdit": {
                    "newText": "imaxabs",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cinttypes>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cinttypes>"
                },
                "filterText": "imaxdiv",
                "insertText": "imaxdiv",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022imaxdiv",
                "score": 0.21920163929462433,
                "sortText": "419f899bimaxdiv",
                "textEdit": {
                    "newText": "imaxdiv",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cinttypes>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cinttypes>"
                },
                "filterText": "imaxdiv_t",
                "insertText": "imaxdiv_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022imaxdiv_t",
                "score": 0.21920163929462433,
                "sortText": "419f899bimaxdiv_t",
                "textEdit": {
                    "newText": "imaxdiv_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cctype>"
                },
                "filterText": "isalnum",
                "insertText": "isalnum",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022isalnum",
                "score": 0.21920163929462433,
                "sortText": "419f899bisalnum",
                "textEdit": {
                    "newText": "isalnum",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cctype>"
                },
                "filterText": "isalpha",
                "insertText": "isalpha",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022isalpha",
                "score": 0.21920163929462433,
                "sortText": "419f899bisalpha",
                "textEdit": {
                    "newText": "isalpha",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cctype>"
                },
                "filterText": "isblank",
                "insertText": "isblank",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022isblank",
                "score": 0.21920163929462433,
                "sortText": "419f899bisblank",
                "textEdit": {
                    "newText": "isblank",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cctype>"
                },
                "filterText": "iscntrl",
                "insertText": "iscntrl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iscntrl",
                "score": 0.21920163929462433,
                "sortText": "419f899biscntrl",
                "textEdit": {
                    "newText": "iscntrl",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cctype>"
                },
                "filterText": "isdigit",
                "insertText": "isdigit",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022isdigit",
                "score": 0.21920163929462433,
                "sortText": "419f899bisdigit",
                "textEdit": {
                    "newText": "isdigit",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cctype>"
                },
                "filterText": "isgraph",
                "insertText": "isgraph",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022isgraph",
                "score": 0.21920163929462433,
                "sortText": "419f899bisgraph",
                "textEdit": {
                    "newText": "isgraph",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cctype>"
                },
                "filterText": "islower",
                "insertText": "islower",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022islower",
                "score": 0.21920163929462433,
                "sortText": "419f899bislower",
                "textEdit": {
                    "newText": "islower",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cctype>"
                },
                "filterText": "isprint",
                "insertText": "isprint",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022isprint",
                "score": 0.21920163929462433,
                "sortText": "419f899bisprint",
                "textEdit": {
                    "newText": "isprint",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cctype>"
                },
                "filterText": "ispunct",
                "insertText": "ispunct",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022ispunct",
                "score": 0.21920163929462433,
                "sortText": "419f899bispunct",
                "textEdit": {
                    "newText": "ispunct",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cctype>"
                },
                "filterText": "isspace",
                "insertText": "isspace",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022isspace",
                "score": 0.21920163929462433,
                "sortText": "419f899bisspace",
                "textEdit": {
                    "newText": "isspace",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cctype>"
                },
                "filterText": "isupper",
                "insertText": "isupper",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022isupper",
                "score": 0.21920163929462433,
                "sortText": "419f899bisupper",
                "textEdit": {
                    "newText": "isupper",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "iswalnum",
                "insertText": "iswalnum",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iswalnum",
                "score": 0.21920163929462433,
                "sortText": "419f899biswalnum",
                "textEdit": {
                    "newText": "iswalnum",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "iswalpha",
                "insertText": "iswalpha",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iswalpha",
                "score": 0.21920163929462433,
                "sortText": "419f899biswalpha",
                "textEdit": {
                    "newText": "iswalpha",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "iswblank",
                "insertText": "iswblank",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iswblank",
                "score": 0.21920163929462433,
                "sortText": "419f899biswblank",
                "textEdit": {
                    "newText": "iswblank",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "iswcntrl",
                "insertText": "iswcntrl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iswcntrl",
                "score": 0.21920163929462433,
                "sortText": "419f899biswcntrl",
                "textEdit": {
                    "newText": "iswcntrl",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "iswctype",
                "insertText": "iswctype",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iswctype",
                "score": 0.21920163929462433,
                "sortText": "419f899biswctype",
                "textEdit": {
                    "newText": "iswctype",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "iswdigit",
                "insertText": "iswdigit",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iswdigit",
                "score": 0.21920163929462433,
                "sortText": "419f899biswdigit",
                "textEdit": {
                    "newText": "iswdigit",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "iswgraph",
                "insertText": "iswgraph",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iswgraph",
                "score": 0.21920163929462433,
                "sortText": "419f899biswgraph",
                "textEdit": {
                    "newText": "iswgraph",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "iswlower",
                "insertText": "iswlower",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iswlower",
                "score": 0.21920163929462433,
                "sortText": "419f899biswlower",
                "textEdit": {
                    "newText": "iswlower",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "iswprint",
                "insertText": "iswprint",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iswprint",
                "score": 0.21920163929462433,
                "sortText": "419f899biswprint",
                "textEdit": {
                    "newText": "iswprint",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "iswpunct",
                "insertText": "iswpunct",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iswpunct",
                "score": 0.21920163929462433,
                "sortText": "419f899biswpunct",
                "textEdit": {
                    "newText": "iswpunct",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "iswspace",
                "insertText": "iswspace",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iswspace",
                "score": 0.21920163929462433,
                "sortText": "419f899biswspace",
                "textEdit": {
                    "newText": "iswspace",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "iswupper",
                "insertText": "iswupper",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iswupper",
                "score": 0.21920163929462433,
                "sortText": "419f899biswupper",
                "textEdit": {
                    "newText": "iswupper",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['INT16_C', 'INT16_MAX', 'INT16_MIN', 'INT32_C', 'INT32_MAX', 'INT32_MIN', 'INT64_C', 'INT64_MAX', 'INT64_MIN', 'INT8_C', 'INT8_MAX', 'INT8_MIN', 'INTMAX_C', 'INTMAX_MAX', 'INTMAX_MIN', 'INTPTR_MAX', 'INTPTR_MIN', 'INT_FAST16_MAX', 'INT_FAST16_MIN', 'INT_FAST32_MAX', 'INT_FAST32_MIN', 'INT_FAST64_MAX', 'INT_FAST64_MIN', 'INT_FAST8_MAX', 'INT_FAST8_MIN', 'INT_LEAST16_MAX', 'INT_LEAST16_MIN', 'INT_LEAST32_MAX', 'INT_LEAST32_MIN', 'INT_LEAST64_MAX', 'INT_LEAST64_MIN', 'INT_LEAST8_MAX', 'INT_LEAST8_MIN', 'indirect_array', 'initializer_list', 'input_iterator_tag', 'insert_iterator', 'io_errc', 'ios_base', 'is_error_code_enum', 'is_error_condition_enum', 'istream_iterator', 'istreambuf_iterator', 'iterator', 'iterator_traits', 'IC_AFFINE', 'IC_PROJECTIVE', 'INT_MAX', 'INT_MIN', 'inline', 'int', 'int16_t', 'int32_t', 'int64_t', 'int8_t', 'int_fast16_t', 'int_fast32_t', 'int_fast64_t', 'int_fast8_t', 'int_least16_t', 'int_least32_t', 'int_least64_t', 'int_least8_t', 'intmax_t', 'ino_t', 'imag', 'imag', 'inserter', 'iostream_category', 'isnormal', 'is_error_code_enum_v', 'is_error_condition_enum_v', 'ios_base::imbue_event', 'itoa', 'imaxabs', 'imaxdiv', 'imaxdiv_t', 'isalnum', 'isalpha', 'isblank', 'iscntrl', 'isdigit', 'isgraph', 'islower', 'isprint', 'ispunct', 'isspace', 'isupper', 'iswalnum', 'iswalpha', 'iswblank', 'iswcntrl', 'iswctype', 'iswdigit', 'iswgraph', 'iswlower', 'iswprint', 'iswpunct', 'iswspace', 'iswupper']
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "independent_bits_engine",
                "insertText": "independent_bits_engine",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022independent_bits_engine<class Engine, size_t Wx, class UIntType>",
                "score": 0.9031737446784973,
                "sortText": "4098c99bindependent_bits_engine",
                "textEdit": {
                    "newText": "independent_bits_engine",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "index_sequence",
                "insertText": "index_sequence",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022index_sequence<size_t Vals>",
                "score": 0.9031737446784973,
                "sortText": "4098c99bindex_sequence",
                "textEdit": {
                    "newText": "index_sequence",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "index_sequence_for",
                "insertText": "index_sequence_for",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022index_sequence_for<class Types>",
                "score": 0.9031737446784973,
                "sortText": "4098c99bindex_sequence_for",
                "textEdit": {
                    "newText": "index_sequence_for",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <valarray>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <valarray>"
                },
                "filterText": "indirect_array",
                "insertText": "indirect_array",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022indirect_array<class Ty>",
                "score": 0.9031737446784973,
                "sortText": "4098c99bindirect_array",
                "textEdit": {
                    "newText": "indirect_array",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <initializer_list>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <initializer_list>"
                },
                "filterText": "initializer_list",
                "insertText": "initializer_list",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022initializer_list<class Elem>",
                "score": 0.9031737446784973,
                "sortText": "4098c99binitializer_list",
                "textEdit": {
                    "newText": "initializer_list",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>\nfrom <iterator>"
                },
                "filterText": "input_iterator_tag",
                "insertText": "input_iterator_tag",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022input_iterator_tag",
                "score": 0.9031737446784973,
                "sortText": "4098c99binput_iterator_tag",
                "textEdit": {
                    "newText": "input_iterator_tag",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "insert_iterator",
                "insertText": "insert_iterator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022insert_iterator<class Container>",
                "score": 0.9031737446784973,
                "sortText": "4098c99binsert_iterator",
                "textEdit": {
                    "newText": "insert_iterator",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "integer_sequence",
                "insertText": "integer_sequence",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022integer_sequence<class Ty, Ty Vals>",
                "score": 0.9031737446784973,
                "sortText": "4098c99binteger_sequence",
                "textEdit": {
                    "newText": "integer_sequence",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "integral_constant",
                "insertText": "integral_constant",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022integral_constant<class Ty, Ty Val>",
                "score": 0.9031737446784973,
                "sortText": "4098c99bintegral_constant",
                "textEdit": {
                    "newText": "integral_constant",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdexcept>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdexcept>"
                },
                "filterText": "invalid_argument",
                "insertText": "invalid_argument",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022invalid_argument",
                "score": 0.9031737446784973,
                "sortText": "4098c99binvalid_argument",
                "textEdit": {
                    "newText": "invalid_argument",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdint.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdint.h>"
                },
                "filterText": "INT16_C",
                "insertText": "INT16_C",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022INT16_C(x)",
                "score": 0.9372367262840271,
                "sortText": "40ae0f19INT16_C",
                "textEdit": {
                    "newText": "INT16_C",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT16_MAX",
                "insertText": "INT16_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT16_MAX",
                "score": 0.9372367262840271,
                "sortText": "40ae0f19INT16_MAX",
                "textEdit": {
                    "newText": "INT16_MAX",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT16_MIN",
                "insertText": "INT16_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT16_MIN",
                "score": 0.9372367262840271,
                "sortText": "40ae0f19INT16_MIN",
                "textEdit": {
                    "newText": "INT16_MIN",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdint.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdint.h>"
                },
                "filterText": "INT32_C",
                "insertText": "INT32_C",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022INT32_C(x)",
                "score": 0.9372367262840271,
                "sortText": "40ae0f19INT32_C",
                "textEdit": {
                    "newText": "INT32_C",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT32_MAX",
                "insertText": "INT32_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT32_MAX",
                "score": 0.9372367262840271,
                "sortText": "40ae0f19INT32_MAX",
                "textEdit": {
                    "newText": "INT32_MAX",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT32_MIN",
                "insertText": "INT32_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT32_MIN",
                "score": 0.9372367262840271,
                "sortText": "40ae0f19INT32_MIN",
                "textEdit": {
                    "newText": "INT32_MIN",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT64_MAX",
                "insertText": "INT64_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT64_MAX",
                "score": 0.9372367262840271,
                "sortText": "40ae0f19INT64_MAX",
                "textEdit": {
                    "newText": "INT64_MAX",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT64_MIN",
                "insertText": "INT64_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT64_MIN",
                "score": 0.9372367262840271,
                "sortText": "40ae0f19INT64_MIN",
                "textEdit": {
                    "newText": "INT64_MIN",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdint.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdint.h>"
                },
                "filterText": "INT8_C",
                "insertText": "INT8_C",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022INT8_C(x)",
                "score": 0.9372367262840271,
                "sortText": "40ae0f19INT8_C",
                "textEdit": {
                    "newText": "INT8_C",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT8_MAX",
                "insertText": "INT8_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT8_MAX",
                "score": 0.9372367262840271,
                "sortText": "40ae0f19INT8_MAX",
                "textEdit": {
                    "newText": "INT8_MAX",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT8_MIN",
                "insertText": "INT8_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT8_MIN",
                "score": 0.9372367262840271,
                "sortText": "40ae0f19INT8_MIN",
                "textEdit": {
                    "newText": "INT8_MIN",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INTMAX_MAX",
                "insertText": "INTMAX_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INTMAX_MAX",
                "score": 0.9372367262840271,
                "sortText": "40ae0f19INTMAX_MAX",
                "textEdit": {
                    "newText": "INTMAX_MAX",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INTMAX_MIN",
                "insertText": "INTMAX_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INTMAX_MIN",
                "score": 0.9372367262840271,
                "sortText": "40ae0f19INTMAX_MIN",
                "textEdit": {
                    "newText": "INTMAX_MIN",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INTPTR_MAX",
                "insertText": "INTPTR_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INTPTR_MAX",
                "score": 0.9372367262840271,
                "sortText": "40ae0f19INTPTR_MAX",
                "textEdit": {
                    "newText": "INTPTR_MAX",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INTPTR_MIN",
                "insertText": "INTPTR_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INTPTR_MIN",
                "score": 0.9372367262840271,
                "sortText": "40ae0f19INTPTR_MIN",
                "textEdit": {
                    "newText": "INTPTR_MIN",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_FAST16_MAX",
                "insertText": "INT_FAST16_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_FAST16_MAX",
                "score": 0.9372367262840271,
                "sortText": "40ae0f19INT_FAST16_MAX",
                "textEdit": {
                    "newText": "INT_FAST16_MAX",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_FAST16_MIN",
                "insertText": "INT_FAST16_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_FAST16_MIN",
                "score": 0.9372367262840271,
                "sortText": "40ae0f19INT_FAST16_MIN",
                "textEdit": {
                    "newText": "INT_FAST16_MIN",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_FAST32_MIN",
                "insertText": "INT_FAST32_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_FAST32_MIN",
                "score": 0.9372367262840271,
                "sortText": "40ae0f19INT_FAST32_MIN",
                "textEdit": {
                    "newText": "INT_FAST32_MIN",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_FAST64_MAX",
                "insertText": "INT_FAST64_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_FAST64_MAX",
                "score": 0.9372367262840271,
                "sortText": "40ae0f19INT_FAST64_MAX",
                "textEdit": {
                    "newText": "INT_FAST64_MAX",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_FAST64_MIN",
                "insertText": "INT_FAST64_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_FAST64_MIN",
                "score": 0.9372367262840271,
                "sortText": "40ae0f19INT_FAST64_MIN",
                "textEdit": {
                    "newText": "INT_FAST64_MIN",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_FAST8_MIN",
                "insertText": "INT_FAST8_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_FAST8_MIN",
                "score": 0.9372367262840271,
                "sortText": "40ae0f19INT_FAST8_MIN",
                "textEdit": {
                    "newText": "INT_FAST8_MIN",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_LEAST16_MAX",
                "insertText": "INT_LEAST16_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_LEAST16_MAX",
                "score": 0.9372367262840271,
                "sortText": "40ae0f19INT_LEAST16_MAX",
                "textEdit": {
                    "newText": "INT_LEAST16_MAX",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_LEAST16_MIN",
                "insertText": "INT_LEAST16_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_LEAST16_MIN",
                "score": 0.9372367262840271,
                "sortText": "40ae0f19INT_LEAST16_MIN",
                "textEdit": {
                    "newText": "INT_LEAST16_MIN",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_LEAST32_MAX",
                "insertText": "INT_LEAST32_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_LEAST32_MAX",
                "score": 0.9372367262840271,
                "sortText": "40ae0f19INT_LEAST32_MAX",
                "textEdit": {
                    "newText": "INT_LEAST32_MAX",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_LEAST64_MAX",
                "insertText": "INT_LEAST64_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_LEAST64_MAX",
                "score": 0.9372367262840271,
                "sortText": "40ae0f19INT_LEAST64_MAX",
                "textEdit": {
                    "newText": "INT_LEAST64_MAX",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_LEAST8_MAX",
                "insertText": "INT_LEAST8_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_LEAST8_MAX",
                "score": 0.9372367262840271,
                "sortText": "40ae0f19INT_LEAST8_MAX",
                "textEdit": {
                    "newText": "INT_LEAST8_MAX",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_LEAST8_MIN",
                "insertText": "INT_LEAST8_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_LEAST8_MIN",
                "score": 0.9372367262840271,
                "sortText": "40ae0f19INT_LEAST8_MIN",
                "textEdit": {
                    "newText": "INT_LEAST8_MIN",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "INFINITY",
                "insertText": "INFINITY",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INFINITY",
                "score": 0.8917710185050964,
                "sortText": "40b83e48INFINITY",
                "textEdit": {
                    "newText": "INFINITY",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "inline",
                "insertText": "inline",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " inline",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7ainline",
                "textEdit": {
                    "newText": "inline",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aint",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <climits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <climits>"
                },
                "filterText": "INT_MAX",
                "insertText": "INT_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_MAX",
                "score": 0.8624388575553894,
                "sortText": "40bed04eINT_MAX",
                "textEdit": {
                    "newText": "INT_MAX",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <climits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <climits>"
                },
                "filterText": "INT_MIN",
                "insertText": "INT_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_MIN",
                "score": 0.8624388575553894,
                "sortText": "40bed04eINT_MIN",
                "textEdit": {
                    "newText": "INT_MIN",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int16_t",
                "insertText": "int16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int16_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67int16_t",
                "textEdit": {
                    "newText": "int16_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int32_t",
                "insertText": "int32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int32_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67int32_t",
                "textEdit": {
                    "newText": "int32_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int64_t",
                "insertText": "int64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int64_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67int64_t",
                "textEdit": {
                    "newText": "int64_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int8_t",
                "insertText": "int8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int8_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67int8_t",
                "textEdit": {
                    "newText": "int8_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_fast16_t",
                "insertText": "int_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int_fast16_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67int_fast16_t",
                "textEdit": {
                    "newText": "int_fast16_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_fast32_t",
                "insertText": "int_fast32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int_fast32_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67int_fast32_t",
                "textEdit": {
                    "newText": "int_fast32_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_fast64_t",
                "insertText": "int_fast64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int_fast64_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67int_fast64_t",
                "textEdit": {
                    "newText": "int_fast64_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_fast8_t",
                "insertText": "int_fast8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int_fast8_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67int_fast8_t",
                "textEdit": {
                    "newText": "int_fast8_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_least16_t",
                "insertText": "int_least16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int_least16_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67int_least16_t",
                "textEdit": {
                    "newText": "int_least16_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_least32_t",
                "insertText": "int_least32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int_least32_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67int_least32_t",
                "textEdit": {
                    "newText": "int_least32_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_least64_t",
                "insertText": "int_least64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int_least64_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67int_least64_t",
                "textEdit": {
                    "newText": "int_least64_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_least8_t",
                "insertText": "int_least8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int_least8_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67int_least8_t",
                "textEdit": {
                    "newText": "int_least8_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "intmax_t",
                "insertText": "intmax_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022intmax_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67intmax_t",
                "textEdit": {
                    "newText": "intmax_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "intptr_t",
                "insertText": "intptr_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022intptr_t",
                "score": 0.7307220101356506,
                "sortText": "40c4ef67intptr_t",
                "textEdit": {
                    "newText": "intptr_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplinterface.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplinterface.h>\n<summary> This class describes an exception thrown when an invalid operation is performed that is not more accurately described by another exception type thrown by the Concurrency Runtime.\n</summary> <remarks> The various methods which throw this exception will generally document under what circumstances they will throw it.\n</remarks>"
                },
                "filterText": "invalid_operation",
                "insertText": "Concurrency::invalid_operation",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022Concurrency::invalid_operation",
                "score": 0.6313035488128662,
                "sortText": "40de62e4invalid_operation",
                "textEdit": {
                    "newText": "Concurrency::invalid_operation",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <sys/types.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <sys/types.h>"
                },
                "filterText": "ino_t",
                "insertText": "ino_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022ino_t",
                "score": 0.5742632150650024,
                "sortText": "40ecfd16ino_t",
                "textEdit": {
                    "newText": "ino_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <numeric>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <numeric>"
                },
                "filterText": "inner_product",
                "insertText": "inner_product",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022inner_product(const InIt1 First1, const InIt1 Last1, const InIt2 First2, Ty Val)",
                "score": 0.4551366865634918,
                "sortText": "4116f853inner_product",
                "textEdit": {
                    "newText": "inner_product",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <numeric>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <numeric>"
                },
                "filterText": "inner_product",
                "insertText": "inner_product",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022inner_product(InIt1 First1, InIt1 Last1, InIt2 First2, Ty Val, BinOp1 Reduce_op, BinOp2 Transform_op)",
                "score": 0.4551366865634918,
                "sortText": "4116f853inner_product",
                "textEdit": {
                    "newText": "inner_product",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "insert_iterator<Container>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "inserter",
                "insertText": "inserter",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022inserter(Container &Cont, typename Container::iterator Where)",
                "score": 0.4551366865634918,
                "sortText": "4116f853inserter",
                "textEdit": {
                    "newText": "inserter",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "decltype(_Invoker1<Callable, Ty1>::_Call(static_cast<Callable &&>(Obj), static_cast<Ty1 &&>(Arg1), static_cast<Types2 &&>(Args2)...))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "invoke",
                "insertText": "invoke",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022invoke(Callable &&Obj, Ty1 &&Arg1, Types2 &&Args2...)",
                "score": 0.4551366865634918,
                "sortText": "4116f853invoke",
                "textEdit": {
                    "newText": "invoke",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "decltype(static_cast<Callable &&>(Obj)())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "invoke",
                "insertText": "invoke",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022invoke(Callable &&Obj)",
                "score": 0.4551366865634918,
                "sortText": "4116f853invoke",
                "textEdit": {
                    "newText": "invoke",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "type_info",
                "insertText": "type_info",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " type_info",
                "score": 1.0411033630371094,
                "sortText": "41381bb0type_info",
                "textEdit": {
                    "newText": "type_info",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "includes",
                "insertText": "includes",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022includes(InIt1 First1, InIt1 Last1, InIt2 First2, InIt2 Last2, Pr Pred)",
                "score": 0.35654914379119873,
                "sortText": "41497264includes",
                "textEdit": {
                    "newText": "includes",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "includes",
                "insertText": "includes",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022includes(InIt1 First1, InIt1 Last1, InIt2 First2, InIt2 Last2)",
                "score": 0.35654914379119873,
                "sortText": "41497264includes",
                "textEdit": {
                    "newText": "includes",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "inplace_merge",
                "insertText": "inplace_merge",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022inplace_merge(BidIt First, BidIt Mid, BidIt Last)",
                "score": 0.35654914379119873,
                "sortText": "41497264inplace_merge",
                "textEdit": {
                    "newText": "inplace_merge",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "inplace_merge",
                "insertText": "inplace_merge",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022inplace_merge(BidIt First, BidIt Mid, BidIt Last, Pr Pred)",
                "score": 0.35654914379119873,
                "sortText": "41497264inplace_merge",
                "textEdit": {
                    "newText": "inplace_merge",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ios>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "ios_base &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ios>"
                },
                "filterText": "internal",
                "insertText": "internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022internal(ios_base &Iosbase)",
                "score": 0.35654914379119873,
                "sortText": "41497264internal",
                "textEdit": {
                    "newText": "internal",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nENOTTY"
                },
                "filterText": "inappropriate_io_control_operation",
                "insertText": "errc::inappropriate_io_control_operation",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::inappropriate_io_control_operation",
                "score": 0.256162166595459,
                "sortText": "417cd850inappropriate_io_control_operation",
                "textEdit": {
                    "newText": "errc::inappropriate_io_control_operation",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEINTR"
                },
                "filterText": "interrupted",
                "insertText": "errc::interrupted",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::interrupted",
                "score": 0.256162166595459,
                "sortText": "417cd850interrupted",
                "textEdit": {
                    "newText": "errc::interrupted",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEINVAL"
                },
                "filterText": "invalid_argument",
                "insertText": "errc::invalid_argument",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::invalid_argument",
                "score": 0.256162166595459,
                "sortText": "417cd850invalid_argument",
                "textEdit": {
                    "newText": "errc::invalid_argument",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nESPIPE"
                },
                "filterText": "invalid_seek",
                "insertText": "errc::invalid_seek",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::invalid_seek",
                "score": 0.256162166595459,
                "sortText": "417cd850invalid_seek",
                "textEdit": {
                    "newText": "errc::invalid_seek",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "independent_bits_engine",
                "insertText": "tr1::independent_bits_engine",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::independent_bits_engine",
                "score": 0.22078968584537506,
                "sortText": "419de94findependent_bits_engine",
                "textEdit": {
                    "newText": "tr1::independent_bits_engine",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int16_t",
                "insertText": "tr1::int16_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::int16_t",
                "score": 0.22078968584537506,
                "sortText": "419de94fint16_t",
                "textEdit": {
                    "newText": "tr1::int16_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int32_t",
                "insertText": "tr1::int32_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::int32_t",
                "score": 0.22078968584537506,
                "sortText": "419de94fint32_t",
                "textEdit": {
                    "newText": "tr1::int32_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int64_t",
                "insertText": "tr1::int64_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::int64_t",
                "score": 0.22078968584537506,
                "sortText": "419de94fint64_t",
                "textEdit": {
                    "newText": "tr1::int64_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int8_t",
                "insertText": "tr1::int8_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::int8_t",
                "score": 0.22078968584537506,
                "sortText": "419de94fint8_t",
                "textEdit": {
                    "newText": "tr1::int8_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_fast16_t",
                "insertText": "tr1::int_fast16_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::int_fast16_t",
                "score": 0.22078968584537506,
                "sortText": "419de94fint_fast16_t",
                "textEdit": {
                    "newText": "tr1::int_fast16_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_fast32_t",
                "insertText": "tr1::int_fast32_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::int_fast32_t",
                "score": 0.22078968584537506,
                "sortText": "419de94fint_fast32_t",
                "textEdit": {
                    "newText": "tr1::int_fast32_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_fast64_t",
                "insertText": "tr1::int_fast64_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::int_fast64_t",
                "score": 0.22078968584537506,
                "sortText": "419de94fint_fast64_t",
                "textEdit": {
                    "newText": "tr1::int_fast64_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_fast8_t",
                "insertText": "tr1::int_fast8_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::int_fast8_t",
                "score": 0.22078968584537506,
                "sortText": "419de94fint_fast8_t",
                "textEdit": {
                    "newText": "tr1::int_fast8_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_least16_t",
                "insertText": "tr1::int_least16_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::int_least16_t",
                "score": 0.22078968584537506,
                "sortText": "419de94fint_least16_t",
                "textEdit": {
                    "newText": "tr1::int_least16_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_least32_t",
                "insertText": "tr1::int_least32_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::int_least32_t",
                "score": 0.22078968584537506,
                "sortText": "419de94fint_least32_t",
                "textEdit": {
                    "newText": "tr1::int_least32_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_least64_t",
                "insertText": "tr1::int_least64_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::int_least64_t",
                "score": 0.22078968584537506,
                "sortText": "419de94fint_least64_t",
                "textEdit": {
                    "newText": "tr1::int_least64_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_least8_t",
                "insertText": "tr1::int_least8_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::int_least8_t",
                "score": 0.22078968584537506,
                "sortText": "419de94fint_least8_t",
                "textEdit": {
                    "newText": "tr1::int_least8_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "integral_constant",
                "insertText": "tr1::integral_constant",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::integral_constant",
                "score": 0.22078968584537506,
                "sortText": "419de94fintegral_constant",
                "textEdit": {
                    "newText": "tr1::integral_constant",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "intmax_t",
                "insertText": "tr1::intmax_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::intmax_t",
                "score": 0.22078968584537506,
                "sortText": "419de94fintmax_t",
                "textEdit": {
                    "newText": "tr1::intmax_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "intptr_t",
                "insertText": "tr1::intptr_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::intptr_t",
                "score": 0.22078968584537506,
                "sortText": "419de94fintptr_t",
                "textEdit": {
                    "newText": "tr1::intptr_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int16_t",
                "insertText": "int16_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022int16_t",
                "score": 0.21920163929462433,
                "sortText": "419f899bint16_t",
                "textEdit": {
                    "newText": "int16_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int32_t",
                "insertText": "int32_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022int32_t",
                "score": 0.21920163929462433,
                "sortText": "419f899bint32_t",
                "textEdit": {
                    "newText": "int32_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int64_t",
                "insertText": "int64_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022int64_t",
                "score": 0.21920163929462433,
                "sortText": "419f899bint64_t",
                "textEdit": {
                    "newText": "int64_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int8_t",
                "insertText": "int8_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022int8_t",
                "score": 0.21920163929462433,
                "sortText": "419f899bint8_t",
                "textEdit": {
                    "newText": "int8_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_fast16_t",
                "insertText": "int_fast16_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022int_fast16_t",
                "score": 0.21920163929462433,
                "sortText": "419f899bint_fast16_t",
                "textEdit": {
                    "newText": "int_fast16_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_fast32_t",
                "insertText": "int_fast32_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022int_fast32_t",
                "score": 0.21920163929462433,
                "sortText": "419f899bint_fast32_t",
                "textEdit": {
                    "newText": "int_fast32_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_fast64_t",
                "insertText": "int_fast64_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022int_fast64_t",
                "score": 0.21920163929462433,
                "sortText": "419f899bint_fast64_t",
                "textEdit": {
                    "newText": "int_fast64_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_fast8_t",
                "insertText": "int_fast8_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022int_fast8_t",
                "score": 0.21920163929462433,
                "sortText": "419f899bint_fast8_t",
                "textEdit": {
                    "newText": "int_fast8_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_least16_t",
                "insertText": "int_least16_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022int_least16_t",
                "score": 0.21920163929462433,
                "sortText": "419f899bint_least16_t",
                "textEdit": {
                    "newText": "int_least16_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_least32_t",
                "insertText": "int_least32_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022int_least32_t",
                "score": 0.21920163929462433,
                "sortText": "419f899bint_least32_t",
                "textEdit": {
                    "newText": "int_least32_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_least64_t",
                "insertText": "int_least64_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022int_least64_t",
                "score": 0.21920163929462433,
                "sortText": "419f899bint_least64_t",
                "textEdit": {
                    "newText": "int_least64_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 4
                        },
                        "start": {
                            "character": 0,
                            "line": 4
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['independent_bits_engine', 'index_sequence', 'index_sequence_for', 'indirect_array', 'initializer_list', 'input_iterator_tag', 'insert_iterator', 'integer_sequence', 'integral_constant', 'invalid_argument', 'INT16_C', 'INT16_MAX', 'INT16_MIN', 'INT32_C', 'INT32_MAX', 'INT32_MIN', 'INT64_MAX', 'INT64_MIN', 'INT8_C', 'INT8_MAX', 'INT8_MIN', 'INTMAX_MAX', 'INTMAX_MIN', 'INTPTR_MAX', 'INTPTR_MIN', 'INT_FAST16_MAX', 'INT_FAST16_MIN', 'INT_FAST32_MIN', 'INT_FAST64_MAX', 'INT_FAST64_MIN', 'INT_FAST8_MIN', 'INT_LEAST16_MAX', 'INT_LEAST16_MIN', 'INT_LEAST32_MAX', 'INT_LEAST64_MAX', 'INT_LEAST8_MAX', 'INT_LEAST8_MIN', 'INFINITY', 'inline', 'int', 'INT_MAX', 'INT_MIN', 'int16_t', 'int32_t', 'int64_t', 'int8_t', 'int_fast16_t', 'int_fast32_t', 'int_fast64_t', 'int_fast8_t', 'int_least16_t', 'int_least32_t', 'int_least64_t', 'int_least8_t', 'intmax_t', 'intptr_t', 'Concurrency::invalid_operation', 'ino_t', 'inner_product', 'inner_product', 'inserter', 'invoke', 'invoke', 'type_info', 'includes', 'includes', 'inplace_merge', 'inplace_merge', 'internal', 'errc::inappropriate_io_control_operation', 'errc::interrupted', 'errc::invalid_argument', 'errc::invalid_seek', 'tr1::independent_bits_engine', 'tr1::int16_t', 'tr1::int32_t', 'tr1::int64_t', 'tr1::int8_t', 'tr1::int_fast16_t', 'tr1::int_fast32_t', 'tr1::int_fast64_t', 'tr1::int_fast8_t', 'tr1::int_least16_t', 'tr1::int_least32_t', 'tr1::int_least64_t', 'tr1::int_least8_t', 'tr1::integral_constant', 'tr1::intmax_t', 'tr1::intptr_t', 'int16_t', 'int32_t', 'int64_t', 'int8_t', 'int_fast16_t', 'int_fast32_t', 'int_fast64_t', 'int_fast8_t', 'int_least16_t', 'int_least32_t', 'int_least64_t']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'in'",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 4
                    },
                    "start": {
                        "character": 0,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 4
                    },
                    "start": {
                        "character": 2,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 45
    }
}
Diagnostics received from LSP.
Errors received: [[4, [0, 2]], [4, [2, 2]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 3,
                        "line": 4
                    },
                    "start": {
                        "character": 3,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 46
    }
}
Diagnostics received from LSP.
Errors received: [[4, [3, 3]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "filterText": "_iobuf",
                "insertText": "_iobuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " _iobuf",
                "score": 1.2038503885269165,
                "sortText": "4065e83b_iobuf",
                "textEdit": {
                    "newText": "_iobuf",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "type_info",
                "insertText": "type_info",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " type_info",
                "score": 1.2038503885269165,
                "sortText": "4065e83btype_info",
                "textEdit": {
                    "newText": "type_info",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.0749502182006836,
                "sortText": "40766808std",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8493241667747498,
                "sortText": "40a692b1const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.8493241667747498,
                "sortText": "40a692b1operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.8493241667747498,
                "sortText": "40a692b1volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "equal_to",
                "insertText": "equal_to",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022equal_to<class Ty>",
                "score": 0.6395323276519775,
                "sortText": "40dc479cequal_to",
                "textEdit": {
                    "newText": "equal_to",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "greater",
                "insertText": "greater",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022greater<class Ty>",
                "score": 0.6395323276519775,
                "sortText": "40dc479cgreater",
                "textEdit": {
                    "newText": "greater",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "greater_equal",
                "insertText": "greater_equal",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022greater_equal<class Ty>",
                "score": 0.6395323276519775,
                "sortText": "40dc479cgreater_equal",
                "textEdit": {
                    "newText": "greater_equal",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "iterator",
                "insertText": "iterator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022iterator<class Category, class Ty, class Diff, class Pointer, class Reference>",
                "score": 0.6395323276519775,
                "sortText": "40dc479citerator",
                "textEdit": {
                    "newText": "iterator",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "less_equal",
                "insertText": "less_equal",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022less_equal<class Ty>",
                "score": 0.6395323276519775,
                "sortText": "40dc479cless_equal",
                "textEdit": {
                    "newText": "less_equal",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "minus",
                "insertText": "minus",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022minus<class Ty>",
                "score": 0.6395323276519775,
                "sortText": "40dc479cminus",
                "textEdit": {
                    "newText": "minus",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "move_iterator",
                "insertText": "move_iterator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022move_iterator<class Iter>",
                "score": 0.6395323276519775,
                "sortText": "40dc479cmove_iterator",
                "textEdit": {
                    "newText": "move_iterator",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "multiplies",
                "insertText": "multiplies",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022multiplies<class Ty>",
                "score": 0.6395323276519775,
                "sortText": "40dc479cmultiplies",
                "textEdit": {
                    "newText": "multiplies",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "not_equal_to",
                "insertText": "not_equal_to",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022not_equal_to<class Ty>",
                "score": 0.6395323276519775,
                "sortText": "40dc479cnot_equal_to",
                "textEdit": {
                    "newText": "not_equal_to",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "plus",
                "insertText": "plus",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022plus<class Ty>",
                "score": 0.6395323276519775,
                "sortText": "40dc479cplus",
                "textEdit": {
                    "newText": "plus",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "pointer_traits",
                "insertText": "pointer_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022pointer_traits<class Ty>",
                "score": 0.6395323276519775,
                "sortText": "40dc479cpointer_traits",
                "textEdit": {
                    "newText": "pointer_traits",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "reverse_iterator",
                "insertText": "reverse_iterator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022reverse_iterator<class BidIt>",
                "score": 0.6395323276519775,
                "sortText": "40dc479creverse_iterator",
                "textEdit": {
                    "newText": "reverse_iterator",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR32_T_LOCK_FREE",
                "score": 0.5412920117378235,
                "sortText": "40f56de3ATOMIC_CHAR32_T_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR32_T_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_sub",
                "insertText": "atomic_fetch_sub",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_sub(atomic<Ty> *Mem, const typename atomic<Ty>::difference_type Value)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2atomic_fetch_sub",
                "textEdit": {
                    "newText": "atomic_fetch_sub",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.begin())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "begin",
                "insertText": "begin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022begin(Container &Cont)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2begin",
                "textEdit": {
                    "newText": "begin",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Ty *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "begin",
                "insertText": "begin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022begin(Ty (&Array)[Size])",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2begin",
                "textEdit": {
                    "newText": "begin",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.begin())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "begin",
                "insertText": "begin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022begin(const Container &Cont)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2begin",
                "textEdit": {
                    "newText": "begin",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::begin(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "cbegin",
                "insertText": "cbegin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbegin(const Container &Cont)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2cbegin",
                "textEdit": {
                    "newText": "cbegin",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::end(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "cend",
                "insertText": "cend",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cend(const Container &Cont)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2cend",
                "textEdit": {
                    "newText": "cend",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy",
                "insertText": "copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy(InIt First, InIt Last, OutIt Dest)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2copy",
                "textEdit": {
                    "newText": "copy",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "BidIt2",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_backward",
                "insertText": "copy_backward",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_backward(BidIt1 First, BidIt1 Last, BidIt2 Dest)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2copy_backward",
                "textEdit": {
                    "newText": "copy_backward",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_n",
                "insertText": "copy_n",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_n(InIt First, Diff Count_raw, OutIt Dest)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2copy_n",
                "textEdit": {
                    "newText": "copy_n",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count",
                "insertText": "count",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count(const InIt First, const InIt Last, const Ty &Val)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2count",
                "textEdit": {
                    "newText": "count",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::rbegin(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "crbegin",
                "insertText": "crbegin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022crbegin(const Container &Cont)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2crbegin",
                "textEdit": {
                    "newText": "crbegin",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::rend(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "crend",
                "insertText": "crend",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022crend(const Container &Cont)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2crend",
                "textEdit": {
                    "newText": "crend",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Ty *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "data",
                "insertText": "data",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022data(Ty (&Array)[Size])",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2data",
                "textEdit": {
                    "newText": "data",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.data())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "data",
                "insertText": "data",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022data(Container &Cont)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2data",
                "textEdit": {
                    "newText": "data",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.data())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "data",
                "insertText": "data",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022data(const Container &Cont)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2data",
                "textEdit": {
                    "newText": "data",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "const Elem *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "data",
                "insertText": "data",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022data(initializer_list<Elem> Ilist)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2data",
                "textEdit": {
                    "newText": "data",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "distance",
                "insertText": "distance",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022distance(InIt First, InIt Last)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2distance",
                "textEdit": {
                    "newText": "distance",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.empty())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "empty",
                "insertText": "empty",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022empty(const Container &Cont)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2empty",
                "textEdit": {
                    "newText": "empty",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Ty *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "end",
                "insertText": "end",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022end(Ty (&Array)[Size])",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2end",
                "textEdit": {
                    "newText": "end",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.end())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "end",
                "insertText": "end",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022end(const Container &Cont)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2end",
                "textEdit": {
                    "newText": "end",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.end())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "end",
                "insertText": "end",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022end(Container &Cont)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2end",
                "textEdit": {
                    "newText": "end",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "fill_n",
                "insertText": "fill_n",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022fill_n(OutIt Dest, const Diff Count_raw, const Ty &Val)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2fill_n",
                "textEdit": {
                    "newText": "fill_n",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "InIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "find",
                "insertText": "find",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022find(InIt First, const InIt Last, const Ty &Val)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2find",
                "textEdit": {
                    "newText": "find",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "InIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "find_if",
                "insertText": "find_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022find_if(InIt First, const InIt Last, Pr Pred)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2find_if",
                "textEdit": {
                    "newText": "find_if",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "lower_bound",
                "insertText": "lower_bound",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022lower_bound(FwdIt First, const FwdIt Last, const Ty &Val, Pr Pred)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2lower_bound",
                "textEdit": {
                    "newText": "lower_bound",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "lower_bound",
                "insertText": "lower_bound",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022lower_bound(FwdIt First, FwdIt Last, const Ty &Val)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2lower_bound",
                "textEdit": {
                    "newText": "lower_bound",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "move_iterator<Iter>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "make_move_iterator",
                "insertText": "make_move_iterator",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_move_iterator(Iter It)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2make_move_iterator",
                "textEdit": {
                    "newText": "make_move_iterator",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "reverse_iterator<BidIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "make_reverse_iterator",
                "insertText": "make_reverse_iterator",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_reverse_iterator(BidIt Iter)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2make_reverse_iterator",
                "textEdit": {
                    "newText": "make_reverse_iterator",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "max",
                "insertText": "max",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022max(initializer_list<Ty>)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2max",
                "textEdit": {
                    "newText": "max",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "max",
                "insertText": "max",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022max(initializer_list<Ty>, Pr)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2max",
                "textEdit": {
                    "newText": "max",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "max_element",
                "insertText": "max_element",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022max_element(FwdIt First, FwdIt Last, Pr Pred)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2max_element",
                "textEdit": {
                    "newText": "max_element",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "max_element",
                "insertText": "max_element",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022max_element(FwdIt First, FwdIt Last)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2max_element",
                "textEdit": {
                    "newText": "max_element",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "min",
                "insertText": "min",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022min(initializer_list<Ty>, Pr)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2min",
                "textEdit": {
                    "newText": "min",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "min",
                "insertText": "min",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022min(initializer_list<Ty>)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2min",
                "textEdit": {
                    "newText": "min",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "min_element",
                "insertText": "min_element",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022min_element(FwdIt First, FwdIt Last, Pr Pred)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2min_element",
                "textEdit": {
                    "newText": "min_element",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "min_element",
                "insertText": "min_element",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022min_element(FwdIt First, FwdIt Last)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2min_element",
                "textEdit": {
                    "newText": "min_element",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "move",
                "insertText": "move",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022move(InIt First, InIt Last, OutIt Dest)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2move",
                "textEdit": {
                    "newText": "move",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "BidIt2",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "move_backward",
                "insertText": "move_backward",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022move_backward(BidIt1 First, BidIt1 Last, BidIt2 Dest)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2move_backward",
                "textEdit": {
                    "newText": "move_backward",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "InIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "next",
                "insertText": "next",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022next(InIt First, typename iterator_traits<InIt>::difference_type Off = 1)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2next",
                "textEdit": {
                    "newText": "next",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "move_iterator<Iter>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator+",
                "insertText": "operator+",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator+(typename move_iterator<Iter>::difference_type Off, const move_iterator<Iter> &Right)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2operator+",
                "textEdit": {
                    "newText": "operator+",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "reverse_iterator<BidIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator+",
                "insertText": "operator+",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator+(typename reverse_iterator<BidIt>::difference_type Off, const reverse_iterator<BidIt> &Right)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2operator+",
                "textEdit": {
                    "newText": "operator+",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Left.base() - Right.base())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator-",
                "insertText": "operator-",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator-(const move_iterator<Iter1> &Left, const move_iterator<Iter2> &Right)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2operator-",
                "textEdit": {
                    "newText": "operator-",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Right._Get_current() - Left._Get_current())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator-",
                "insertText": "operator-",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator-(const reverse_iterator<BidIt1> &Left, const reverse_iterator<BidIt2> &Right)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2operator-",
                "textEdit": {
                    "newText": "operator-",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "BidIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "prev",
                "insertText": "prev",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022prev(BidIt First, typename iterator_traits<BidIt>::difference_type Off = 1)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2prev",
                "textEdit": {
                    "newText": "prev",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.rbegin())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "rbegin",
                "insertText": "rbegin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022rbegin(Container &Cont)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2rbegin",
                "textEdit": {
                    "newText": "rbegin",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "reverse_iterator<const Elem *>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "rbegin",
                "insertText": "rbegin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022rbegin(initializer_list<Elem> Ilist)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2rbegin",
                "textEdit": {
                    "newText": "rbegin",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "reverse_iterator<Ty *>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "rbegin",
                "insertText": "rbegin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022rbegin(Ty (&Array)[Size])",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2rbegin",
                "textEdit": {
                    "newText": "rbegin",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.rbegin())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "rbegin",
                "insertText": "rbegin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022rbegin(const Container &Cont)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2rbegin",
                "textEdit": {
                    "newText": "rbegin",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.rend())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "rend",
                "insertText": "rend",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022rend(Container &Cont)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2rend",
                "textEdit": {
                    "newText": "rend",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.rend())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "rend",
                "insertText": "rend",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022rend(const Container &Cont)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2rend",
                "textEdit": {
                    "newText": "rend",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "reverse_iterator<const Elem *>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "rend",
                "insertText": "rend",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022rend(initializer_list<Elem> Ilist)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2rend",
                "textEdit": {
                    "newText": "rend",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "reverse_iterator<Ty *>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "rend",
                "insertText": "rend",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022rend(Ty (&Array)[Size])",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2rend",
                "textEdit": {
                    "newText": "rend",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "rotate",
                "insertText": "rotate",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022rotate(FwdIt First, FwdIt Mid, FwdIt Last)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2rotate",
                "textEdit": {
                    "newText": "rotate",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.size())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "size",
                "insertText": "size",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022size(const Container &Cont)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2size",
                "textEdit": {
                    "newText": "size",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "upper_bound",
                "insertText": "upper_bound",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022upper_bound(FwdIt First, FwdIt Last, const Ty &Val, Pr Pred)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2upper_bound",
                "textEdit": {
                    "newText": "upper_bound",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "upper_bound",
                "insertText": "upper_bound",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022upper_bound(FwdIt First, FwdIt Last, const Ty &Val)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2upper_bound",
                "textEdit": {
                    "newText": "upper_bound",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>\nfrom <iterator>"
                },
                "filterText": "advance",
                "insertText": "advance",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022advance(InIt &Where, Diff Off)",
                "score": 0.3956359624862671,
                "sortText": "41356f34advance",
                "textEdit": {
                    "newText": "advance",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "empty",
                "insertText": "empty",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022empty(initializer_list<Elem> Ilist)",
                "score": 0.3956359624862671,
                "sortText": "41356f34empty",
                "textEdit": {
                    "newText": "empty",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "empty",
                "insertText": "empty",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022empty(const Ty (&)[Size])",
                "score": 0.3956359624862671,
                "sortText": "41356f34empty",
                "textEdit": {
                    "newText": "empty",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "equal",
                "insertText": "equal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022equal(const InIt1 First1, const InIt1 Last1, const InIt2 First2, const InIt2 Last2)",
                "score": 0.3956359624862671,
                "sortText": "41356f34equal",
                "textEdit": {
                    "newText": "equal",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "equal",
                "insertText": "equal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022equal(const InIt1 First1, const InIt1 Last1, const InIt2 First2, Pr Pred)",
                "score": 0.3956359624862671,
                "sortText": "41356f34equal",
                "textEdit": {
                    "newText": "equal",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "equal",
                "insertText": "equal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022equal(const InIt1 First1, const InIt1 Last1, const InIt2 First2)",
                "score": 0.3956359624862671,
                "sortText": "41356f34equal",
                "textEdit": {
                    "newText": "equal",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "equal",
                "insertText": "equal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022equal(const InIt1 First1, const InIt1 Last1, const InIt2 First2, const InIt2 Last2, Pr Pred)",
                "score": 0.3956359624862671,
                "sortText": "41356f34equal",
                "textEdit": {
                    "newText": "equal",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "fill",
                "insertText": "fill",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022fill(const FwdIt First, const FwdIt Last, const Ty &Val)",
                "score": 0.3956359624862671,
                "sortText": "41356f34fill",
                "textEdit": {
                    "newText": "fill",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "lexicographical_compare",
                "insertText": "lexicographical_compare",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022lexicographical_compare(const InIt1 First1, const InIt1 Last1, const InIt2 First2, const InIt2 Last2)",
                "score": 0.3956359624862671,
                "sortText": "41356f34lexicographical_compare",
                "textEdit": {
                    "newText": "lexicographical_compare",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "lexicographical_compare",
                "insertText": "lexicographical_compare",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022lexicographical_compare(const InIt1 First1, const InIt1 Last1, const InIt2 First2, const InIt2 Last2, Pr Pred)",
                "score": 0.3956359624862671,
                "sortText": "41356f34lexicographical_compare",
                "textEdit": {
                    "newText": "lexicographical_compare",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator!=",
                "insertText": "operator!=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator!=(const reverse_iterator<BidIt1> &Left, const reverse_iterator<BidIt2> &Right)",
                "score": 0.3956359624862671,
                "sortText": "41356f34operator!=",
                "textEdit": {
                    "newText": "operator!=",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator!=",
                "insertText": "operator!=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator!=(const move_iterator<Iter1> &Left, const move_iterator<Iter2> &Right)",
                "score": 0.3956359624862671,
                "sortText": "41356f34operator!=",
                "textEdit": {
                    "newText": "operator!=",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator<",
                "insertText": "operator<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<(const reverse_iterator<BidIt1> &Left, const reverse_iterator<BidIt2> &Right)",
                "score": 0.3956359624862671,
                "sortText": "41356f34operator<",
                "textEdit": {
                    "newText": "operator<",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator<",
                "insertText": "operator<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<(const move_iterator<Iter1> &Left, const move_iterator<Iter2> &Right)",
                "score": 0.3956359624862671,
                "sortText": "41356f34operator<",
                "textEdit": {
                    "newText": "operator<",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator<=",
                "insertText": "operator<=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<=(const move_iterator<Iter1> &Left, const move_iterator<Iter2> &Right)",
                "score": 0.3956359624862671,
                "sortText": "41356f34operator<=",
                "textEdit": {
                    "newText": "operator<=",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator<=",
                "insertText": "operator<=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<=(const reverse_iterator<BidIt1> &Left, const reverse_iterator<BidIt2> &Right)",
                "score": 0.3956359624862671,
                "sortText": "41356f34operator<=",
                "textEdit": {
                    "newText": "operator<=",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator==",
                "insertText": "operator==",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator==(const move_iterator<Iter1> &Left, const move_iterator<Iter2> &Right)",
                "score": 0.3956359624862671,
                "sortText": "41356f34operator==",
                "textEdit": {
                    "newText": "operator==",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator==",
                "insertText": "operator==",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator==(const reverse_iterator<BidIt1> &Left, const reverse_iterator<BidIt2> &Right)",
                "score": 0.3956359624862671,
                "sortText": "41356f34operator==",
                "textEdit": {
                    "newText": "operator==",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator>",
                "insertText": "operator>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>(const reverse_iterator<BidIt1> &Left, const reverse_iterator<BidIt2> &Right)",
                "score": 0.3956359624862671,
                "sortText": "41356f34operator>",
                "textEdit": {
                    "newText": "operator>",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator>",
                "insertText": "operator>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>(const move_iterator<Iter1> &Left, const move_iterator<Iter2> &Right)",
                "score": 0.3956359624862671,
                "sortText": "41356f34operator>",
                "textEdit": {
                    "newText": "operator>",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator>=",
                "insertText": "operator>=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>=(const move_iterator<Iter1> &Left, const move_iterator<Iter2> &Right)",
                "score": 0.3956359624862671,
                "sortText": "41356f34operator>=",
                "textEdit": {
                    "newText": "operator>=",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator>=",
                "insertText": "operator>=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>=(const reverse_iterator<BidIt1> &Left, const reverse_iterator<BidIt2> &Right)",
                "score": 0.3956359624862671,
                "sortText": "41356f34operator>=",
                "textEdit": {
                    "newText": "operator>=",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "reverse",
                "insertText": "reverse",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022reverse(const BidIt First, const BidIt Last)",
                "score": 0.3956359624862671,
                "sortText": "41356f34reverse",
                "textEdit": {
                    "newText": "reverse",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "size",
                "insertText": "size",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022size(const Ty (&)[Size])",
                "score": 0.3956359624862671,
                "sortText": "41356f34size",
                "textEdit": {
                    "newText": "size",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "_DEBUG_LT_PRED",
                "insertText": "_DEBUG_LT_PRED",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_DEBUG_LT_PRED(pred, x, y)",
                "score": 0.3033372163772583,
                "sortText": "4164b0fc_DEBUG_LT_PRED",
                "textEdit": {
                    "newText": "_DEBUG_LT_PRED",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['_iobuf', 'type_info', 'std', 'const', 'operator', 'volatile', 'equal_to', 'greater', 'greater_equal', 'iterator', 'less_equal', 'minus', 'move_iterator', 'multiplies', 'not_equal_to', 'plus', 'pointer_traits', 'reverse_iterator', 'ATOMIC_CHAR32_T_LOCK_FREE', 'atomic_fetch_sub', 'begin', 'begin', 'begin', 'cbegin', 'cend', 'copy', 'copy_backward', 'copy_n', 'count', 'crbegin', 'crend', 'data', 'data', 'data', 'data', 'distance', 'empty', 'end', 'end', 'end', 'fill_n', 'find', 'find_if', 'lower_bound', 'lower_bound', 'make_move_iterator', 'make_reverse_iterator', 'max', 'max', 'max_element', 'max_element', 'min', 'min', 'min_element', 'min_element', 'move', 'move_backward', 'next', 'operator+', 'operator+', 'operator-', 'operator-', 'prev', 'rbegin', 'rbegin', 'rbegin', 'rbegin', 'rend', 'rend', 'rend', 'rend', 'rotate', 'size', 'upper_bound', 'upper_bound', 'advance', 'empty', 'empty', 'equal', 'equal', 'equal', 'equal', 'fill', 'lexicographical_compare', 'lexicographical_compare', 'operator!=', 'operator!=', 'operator<', 'operator<', 'operator<=', 'operator<=', 'operator==', 'operator==', 'operator>', 'operator>', 'operator>=', 'operator>=', 'reverse', 'size', '_DEBUG_LT_PRED']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 4,
                        "line": 4
                    },
                    "start": {
                        "character": 4,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 47
    }
}
Diagnostics received from LSP.
Errors received: [[4, [4, 4]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "checked_array_iterator<Ptr>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "make_checked_array_iterator",
                "insertText": "stdext::make_checked_array_iterator",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022stdext::make_checked_array_iterator(const Ptr Array, const size_t Size, const size_t Index = 0)",
                "score": 0.6713826060295105,
                "sortText": "40d42045make_checked_array_iterator",
                "textEdit": {
                    "newText": "stdext::make_checked_array_iterator",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "unchecked_array_iterator<Ptr>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "make_unchecked_array_iterator",
                "insertText": "stdext::make_unchecked_array_iterator",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022stdext::make_unchecked_array_iterator(const Ptr It)",
                "score": 0.6713826060295105,
                "sortText": "40d42045make_unchecked_array_iterator",
                "textEdit": {
                    "newText": "stdext::make_unchecked_array_iterator",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "make_index_sequence",
                "insertText": "make_index_sequence",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022make_index_sequence<size_t Size>",
                "score": 0.6395323276519775,
                "sortText": "40dc479cmake_index_sequence",
                "textEdit": {
                    "newText": "make_index_sequence",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "make_integer_sequence",
                "insertText": "make_integer_sequence",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022make_integer_sequence<class Ty, Ty Size>",
                "score": 0.6395323276519775,
                "sortText": "40dc479cmake_integer_sequence",
                "textEdit": {
                    "newText": "make_integer_sequence",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <map>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <map>"
                },
                "filterText": "map",
                "insertText": "map",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022map<class Kty, class Ty, class Pr, class Alloc>",
                "score": 0.6395323276519775,
                "sortText": "40dc479cmap",
                "textEdit": {
                    "newText": "map",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <valarray>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <valarray>"
                },
                "filterText": "mask_array",
                "insertText": "mask_array",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022mask_array<class Ty>",
                "score": 0.6395323276519775,
                "sortText": "40dc479cmask_array",
                "textEdit": {
                    "newText": "mask_array",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "mersenne_twister_engine",
                "insertText": "mersenne_twister_engine",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022mersenne_twister_engine<class Ty, size_t Wx, size_t Nx, size_t Mx, size_t Rx, Ty Px, size_t Ux, Ty Dx, size_t Sx, Ty Bx, size_t Tx, Ty Cx, size_t Lx, Ty Fx>",
                "score": 0.6395323276519775,
                "sortText": "40dc479cmersenne_twister_engine",
                "textEdit": {
                    "newText": "mersenne_twister_engine",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "messages",
                "insertText": "messages",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022messages<class Elem>",
                "score": 0.6395323276519775,
                "sortText": "40dc479cmessages",
                "textEdit": {
                    "newText": "messages",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "messages_base",
                "insertText": "messages_base",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022messages_base",
                "score": 0.6395323276519775,
                "sortText": "40dc479cmessages_base",
                "textEdit": {
                    "newText": "messages_base",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "messages_byname",
                "insertText": "messages_byname",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022messages_byname<class Elem>",
                "score": 0.6395323276519775,
                "sortText": "40dc479cmessages_byname",
                "textEdit": {
                    "newText": "messages_byname",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "minstd_rand",
                "insertText": "minstd_rand",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022minstd_rand",
                "score": 0.6395323276519775,
                "sortText": "40dc479cminstd_rand",
                "textEdit": {
                    "newText": "minstd_rand",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "minstd_rand0",
                "insertText": "minstd_rand0",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022minstd_rand0",
                "score": 0.6395323276519775,
                "sortText": "40dc479cminstd_rand0",
                "textEdit": {
                    "newText": "minstd_rand0",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "minus",
                "insertText": "minus",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022minus<class Ty>",
                "score": 0.6395323276519775,
                "sortText": "40dc479cminus",
                "textEdit": {
                    "newText": "minus",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "move_iterator",
                "insertText": "move_iterator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022move_iterator<class Iter>",
                "score": 0.6395323276519775,
                "sortText": "40dc479cmove_iterator",
                "textEdit": {
                    "newText": "move_iterator",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "mt19937",
                "insertText": "mt19937",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022mt19937",
                "score": 0.6395323276519775,
                "sortText": "40dc479cmt19937",
                "textEdit": {
                    "newText": "mt19937",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "mt19937_64",
                "insertText": "mt19937_64",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022mt19937_64",
                "score": 0.6395323276519775,
                "sortText": "40dc479cmt19937_64",
                "textEdit": {
                    "newText": "mt19937_64",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <map>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <map>"
                },
                "filterText": "multimap",
                "insertText": "multimap",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022multimap<class Kty, class Ty, class Pr, class Alloc>",
                "score": 0.6395323276519775,
                "sortText": "40dc479cmultimap",
                "textEdit": {
                    "newText": "multimap",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "multiplies",
                "insertText": "multiplies",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022multiplies<class Ty>",
                "score": 0.6395323276519775,
                "sortText": "40dc479cmultiplies",
                "textEdit": {
                    "newText": "multiplies",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <set>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <set>"
                },
                "filterText": "multiset",
                "insertText": "multiset",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022multiset<class Kty, class Pr, class Alloc>",
                "score": 0.6395323276519775,
                "sortText": "40dc479cmultiset",
                "textEdit": {
                    "newText": "multiset",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "mutex",
                "insertText": "mutex",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022mutex",
                "score": 0.6395323276519775,
                "sortText": "40dc479cmutex",
                "textEdit": {
                    "newText": "mutex",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <climits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <climits>"
                },
                "filterText": "MB_LEN_MAX",
                "insertText": "MB_LEN_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022MB_LEN_MAX",
                "score": 0.5412920117378235,
                "sortText": "40f56de3MB_LEN_MAX",
                "textEdit": {
                    "newText": "MB_LEN_MAX",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "const void *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "memchr",
                "insertText": "memchr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022memchr(const void *Buf, int Val, size_t MaxCount)",
                "score": 0.4694935977458954,
                "sortText": "410f9e89memchr",
                "textEdit": {
                    "newText": "memchr",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "memcmp",
                "insertText": "memcmp",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022memcmp(const void *Buf1, const void *Buf2, size_t Size)",
                "score": 0.4694935977458954,
                "sortText": "410f9e89memcmp",
                "textEdit": {
                    "newText": "memcmp",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "memcpy",
                "insertText": "memcpy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022memcpy(void *Dst, const void *Src, size_t Size)",
                "score": 0.4694935977458954,
                "sortText": "410f9e89memcpy",
                "textEdit": {
                    "newText": "memcpy",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "memmove",
                "insertText": "memmove",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022memmove(void *Dst, const void *Src, size_t Size)",
                "score": 0.4694935977458954,
                "sortText": "410f9e89memmove",
                "textEdit": {
                    "newText": "memmove",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "memset",
                "insertText": "memset",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022memset(void *Dst, int Val, size_t Size)",
                "score": 0.4694935977458954,
                "sortText": "410f9e89memset",
                "textEdit": {
                    "newText": "memset",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "modf",
                "insertText": "modf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022modf(long double Xx, long double *Yx)",
                "score": 0.4694935977458954,
                "sortText": "410f9e89modf",
                "textEdit": {
                    "newText": "modf",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "modf",
                "insertText": "modf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022modf(float Xx, float *Yx)",
                "score": 0.4694935977458954,
                "sortText": "410f9e89modf",
                "textEdit": {
                    "newText": "modf",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "mersenne_twister",
                "insertText": "mersenne_twister",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022mersenne_twister<class Ty, int Wx, int Nx, int Mx, int Rx, Ty Px, int Ux, int Sx, Ty Bx, int Tx, Ty Cx, int Lx>",
                "score": 0.44663316011428833,
                "sortText": "411b52e6mersenne_twister",
                "textEdit": {
                    "newText": "mersenne_twister",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "move_iterator<Iter>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "make_move_iterator",
                "insertText": "make_move_iterator",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_move_iterator(Iter It)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2make_move_iterator",
                "textEdit": {
                    "newText": "make_move_iterator",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "pair<_Unrefwrap_t<Ty1>, _Unrefwrap_t<Ty2>>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "make_pair",
                "insertText": "make_pair",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_pair(Ty1 &&Val1, Ty2 &&Val2)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2make_pair",
                "textEdit": {
                    "newText": "make_pair",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "reverse_iterator<BidIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "make_reverse_iterator",
                "insertText": "make_reverse_iterator",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_reverse_iterator(BidIt Iter)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2make_reverse_iterator",
                "textEdit": {
                    "newText": "make_reverse_iterator",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "const Ty &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "max",
                "insertText": "max",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022max(const Ty &Left, const Ty &Right)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2max",
                "textEdit": {
                    "newText": "max",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "max",
                "insertText": "max",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022max(initializer_list<Ty>)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2max",
                "textEdit": {
                    "newText": "max",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "max",
                "insertText": "max",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022max(initializer_list<Ty>, Pr)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2max",
                "textEdit": {
                    "newText": "max",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "const Ty &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "max",
                "insertText": "max",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022max(const Ty &Left, const Ty &Right, Pr Pred)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2max",
                "textEdit": {
                    "newText": "max",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "max_element",
                "insertText": "max_element",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022max_element(FwdIt First, FwdIt Last, Pr Pred)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2max_element",
                "textEdit": {
                    "newText": "max_element",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "max_element",
                "insertText": "max_element",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022max_element(FwdIt First, FwdIt Last)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2max_element",
                "textEdit": {
                    "newText": "max_element",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "merge",
                "insertText": "merge",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022merge(InIt1 First1, InIt1 Last1, InIt2 First2, InIt2 Last2, OutIt Dest)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2merge",
                "textEdit": {
                    "newText": "merge",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "merge",
                "insertText": "merge",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022merge(InIt1 First1, InIt1 Last1, InIt2 First2, InIt2 Last2, OutIt Dest, Pr Pred)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2merge",
                "textEdit": {
                    "newText": "merge",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "min",
                "insertText": "min",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022min(initializer_list<Ty>, Pr)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2min",
                "textEdit": {
                    "newText": "min",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "const Ty &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "min",
                "insertText": "min",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022min(const Ty &Left, const Ty &Right, Pr Pred)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2min",
                "textEdit": {
                    "newText": "min",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "min",
                "insertText": "min",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022min(initializer_list<Ty>)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2min",
                "textEdit": {
                    "newText": "min",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "const Ty &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "min",
                "insertText": "min",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022min(const Ty &Left, const Ty &Right)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2min",
                "textEdit": {
                    "newText": "min",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "min_element",
                "insertText": "min_element",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022min_element(FwdIt First, FwdIt Last, Pr Pred)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2min_element",
                "textEdit": {
                    "newText": "min_element",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "min_element",
                "insertText": "min_element",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022min_element(FwdIt First, FwdIt Last)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2min_element",
                "textEdit": {
                    "newText": "min_element",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "pair<Ty, Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "minmax",
                "insertText": "minmax",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022minmax(initializer_list<Ty> Ilist, Pr Pred)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2minmax",
                "textEdit": {
                    "newText": "minmax",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "pair<const Ty &, const Ty &>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "minmax",
                "insertText": "minmax",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022minmax(const Ty &Left, const Ty &Right)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2minmax",
                "textEdit": {
                    "newText": "minmax",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "pair<const Ty &, const Ty &>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "minmax",
                "insertText": "minmax",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022minmax(const Ty &Left, const Ty &Right, Pr Pred)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2minmax",
                "textEdit": {
                    "newText": "minmax",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "pair<Ty, Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "minmax",
                "insertText": "minmax",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022minmax(initializer_list<Ty> Ilist)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2minmax",
                "textEdit": {
                    "newText": "minmax",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "pair<FwdIt, FwdIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "minmax_element",
                "insertText": "minmax_element",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022minmax_element(FwdIt First, FwdIt Last, Pr Pred)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2minmax_element",
                "textEdit": {
                    "newText": "minmax_element",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "pair<FwdIt, FwdIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "minmax_element",
                "insertText": "minmax_element",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022minmax_element(FwdIt First, FwdIt Last)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2minmax_element",
                "textEdit": {
                    "newText": "minmax_element",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "pair<InIt1, InIt2>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "mismatch",
                "insertText": "mismatch",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022mismatch(InIt1 First1, const InIt1 Last1, InIt2 First2, Pr Pred)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2mismatch",
                "textEdit": {
                    "newText": "mismatch",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "pair<InIt1, InIt2>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "mismatch",
                "insertText": "mismatch",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022mismatch(InIt1 First1, InIt1 Last1, InIt2 First2, InIt2 Last2)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2mismatch",
                "textEdit": {
                    "newText": "mismatch",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "pair<InIt1, InIt2>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "mismatch",
                "insertText": "mismatch",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022mismatch(InIt1 First1, InIt1 Last1, InIt2 First2, InIt2 Last2, Pr Pred)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2mismatch",
                "textEdit": {
                    "newText": "mismatch",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "pair<InIt1, InIt2>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "mismatch",
                "insertText": "mismatch",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022mismatch(const InIt1 First1, const InIt1 Last1, const InIt2 First2)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2mismatch",
                "textEdit": {
                    "newText": "mismatch",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "move",
                "insertText": "move",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022move(InIt First, InIt Last, OutIt Dest)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2move",
                "textEdit": {
                    "newText": "move",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "BidIt2",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "move_backward",
                "insertText": "move_backward",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022move_backward(BidIt1 First, BidIt1 Last, BidIt2 Dest)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2move_backward",
                "textEdit": {
                    "newText": "move_backward",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "MB_CUR_MAX",
                "insertText": "MB_CUR_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022MB_CUR_MAX",
                "score": 0.4366929531097412,
                "sortText": "412069c8MB_CUR_MAX",
                "textEdit": {
                    "newText": "MB_CUR_MAX",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "MCW_EM",
                "insertText": "MCW_EM",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022MCW_EM",
                "score": 0.4366929531097412,
                "sortText": "412069c8MCW_EM",
                "textEdit": {
                    "newText": "MCW_EM",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "MCW_IC",
                "insertText": "MCW_IC",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022MCW_IC",
                "score": 0.4366929531097412,
                "sortText": "412069c8MCW_IC",
                "textEdit": {
                    "newText": "MCW_IC",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "MCW_PC",
                "insertText": "MCW_PC",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022MCW_PC",
                "score": 0.4366929531097412,
                "sortText": "412069c8MCW_PC",
                "textEdit": {
                    "newText": "MCW_PC",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "MCW_RC",
                "insertText": "MCW_RC",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022MCW_RC",
                "score": 0.4366929531097412,
                "sortText": "412069c8MCW_RC",
                "textEdit": {
                    "newText": "MCW_RC",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "detail": "error_code",
                "filterText": "make_error_code",
                "insertText": "make_error_code",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " make_error_code(io_errc Ec)",
                "score": 0.3956359624862671,
                "sortText": "41356f34make_error_code",
                "textEdit": {
                    "newText": "make_error_code",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "detail": "error_code",
                "filterText": "make_error_code",
                "insertText": "make_error_code",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " make_error_code(future_errc Ec)",
                "score": 0.3956359624862671,
                "sortText": "41356f34make_error_code",
                "textEdit": {
                    "newText": "make_error_code",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "detail": "error_code",
                "filterText": "make_error_code",
                "insertText": "make_error_code",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " make_error_code(errc Ec)",
                "score": 0.3956359624862671,
                "sortText": "41356f34make_error_code",
                "textEdit": {
                    "newText": "make_error_code",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "detail": "error_condition",
                "filterText": "make_error_condition",
                "insertText": "make_error_condition",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " make_error_condition(future_errc Ec)",
                "score": 0.3956359624862671,
                "sortText": "41356f34make_error_condition",
                "textEdit": {
                    "newText": "make_error_condition",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "detail": "error_condition",
                "filterText": "make_error_condition",
                "insertText": "make_error_condition",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " make_error_condition(io_errc Ec)",
                "score": 0.3956359624862671,
                "sortText": "41356f34make_error_condition",
                "textEdit": {
                    "newText": "make_error_condition",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "detail": "error_condition",
                "filterText": "make_error_condition",
                "insertText": "make_error_condition",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " make_error_condition(errc Ec)",
                "score": 0.3956359624862671,
                "sortText": "41356f34make_error_condition",
                "textEdit": {
                    "newText": "make_error_condition",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "make_heap",
                "insertText": "make_heap",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_heap(RanIt First, RanIt Last)",
                "score": 0.3956359624862671,
                "sortText": "41356f34make_heap",
                "textEdit": {
                    "newText": "make_heap",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "make_heap",
                "insertText": "make_heap",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_heap(RanIt First, RanIt Last, Pr Pred)",
                "score": 0.3956359624862671,
                "sortText": "41356f34make_heap",
                "textEdit": {
                    "newText": "make_heap",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "malloc",
                "insertText": "malloc",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022malloc(size_t Size)",
                "score": 0.3912048637866974,
                "sortText": "4137b3ffmalloc",
                "textEdit": {
                    "newText": "malloc",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "mblen",
                "insertText": "mblen",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022mblen(const char *Ch, size_t MaxCount)",
                "score": 0.3912048637866974,
                "sortText": "4137b3ffmblen",
                "textEdit": {
                    "newText": "mblen",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "mbstowcs_s",
                "insertText": "mbstowcs_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022mbstowcs_s(size_t *PtNumOfCharConverted, wchar_t *DstBuf, size_t SizeInWords, const char *SrcBuf, size_t MaxCount)",
                "score": 0.3912048637866974,
                "sortText": "4137b3ffmbstowcs_s",
                "textEdit": {
                    "newText": "mbstowcs_s",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "mbstowcs_s",
                "insertText": "mbstowcs_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022mbstowcs_s(size_t *PtNumOfCharConverted, wchar_t (&Dest)[Size], const char *Source, size_t MaxCount)",
                "score": 0.3912048637866974,
                "sortText": "4137b3ffmbstowcs_s",
                "textEdit": {
                    "newText": "mbstowcs_s",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "mbtowc",
                "insertText": "mbtowc",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022mbtowc(wchar_t *DstCh, const char *SrcCh, size_t SrcSizeInBytes)",
                "score": 0.3912048637866974,
                "sortText": "4137b3ffmbtowc",
                "textEdit": {
                    "newText": "mbtowc",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "memchr",
                "insertText": "memchr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022memchr(void *Pv, int C, size_t N)",
                "score": 0.3912048637866974,
                "sortText": "4137b3ffmemchr",
                "textEdit": {
                    "newText": "memchr",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "time_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "mktime",
                "insertText": "mktime",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022mktime(struct tm *const Tm)",
                "score": 0.3912048637866974,
                "sortText": "4137b3ffmktime",
                "textEdit": {
                    "newText": "mktime",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "mbstowcs",
                "insertText": "mbstowcs",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022mbstowcs(wchar_t *Dest, const char *Source, size_t MaxCount)",
                "score": 0.3300955891609192,
                "sortText": "4156fdb6mbstowcs",
                "textEdit": {
                    "newText": "mbstowcs",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_memory.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "void *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_memory.h>"
                },
                "filterText": "memccpy",
                "insertText": "memccpy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022memccpy(void *Dst, const void *Src, int Val, size_t Size)",
                "score": 0.3300955891609192,
                "sortText": "4156fdb6memccpy",
                "textEdit": {
                    "newText": "memccpy",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_memory.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_memory.h>"
                },
                "filterText": "memicmp",
                "insertText": "memicmp",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022memicmp(const void *Buf1, const void *Buf2, size_t Size)",
                "score": 0.3300955891609192,
                "sortText": "4156fdb6memicmp",
                "textEdit": {
                    "newText": "memicmp",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "std::memory_order",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "memory_order_acquire",
                "insertText": "memory_order_acquire",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022memory_order_acquire",
                "score": 0.32752054929733276,
                "sortText": "41584f3amemory_order_acquire",
                "textEdit": {
                    "newText": "memory_order_acquire",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "std::memory_order",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "memory_order_consume",
                "insertText": "memory_order_consume",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022memory_order_consume",
                "score": 0.32752054929733276,
                "sortText": "41584f3amemory_order_consume",
                "textEdit": {
                    "newText": "memory_order_consume",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "std::memory_order",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "memory_order_release",
                "insertText": "memory_order_release",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022memory_order_release",
                "score": 0.32752054929733276,
                "sortText": "41584f3amemory_order_release",
                "textEdit": {
                    "newText": "memory_order_release",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "std::memory_order",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "memory_order_seq_cst",
                "insertText": "memory_order_seq_cst",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022memory_order_seq_cst",
                "score": 0.32752054929733276,
                "sortText": "41584f3amemory_order_seq_cst",
                "textEdit": {
                    "newText": "memory_order_seq_cst",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "mersenne_twister",
                "insertText": "tr1::mersenne_twister",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::mersenne_twister",
                "score": 0.281630277633667,
                "sortText": "416fce28mersenne_twister",
                "textEdit": {
                    "newText": "tr1::mersenne_twister",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "mersenne_twister_engine",
                "insertText": "tr1::mersenne_twister_engine",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::mersenne_twister_engine",
                "score": 0.281630277633667,
                "sortText": "416fce28mersenne_twister_engine",
                "textEdit": {
                    "newText": "tr1::mersenne_twister_engine",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "minstd_rand",
                "insertText": "tr1::minstd_rand",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::minstd_rand",
                "score": 0.281630277633667,
                "sortText": "416fce28minstd_rand",
                "textEdit": {
                    "newText": "tr1::minstd_rand",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "minstd_rand0",
                "insertText": "tr1::minstd_rand0",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::minstd_rand0",
                "score": 0.281630277633667,
                "sortText": "416fce28minstd_rand0",
                "textEdit": {
                    "newText": "tr1::minstd_rand0",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "mt19937",
                "insertText": "tr1::mt19937",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::mt19937",
                "score": 0.281630277633667,
                "sortText": "416fce28mt19937",
                "textEdit": {
                    "newText": "tr1::mt19937",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "mt19937_64",
                "insertText": "tr1::mt19937_64",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::mt19937_64",
                "score": 0.281630277633667,
                "sortText": "416fce28mt19937_64",
                "textEdit": {
                    "newText": "tr1::mt19937_64",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "memchr",
                "insertText": "memchr",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022memchr",
                "score": 0.23189638555049896,
                "sortText": "419289c1memchr",
                "textEdit": {
                    "newText": "memchr",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "memcmp",
                "insertText": "memcmp",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022memcmp",
                "score": 0.23189638555049896,
                "sortText": "419289c1memcmp",
                "textEdit": {
                    "newText": "memcmp",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "memcpy",
                "insertText": "memcpy",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022memcpy",
                "score": 0.23189638555049896,
                "sortText": "419289c1memcpy",
                "textEdit": {
                    "newText": "memcpy",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "memmove",
                "insertText": "memmove",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022memmove",
                "score": 0.23189638555049896,
                "sortText": "419289c1memmove",
                "textEdit": {
                    "newText": "memmove",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "memset",
                "insertText": "memset",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022memset",
                "score": 0.23189638555049896,
                "sortText": "419289c1memset",
                "textEdit": {
                    "newText": "memset",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "mktime",
                "insertText": "mktime",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022mktime",
                "score": 0.23189638555049896,
                "sortText": "419289c1mktime",
                "textEdit": {
                    "newText": "mktime",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "modf",
                "insertText": "modf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022modf",
                "score": 0.23189638555049896,
                "sortText": "419289c1modf",
                "textEdit": {
                    "newText": "modf",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "modff",
                "insertText": "modff",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022modff",
                "score": 0.23189638555049896,
                "sortText": "419289c1modff",
                "textEdit": {
                    "newText": "modff",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "modfl",
                "insertText": "modfl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022modfl",
                "score": 0.23189638555049896,
                "sortText": "419289c1modfl",
                "textEdit": {
                    "newText": "modfl",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['stdext::make_checked_array_iterator', 'stdext::make_unchecked_array_iterator', 'make_index_sequence', 'make_integer_sequence', 'map', 'mask_array', 'mersenne_twister_engine', 'messages', 'messages_base', 'messages_byname', 'minstd_rand', 'minstd_rand0', 'minus', 'move_iterator', 'mt19937', 'mt19937_64', 'multimap', 'multiplies', 'multiset', 'mutex', 'MB_LEN_MAX', 'memchr', 'memcmp', 'memcpy', 'memmove', 'memset', 'modf', 'modf', 'mersenne_twister', 'make_move_iterator', 'make_pair', 'make_reverse_iterator', 'max', 'max', 'max', 'max', 'max_element', 'max_element', 'merge', 'merge', 'min', 'min', 'min', 'min', 'min_element', 'min_element', 'minmax', 'minmax', 'minmax', 'minmax', 'minmax_element', 'minmax_element', 'mismatch', 'mismatch', 'mismatch', 'mismatch', 'move', 'move_backward', 'MB_CUR_MAX', 'MCW_EM', 'MCW_IC', 'MCW_PC', 'MCW_RC', 'make_error_code', 'make_error_code', 'make_error_code', 'make_error_condition', 'make_error_condition', 'make_error_condition', 'make_heap', 'make_heap', 'malloc', 'mblen', 'mbstowcs_s', 'mbstowcs_s', 'mbtowc', 'memchr', 'mktime', 'mbstowcs', 'memccpy', 'memicmp', 'memory_order_acquire', 'memory_order_consume', 'memory_order_release', 'memory_order_seq_cst', 'tr1::mersenne_twister', 'tr1::mersenne_twister_engine', 'tr1::minstd_rand', 'tr1::minstd_rand0', 'tr1::mt19937', 'tr1::mt19937_64', 'memchr', 'memcmp', 'memcpy', 'memmove', 'memset', 'mktime', 'modf', 'modff', 'modfl']
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "invalid_token_after_toplevel_declarator",
                "message": "Expected ';' after top level declarator (fix available)",
                "range": {
                    "end": {
                        "character": 5,
                        "line": 4
                    },
                    "start": {
                        "character": 5,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 48
    }
}
Diagnostics received from LSP.
Errors received: [[4, [5, 5]]]
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "match_flag_type",
                "insertText": "regex_constants::match_flag_type",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022regex_constants::match_flag_type",
                "score": 0.7594779133796692,
                "sortText": "40bd92dbmatch_flag_type",
                "textEdit": {
                    "newText": "regex_constants::match_flag_type",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "checked_array_iterator<Ptr>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "make_checked_array_iterator",
                "insertText": "stdext::make_checked_array_iterator",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022stdext::make_checked_array_iterator(const Ptr Array, const size_t Size, const size_t Index = 0)",
                "score": 0.6713826060295105,
                "sortText": "40d42045make_checked_array_iterator",
                "textEdit": {
                    "newText": "stdext::make_checked_array_iterator",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "unchecked_array_iterator<Ptr>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "make_unchecked_array_iterator",
                "insertText": "stdext::make_unchecked_array_iterator",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022stdext::make_unchecked_array_iterator(const Ptr It)",
                "score": 0.6713826060295105,
                "sortText": "40d42045make_unchecked_array_iterator",
                "textEdit": {
                    "newText": "stdext::make_unchecked_array_iterator",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "make_index_sequence",
                "insertText": "make_index_sequence",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022make_index_sequence<size_t Size>",
                "score": 0.6395323276519775,
                "sortText": "40dc479cmake_index_sequence",
                "textEdit": {
                    "newText": "make_index_sequence",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "make_integer_sequence",
                "insertText": "make_integer_sequence",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022make_integer_sequence<class Ty, Ty Size>",
                "score": 0.6395323276519775,
                "sortText": "40dc479cmake_integer_sequence",
                "textEdit": {
                    "newText": "make_integer_sequence",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "make_signed",
                "insertText": "make_signed",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022make_signed<class Ty>",
                "score": 0.6395323276519775,
                "sortText": "40dc479cmake_signed",
                "textEdit": {
                    "newText": "make_signed",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "make_signed_t",
                "insertText": "make_signed_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022make_signed_t<class Ty>",
                "score": 0.6395323276519775,
                "sortText": "40dc479cmake_signed_t",
                "textEdit": {
                    "newText": "make_signed_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "make_unsigned",
                "insertText": "make_unsigned",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022make_unsigned<class Ty>",
                "score": 0.6395323276519775,
                "sortText": "40dc479cmake_unsigned",
                "textEdit": {
                    "newText": "make_unsigned",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "make_unsigned_t",
                "insertText": "make_unsigned_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022make_unsigned_t<class Ty>",
                "score": 0.6395323276519775,
                "sortText": "40dc479cmake_unsigned_t",
                "textEdit": {
                    "newText": "make_unsigned_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <map>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <map>"
                },
                "filterText": "map",
                "insertText": "map",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022map<class Kty, class Ty, class Pr, class Alloc>",
                "score": 0.6395323276519775,
                "sortText": "40dc479cmap",
                "textEdit": {
                    "newText": "map",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <valarray>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <valarray>"
                },
                "filterText": "mask_array",
                "insertText": "mask_array",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022mask_array<class Ty>",
                "score": 0.6395323276519775,
                "sortText": "40dc479cmask_array",
                "textEdit": {
                    "newText": "mask_array",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "match_results",
                "insertText": "match_results",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022match_results<class BidIt, class Alloc>",
                "score": 0.6395323276519775,
                "sortText": "40dc479cmatch_results",
                "textEdit": {
                    "newText": "match_results",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstddef>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstddef>"
                },
                "filterText": "max_align_t",
                "insertText": "max_align_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022max_align_t",
                "score": 0.6395323276519775,
                "sortText": "40dc479cmax_align_t",
                "textEdit": {
                    "newText": "max_align_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstddef>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstddef>"
                },
                "filterText": "max_align_t",
                "insertText": "max_align_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022max_align_t",
                "score": 0.5069242119789124,
                "sortText": "40fe3a37max_align_t",
                "textEdit": {
                    "newText": "max_align_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "move_iterator<Iter>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "make_move_iterator",
                "insertText": "make_move_iterator",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_move_iterator(Iter It)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2make_move_iterator",
                "textEdit": {
                    "newText": "make_move_iterator",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "pair<_Unrefwrap_t<Ty1>, _Unrefwrap_t<Ty2>>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "make_pair",
                "insertText": "make_pair",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_pair(Ty1 &&Val1, Ty2 &&Val2)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2make_pair",
                "textEdit": {
                    "newText": "make_pair",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "reverse_iterator<BidIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "make_reverse_iterator",
                "insertText": "make_reverse_iterator",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_reverse_iterator(BidIt Iter)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2make_reverse_iterator",
                "textEdit": {
                    "newText": "make_reverse_iterator",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "make_shared",
                "insertText": "make_shared",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_shared<class Ty>(Types &&Args...)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2make_shared",
                "textEdit": {
                    "newText": "make_shared",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <tuple>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "tuple<_Unrefwrap_t<Types>...>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <tuple>"
                },
                "filterText": "make_tuple",
                "insertText": "make_tuple",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_tuple(Types &&Args...)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2make_tuple",
                "textEdit": {
                    "newText": "make_tuple",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "unique_ptr<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "make_unique",
                "insertText": "make_unique",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_unique<class Ty>(Types &&Args...)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2make_unique",
                "textEdit": {
                    "newText": "make_unique",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "unique_ptr<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "make_unique",
                "insertText": "make_unique",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_unique<class Ty>(const size_t Size)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2make_unique",
                "textEdit": {
                    "newText": "make_unique",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "const Ty &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "max",
                "insertText": "max",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022max(const Ty &Left, const Ty &Right)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2max",
                "textEdit": {
                    "newText": "max",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "max",
                "insertText": "max",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022max(initializer_list<Ty>)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2max",
                "textEdit": {
                    "newText": "max",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "max",
                "insertText": "max",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022max(initializer_list<Ty>, Pr)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2max",
                "textEdit": {
                    "newText": "max",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "const Ty &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "max",
                "insertText": "max",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022max(const Ty &Left, const Ty &Right, Pr Pred)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2max",
                "textEdit": {
                    "newText": "max",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "max_element",
                "insertText": "max_element",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022max_element(FwdIt First, FwdIt Last)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2max_element",
                "textEdit": {
                    "newText": "max_element",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "max_element",
                "insertText": "max_element",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022max_element(FwdIt First, FwdIt Last, Pr Pred)",
                "score": 0.4401635527610779,
                "sortText": "411ea2e2max_element",
                "textEdit": {
                    "newText": "max_element",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "math_errhandling",
                "insertText": "math_errhandling",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022math_errhandling",
                "score": 0.4366929531097412,
                "sortText": "412069c8math_errhandling",
                "textEdit": {
                    "newText": "math_errhandling",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_math.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_math.h>"
                },
                "filterText": "matherr",
                "insertText": "matherr",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022matherr",
                "score": 0.4366929531097412,
                "sortText": "412069c8matherr",
                "textEdit": {
                    "newText": "matherr",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "detail": "error_code",
                "filterText": "make_error_code",
                "insertText": "make_error_code",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " make_error_code(future_errc Ec)",
                "score": 0.3956359624862671,
                "sortText": "41356f34make_error_code",
                "textEdit": {
                    "newText": "make_error_code",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "detail": "error_code",
                "filterText": "make_error_code",
                "insertText": "make_error_code",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " make_error_code(errc Ec)",
                "score": 0.3956359624862671,
                "sortText": "41356f34make_error_code",
                "textEdit": {
                    "newText": "make_error_code",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "detail": "error_code",
                "filterText": "make_error_code",
                "insertText": "make_error_code",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " make_error_code(io_errc Ec)",
                "score": 0.3956359624862671,
                "sortText": "41356f34make_error_code",
                "textEdit": {
                    "newText": "make_error_code",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "detail": "error_condition",
                "filterText": "make_error_condition",
                "insertText": "make_error_condition",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " make_error_condition(errc Ec)",
                "score": 0.3956359624862671,
                "sortText": "41356f34make_error_condition",
                "textEdit": {
                    "newText": "make_error_condition",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "detail": "error_condition",
                "filterText": "make_error_condition",
                "insertText": "make_error_condition",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " make_error_condition(io_errc Ec)",
                "score": 0.3956359624862671,
                "sortText": "41356f34make_error_condition",
                "textEdit": {
                    "newText": "make_error_condition",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "detail": "error_condition",
                "filterText": "make_error_condition",
                "insertText": "make_error_condition",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " make_error_condition(future_errc Ec)",
                "score": 0.3956359624862671,
                "sortText": "41356f34make_error_condition",
                "textEdit": {
                    "newText": "make_error_condition",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "exception_ptr",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "make_exception_ptr",
                "insertText": "make_exception_ptr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_exception_ptr(Ex Except)",
                "score": 0.3956359624862671,
                "sortText": "41356f34make_exception_ptr",
                "textEdit": {
                    "newText": "make_exception_ptr",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "make_heap",
                "insertText": "make_heap",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_heap(RanIt First, RanIt Last, Pr Pred)",
                "score": 0.3956359624862671,
                "sortText": "41356f34make_heap",
                "textEdit": {
                    "newText": "make_heap",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "make_heap",
                "insertText": "make_heap",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_heap(RanIt First, RanIt Last)",
                "score": 0.3956359624862671,
                "sortText": "41356f34make_heap",
                "textEdit": {
                    "newText": "make_heap",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "make_unique",
                "insertText": "make_unique",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_unique<class Ty>(Types &&...)",
                "score": 0.3956359624862671,
                "sortText": "41356f34make_unique",
                "textEdit": {
                    "newText": "make_unique",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "malloc",
                "insertText": "malloc",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022malloc(size_t Size)",
                "score": 0.3912048637866974,
                "sortText": "4137b3ffmalloc",
                "textEdit": {
                    "newText": "malloc",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "MATH_ERREXCEPT",
                "insertText": "MATH_ERREXCEPT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022MATH_ERREXCEPT",
                "score": 0.4366929531097412,
                "sortText": "413c5c8fMATH_ERREXCEPT",
                "textEdit": {
                    "newText": "MATH_ERREXCEPT",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "MATH_ERRNO",
                "insertText": "MATH_ERRNO",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022MATH_ERRNO",
                "score": 0.4366929531097412,
                "sortText": "413c5c8fMATH_ERRNO",
                "textEdit": {
                    "newText": "MATH_ERRNO",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "std::experimental::filesystem::perms",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "mask",
                "insertText": "experimental::filesystem::perms::mask",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022experimental::filesystem::perms::mask",
                "score": 0.29072922468185425,
                "sortText": "416b258amask",
                "textEdit": {
                    "newText": "experimental::filesystem::perms::mask",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::regex_constants::match_flag_type",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "match_any",
                "insertText": "regex_constants::match_any",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022regex_constants::match_any",
                "score": 0.2876954972743988,
                "sortText": "416cb32dmatch_any",
                "textEdit": {
                    "newText": "regex_constants::match_any",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::regex_constants::match_flag_type",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "match_continuous",
                "insertText": "regex_constants::match_continuous",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022regex_constants::match_continuous",
                "score": 0.2876954972743988,
                "sortText": "416cb32dmatch_continuous",
                "textEdit": {
                    "newText": "regex_constants::match_continuous",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::regex_constants::match_flag_type",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "match_default",
                "insertText": "regex_constants::match_default",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022regex_constants::match_default",
                "score": 0.2876954972743988,
                "sortText": "416cb32dmatch_default",
                "textEdit": {
                    "newText": "regex_constants::match_default",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::regex_constants::match_flag_type",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "match_not_bol",
                "insertText": "regex_constants::match_not_bol",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022regex_constants::match_not_bol",
                "score": 0.2876954972743988,
                "sortText": "416cb32dmatch_not_bol",
                "textEdit": {
                    "newText": "regex_constants::match_not_bol",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::regex_constants::match_flag_type",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "match_not_bow",
                "insertText": "regex_constants::match_not_bow",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022regex_constants::match_not_bow",
                "score": 0.2876954972743988,
                "sortText": "416cb32dmatch_not_bow",
                "textEdit": {
                    "newText": "regex_constants::match_not_bow",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::regex_constants::match_flag_type",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "match_not_eol",
                "insertText": "regex_constants::match_not_eol",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022regex_constants::match_not_eol",
                "score": 0.2876954972743988,
                "sortText": "416cb32dmatch_not_eol",
                "textEdit": {
                    "newText": "regex_constants::match_not_eol",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::regex_constants::match_flag_type",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "match_not_eow",
                "insertText": "regex_constants::match_not_eow",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022regex_constants::match_not_eow",
                "score": 0.2876954972743988,
                "sortText": "416cb32dmatch_not_eow",
                "textEdit": {
                    "newText": "regex_constants::match_not_eow",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::regex_constants::match_flag_type",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "match_not_null",
                "insertText": "regex_constants::match_not_null",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022regex_constants::match_not_null",
                "score": 0.2876954972743988,
                "sortText": "416cb32dmatch_not_null",
                "textEdit": {
                    "newText": "regex_constants::match_not_null",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::regex_constants::match_flag_type",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "match_prev_avail",
                "insertText": "regex_constants::match_prev_avail",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022regex_constants::match_prev_avail",
                "score": 0.2876954972743988,
                "sortText": "416cb32dmatch_prev_avail",
                "textEdit": {
                    "newText": "regex_constants::match_prev_avail",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "make_shared",
                "insertText": "tr1::make_shared",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::make_shared",
                "score": 0.281630277633667,
                "sortText": "416fce28make_shared",
                "textEdit": {
                    "newText": "tr1::make_shared",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "make_signed",
                "insertText": "tr1::make_signed",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::make_signed",
                "score": 0.281630277633667,
                "sortText": "416fce28make_signed",
                "textEdit": {
                    "newText": "tr1::make_signed",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <tuple>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <tuple>"
                },
                "filterText": "make_tuple",
                "insertText": "tr1::make_tuple",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::make_tuple",
                "score": 0.281630277633667,
                "sortText": "416fce28make_tuple",
                "textEdit": {
                    "newText": "tr1::make_tuple",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "make_unsigned",
                "insertText": "tr1::make_unsigned",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::make_unsigned",
                "score": 0.281630277633667,
                "sortText": "416fce28make_unsigned",
                "textEdit": {
                    "newText": "tr1::make_unsigned",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "match_results",
                "insertText": "tr1::match_results",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::match_results",
                "score": 0.281630277633667,
                "sortText": "416fce28match_results",
                "textEdit": {
                    "newText": "tr1::match_results",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstddef>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstddef>"
                },
                "filterText": "max_align_t",
                "insertText": "max_align_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022max_align_t",
                "score": 0.24953044950962067,
                "sortText": "41807b17max_align_t",
                "textEdit": {
                    "newText": "max_align_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "csub_match",
                "insertText": "csub_match",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022csub_match",
                "score": 0.6395323276519775,
                "sortText": "418a6b6acsub_match",
                "textEdit": {
                    "newText": "csub_match",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "ssub_match",
                "insertText": "ssub_match",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022ssub_match",
                "score": 0.6395323276519775,
                "sortText": "418a6b6assub_match",
                "textEdit": {
                    "newText": "ssub_match",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "sub_match",
                "insertText": "sub_match",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022sub_match<class BidIt>",
                "score": 0.6395323276519775,
                "sortText": "418a6b6asub_match",
                "textEdit": {
                    "newText": "sub_match",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <unordered_map>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <unordered_map>"
                },
                "filterText": "unordered_map",
                "insertText": "unordered_map",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022unordered_map<class Kty, class Ty, class Hasher, class Keyeq, class Alloc>",
                "score": 0.6395323276519775,
                "sortText": "418a6b6aunordered_map",
                "textEdit": {
                    "newText": "unordered_map",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "wcsub_match",
                "insertText": "wcsub_match",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022wcsub_match",
                "score": 0.6395323276519775,
                "sortText": "418a6b6awcsub_match",
                "textEdit": {
                    "newText": "wcsub_match",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "wssub_match",
                "insertText": "wssub_match",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022wssub_match",
                "score": 0.6395323276519775,
                "sortText": "418a6b6awssub_match",
                "textEdit": {
                    "newText": "wssub_match",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "malloc",
                "insertText": "malloc",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022malloc",
                "score": 0.23189638555049896,
                "sortText": "419289c1malloc",
                "textEdit": {
                    "newText": "malloc",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "regex_match",
                "insertText": "regex_match",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022regex_match(BidIt First, BidIt Last, match_results<BidIt, Alloc> &Matches, const basic_regex<Elem, RxTraits> &Re, regex_constants::match_flag_type Flgs = regex_constants::match_default)",
                "score": 0.3956359624862671,
                "sortText": "41e81367regex_match",
                "textEdit": {
                    "newText": "regex_match",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "regex_match",
                "insertText": "regex_match",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022regex_match(const Elem *Str, const basic_regex<Elem, RxTraits> &Re, regex_constants::match_flag_type Flgs = regex_constants::match_default)",
                "score": 0.3956359624862671,
                "sortText": "41e81367regex_match",
                "textEdit": {
                    "newText": "regex_match",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "regex_match",
                "insertText": "regex_match",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022regex_match(const basic_string<Elem, StTraits, StAlloc> &Str, match_results<typename basic_string<Elem, StTraits, StAlloc>::const_iterator, Alloc> &Matches, const basic_regex<Elem, RxTraits> &Re, regex_constants::match_flag_type Flgs = regex_constants::match_default)",
                "score": 0.3956359624862671,
                "sortText": "41e81367regex_match",
                "textEdit": {
                    "newText": "regex_match",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "regex_match",
                "insertText": "regex_match",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022regex_match(const Elem *Str, match_results<const Elem *, Alloc> &Matches, const basic_regex<Elem, RxTraits> &Re, regex_constants::match_flag_type Flgs = regex_constants::match_default)",
                "score": 0.3956359624862671,
                "sortText": "41e81367regex_match",
                "textEdit": {
                    "newText": "regex_match",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "regex_match",
                "insertText": "regex_match",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022regex_match(const basic_string<Elem, StTraits, StAlloc> &Str, const basic_regex<Elem, RxTraits> &Re, regex_constants::match_flag_type Flgs = regex_constants::match_default)",
                "score": 0.3956359624862671,
                "sortText": "41e81367regex_match",
                "textEdit": {
                    "newText": "regex_match",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "regex_match",
                "insertText": "regex_match",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022regex_match(BidIt First, BidIt Last, const basic_regex<Elem, RxTraits> &Re, regex_constants::match_flag_type Flgs = regex_constants::match_default)",
                "score": 0.3956359624862671,
                "sortText": "41e81367regex_match",
                "textEdit": {
                    "newText": "regex_match",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "regex_match",
                "insertText": "regex_match",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022regex_match(const basic_string<Elem, StTraits, StAlloc> &&, match_results<typename basic_string<Elem, StTraits, StAlloc>::const_iterator, Alloc> &, const basic_regex<Elem, RxTraits> &, regex_constants::match_flag_type = regex_constants::match_default)",
                "score": 0.3956359624862671,
                "sortText": "41e81367regex_match",
                "textEdit": {
                    "newText": "regex_match",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_makepath_s",
                "insertText": "_makepath_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_makepath_s(char (&Buffer)[Size], const char *Drive, const char *Dir, const char *Filename, const char *Ext)",
                "score": 0.3912048637866974,
                "sortText": "41e9c6ff_makepath_s",
                "textEdit": {
                    "newText": "_makepath_s",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_makepath_s",
                "insertText": "_makepath_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_makepath_s(char *Buffer, size_t BufferCount, const char *Drive, const char *Dir, const char *Filename, const char *Ext)",
                "score": 0.3912048637866974,
                "sortText": "41e9c6ff_makepath_s",
                "textEdit": {
                    "newText": "_makepath_s",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_malloc.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_malloc.h>"
                },
                "filterText": "_malloc_base",
                "insertText": "_malloc_base",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_malloc_base(size_t Size)",
                "score": 0.3912048637866974,
                "sortText": "41e9c6ff_malloc_base",
                "textEdit": {
                    "newText": "_malloc_base",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_math.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_math.h>"
                },
                "filterText": "_matherr",
                "insertText": "_matherr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_matherr(struct _exception *Except)",
                "score": 0.3912048637866974,
                "sortText": "41e9c6ff_matherr",
                "textEdit": {
                    "newText": "_matherr",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_makepath",
                "insertText": "_makepath",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_makepath(char *Buffer, const char *Drive, const char *Dir, const char *Filename, const char *Ext)",
                "score": 0.3300955891609192,
                "sortText": "42027c91_makepath",
                "textEdit": {
                    "newText": "_makepath",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEMFILE"
                },
                "filterText": "too_many_files_open",
                "insertText": "errc::too_many_files_open",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::too_many_files_open",
                "score": 0.2876954972743988,
                "sortText": "42230cc4too_many_files_open",
                "textEdit": {
                    "newText": "errc::too_many_files_open",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nENFILE"
                },
                "filterText": "too_many_files_open_in_system",
                "insertText": "errc::too_many_files_open_in_system",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::too_many_files_open_in_system",
                "score": 0.2876954972743988,
                "sortText": "42230cc4too_many_files_open_in_system",
                "textEdit": {
                    "newText": "errc::too_many_files_open_in_system",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEMLINK"
                },
                "filterText": "too_many_links",
                "insertText": "errc::too_many_links",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::too_many_links",
                "score": 0.2876954972743988,
                "sortText": "42230cc4too_many_links",
                "textEdit": {
                    "newText": "errc::too_many_links",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nELOOP"
                },
                "filterText": "too_many_symbolic_link_levels",
                "insertText": "errc::too_many_symbolic_link_levels",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::too_many_symbolic_link_levels",
                "score": 0.2876954972743988,
                "sortText": "42230cc4too_many_symbolic_link_levels",
                "textEdit": {
                    "newText": "errc::too_many_symbolic_link_levels",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "csub_match",
                "insertText": "tr1::csub_match",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::csub_match",
                "score": 0.281630277633667,
                "sortText": "4227b53ccsub_match",
                "textEdit": {
                    "newText": "tr1::csub_match",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "regex_match",
                "insertText": "tr1::regex_match",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::regex_match",
                "score": 0.281630277633667,
                "sortText": "4227b53cregex_match",
                "textEdit": {
                    "newText": "tr1::regex_match",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "ssub_match",
                "insertText": "tr1::ssub_match",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::ssub_match",
                "score": 0.281630277633667,
                "sortText": "4227b53cssub_match",
                "textEdit": {
                    "newText": "tr1::ssub_match",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "sub_match",
                "insertText": "tr1::sub_match",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::sub_match",
                "score": 0.281630277633667,
                "sortText": "4227b53csub_match",
                "textEdit": {
                    "newText": "tr1::sub_match",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <unordered_map>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <unordered_map>"
                },
                "filterText": "unordered_map",
                "insertText": "tr1::unordered_map",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::unordered_map",
                "score": 0.281630277633667,
                "sortText": "4227b53cunordered_map",
                "textEdit": {
                    "newText": "tr1::unordered_map",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "wcsub_match",
                "insertText": "tr1::wcsub_match",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::wcsub_match",
                "score": 0.281630277633667,
                "sortText": "4227b53cwcsub_match",
                "textEdit": {
                    "newText": "tr1::wcsub_match",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "wssub_match",
                "insertText": "tr1::wssub_match",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::wssub_match",
                "score": 0.281630277633667,
                "sortText": "4227b53cwssub_match",
                "textEdit": {
                    "newText": "tr1::wssub_match",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['regex_constants::match_flag_type', 'stdext::make_checked_array_iterator', 'stdext::make_unchecked_array_iterator', 'make_index_sequence', 'make_integer_sequence', 'make_signed', 'make_signed_t', 'make_unsigned', 'make_unsigned_t', 'map', 'mask_array', 'match_results', 'max_align_t', 'max_align_t', 'make_move_iterator', 'make_pair', 'make_reverse_iterator', 'make_shared', 'make_tuple', 'make_unique', 'make_unique', 'max', 'max', 'max', 'max', 'max_element', 'max_element', 'math_errhandling', 'matherr', 'make_error_code', 'make_error_code', 'make_error_code', 'make_error_condition', 'make_error_condition', 'make_error_condition', 'make_exception_ptr', 'make_heap', 'make_heap', 'make_unique', 'malloc', 'MATH_ERREXCEPT', 'MATH_ERRNO', 'experimental::filesystem::perms::mask', 'regex_constants::match_any', 'regex_constants::match_continuous', 'regex_constants::match_default', 'regex_constants::match_not_bol', 'regex_constants::match_not_bow', 'regex_constants::match_not_eol', 'regex_constants::match_not_eow', 'regex_constants::match_not_null', 'regex_constants::match_prev_avail', 'tr1::make_shared', 'tr1::make_signed', 'tr1::make_tuple', 'tr1::make_unsigned', 'tr1::match_results', 'max_align_t', 'csub_match', 'ssub_match', 'sub_match', 'unordered_map', 'wcsub_match', 'wssub_match', 'malloc', 'regex_match', 'regex_match', 'regex_match', 'regex_match', 'regex_match', 'regex_match', 'regex_match', '_makepath_s', '_makepath_s', '_malloc_base', '_matherr', '_makepath', 'errc::too_many_files_open', 'errc::too_many_files_open_in_system', 'errc::too_many_links', 'errc::too_many_symbolic_link_levels', 'tr1::csub_match', 'tr1::regex_match', 'tr1::ssub_match', 'tr1::sub_match', 'tr1::unordered_map', 'tr1::wcsub_match', 'tr1::wssub_match']
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "invalid_token_after_toplevel_declarator",
                "message": "Expected ';' after top level declarator (fix available)",
                "range": {
                    "end": {
                        "character": 6,
                        "line": 4
                    },
                    "start": {
                        "character": 6,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 49
    }
}
Diagnostics received from LSP.
Errors received: [[4, [6, 6]]]
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "make_index_sequence",
                "insertText": "make_index_sequence",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022make_index_sequence<size_t Size>",
                "score": 0.6395323276519775,
                "sortText": "40f79102make_index_sequence",
                "textEdit": {
                    "newText": "make_index_sequence",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "make_integer_sequence",
                "insertText": "make_integer_sequence",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022make_integer_sequence<class Ty, Ty Size>",
                "score": 0.6395323276519775,
                "sortText": "40f79102make_integer_sequence",
                "textEdit": {
                    "newText": "make_integer_sequence",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 4
                        },
                        "start": {
                            "character": 4,
                            "line": 4
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['make_index_sequence', 'make_integer_sequence']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "invalid_token_after_toplevel_declarator",
                "message": "Expected ';' after top level declarator (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 4
                    },
                    "start": {
                        "character": 7,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 50
    }
}
Diagnostics received from LSP.
Errors received: [[4, [7, 7]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "main_global_variable",
                "message": "Main cannot be declared as a variable in the global scope",
                "range": {
                    "end": {
                        "character": 3,
                        "line": 4
                    },
                    "start": {
                        "character": 0,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "invalid_token_after_toplevel_declarator",
                "message": "Expected ';' after top level declarator (fix available)",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 4
                    },
                    "start": {
                        "character": 8,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 52
    }
}
Diagnostics received from LSP.
Errors received: [[4, [0, 3]], [4, [8, 8]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "main_global_variable",
                "message": "Main cannot be declared as a variable in the global scope",
                "range": {
                    "end": {
                        "character": 3,
                        "line": 4
                    },
                    "start": {
                        "character": 0,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_expression",
                "message": "Expected expression",
                "range": {
                    "end": {
                        "character": 9,
                        "line": 4
                    },
                    "start": {
                        "character": 9,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "invalid_token_after_toplevel_declarator",
                "message": "Expected ';' after top level declarator (fix available)",
                "range": {
                    "end": {
                        "character": 9,
                        "line": 4
                    },
                    "start": {
                        "character": 9,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 54
    }
}
Diagnostics received from LSP.
Errors received: [[4, [0, 3]], [4, [9, 9]], [4, [9, 9]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_fn_body",
                "message": "Expected function body after function declarator",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 4
                    },
                    "start": {
                        "character": 10,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 55
    }
}
Diagnostics received from LSP.
Errors received: [[4, [10, 10]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_fn_body",
                "message": "Expected function body after function declarator",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 5
                    },
                    "start": {
                        "character": 0,
                        "line": 5
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 57
    }
}
Diagnostics received from LSP.
Errors received: [[5, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected",
                "message": "Expected '}'\n\ntmpu8w1xu5x.cpp:6:1: note: to match this '{'",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 5
                    },
                    "start": {
                        "character": 1,
                        "line": 5
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "message": "To match this '{'\n\ntmpu8w1xu5x.cpp:6:2: error: expected '}'",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 5
                    },
                    "start": {
                        "character": 0,
                        "line": 5
                    }
                },
                "severity": 3
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 59
    }
}
Diagnostics received from LSP.
Errors received: [[5, [1, 1]]]
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected",
                "message": "Expected '}'\n\ntmpu8w1xu5x.cpp:6:1: note: to match this '{'",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 6
                    },
                    "start": {
                        "character": 0,
                        "line": 6
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "message": "To match this '{'\n\ntmpu8w1xu5x.cpp:7:1: error: expected '}'",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 5
                    },
                    "start": {
                        "character": 0,
                        "line": 5
                    }
                },
                "severity": 3
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 61
    }
}
Diagnostics received from LSP.
Errors received: [[6, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_expression",
                "message": "Expected expression",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 6
                    },
                    "start": {
                        "character": 0,
                        "line": 6
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected",
                "message": "Expected '}'\n\ntmpu8w1xu5x.cpp:6:1: note: to match this '{'",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 6
                    },
                    "start": {
                        "character": 1,
                        "line": 6
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "message": "To match this '{'\n\ntmpu8w1xu5x.cpp:7:2: error: expected '}'",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 5
                    },
                    "start": {
                        "character": 0,
                        "line": 5
                    }
                },
                "severity": 3
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 64
    }
}
Diagnostics received from LSP.
Errors received: [[6, [0, 1]], [6, [1, 1]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.5999544858932495,
                "sortText": "403334b1std",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "main",
                "insertText": "main",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " main()",
                "score": 1.5662822723388672,
                "sortText": "40378410main",
                "textEdit": {
                    "newText": "main",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 0.9800145626068115,
                "sortText": "40851dc4size_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR32_T_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_CHAR32_T_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR32_T_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "__FUNCTION__",
                "insertText": "__FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __FUNCTION__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__FUNCTION__",
                "textEdit": {
                    "newText": "__FUNCTION__",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "__PRETTY_FUNCTION__",
                "insertText": "__PRETTY_FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __PRETTY_FUNCTION__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__PRETTY_FUNCTION__",
                "textEdit": {
                    "newText": "__PRETTY_FUNCTION__",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "__func__",
                "insertText": "__func__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __func__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__func__",
                "textEdit": {
                    "newText": "__func__",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "alignas",
                "insertText": "alignas",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignas(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8alignas",
                "textEdit": {
                    "newText": "alignas",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "alignof",
                "insertText": "alignof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignof(type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8alignof",
                "textEdit": {
                    "newText": "alignof",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8constexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete [] expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "dynamic_cast",
                "insertText": "dynamic_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " dynamic_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8dynamic_cast",
                "textEdit": {
                    "newText": "dynamic_cast",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "extern",
                "insertText": "extern",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " extern",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8extern",
                "textEdit": {
                    "newText": "extern",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "false",
                "insertText": "false",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " false",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8false",
                "textEdit": {
                    "newText": "false",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "goto",
                "insertText": "goto",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " goto label;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8goto",
                "textEdit": {
                    "newText": "goto",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type(expressions)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type[size](expressions)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "noexcept",
                "insertText": "noexcept",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " noexcept(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8noexcept",
                "textEdit": {
                    "newText": "noexcept",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "std::nullptr_t",
                "filterText": "nullptr",
                "insertText": "nullptr",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " nullptr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8nullptr",
                "textEdit": {
                    "newText": "nullptr",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "reinterpret_cast",
                "insertText": "reinterpret_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " reinterpret_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8reinterpret_cast",
                "textEdit": {
                    "newText": "reinterpret_cast",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "return",
                "insertText": "return",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " return expression;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8return",
                "textEdit": {
                    "newText": "return",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof",
                "insertText": "sizeof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof(expression-or-type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8sizeof",
                "textEdit": {
                    "newText": "sizeof",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof...",
                "insertText": "sizeof...",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof...(parameter-pack)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8sizeof...",
                "textEdit": {
                    "newText": "sizeof...",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "static",
                "insertText": "static",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " static",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static",
                "textEdit": {
                    "newText": "static",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "static_assert",
                "insertText": "static_assert",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_assert(expression, message);",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static_assert",
                "textEdit": {
                    "newText": "static_assert",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "static_cast",
                "insertText": "static_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static_cast",
                "textEdit": {
                    "newText": "static_cast",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "thread_local",
                "insertText": "thread_local",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " thread_local",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8thread_local",
                "textEdit": {
                    "newText": "thread_local",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "throw",
                "insertText": "throw",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " throw expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8throw",
                "textEdit": {
                    "newText": "throw",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "true",
                "insertText": "true",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " true",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8true",
                "textEdit": {
                    "newText": "true",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "typedef",
                "insertText": "typedef",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typedef type name;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typedef",
                "textEdit": {
                    "newText": "typedef",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "std::type_info",
                "filterText": "typeid",
                "insertText": "typeid",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typeid(expression-or-type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typeid",
                "textEdit": {
                    "newText": "typeid",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using name = type;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8using",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "using namespace",
                "insertText": "using namespace",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using namespace identifier;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8using namespace",
                "textEdit": {
                    "newText": "using namespace",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "equal_to",
                "insertText": "equal_to",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022equal_to<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3equal_to",
                "textEdit": {
                    "newText": "equal_to",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "greater",
                "insertText": "greater",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022greater<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3greater",
                "textEdit": {
                    "newText": "greater",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "greater_equal",
                "insertText": "greater_equal",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022greater_equal<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3greater_equal",
                "textEdit": {
                    "newText": "greater_equal",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "iterator",
                "insertText": "iterator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022iterator<class Category, class Ty, class Diff, class Pointer, class Reference>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3iterator",
                "textEdit": {
                    "newText": "iterator",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "less_equal",
                "insertText": "less_equal",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022less_equal<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3less_equal",
                "textEdit": {
                    "newText": "less_equal",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "minus",
                "insertText": "minus",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022minus<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3minus",
                "textEdit": {
                    "newText": "minus",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "move_iterator",
                "insertText": "move_iterator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022move_iterator<class Iter>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3move_iterator",
                "textEdit": {
                    "newText": "move_iterator",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "multiplies",
                "insertText": "multiplies",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022multiplies<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3multiplies",
                "textEdit": {
                    "newText": "multiplies",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "not_equal_to",
                "insertText": "not_equal_to",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022not_equal_to<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3not_equal_to",
                "textEdit": {
                    "newText": "not_equal_to",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "plus",
                "insertText": "plus",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022plus<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3plus",
                "textEdit": {
                    "newText": "plus",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "pointer_traits",
                "insertText": "pointer_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022pointer_traits<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3pointer_traits",
                "textEdit": {
                    "newText": "pointer_traits",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "reverse_iterator",
                "insertText": "reverse_iterator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022reverse_iterator<class BidIt>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3reverse_iterator",
                "textEdit": {
                    "newText": "reverse_iterator",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "_iobuf",
                "insertText": "_iobuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " _iobuf",
                "score": 0.73712557554245,
                "sortText": "40c34bbd_iobuf",
                "textEdit": {
                    "newText": "_iobuf",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "type_info",
                "insertText": "type_info",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " type_info",
                "score": 0.73712557554245,
                "sortText": "40c34bbdtype_info",
                "textEdit": {
                    "newText": "type_info",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>\nfrom <iterator>"
                },
                "filterText": "advance",
                "insertText": "advance",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022advance(InIt &Where, Diff Off)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddadvance",
                "textEdit": {
                    "newText": "advance",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "empty",
                "insertText": "empty",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022empty(initializer_list<Elem> Ilist)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddempty",
                "textEdit": {
                    "newText": "empty",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "empty",
                "insertText": "empty",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022empty(const Ty (&)[Size])",
                "score": 0.5893728137016296,
                "sortText": "40e91eddempty",
                "textEdit": {
                    "newText": "empty",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "equal",
                "insertText": "equal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022equal(const InIt1 First1, const InIt1 Last1, const InIt2 First2, const InIt2 Last2, Pr Pred)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddequal",
                "textEdit": {
                    "newText": "equal",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "equal",
                "insertText": "equal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022equal(const InIt1 First1, const InIt1 Last1, const InIt2 First2)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddequal",
                "textEdit": {
                    "newText": "equal",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "equal",
                "insertText": "equal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022equal(const InIt1 First1, const InIt1 Last1, const InIt2 First2, Pr Pred)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddequal",
                "textEdit": {
                    "newText": "equal",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "equal",
                "insertText": "equal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022equal(const InIt1 First1, const InIt1 Last1, const InIt2 First2, const InIt2 Last2)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddequal",
                "textEdit": {
                    "newText": "equal",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "fill",
                "insertText": "fill",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022fill(const FwdIt First, const FwdIt Last, const Ty &Val)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddfill",
                "textEdit": {
                    "newText": "fill",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "lexicographical_compare",
                "insertText": "lexicographical_compare",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022lexicographical_compare(const InIt1 First1, const InIt1 Last1, const InIt2 First2, const InIt2 Last2, Pr Pred)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddlexicographical_compare",
                "textEdit": {
                    "newText": "lexicographical_compare",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "lexicographical_compare",
                "insertText": "lexicographical_compare",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022lexicographical_compare(const InIt1 First1, const InIt1 Last1, const InIt2 First2, const InIt2 Last2)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddlexicographical_compare",
                "textEdit": {
                    "newText": "lexicographical_compare",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator!=",
                "insertText": "operator!=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator!=(const move_iterator<Iter1> &Left, const move_iterator<Iter2> &Right)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddoperator!=",
                "textEdit": {
                    "newText": "operator!=",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator!=",
                "insertText": "operator!=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator!=(const reverse_iterator<BidIt1> &Left, const reverse_iterator<BidIt2> &Right)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddoperator!=",
                "textEdit": {
                    "newText": "operator!=",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator<",
                "insertText": "operator<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<(const move_iterator<Iter1> &Left, const move_iterator<Iter2> &Right)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddoperator<",
                "textEdit": {
                    "newText": "operator<",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator<",
                "insertText": "operator<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<(const reverse_iterator<BidIt1> &Left, const reverse_iterator<BidIt2> &Right)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddoperator<",
                "textEdit": {
                    "newText": "operator<",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator<=",
                "insertText": "operator<=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<=(const reverse_iterator<BidIt1> &Left, const reverse_iterator<BidIt2> &Right)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddoperator<=",
                "textEdit": {
                    "newText": "operator<=",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator<=",
                "insertText": "operator<=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<=(const move_iterator<Iter1> &Left, const move_iterator<Iter2> &Right)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddoperator<=",
                "textEdit": {
                    "newText": "operator<=",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator==",
                "insertText": "operator==",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator==(const move_iterator<Iter1> &Left, const move_iterator<Iter2> &Right)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddoperator==",
                "textEdit": {
                    "newText": "operator==",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator==",
                "insertText": "operator==",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator==(const reverse_iterator<BidIt1> &Left, const reverse_iterator<BidIt2> &Right)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddoperator==",
                "textEdit": {
                    "newText": "operator==",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator>",
                "insertText": "operator>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>(const move_iterator<Iter1> &Left, const move_iterator<Iter2> &Right)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddoperator>",
                "textEdit": {
                    "newText": "operator>",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator>",
                "insertText": "operator>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>(const reverse_iterator<BidIt1> &Left, const reverse_iterator<BidIt2> &Right)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddoperator>",
                "textEdit": {
                    "newText": "operator>",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator>=",
                "insertText": "operator>=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>=(const reverse_iterator<BidIt1> &Left, const reverse_iterator<BidIt2> &Right)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddoperator>=",
                "textEdit": {
                    "newText": "operator>=",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator>=",
                "insertText": "operator>=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>=(const move_iterator<Iter1> &Left, const move_iterator<Iter2> &Right)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddoperator>=",
                "textEdit": {
                    "newText": "operator>=",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "reverse",
                "insertText": "reverse",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022reverse(const BidIt First, const BidIt Last)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddreverse",
                "textEdit": {
                    "newText": "reverse",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "size",
                "insertText": "size",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022size(const Ty (&)[Size])",
                "score": 0.5893728137016296,
                "sortText": "40e91eddsize",
                "textEdit": {
                    "newText": "size",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_sub",
                "insertText": "atomic_fetch_sub",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_sub(atomic<Ty> *Mem, const typename atomic<Ty>::difference_type Value)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464atomic_fetch_sub",
                "textEdit": {
                    "newText": "atomic_fetch_sub",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['std', 'main', 'size_t', 'ATOMIC_CHAR32_T_LOCK_FREE', '_Nonnull', '_Null_unspecified', '_Nullable', '__FUNCTION__', '__PRETTY_FUNCTION__', '__func__', 'alignas', 'alignof', 'auto', 'bool', 'char', 'char16_t', 'char32_t', 'class', 'const', 'const_cast', 'constexpr', 'decltype', 'delete', 'delete', 'double', 'dynamic_cast', 'enum', 'extern', 'false', 'float', 'goto', 'int', 'long', 'new', 'new', 'noexcept', 'nullptr', 'operator', 'reinterpret_cast', 'return', 'short', 'signed', 'sizeof', 'sizeof...', 'static', 'static_assert', 'static_cast', 'struct', 'thread_local', 'throw', 'true', 'typedef', 'typeid', 'typename', 'union', 'unsigned', 'using', 'using namespace', 'void', 'volatile', 'wchar_t', 'equal_to', 'greater', 'greater_equal', 'iterator', 'less_equal', 'minus', 'move_iterator', 'multiplies', 'not_equal_to', 'plus', 'pointer_traits', 'reverse_iterator', '_iobuf', 'type_info', 'advance', 'empty', 'empty', 'equal', 'equal', 'equal', 'equal', 'fill', 'lexicographical_compare', 'lexicographical_compare', 'operator!=', 'operator!=', 'operator<', 'operator<', 'operator<=', 'operator<=', 'operator==', 'operator==', 'operator>', 'operator>', 'operator>=', 'operator>=', 'reverse', 'size', 'atomic_fetch_sub']
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected",
                "message": "Expected '}'\n\ntmpu8w1xu5x.cpp:6:1: note: to match this '{'",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 6
                    },
                    "start": {
                        "character": 0,
                        "line": 6
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "message": "To match this '{'\n\ntmpu8w1xu5x.cpp:7:1: error: expected '}'",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 5
                    },
                    "start": {
                        "character": 0,
                        "line": 5
                    }
                },
                "severity": 3
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 68
    }
}
Diagnostics received from LSP.
Errors received: [[6, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 69
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 70
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.5999544858932495,
                "sortText": "403334b1std",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "main",
                "insertText": "main",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " main()",
                "score": 1.5662822723388672,
                "sortText": "40378410main",
                "textEdit": {
                    "newText": "main",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 0.9800145626068115,
                "sortText": "40851dc4size_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR32_T_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_CHAR32_T_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR32_T_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "__FUNCTION__",
                "insertText": "__FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __FUNCTION__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__FUNCTION__",
                "textEdit": {
                    "newText": "__FUNCTION__",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "__PRETTY_FUNCTION__",
                "insertText": "__PRETTY_FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __PRETTY_FUNCTION__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__PRETTY_FUNCTION__",
                "textEdit": {
                    "newText": "__PRETTY_FUNCTION__",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "__func__",
                "insertText": "__func__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __func__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__func__",
                "textEdit": {
                    "newText": "__func__",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "alignas",
                "insertText": "alignas",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignas(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8alignas",
                "textEdit": {
                    "newText": "alignas",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "alignof",
                "insertText": "alignof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignof(type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8alignof",
                "textEdit": {
                    "newText": "alignof",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8constexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete [] expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "dynamic_cast",
                "insertText": "dynamic_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " dynamic_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8dynamic_cast",
                "textEdit": {
                    "newText": "dynamic_cast",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "extern",
                "insertText": "extern",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " extern",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8extern",
                "textEdit": {
                    "newText": "extern",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "false",
                "insertText": "false",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " false",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8false",
                "textEdit": {
                    "newText": "false",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "goto",
                "insertText": "goto",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " goto label;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8goto",
                "textEdit": {
                    "newText": "goto",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type(expressions)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type[size](expressions)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "noexcept",
                "insertText": "noexcept",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " noexcept(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8noexcept",
                "textEdit": {
                    "newText": "noexcept",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "std::nullptr_t",
                "filterText": "nullptr",
                "insertText": "nullptr",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " nullptr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8nullptr",
                "textEdit": {
                    "newText": "nullptr",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "reinterpret_cast",
                "insertText": "reinterpret_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " reinterpret_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8reinterpret_cast",
                "textEdit": {
                    "newText": "reinterpret_cast",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "return",
                "insertText": "return",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " return expression;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8return",
                "textEdit": {
                    "newText": "return",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof",
                "insertText": "sizeof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof(expression-or-type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8sizeof",
                "textEdit": {
                    "newText": "sizeof",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof...",
                "insertText": "sizeof...",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof...(parameter-pack)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8sizeof...",
                "textEdit": {
                    "newText": "sizeof...",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "static",
                "insertText": "static",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " static",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static",
                "textEdit": {
                    "newText": "static",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "static_assert",
                "insertText": "static_assert",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_assert(expression, message);",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static_assert",
                "textEdit": {
                    "newText": "static_assert",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "static_cast",
                "insertText": "static_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static_cast",
                "textEdit": {
                    "newText": "static_cast",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "thread_local",
                "insertText": "thread_local",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " thread_local",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8thread_local",
                "textEdit": {
                    "newText": "thread_local",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "throw",
                "insertText": "throw",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " throw expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8throw",
                "textEdit": {
                    "newText": "throw",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "true",
                "insertText": "true",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " true",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8true",
                "textEdit": {
                    "newText": "true",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "typedef",
                "insertText": "typedef",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typedef type name;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typedef",
                "textEdit": {
                    "newText": "typedef",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "std::type_info",
                "filterText": "typeid",
                "insertText": "typeid",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typeid(expression-or-type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typeid",
                "textEdit": {
                    "newText": "typeid",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using name = type;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8using",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "using namespace",
                "insertText": "using namespace",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using namespace identifier;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8using namespace",
                "textEdit": {
                    "newText": "using namespace",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "equal_to",
                "insertText": "equal_to",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022equal_to<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3equal_to",
                "textEdit": {
                    "newText": "equal_to",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "greater",
                "insertText": "greater",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022greater<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3greater",
                "textEdit": {
                    "newText": "greater",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "greater_equal",
                "insertText": "greater_equal",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022greater_equal<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3greater_equal",
                "textEdit": {
                    "newText": "greater_equal",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "iterator",
                "insertText": "iterator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022iterator<class Category, class Ty, class Diff, class Pointer, class Reference>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3iterator",
                "textEdit": {
                    "newText": "iterator",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "less_equal",
                "insertText": "less_equal",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022less_equal<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3less_equal",
                "textEdit": {
                    "newText": "less_equal",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "minus",
                "insertText": "minus",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022minus<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3minus",
                "textEdit": {
                    "newText": "minus",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "move_iterator",
                "insertText": "move_iterator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022move_iterator<class Iter>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3move_iterator",
                "textEdit": {
                    "newText": "move_iterator",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "multiplies",
                "insertText": "multiplies",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022multiplies<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3multiplies",
                "textEdit": {
                    "newText": "multiplies",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "not_equal_to",
                "insertText": "not_equal_to",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022not_equal_to<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3not_equal_to",
                "textEdit": {
                    "newText": "not_equal_to",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "plus",
                "insertText": "plus",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022plus<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3plus",
                "textEdit": {
                    "newText": "plus",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "pointer_traits",
                "insertText": "pointer_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022pointer_traits<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3pointer_traits",
                "textEdit": {
                    "newText": "pointer_traits",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "reverse_iterator",
                "insertText": "reverse_iterator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022reverse_iterator<class BidIt>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3reverse_iterator",
                "textEdit": {
                    "newText": "reverse_iterator",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "_iobuf",
                "insertText": "_iobuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " _iobuf",
                "score": 0.73712557554245,
                "sortText": "40c34bbd_iobuf",
                "textEdit": {
                    "newText": "_iobuf",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "type_info",
                "insertText": "type_info",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " type_info",
                "score": 0.73712557554245,
                "sortText": "40c34bbdtype_info",
                "textEdit": {
                    "newText": "type_info",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>\nfrom <iterator>"
                },
                "filterText": "advance",
                "insertText": "advance",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022advance(InIt &Where, Diff Off)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddadvance",
                "textEdit": {
                    "newText": "advance",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "empty",
                "insertText": "empty",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022empty(initializer_list<Elem> Ilist)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddempty",
                "textEdit": {
                    "newText": "empty",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "empty",
                "insertText": "empty",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022empty(const Ty (&)[Size])",
                "score": 0.5893728137016296,
                "sortText": "40e91eddempty",
                "textEdit": {
                    "newText": "empty",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "equal",
                "insertText": "equal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022equal(const InIt1 First1, const InIt1 Last1, const InIt2 First2, const InIt2 Last2, Pr Pred)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddequal",
                "textEdit": {
                    "newText": "equal",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "equal",
                "insertText": "equal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022equal(const InIt1 First1, const InIt1 Last1, const InIt2 First2)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddequal",
                "textEdit": {
                    "newText": "equal",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "equal",
                "insertText": "equal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022equal(const InIt1 First1, const InIt1 Last1, const InIt2 First2, Pr Pred)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddequal",
                "textEdit": {
                    "newText": "equal",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "equal",
                "insertText": "equal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022equal(const InIt1 First1, const InIt1 Last1, const InIt2 First2, const InIt2 Last2)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddequal",
                "textEdit": {
                    "newText": "equal",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "fill",
                "insertText": "fill",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022fill(const FwdIt First, const FwdIt Last, const Ty &Val)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddfill",
                "textEdit": {
                    "newText": "fill",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "lexicographical_compare",
                "insertText": "lexicographical_compare",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022lexicographical_compare(const InIt1 First1, const InIt1 Last1, const InIt2 First2, const InIt2 Last2, Pr Pred)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddlexicographical_compare",
                "textEdit": {
                    "newText": "lexicographical_compare",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "lexicographical_compare",
                "insertText": "lexicographical_compare",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022lexicographical_compare(const InIt1 First1, const InIt1 Last1, const InIt2 First2, const InIt2 Last2)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddlexicographical_compare",
                "textEdit": {
                    "newText": "lexicographical_compare",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator!=",
                "insertText": "operator!=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator!=(const reverse_iterator<BidIt1> &Left, const reverse_iterator<BidIt2> &Right)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddoperator!=",
                "textEdit": {
                    "newText": "operator!=",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator!=",
                "insertText": "operator!=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator!=(const move_iterator<Iter1> &Left, const move_iterator<Iter2> &Right)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddoperator!=",
                "textEdit": {
                    "newText": "operator!=",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator<",
                "insertText": "operator<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<(const move_iterator<Iter1> &Left, const move_iterator<Iter2> &Right)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddoperator<",
                "textEdit": {
                    "newText": "operator<",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator<",
                "insertText": "operator<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<(const reverse_iterator<BidIt1> &Left, const reverse_iterator<BidIt2> &Right)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddoperator<",
                "textEdit": {
                    "newText": "operator<",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator<=",
                "insertText": "operator<=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<=(const reverse_iterator<BidIt1> &Left, const reverse_iterator<BidIt2> &Right)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddoperator<=",
                "textEdit": {
                    "newText": "operator<=",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator<=",
                "insertText": "operator<=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<=(const move_iterator<Iter1> &Left, const move_iterator<Iter2> &Right)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddoperator<=",
                "textEdit": {
                    "newText": "operator<=",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator==",
                "insertText": "operator==",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator==(const move_iterator<Iter1> &Left, const move_iterator<Iter2> &Right)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddoperator==",
                "textEdit": {
                    "newText": "operator==",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator==",
                "insertText": "operator==",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator==(const reverse_iterator<BidIt1> &Left, const reverse_iterator<BidIt2> &Right)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddoperator==",
                "textEdit": {
                    "newText": "operator==",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator>",
                "insertText": "operator>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>(const move_iterator<Iter1> &Left, const move_iterator<Iter2> &Right)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddoperator>",
                "textEdit": {
                    "newText": "operator>",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator>",
                "insertText": "operator>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>(const reverse_iterator<BidIt1> &Left, const reverse_iterator<BidIt2> &Right)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddoperator>",
                "textEdit": {
                    "newText": "operator>",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator>=",
                "insertText": "operator>=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>=(const reverse_iterator<BidIt1> &Left, const reverse_iterator<BidIt2> &Right)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddoperator>=",
                "textEdit": {
                    "newText": "operator>=",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <xutility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <xutility>"
                },
                "filterText": "operator>=",
                "insertText": "operator>=",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>=(const move_iterator<Iter1> &Left, const move_iterator<Iter2> &Right)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddoperator>=",
                "textEdit": {
                    "newText": "operator>=",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "reverse",
                "insertText": "reverse",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022reverse(const BidIt First, const BidIt Last)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddreverse",
                "textEdit": {
                    "newText": "reverse",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "size",
                "insertText": "size",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022size(const Ty (&)[Size])",
                "score": 0.5893728137016296,
                "sortText": "40e91eddsize",
                "textEdit": {
                    "newText": "size",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_sub",
                "insertText": "atomic_fetch_sub",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_sub(atomic<Ty> *Mem, const typename atomic<Ty>::difference_type Value)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464atomic_fetch_sub",
                "textEdit": {
                    "newText": "atomic_fetch_sub",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['std', 'main', 'size_t', 'ATOMIC_CHAR32_T_LOCK_FREE', '_Nonnull', '_Null_unspecified', '_Nullable', '__FUNCTION__', '__PRETTY_FUNCTION__', '__func__', 'alignas', 'alignof', 'auto', 'bool', 'char', 'char16_t', 'char32_t', 'class', 'const', 'const_cast', 'constexpr', 'decltype', 'delete', 'delete', 'double', 'dynamic_cast', 'enum', 'extern', 'false', 'float', 'goto', 'int', 'long', 'new', 'new', 'noexcept', 'nullptr', 'operator', 'reinterpret_cast', 'return', 'short', 'signed', 'sizeof', 'sizeof...', 'static', 'static_assert', 'static_cast', 'struct', 'thread_local', 'throw', 'true', 'typedef', 'typeid', 'typename', 'union', 'unsigned', 'using', 'using namespace', 'void', 'volatile', 'wchar_t', 'equal_to', 'greater', 'greater_equal', 'iterator', 'less_equal', 'minus', 'move_iterator', 'multiplies', 'not_equal_to', 'plus', 'pointer_traits', 'reverse_iterator', '_iobuf', 'type_info', 'advance', 'empty', 'empty', 'equal', 'equal', 'equal', 'equal', 'fill', 'lexicographical_compare', 'lexicographical_compare', 'operator!=', 'operator!=', 'operator<', 'operator<', 'operator<=', 'operator<=', 'operator==', 'operator==', 'operator>', 'operator>', 'operator>=', 'operator>=', 'reverse', 'size', 'atomic_fetch_sub']
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "filterText": "chrono_literals",
                "insertText": "chrono_literals",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " chrono_literals",
                "score": 1.384774923324585,
                "sortText": "404ebfb2chrono_literals",
                "textEdit": {
                    "newText": "chrono_literals",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "complex_literals",
                "insertText": "complex_literals",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " complex_literals",
                "score": 1.384774923324585,
                "sortText": "404ebfb2complex_literals",
                "textEdit": {
                    "newText": "complex_literals",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "concurrency",
                "insertText": "concurrency",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " concurrency",
                "score": 1.227129578590393,
                "sortText": "4062ed6bconcurrency",
                "textEdit": {
                    "newText": "concurrency",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <concurrencysal.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <concurrencysal.h>"
                },
                "filterText": "CSALCAT1",
                "insertText": "CSALCAT1",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022CSALCAT1(x, y)",
                "score": 0.9173901677131653,
                "sortText": "409525ebCSALCAT1",
                "textEdit": {
                    "newText": "CSALCAT1",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <concurrencysal.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <concurrencysal.h>"
                },
                "filterText": "CSALCAT2",
                "insertText": "CSALCAT2",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022CSALCAT2(x, y)",
                "score": 0.9173901677131653,
                "sortText": "409525ebCSALCAT2",
                "textEdit": {
                    "newText": "CSALCAT2",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <climits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <climits>"
                },
                "filterText": "CHAR_BIT",
                "insertText": "CHAR_BIT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022CHAR_BIT",
                "score": 0.8436345458030701,
                "sortText": "40a80791CHAR_BIT",
                "textEdit": {
                    "newText": "CHAR_BIT",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <climits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <climits>"
                },
                "filterText": "CHAR_MAX",
                "insertText": "CHAR_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022CHAR_MAX",
                "score": 0.8436345458030701,
                "sortText": "40a80791CHAR_MAX",
                "textEdit": {
                    "newText": "CHAR_MAX",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <climits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <climits>"
                },
                "filterText": "CHAR_MIN",
                "insertText": "CHAR_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022CHAR_MIN",
                "score": 0.8436345458030701,
                "sortText": "40a80791CHAR_MIN",
                "textEdit": {
                    "newText": "CHAR_MIN",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <time.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <time.h>"
                },
                "filterText": "CLK_TCK",
                "insertText": "CLK_TCK",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022CLK_TCK",
                "score": 0.8436345458030701,
                "sortText": "40a80791CLK_TCK",
                "textEdit": {
                    "newText": "CLK_TCK",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "CLOCKS_PER_SEC",
                "insertText": "CLOCKS_PER_SEC",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022CLOCKS_PER_SEC",
                "score": 0.8436345458030701,
                "sortText": "40a80791CLOCKS_PER_SEC",
                "textEdit": {
                    "newText": "CLOCKS_PER_SEC",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "CW_DEFAULT",
                "insertText": "CW_DEFAULT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022CW_DEFAULT",
                "score": 0.8436345458030701,
                "sortText": "40a80791CW_DEFAULT",
                "textEdit": {
                    "newText": "CW_DEFAULT",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "clear87",
                "insertText": "clear87",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022clear87",
                "score": 0.8436345458030701,
                "sortText": "40a80791clear87",
                "textEdit": {
                    "newText": "clear87",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "control87",
                "insertText": "control87",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022control87",
                "score": 0.8436345458030701,
                "sortText": "40a80791control87",
                "textEdit": {
                    "newText": "control87",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8constexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string>"
                },
                "filterText": "char_traits",
                "insertText": "char_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022char_traits<class Elem>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3char_traits",
                "textEdit": {
                    "newText": "char_traits",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "codecvt",
                "insertText": "codecvt",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt<class Elem, class Byte, class Statype>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt",
                "textEdit": {
                    "newText": "codecvt",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "codecvt_base",
                "insertText": "codecvt_base",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_base",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_base",
                "textEdit": {
                    "newText": "codecvt_base",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "codecvt_byname",
                "insertText": "codecvt_byname",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_byname<class Elem, class Byte, class Statype>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_byname",
                "textEdit": {
                    "newText": "codecvt_byname",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_mode",
                "insertText": "codecvt_mode",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022codecvt_mode",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_mode",
                "textEdit": {
                    "newText": "codecvt_mode",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf16",
                "insertText": "codecvt_utf16",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf16<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_utf16",
                "textEdit": {
                    "newText": "codecvt_utf16",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf8",
                "insertText": "codecvt_utf8",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf8<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_utf8",
                "textEdit": {
                    "newText": "codecvt_utf8",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf8_utf16",
                "insertText": "codecvt_utf8_utf16",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf8_utf16<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_utf8_utf16",
                "textEdit": {
                    "newText": "codecvt_utf8_utf16",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "collate",
                "insertText": "collate",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022collate<class Elem>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3collate",
                "textEdit": {
                    "newText": "collate",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "complex",
                "insertText": "complex",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022complex<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3complex",
                "textEdit": {
                    "newText": "complex",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable",
                "insertText": "condition_variable",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable",
                "score": 0.8070572018623352,
                "sortText": "40b164b3condition_variable",
                "textEdit": {
                    "newText": "condition_variable",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable_any",
                "insertText": "condition_variable_any",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable_any",
                "score": 0.8070572018623352,
                "sortText": "40b164b3condition_variable_any",
                "textEdit": {
                    "newText": "condition_variable_any",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "ctype",
                "insertText": "ctype",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022ctype<class Elem>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3ctype",
                "textEdit": {
                    "newText": "ctype",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "ctype_base",
                "insertText": "ctype_base",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022ctype_base",
                "score": 0.8070572018623352,
                "sortText": "40b164b3ctype_base",
                "textEdit": {
                    "newText": "ctype_base",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "ctype_byname",
                "insertText": "ctype_byname",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022ctype_byname<class Elem>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3ctype_byname",
                "textEdit": {
                    "newText": "ctype_byname",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "cv_status",
                "insertText": "cv_status",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022cv_status",
                "score": 0.8070572018623352,
                "sortText": "40b164b3cv_status",
                "textEdit": {
                    "newText": "cv_status",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "CancellationTokenRegistration_TaskProc",
                "insertText": "Concurrency::details::CancellationTokenRegistration_TaskProc",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::details::CancellationTokenRegistration_TaskProc",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fCancellationTokenRegistration_TaskProc",
                "textEdit": {
                    "newText": "Concurrency::details::CancellationTokenRegistration_TaskProc",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token</c> class represents the ability to determine whether some operation has been requested to cancel. A given token can be associated with a <c>task_group</c>, <c>structured_task_group</c>, or <c>task</c> to provide implicit cancellation. It can also be polled for cancellation or have a callback registered for if and when the associated <c>cancellation_token_source</c> is canceled.\n</summary>"
                },
                "filterText": "cancellation_token",
                "insertText": "Concurrency::cancellation_token",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token_registration</c> class represents a callback notification from a <c>cancellation_token</c>. When the <c>register</c> method on a <c>cancellation_token</c> is used to receive notification of when cancellation occurs, a <c>cancellation_token_registration</c> object is returned as a handle to the callback so that the caller can request a specific callback no longer be made through use of the <c>deregister</c> method.\n</summary>"
                },
                "filterText": "cancellation_token_registration",
                "insertText": "Concurrency::cancellation_token_registration",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token_registration",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token_registration",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token_registration",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token_source</c> class represents the ability to cancel some cancelable operation.\n</summary>"
                },
                "filterText": "cancellation_token_source",
                "insertText": "Concurrency::cancellation_token_source",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token_source",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token_source",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token_source",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "call_once",
                "insertText": "call_once",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022call_once(once_flag &Once, Fn &&Fx, Args &&Ax...)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddcall_once",
                "textEdit": {
                    "newText": "call_once",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::begin(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "cbegin",
                "insertText": "cbegin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbegin(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cbegin",
                "textEdit": {
                    "newText": "cbegin",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::end(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "cend",
                "insertText": "cend",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cend(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cend",
                "textEdit": {
                    "newText": "cend",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<_Upgrade_to_double<Ty>>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "conj",
                "insertText": "conj",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022conj(Ty Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464conj",
                "textEdit": {
                    "newText": "conj",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "conj",
                "insertText": "conj",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022conj(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464conj",
                "textEdit": {
                    "newText": "conj",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy",
                "insertText": "copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy(InIt First, InIt Last, OutIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy",
                "textEdit": {
                    "newText": "copy",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "BidIt2",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_backward",
                "insertText": "copy_backward",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_backward(BidIt1 First, BidIt1 Last, BidIt2 Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_backward",
                "textEdit": {
                    "newText": "copy_backward",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_n",
                "insertText": "copy_n",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_n(InIt First, Diff Count_raw, OutIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_n",
                "textEdit": {
                    "newText": "copy_n",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(const valarray<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(const valarray<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count",
                "insertText": "count",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count(const InIt First, const InIt Last, const Ty &Val)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464count",
                "textEdit": {
                    "newText": "count",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::rbegin(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "crbegin",
                "insertText": "crbegin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022crbegin(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464crbegin",
                "textEdit": {
                    "newText": "crbegin",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::rend(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "crend",
                "insertText": "crend",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022crend(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464crend",
                "textEdit": {
                    "newText": "crend",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\nTypes\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
                },
                "filterText": "clock_t",
                "insertText": "clock_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022clock_t",
                "score": 0.5684974789619446,
                "sortText": "40ee76f3clock_t",
                "textEdit": {
                    "newText": "clock_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "checked_array_iterator",
                "insertText": "stdext::checked_array_iterator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022stdext::checked_array_iterator<class Ptr>",
                "score": 0.5384255647659302,
                "sortText": "40f629bechecked_array_iterator",
                "textEdit": {
                    "newText": "stdext::checked_array_iterator",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "::std::_Common_float_type_t<Ty1, Ty2>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nremquo() is hand-crafted"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(Ty1 Left, Ty2 Right)",
                "score": 0.5297134518623352,
                "sortText": "40f864b3copysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplwin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplwin.h>"
                },
                "filterText": "CaptureCallstack",
                "insertText": "Concurrency::details::platform::CaptureCallstack",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::details::platform::CaptureCallstack(void **, size_t, size_t)",
                "score": 0.5271684527397156,
                "sortText": "40f90b7dCaptureCallstack",
                "textEdit": {
                    "newText": "Concurrency::details::platform::CaptureCallstack",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> Cancels the currently executing task. This function can be called from within the body of a task to abort the task's execution and cause it to enter the <c>canceled</c> state. While it may be used in response to a cancellation request through a <c>cancellation_token</c>, you may also use it by itself, to initiate cancellation of the task that is currently executing.\n<para>It is not a supported scenario to call this function if you are not within the body of a <c>task</c>.\nDoing so will result in undefined behavior such as a crash or a hang in your application.</para> </summary> <seealso cref=\"task Class\"/>"
                },
                "filterText": "cancel_current_task",
                "insertText": "Concurrency::cancel_current_task",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::cancel_current_task()",
                "score": 0.5271684527397156,
                "sortText": "40f90b7dcancel_current_task",
                "textEdit": {
                    "newText": "Concurrency::cancel_current_task",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbrt(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbrt(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nNo modf(), types must match"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbrt(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\n3-arg hypot() is hand-crafted"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ceil(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ceil(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ceil(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(long double Number, long double Sign)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcopysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(float Number, float Sign)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcopysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nThe following order matches N4950 [cmath.syn]."
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nThe following order matches N4950 [cmath.syn]."
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "task<typename details::_TaskTypeFromParam<Ty>::_Type>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> Creates a PPL <see cref=\"task Class\">task</see> object. <c>create_task</c> can be used anywhere you would have used a task constructor.\nIt is provided mainly for convenience, because it allows use of the <c>auto</c> keyword while creating tasks.\n</summary> <typeparam name=\"_Ty\"> The type of the parameter from which the task is to be constructed.\n</typeparam> <param name=\"_Param\"> The parameter from which the task is to be constructed. This could be a lambda or function object, a <c>task_completion_event</c> object, a different <c>task</c> object, or a Windows::Foundation::IAsyncInfo interface if you are using tasks in your Windows Store app.\n</param> <returns> A new task of type <c>T</c>, that is inferred from <paramref name=\"_Param\"/>.\n</returns> <remarks> The first overload behaves like a task constructor that takes a single parameter.\n<para>The second overload associates the cancellation token provided with the newly created task. If you use this overload you are not allowed to pass in a different <c>task</c> object as the first parameter.</para> <para>The type of the returned task is inferred from the first parameter to the function. If <paramref name=\"_Param\"/> is a <c>task_completion_event&lt;T&gt;</c>,\na <c>task&lt;T&gt;</c>, or a functor that returns either type <c>T</c> or <c>task&lt;T&gt;</c>, the type of the created task is <c>task&lt;T&gt;</c>.</para> <para>In a Windows Store app, if <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncOperation&lt;T&gt;^ or Windows::Foundation::IAsyncOperationWithProgress&lt;T,P&gt;^, or a functor that returns either of those types, the created task will be of type <c>task&lt;T&gt;</c>.\nIf <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncAction^ or Windows::Foundation::IAsyncActionWithProgress&lt;P&gt;^, or a functor that returns either of those types, the created task will have type <c>task&lt;void&gt;</c>.</para> </remarks> <seealso cref=\"task Class\"/> <seealso cref=\"Task Parallelism (Concurrency Runtime)\"/>"
                },
                "filterText": "create_task",
                "insertText": "Concurrency::create_task",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::create_task(Ty Param, task_options TaskOptions = task_options())",
                "score": 0.5095226764678955,
                "sortText": "40fd8feccreate_task",
                "textEdit": {
                    "newText": "Concurrency::create_task",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "task<ReturnType>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> Creates a PPL <see cref=\"task Class\">task</see> object. <c>create_task</c> can be used anywhere you would have used a task constructor.\nIt is provided mainly for convenience, because it allows use of the <c>auto</c> keyword while creating tasks.\n</summary> <typeparam name=\"_Ty\"> The type of the parameter from which the task is to be constructed.\n</typeparam> <param name=\"_Param\"> The parameter from which the task is to be constructed. This could be a lambda or function object, a <c>task_completion_event</c> object, a different <c>task</c> object, or a Windows::Foundation::IAsyncInfo interface if you are using tasks in your Windows Store app.\n</param> <param name=\"_Token\"> The cancellation token to associate with the task. When the source for this token is canceled, cancellation will be requested on the task.\n</param> <returns> A new task of type <c>T</c>, that is inferred from <paramref name=\"_Param\"/>.\n</returns> <remarks> The first overload behaves like a task constructor that takes a single parameter.\n<para>The second overload associates the cancellation token provided with the newly created task. If you use this overload you are not allowed to pass in a different <c>task</c> object as the first parameter.</para> <para>The type of the returned task is inferred from the first parameter to the function. If <paramref name=\"_Param\"/> is a <c>task_completion_event&lt;T&gt;</c>,\na <c>task&lt;T&gt;</c>, or a functor that returns either type <c>T</c> or <c>task&lt;T&gt;</c>, the type of the created task is <c>task&lt;T&gt;</c>.</para> <para>In a Windows Store app, if <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncOperation&lt;T&gt;^ or Windows::Foundation::IAsyncOperationWithProgress&lt;T,P&gt;^, or a functor that returns either of those types, the created task will be of type <c>task&lt;T&gt;</c>.\nIf <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncAction^ or Windows::Foundation::IAsyncActionWithProgress&lt;P&gt;^, or a functor that returns either of those types, the created task will have type <c>task&lt;void&gt;</c>.</para> </remarks> <seealso cref=\"task Class\"/> <seealso cref=\"Task Parallelism (Concurrency Runtime)\"/>"
                },
                "filterText": "create_task",
                "insertText": "Concurrency::create_task",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::create_task(const task<ReturnType> &Task)",
                "score": 0.5095226764678955,
                "sortText": "40fd8feccreate_task",
                "textEdit": {
                    "newText": "Concurrency::create_task",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cerr",
                "insertText": "cerr",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cerr",
                "score": 0.45782190561294556,
                "sortText": "4115985ecerr",
                "textEdit": {
                    "newText": "cerr",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "istream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cin",
                "insertText": "cin",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cin",
                "score": 0.45782190561294556,
                "sortText": "4115985ecin",
                "textEdit": {
                    "newText": "cin",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "clog",
                "insertText": "clog",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " clog",
                "score": 0.45782190561294556,
                "sortText": "4115985eclog",
                "textEdit": {
                    "newText": "clog",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 0.45782190561294556,
                "sortText": "4115985ecout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "calloc",
                "insertText": "calloc",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022calloc(size_t Count, size_t Size)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcalloc",
                "textEdit": {
                    "newText": "calloc",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "clearerr",
                "insertText": "clearerr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022clearerr(FILE *Stream)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbclearerr",
                "textEdit": {
                    "newText": "clearerr",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdio.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdio.h>"
                },
                "filterText": "clearerr_s",
                "insertText": "clearerr_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022clearerr_s(FILE *Stream)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbclearerr_s",
                "textEdit": {
                    "newText": "clearerr_s",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "clock_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "clock",
                "insertText": "clock",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022clock()",
                "score": 0.4419805109500885,
                "sortText": "411db4bbclock",
                "textEdit": {
                    "newText": "clock",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <time.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <time.h>"
                },
                "filterText": "ctime_s",
                "insertText": "ctime_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ctime_s(char *const Buffer, const size_t SizeInBytes, const time_t *const Time)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbctime_s",
                "textEdit": {
                    "newText": "ctime_s",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "std::codecvt_mode",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "consume_header",
                "insertText": "consume_header",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022consume_header",
                "score": 0.37649863958358765,
                "sortText": "413f3b92consume_header",
                "textEdit": {
                    "newText": "consume_header",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "ctime",
                "insertText": "ctime",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ctime(const time_t *const Time)",
                "score": 0.3469603955745697,
                "sortText": "414e5b35ctime",
                "textEdit": {
                    "newText": "ctime",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "ctype_base::(unnamed)",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "cntrl",
                "insertText": "ctype_base::cntrl",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022ctype_base::cntrl",
                "score": 0.3138078451156616,
                "sortText": "415f5494cntrl",
                "textEdit": {
                    "newText": "ctype_base::cntrl",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ios>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "ios_base::event",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ios>"
                },
                "filterText": "copyfmt_event",
                "insertText": "ios_base::copyfmt_event",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022ios_base::copyfmt_event",
                "score": 0.3138078451156616,
                "sortText": "415f5494copyfmt_event",
                "textEdit": {
                    "newText": "ios_base::copyfmt_event",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cbrt",
                "score": 0.25286611914634705,
                "sortText": "417e8855cbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrtf",
                "insertText": "cbrtf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cbrtf",
                "score": 0.25286611914634705,
                "sortText": "417e8855cbrtf",
                "textEdit": {
                    "newText": "cbrtf",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrtl",
                "insertText": "cbrtl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cbrtl",
                "score": 0.25286611914634705,
                "sortText": "417e8855cbrtl",
                "textEdit": {
                    "newText": "cbrtl",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022ceil",
                "score": 0.25286611914634705,
                "sortText": "417e8855ceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceilf",
                "insertText": "ceilf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022ceilf",
                "score": 0.25286611914634705,
                "sortText": "417e8855ceilf",
                "textEdit": {
                    "newText": "ceilf",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceill",
                "insertText": "ceill",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022ceill",
                "score": 0.25286611914634705,
                "sortText": "417e8855ceill",
                "textEdit": {
                    "newText": "ceill",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "clock",
                "insertText": "clock",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022clock",
                "score": 0.25286611914634705,
                "sortText": "417e8855clock",
                "textEdit": {
                    "newText": "clock",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "clock_t",
                "insertText": "clock_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022clock_t",
                "score": 0.25286611914634705,
                "sortText": "417e8855clock_t",
                "textEdit": {
                    "newText": "clock_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022copysign",
                "score": 0.25286611914634705,
                "sortText": "417e8855copysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysignf",
                "insertText": "copysignf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022copysignf",
                "score": 0.25286611914634705,
                "sortText": "417e8855copysignf",
                "textEdit": {
                    "newText": "copysignf",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysignl",
                "insertText": "copysignl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022copysignl",
                "score": 0.25286611914634705,
                "sortText": "417e8855copysignl",
                "textEdit": {
                    "newText": "copysignl",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['chrono_literals', 'complex_literals', 'concurrency', 'CSALCAT1', 'CSALCAT2', 'CHAR_BIT', 'CHAR_MAX', 'CHAR_MIN', 'CLK_TCK', 'CLOCKS_PER_SEC', 'CW_DEFAULT', 'clear87', 'control87', 'char', 'char16_t', 'char32_t', 'class', 'const', 'const_cast', 'constexpr', 'char_traits', 'codecvt', 'codecvt_base', 'codecvt_byname', 'codecvt_mode', 'codecvt_utf16', 'codecvt_utf8', 'codecvt_utf8_utf16', 'collate', 'complex', 'condition_variable', 'condition_variable_any', 'ctype', 'ctype_base', 'ctype_byname', 'cv_status', 'Concurrency::details::CancellationTokenRegistration_TaskProc', 'Concurrency::cancellation_token', 'Concurrency::cancellation_token_registration', 'Concurrency::cancellation_token_source', 'call_once', 'cbegin', 'cend', 'conj', 'conj', 'copy', 'copy_backward', 'copy_n', 'cos', 'cos', 'cosh', 'cosh', 'count', 'crbegin', 'crend', 'clock_t', 'stdext::checked_array_iterator', 'copysign', 'Concurrency::details::platform::CaptureCallstack', 'Concurrency::cancel_current_task', 'cbrt', 'cbrt', 'cbrt', 'ceil', 'ceil', 'ceil', 'copysign', 'copysign', 'cos', 'cos', 'cos', 'cosh', 'cosh', 'cosh', 'Concurrency::create_task', 'Concurrency::create_task', 'cerr', 'cin', 'clog', 'cout', 'calloc', 'clearerr', 'clearerr_s', 'clock', 'ctime_s', 'consume_header', 'ctime', 'ctype_base::cntrl', 'ios_base::copyfmt_event', 'cbrt', 'cbrtf', 'cbrtl', 'ceil', 'ceilf', 'ceill', 'clock', 'clock_t', 'copysign', 'copysignf', 'copysignl']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'c'",
                "range": {
                    "end": {
                        "character": 4,
                        "line": 6
                    },
                    "start": {
                        "character": 3,
                        "line": 6
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 72
    }
}
Diagnostics received from LSP.
Errors received: [[6, [3, 4]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "filterText": "complex_literals",
                "insertText": "complex_literals",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " complex_literals",
                "score": 1.384774923324585,
                "sortText": "404ebfb2complex_literals",
                "textEdit": {
                    "newText": "complex_literals",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "Concurrency",
                "insertText": "Concurrency",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " Concurrency",
                "score": 1.227129578590393,
                "sortText": "4062ed6bConcurrency",
                "textEdit": {
                    "newText": "Concurrency",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "concurrency",
                "insertText": "concurrency",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " concurrency",
                "score": 1.227129578590393,
                "sortText": "4062ed6bconcurrency",
                "textEdit": {
                    "newText": "concurrency",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "control87",
                "insertText": "control87",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022control87",
                "score": 0.8436345458030701,
                "sortText": "40a80791control87",
                "textEdit": {
                    "newText": "control87",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8constexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "codecvt",
                "insertText": "codecvt",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt<class Elem, class Byte, class Statype>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt",
                "textEdit": {
                    "newText": "codecvt",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "codecvt_base",
                "insertText": "codecvt_base",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_base",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_base",
                "textEdit": {
                    "newText": "codecvt_base",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "codecvt_byname",
                "insertText": "codecvt_byname",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_byname<class Elem, class Byte, class Statype>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_byname",
                "textEdit": {
                    "newText": "codecvt_byname",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_mode",
                "insertText": "codecvt_mode",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022codecvt_mode",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_mode",
                "textEdit": {
                    "newText": "codecvt_mode",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf16",
                "insertText": "codecvt_utf16",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf16<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_utf16",
                "textEdit": {
                    "newText": "codecvt_utf16",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf8",
                "insertText": "codecvt_utf8",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf8<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_utf8",
                "textEdit": {
                    "newText": "codecvt_utf8",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf8_utf16",
                "insertText": "codecvt_utf8_utf16",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf8_utf16<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_utf8_utf16",
                "textEdit": {
                    "newText": "codecvt_utf8_utf16",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "collate",
                "insertText": "collate",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022collate<class Elem>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3collate",
                "textEdit": {
                    "newText": "collate",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "collate_byname",
                "insertText": "collate_byname",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022collate_byname<class Elem>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3collate_byname",
                "textEdit": {
                    "newText": "collate_byname",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "common_type",
                "insertText": "common_type",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022common_type<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3common_type",
                "textEdit": {
                    "newText": "common_type",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "common_type_t",
                "insertText": "common_type_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022common_type_t<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3common_type_t",
                "textEdit": {
                    "newText": "common_type_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "complex",
                "insertText": "complex",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022complex<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3complex",
                "textEdit": {
                    "newText": "complex",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable",
                "insertText": "condition_variable",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable",
                "score": 0.8070572018623352,
                "sortText": "40b164b3condition_variable",
                "textEdit": {
                    "newText": "condition_variable",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable_any",
                "insertText": "condition_variable_any",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable_any",
                "score": 0.8070572018623352,
                "sortText": "40b164b3condition_variable_any",
                "textEdit": {
                    "newText": "condition_variable_any",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "conditional",
                "insertText": "conditional",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022conditional<bool Test, class Ty1, class Ty2>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3conditional",
                "textEdit": {
                    "newText": "conditional",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "conditional_t",
                "insertText": "conditional_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022conditional_t<bool Test, class Ty1, class Ty2>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3conditional_t",
                "textEdit": {
                    "newText": "conditional_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "conjunction",
                "insertText": "conjunction",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022conjunction<class Traits>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3conjunction",
                "textEdit": {
                    "newText": "conjunction",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun1_ref_t",
                "insertText": "const_mem_fun1_ref_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun1_ref_t<class Result, class Ty, class Arg>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun1_ref_t",
                "textEdit": {
                    "newText": "const_mem_fun1_ref_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun1_t",
                "insertText": "const_mem_fun1_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun1_t<class Result, class Ty, class Arg>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun1_t",
                "textEdit": {
                    "newText": "const_mem_fun1_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun_ref_t",
                "insertText": "const_mem_fun_ref_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun_ref_t<class Result, class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun_ref_t",
                "textEdit": {
                    "newText": "const_mem_fun_ref_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun_t",
                "insertText": "const_mem_fun_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun_t<class Result, class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun_t",
                "textEdit": {
                    "newText": "const_mem_fun_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy_options",
                "insertText": "experimental::filesystem::copy_options",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022experimental::filesystem::copy_options",
                "score": 0.5803174376487732,
                "sortText": "40eb7051copy_options",
                "textEdit": {
                    "newText": "experimental::filesystem::copy_options",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "conj",
                "insertText": "conj",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022conj(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464conj",
                "textEdit": {
                    "newText": "conj",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<_Upgrade_to_double<Ty>>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "conj",
                "insertText": "conj",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022conj(Ty Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464conj",
                "textEdit": {
                    "newText": "conj",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty1>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022const_pointer_cast<class Ty1>(const shared_ptr<Ty2> &Other)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464const_pointer_cast",
                "textEdit": {
                    "newText": "const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty1>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022const_pointer_cast<class Ty1>(shared_ptr<Ty2> &&Other)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464const_pointer_cast",
                "textEdit": {
                    "newText": "const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy",
                "insertText": "copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy(InIt First, InIt Last, OutIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy",
                "textEdit": {
                    "newText": "copy",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "BidIt2",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_backward",
                "insertText": "copy_backward",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_backward(BidIt1 First, BidIt1 Last, BidIt2 Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_backward",
                "textEdit": {
                    "newText": "copy_backward",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_if",
                "insertText": "copy_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_if(InIt First, InIt Last, OutIt Dest, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_if",
                "textEdit": {
                    "newText": "copy_if",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_n",
                "insertText": "copy_n",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_n(InIt First, Diff Count_raw, OutIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_n",
                "textEdit": {
                    "newText": "copy_n",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(const valarray<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(const valarray<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count",
                "insertText": "count",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count(const InIt First, const InIt Last, const Ty &Val)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464count",
                "textEdit": {
                    "newText": "count",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count_if",
                "insertText": "count_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count_if(InIt First, InIt Last, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464count_if",
                "textEdit": {
                    "newText": "count_if",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "::std::_Common_float_type_t<Ty1, Ty2>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nremquo() is hand-crafted"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(Ty1 Left, Ty2 Right)",
                "score": 0.5297134518623352,
                "sortText": "40f864b3copysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(long double Number, long double Sign)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcopysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(float Number, float Sign)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcopysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nThe following order matches N4950 [cmath.syn]."
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nThe following order matches N4950 [cmath.syn]."
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 0.45782190561294556,
                "sortText": "4115985ecout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy",
                "insertText": "experimental::filesystem::copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy(const path &, const path &, copy_options, error_code &)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy",
                "textEdit": {
                    "newText": "experimental::filesystem::copy",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy",
                "insertText": "experimental::filesystem::copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy(const path &, const path &, error_code &)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy",
                "textEdit": {
                    "newText": "experimental::filesystem::copy",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy",
                "insertText": "experimental::filesystem::copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy(const path &, const path &)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy",
                "textEdit": {
                    "newText": "experimental::filesystem::copy",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy",
                "insertText": "experimental::filesystem::copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy(const path &, const path &, copy_options)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy",
                "textEdit": {
                    "newText": "experimental::filesystem::copy",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy_file",
                "insertText": "experimental::filesystem::copy_file",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy_file(const path &, const path &, copy_options, error_code &)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy_file",
                "textEdit": {
                    "newText": "experimental::filesystem::copy_file",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy_file",
                "insertText": "experimental::filesystem::copy_file",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy_file(const path &, const path &, copy_options = copy_options::none)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy_file",
                "textEdit": {
                    "newText": "experimental::filesystem::copy_file",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy_file",
                "insertText": "experimental::filesystem::copy_file",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy_file(const path &, const path &, error_code &)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy_file",
                "textEdit": {
                    "newText": "experimental::filesystem::copy_file",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy_symlink",
                "insertText": "experimental::filesystem::copy_symlink",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy_symlink(const path &, const path &)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy_symlink",
                "textEdit": {
                    "newText": "experimental::filesystem::copy_symlink",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy_symlink",
                "insertText": "experimental::filesystem::copy_symlink",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy_symlink(const path &, const path &, error_code &)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy_symlink",
                "textEdit": {
                    "newText": "experimental::filesystem::copy_symlink",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "call_once",
                "insertText": "call_once",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022call_once(once_flag &Once, Fn &&Fx, Args &&Ax...)",
                "score": 0.5893728137016296,
                "sortText": "411dae4ccall_once",
                "textEdit": {
                    "newText": "call_once",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(double Number, double Sign)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcopysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysignf",
                "insertText": "copysignf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysignf(float Number, float Sign)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcopysignf",
                "textEdit": {
                    "newText": "copysignf",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysignl",
                "insertText": "copysignl",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysignl(long double Number, long double Sign)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcopysignl",
                "textEdit": {
                    "newText": "copysignl",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(double X)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosf",
                "insertText": "cosf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosf(float X)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcosf",
                "textEdit": {
                    "newText": "cosf",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(double X)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "coshf",
                "insertText": "coshf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022coshf(float X)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcoshf",
                "textEdit": {
                    "newText": "coshf",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "coshl",
                "insertText": "coshl",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022coshl(long double X)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcoshl",
                "textEdit": {
                    "newText": "coshl",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosl",
                "insertText": "cosl",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosl(long double X)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcosl",
                "textEdit": {
                    "newText": "cosl",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "conjunction_v",
                "insertText": "conjunction_v",
                "insertTextFormat": 1,
                "kind": 6,
                "label": "\u2022conjunction_v<class Traits>",
                "score": 0.37649863958358765,
                "sortText": "413f3b92conjunction_v",
                "textEdit": {
                    "newText": "conjunction_v",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "std::codecvt_mode",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "consume_header",
                "insertText": "consume_header",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022consume_header",
                "score": 0.37649863958358765,
                "sortText": "413f3b92consume_header",
                "textEdit": {
                    "newText": "consume_header",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplinterface.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Concurrency::task_group_status",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplinterface.h>\n<summary> The tasks queued to the <c>task_group</c> or <c>structured_task_group</c> object completed successfully.\n</summary>"
                },
                "filterText": "completed",
                "insertText": "Concurrency::completed",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022Concurrency::completed",
                "score": 0.3304901719093323,
                "sortText": "4156c9fecompleted",
                "textEdit": {
                    "newText": "Concurrency::completed",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::regex_constants::syntax_option_type",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "collate",
                "insertText": "regex_constants::collate",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022regex_constants::collate",
                "score": 0.3138078451156616,
                "sortText": "415f5494collate",
                "textEdit": {
                    "newText": "regex_constants::collate",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNABORTED"
                },
                "filterText": "connection_aborted",
                "insertText": "errc::connection_aborted",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_aborted",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_aborted",
                "textEdit": {
                    "newText": "errc::connection_aborted",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEALREADY"
                },
                "filterText": "connection_already_in_progress",
                "insertText": "errc::connection_already_in_progress",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_already_in_progress",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_already_in_progress",
                "textEdit": {
                    "newText": "errc::connection_already_in_progress",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNREFUSED"
                },
                "filterText": "connection_refused",
                "insertText": "errc::connection_refused",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_refused",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_refused",
                "textEdit": {
                    "newText": "errc::connection_refused",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNRESET"
                },
                "filterText": "connection_reset",
                "insertText": "errc::connection_reset",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_reset",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_reset",
                "textEdit": {
                    "newText": "errc::connection_reset",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ios>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "ios_base::event",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ios>"
                },
                "filterText": "copyfmt_event",
                "insertText": "ios_base::copyfmt_event",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022ios_base::copyfmt_event",
                "score": 0.3138078451156616,
                "sortText": "415f5494copyfmt_event",
                "textEdit": {
                    "newText": "ios_base::copyfmt_event",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "std::experimental::filesystem::copy_options",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy_symlinks",
                "insertText": "experimental::filesystem::copy_options::copy_symlinks",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022experimental::filesystem::copy_options::copy_symlinks",
                "score": 0.2961350679397583,
                "sortText": "416860fccopy_symlinks",
                "textEdit": {
                    "newText": "experimental::filesystem::copy_options::copy_symlinks",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "conditional",
                "insertText": "tr1::conditional",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::conditional",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8conditional",
                "textEdit": {
                    "newText": "tr1::conditional",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "tr1::const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::const_pointer_cast",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8const_pointer_cast",
                "textEdit": {
                    "newText": "tr1::const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022copysign",
                "score": 0.25286611914634705,
                "sortText": "417e8855copysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysignf",
                "insertText": "copysignf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022copysignf",
                "score": 0.25286611914634705,
                "sortText": "417e8855copysignf",
                "textEdit": {
                    "newText": "copysignf",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysignl",
                "insertText": "copysignl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022copysignl",
                "score": 0.25286611914634705,
                "sortText": "417e8855copysignl",
                "textEdit": {
                    "newText": "copysignl",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cos",
                "score": 0.25286611914634705,
                "sortText": "417e8855cos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosf",
                "insertText": "cosf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cosf",
                "score": 0.25286611914634705,
                "sortText": "417e8855cosf",
                "textEdit": {
                    "newText": "cosf",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cosh",
                "score": 0.25286611914634705,
                "sortText": "417e8855cosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "coshf",
                "insertText": "coshf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022coshf",
                "score": 0.25286611914634705,
                "sortText": "417e8855coshf",
                "textEdit": {
                    "newText": "coshf",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "coshl",
                "insertText": "coshl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022coshl",
                "score": 0.25286611914634705,
                "sortText": "417e8855coshl",
                "textEdit": {
                    "newText": "coshl",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosl",
                "insertText": "cosl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cosl",
                "score": 0.25286611914634705,
                "sortText": "417e8855cosl",
                "textEdit": {
                    "newText": "cosl",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_compare_exchange_strong",
                "insertText": "atomic_compare_exchange_strong",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_compare_exchange_strong(atomic<Ty> *const Mem, _Identity_t<Ty> *const Expected, const _Identity_t<Ty> Desired)",
                "score": 0.5893728137016296,
                "sortText": "419dae4catomic_compare_exchange_strong",
                "textEdit": {
                    "newText": "atomic_compare_exchange_strong",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_compare_exchange_weak",
                "insertText": "atomic_compare_exchange_weak",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_compare_exchange_weak(atomic<Ty> *const Mem, _Identity_t<Ty> *const Expected, const _Identity_t<Ty> Desired)",
                "score": 0.5893728137016296,
                "sortText": "419dae4catomic_compare_exchange_weak",
                "textEdit": {
                    "newText": "atomic_compare_exchange_weak",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "lexicographical_compare",
                "insertText": "lexicographical_compare",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022lexicographical_compare(const InIt1 First1, const InIt1 Last1, const InIt2 First2, const InIt2 Last2)",
                "score": 0.5893728137016296,
                "sortText": "419dae4clexicographical_compare",
                "textEdit": {
                    "newText": "lexicographical_compare",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "lexicographical_compare",
                "insertText": "lexicographical_compare",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022lexicographical_compare(const InIt1 First1, const InIt1 Last1, const InIt2 First2, const InIt2 Last2, Pr Pred)",
                "score": 0.5893728137016296,
                "sortText": "419dae4clexicographical_compare",
                "textEdit": {
                    "newText": "lexicographical_compare",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "pair<OutIt1, OutIt2>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "partition_copy",
                "insertText": "partition_copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022partition_copy(InIt First, InIt Last, OutIt1 Dest_true, OutIt2 Dest_false, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "41a32696partition_copy",
                "textEdit": {
                    "newText": "partition_copy",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "replace_copy_if",
                "insertText": "replace_copy_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022replace_copy_if(InIt First, InIt Last, OutIt Dest, Pr Pred, const Ty &Val)",
                "score": 0.5751283168792725,
                "sortText": "41a32696replace_copy_if",
                "textEdit": {
                    "newText": "replace_copy_if",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "reverse_copy",
                "insertText": "reverse_copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022reverse_copy(BidIt First, BidIt Last, OutIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "41a32696reverse_copy",
                "textEdit": {
                    "newText": "reverse_copy",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['complex_literals', 'Concurrency', 'concurrency', 'control87', 'const', 'const_cast', 'constexpr', 'codecvt', 'codecvt_base', 'codecvt_byname', 'codecvt_mode', 'codecvt_utf16', 'codecvt_utf8', 'codecvt_utf8_utf16', 'collate', 'collate_byname', 'common_type', 'common_type_t', 'complex', 'condition_variable', 'condition_variable_any', 'conditional', 'conditional_t', 'conjunction', 'const_mem_fun1_ref_t', 'const_mem_fun1_t', 'const_mem_fun_ref_t', 'const_mem_fun_t', 'experimental::filesystem::copy_options', 'conj', 'conj', 'const_pointer_cast', 'const_pointer_cast', 'copy', 'copy_backward', 'copy_if', 'copy_n', 'cos', 'cos', 'cosh', 'cosh', 'count', 'count_if', 'copysign', 'copysign', 'copysign', 'cos', 'cos', 'cos', 'cosh', 'cosh', 'cosh', 'cout', 'experimental::filesystem::copy', 'experimental::filesystem::copy', 'experimental::filesystem::copy', 'experimental::filesystem::copy', 'experimental::filesystem::copy_file', 'experimental::filesystem::copy_file', 'experimental::filesystem::copy_file', 'experimental::filesystem::copy_symlink', 'experimental::filesystem::copy_symlink', 'call_once', 'copysign', 'copysignf', 'copysignl', 'cos', 'cosf', 'cosh', 'coshf', 'coshl', 'cosl', 'conjunction_v', 'consume_header', 'Concurrency::completed', 'regex_constants::collate', 'errc::connection_aborted', 'errc::connection_already_in_progress', 'errc::connection_refused', 'errc::connection_reset', 'ios_base::copyfmt_event', 'experimental::filesystem::copy_options::copy_symlinks', 'tr1::conditional', 'tr1::const_pointer_cast', 'copysign', 'copysignf', 'copysignl', 'cos', 'cosf', 'cosh', 'coshf', 'coshl', 'cosl', 'atomic_compare_exchange_strong', 'atomic_compare_exchange_weak', 'lexicographical_compare', 'lexicographical_compare', 'partition_copy', 'replace_copy_if', 'reverse_copy']
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf16",
                "insertText": "codecvt_utf16",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf16<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40d3d3eacodecvt_utf16",
                "textEdit": {
                    "newText": "codecvt_utf16",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf8",
                "insertText": "codecvt_utf8",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf8<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40d3d3eacodecvt_utf8",
                "textEdit": {
                    "newText": "codecvt_utf8",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf8_utf16",
                "insertText": "codecvt_utf8_utf16",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf8_utf16<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40d3d3eacodecvt_utf8_utf16",
                "textEdit": {
                    "newText": "codecvt_utf8_utf16",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count",
                "insertText": "count",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count(const InIt First, const InIt Last, const Ty &Val)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464count",
                "textEdit": {
                    "newText": "count",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count_if",
                "insertText": "count_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count_if(InIt First, InIt Last, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464count_if",
                "textEdit": {
                    "newText": "count_if",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 0.45782190561294556,
                "sortText": "4115985ecout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "uintmax_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "hard_link_count",
                "insertText": "experimental::filesystem::hard_link_count",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::hard_link_count(const path &, error_code &)",
                "score": 0.4565367102622986,
                "sortText": "419640d2hard_link_count",
                "textEdit": {
                    "newText": "experimental::filesystem::hard_link_count",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "uintmax_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "hard_link_count",
                "insertText": "experimental::filesystem::hard_link_count",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::hard_link_count(const path &)",
                "score": 0.4565367102622986,
                "sortText": "419640d2hard_link_count",
                "textEdit": {
                    "newText": "experimental::filesystem::hard_link_count",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdio.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdio.h>"
                },
                "filterText": "_get_printf_count_output",
                "insertText": "_get_printf_count_output",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_get_printf_count_output()",
                "score": 0.4419805109500885,
                "sortText": "41c36bf1_get_printf_count_output",
                "textEdit": {
                    "newText": "_get_printf_count_output",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdio.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdio.h>"
                },
                "filterText": "_set_printf_count_output",
                "insertText": "_set_printf_count_output",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_set_printf_count_output(int Value)",
                "score": 0.4419805109500885,
                "sortText": "41c36bf1_set_printf_count_output",
                "textEdit": {
                    "newText": "_set_printf_count_output",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['codecvt_utf16', 'codecvt_utf8', 'codecvt_utf8_utf16', 'count', 'count_if', 'cout', 'experimental::filesystem::hard_link_count', 'experimental::filesystem::hard_link_count', '_get_printf_count_output', '_set_printf_count_output']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'co'",
                "range": {
                    "end": {
                        "character": 5,
                        "line": 6
                    },
                    "start": {
                        "character": 3,
                        "line": 6
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 73
    }
}
Diagnostics received from LSP.
Errors received: [[6, [3, 5]]]
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 7
                    },
                    "start": {
                        "character": 0,
                        "line": 7
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'cou'",
                "range": {
                    "end": {
                        "character": 6,
                        "line": 6
                    },
                    "start": {
                        "character": 3,
                        "line": 6
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 74
    }
}
Diagnostics received from LSP.
Errors received: [[7, [0, 1]], [6, [3, 6]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 7
                    },
                    "start": {
                        "character": 0,
                        "line": 7
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "-Wunused-value",
                "message": "Expression result unused",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 6
                    },
                    "start": {
                        "character": 3,
                        "line": 6
                    }
                },
                "severity": 2,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 76
    }
}
Diagnostics received from LSP.
Errors received: [[7, [0, 1]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": [
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 0.45782190561294556,
                "sortText": "4095985ecout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf16",
                "insertText": "codecvt_utf16",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf16<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40cb381dcodecvt_utf16",
                "textEdit": {
                    "newText": "codecvt_utf16",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf8",
                "insertText": "codecvt_utf8",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf8<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40cb381dcodecvt_utf8",
                "textEdit": {
                    "newText": "codecvt_utf8",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf8_utf16",
                "insertText": "codecvt_utf8_utf16",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf8_utf16<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40cb381dcodecvt_utf8_utf16",
                "textEdit": {
                    "newText": "codecvt_utf8_utf16",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdio.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdio.h>"
                },
                "filterText": "_get_printf_count_output",
                "insertText": "_get_printf_count_output",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_get_printf_count_output()",
                "score": 0.4419805109500885,
                "sortText": "41b9fe24_get_printf_count_output",
                "textEdit": {
                    "newText": "_get_printf_count_output",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdio.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdio.h>"
                },
                "filterText": "_set_printf_count_output",
                "insertText": "_set_printf_count_output",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_set_printf_count_output(int Value)",
                "score": 0.4419805109500885,
                "sortText": "41b9fe24_set_printf_count_output",
                "textEdit": {
                    "newText": "_set_printf_count_output",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 6
                        },
                        "start": {
                            "character": 3,
                            "line": 6
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['cout', 'codecvt_utf16', 'codecvt_utf8', 'codecvt_utf8_utf16', '_get_printf_count_output', '_set_printf_count_output']
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 3.5488646030426025,
                "sortText": "3f9cdf67cout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "main",
                "insertText": "main",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " main()",
                "score": 1.5303630828857422,
                "sortText": "403c1d10main",
                "textEdit": {
                    "newText": "main",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.513861060142517,
                "sortText": "403e39cdstd",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cerr",
                "insertText": "cerr",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cerr",
                "score": 0.960056483745575,
                "sortText": "408a39bdcerr",
                "textEdit": {
                    "newText": "cerr",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "clog",
                "insertText": "clog",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " clog",
                "score": 0.960056483745575,
                "sortText": "408a39bdclog",
                "textEdit": {
                    "newText": "clog",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "__FUNCTION__",
                "insertText": "__FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __FUNCTION__",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7__FUNCTION__",
                "textEdit": {
                    "newText": "__FUNCTION__",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "__PRETTY_FUNCTION__",
                "insertText": "__PRETTY_FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __PRETTY_FUNCTION__",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7__PRETTY_FUNCTION__",
                "textEdit": {
                    "newText": "__PRETTY_FUNCTION__",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "__func__",
                "insertText": "__func__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __func__",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7__func__",
                "textEdit": {
                    "newText": "__func__",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "alignof",
                "insertText": "alignof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignof(type)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7alignof",
                "textEdit": {
                    "newText": "alignof",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete expression",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete [] expression",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "dynamic_cast",
                "insertText": "dynamic_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " dynamic_cast<type>(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7dynamic_cast",
                "textEdit": {
                    "newText": "dynamic_cast",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "false",
                "insertText": "false",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " false",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7false",
                "textEdit": {
                    "newText": "false",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type(expressions)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type[size](expressions)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "noexcept",
                "insertText": "noexcept",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " noexcept(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7noexcept",
                "textEdit": {
                    "newText": "noexcept",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "std::nullptr_t",
                "filterText": "nullptr",
                "insertText": "nullptr",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " nullptr",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7nullptr",
                "textEdit": {
                    "newText": "nullptr",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "reinterpret_cast",
                "insertText": "reinterpret_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " reinterpret_cast<type>(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7reinterpret_cast",
                "textEdit": {
                    "newText": "reinterpret_cast",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof",
                "insertText": "sizeof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof(expression-or-type)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7sizeof",
                "textEdit": {
                    "newText": "sizeof",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof...",
                "insertText": "sizeof...",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof...(parameter-pack)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7sizeof...",
                "textEdit": {
                    "newText": "sizeof...",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "static_cast",
                "insertText": "static_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_cast<type>(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7static_cast",
                "textEdit": {
                    "newText": "static_cast",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "throw",
                "insertText": "throw",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " throw expression",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7throw",
                "textEdit": {
                    "newText": "throw",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "true",
                "insertText": "true",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " true",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7true",
                "textEdit": {
                    "newText": "true",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "detail": "std::type_info",
                "filterText": "typeid",
                "insertText": "typeid",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typeid(expression-or-type)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7typeid",
                "textEdit": {
                    "newText": "typeid",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR32_T_LOCK_FREE",
                "score": 0.8113556504249573,
                "sortText": "40b04affATOMIC_CHAR32_T_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR32_T_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 0.7135143280029297,
                "sortText": "40c95720size_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "_iobuf",
                "insertText": "_iobuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " _iobuf",
                "score": 0.6298295259475708,
                "sortText": "40dec37e_iobuf",
                "textEdit": {
                    "newText": "_iobuf",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "basic_ostream",
                "insertText": "basic_ostream",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_ostream<class Elem, class Traits>",
                "score": 0.6298295259475708,
                "sortText": "40dec37ebasic_ostream",
                "textEdit": {
                    "newText": "basic_ostream",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "type_info",
                "insertText": "type_info",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " type_info",
                "score": 0.6298295259475708,
                "sortText": "40dec37etype_info",
                "textEdit": {
                    "newText": "type_info",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "equal_to",
                "insertText": "equal_to",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022equal_to<class Ty>",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedequal_to",
                "textEdit": {
                    "newText": "equal_to",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "greater",
                "insertText": "greater",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022greater<class Ty>",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedgreater",
                "textEdit": {
                    "newText": "greater",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "greater_equal",
                "insertText": "greater_equal",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022greater_equal<class Ty>",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedgreater_equal",
                "textEdit": {
                    "newText": "greater_equal",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "iterator",
                "insertText": "iterator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022iterator<class Category, class Ty, class Diff, class Pointer, class Reference>",
                "score": 0.6259929537773132,
                "sortText": "40dfbeediterator",
                "textEdit": {
                    "newText": "iterator",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "less_equal",
                "insertText": "less_equal",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022less_equal<class Ty>",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedless_equal",
                "textEdit": {
                    "newText": "less_equal",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "minus",
                "insertText": "minus",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022minus<class Ty>",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedminus",
                "textEdit": {
                    "newText": "minus",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "move_iterator",
                "insertText": "move_iterator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022move_iterator<class Iter>",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedmove_iterator",
                "textEdit": {
                    "newText": "move_iterator",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "multiplies",
                "insertText": "multiplies",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022multiplies<class Ty>",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedmultiplies",
                "textEdit": {
                    "newText": "multiplies",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "not_equal_to",
                "insertText": "not_equal_to",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022not_equal_to<class Ty>",
                "score": 0.6259929537773132,
                "sortText": "40dfbeednot_equal_to",
                "textEdit": {
                    "newText": "not_equal_to",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "plus",
                "insertText": "plus",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022plus<class Ty>",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedplus",
                "textEdit": {
                    "newText": "plus",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "pointer_traits",
                "insertText": "pointer_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022pointer_traits<class Ty>",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedpointer_traits",
                "textEdit": {
                    "newText": "pointer_traits",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "reverse_iterator",
                "insertText": "reverse_iterator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022reverse_iterator<class BidIt>",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedreverse_iterator",
                "textEdit": {
                    "newText": "reverse_iterator",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_sub",
                "insertText": "atomic_fetch_sub",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_sub(atomic<Ty> *Mem, const typename atomic<Ty>::difference_type Value)",
                "score": 0.6252159476280212,
                "sortText": "40dff1d9atomic_fetch_sub",
                "textEdit": {
                    "newText": "atomic_fetch_sub",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.begin())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "begin",
                "insertText": "begin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022begin(const Container &Cont)",
                "score": 0.6252159476280212,
                "sortText": "40dff1d9begin",
                "textEdit": {
                    "newText": "begin",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.begin())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "begin",
                "insertText": "begin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022begin(Container &Cont)",
                "score": 0.6252159476280212,
                "sortText": "40dff1d9begin",
                "textEdit": {
                    "newText": "begin",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Ty *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "begin",
                "insertText": "begin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022begin(Ty (&Array)[Size])",
                "score": 0.6252159476280212,
                "sortText": "40dff1d9begin",
                "textEdit": {
                    "newText": "begin",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::begin(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "cbegin",
                "insertText": "cbegin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbegin(const Container &Cont)",
                "score": 0.6252159476280212,
                "sortText": "40dff1d9cbegin",
                "textEdit": {
                    "newText": "cbegin",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::end(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "cend",
                "insertText": "cend",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cend(const Container &Cont)",
                "score": 0.6252159476280212,
                "sortText": "40dff1d9cend",
                "textEdit": {
                    "newText": "cend",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy",
                "insertText": "copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy(InIt First, InIt Last, OutIt Dest)",
                "score": 0.6252159476280212,
                "sortText": "40dff1d9copy",
                "textEdit": {
                    "newText": "copy",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "BidIt2",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_backward",
                "insertText": "copy_backward",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_backward(BidIt1 First, BidIt1 Last, BidIt2 Dest)",
                "score": 0.6252159476280212,
                "sortText": "40dff1d9copy_backward",
                "textEdit": {
                    "newText": "copy_backward",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_n",
                "insertText": "copy_n",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_n(InIt First, Diff Count_raw, OutIt Dest)",
                "score": 0.6252159476280212,
                "sortText": "40dff1d9copy_n",
                "textEdit": {
                    "newText": "copy_n",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count",
                "insertText": "count",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count(const InIt First, const InIt Last, const Ty &Val)",
                "score": 0.6252159476280212,
                "sortText": "40dff1d9count",
                "textEdit": {
                    "newText": "count",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::rbegin(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "crbegin",
                "insertText": "crbegin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022crbegin(const Container &Cont)",
                "score": 0.6252159476280212,
                "sortText": "40dff1d9crbegin",
                "textEdit": {
                    "newText": "crbegin",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::rend(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "crend",
                "insertText": "crend",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022crend(const Container &Cont)",
                "score": 0.6252159476280212,
                "sortText": "40dff1d9crend",
                "textEdit": {
                    "newText": "crend",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Ty *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "data",
                "insertText": "data",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022data(Ty (&Array)[Size])",
                "score": 0.6252159476280212,
                "sortText": "40dff1d9data",
                "textEdit": {
                    "newText": "data",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.data())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "data",
                "insertText": "data",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022data(Container &Cont)",
                "score": 0.6252159476280212,
                "sortText": "40dff1d9data",
                "textEdit": {
                    "newText": "data",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "const Elem *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "data",
                "insertText": "data",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022data(initializer_list<Elem> Ilist)",
                "score": 0.6252159476280212,
                "sortText": "40dff1d9data",
                "textEdit": {
                    "newText": "data",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.data())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "data",
                "insertText": "data",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022data(const Container &Cont)",
                "score": 0.6252159476280212,
                "sortText": "40dff1d9data",
                "textEdit": {
                    "newText": "data",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "distance",
                "insertText": "distance",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022distance(InIt First, InIt Last)",
                "score": 0.6252159476280212,
                "sortText": "40dff1d9distance",
                "textEdit": {
                    "newText": "distance",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.empty())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "empty",
                "insertText": "empty",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022empty(const Container &Cont)",
                "score": 0.6252159476280212,
                "sortText": "40dff1d9empty",
                "textEdit": {
                    "newText": "empty",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Ty *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "end",
                "insertText": "end",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022end(Ty (&Array)[Size])",
                "score": 0.6252159476280212,
                "sortText": "40dff1d9end",
                "textEdit": {
                    "newText": "end",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.end())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "end",
                "insertText": "end",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022end(const Container &Cont)",
                "score": 0.6252159476280212,
                "sortText": "40dff1d9end",
                "textEdit": {
                    "newText": "end",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.end())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "end",
                "insertText": "end",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022end(Container &Cont)",
                "score": 0.6252159476280212,
                "sortText": "40dff1d9end",
                "textEdit": {
                    "newText": "end",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "fill_n",
                "insertText": "fill_n",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022fill_n(OutIt Dest, const Diff Count_raw, const Ty &Val)",
                "score": 0.6252159476280212,
                "sortText": "40dff1d9fill_n",
                "textEdit": {
                    "newText": "fill_n",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "InIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "find",
                "insertText": "find",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022find(InIt First, const InIt Last, const Ty &Val)",
                "score": 0.6252159476280212,
                "sortText": "40dff1d9find",
                "textEdit": {
                    "newText": "find",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "InIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "find_if",
                "insertText": "find_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022find_if(InIt First, const InIt Last, Pr Pred)",
                "score": 0.6252159476280212,
                "sortText": "40dff1d9find_if",
                "textEdit": {
                    "newText": "find_if",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "lower_bound",
                "insertText": "lower_bound",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022lower_bound(FwdIt First, FwdIt Last, const Ty &Val)",
                "score": 0.6252159476280212,
                "sortText": "40dff1d9lower_bound",
                "textEdit": {
                    "newText": "lower_bound",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "lower_bound",
                "insertText": "lower_bound",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022lower_bound(FwdIt First, const FwdIt Last, const Ty &Val, Pr Pred)",
                "score": 0.6252159476280212,
                "sortText": "40dff1d9lower_bound",
                "textEdit": {
                    "newText": "lower_bound",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "move_iterator<Iter>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "make_move_iterator",
                "insertText": "make_move_iterator",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_move_iterator(Iter It)",
                "score": 0.6252159476280212,
                "sortText": "40dff1d9make_move_iterator",
                "textEdit": {
                    "newText": "make_move_iterator",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "reverse_iterator<BidIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "make_reverse_iterator",
                "insertText": "make_reverse_iterator",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022make_reverse_iterator(BidIt Iter)",
                "score": 0.6252159476280212,
                "sortText": "40dff1d9make_reverse_iterator",
                "textEdit": {
                    "newText": "make_reverse_iterator",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "max",
                "insertText": "max",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022max(initializer_list<Ty>, Pr)",
                "score": 0.6252159476280212,
                "sortText": "40dff1d9max",
                "textEdit": {
                    "newText": "max",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "max",
                "insertText": "max",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022max(initializer_list<Ty>)",
                "score": 0.6252159476280212,
                "sortText": "40dff1d9max",
                "textEdit": {
                    "newText": "max",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "max_element",
                "insertText": "max_element",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022max_element(FwdIt First, FwdIt Last, Pr Pred)",
                "score": 0.6252159476280212,
                "sortText": "40dff1d9max_element",
                "textEdit": {
                    "newText": "max_element",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "min",
                "insertText": "min",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022min(initializer_list<Ty>, Pr)",
                "score": 0.6252159476280212,
                "sortText": "40dff1d9min",
                "textEdit": {
                    "newText": "min",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 6
                        },
                        "start": {
                            "character": 8,
                            "line": 6
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['cout', 'main', 'std', 'cerr', 'clog', '_Nonnull', '_Null_unspecified', '_Nullable', '__FUNCTION__', '__PRETTY_FUNCTION__', '__func__', 'alignof', 'auto', 'bool', 'char', 'char16_t', 'char32_t', 'class', 'const', 'const_cast', 'decltype', 'delete', 'delete', 'double', 'dynamic_cast', 'enum', 'false', 'float', 'int', 'long', 'new', 'new', 'noexcept', 'nullptr', 'operator', 'reinterpret_cast', 'short', 'signed', 'sizeof', 'sizeof...', 'static_cast', 'struct', 'throw', 'true', 'typeid', 'typename', 'union', 'unsigned', 'void', 'volatile', 'wchar_t', 'ATOMIC_CHAR32_T_LOCK_FREE', 'size_t', '_iobuf', 'basic_ostream', 'type_info', 'equal_to', 'greater', 'greater_equal', 'iterator', 'less_equal', 'minus', 'move_iterator', 'multiplies', 'not_equal_to', 'plus', 'pointer_traits', 'reverse_iterator', 'atomic_fetch_sub', 'begin', 'begin', 'begin', 'cbegin', 'cend', 'copy', 'copy_backward', 'copy_n', 'count', 'crbegin', 'crend', 'data', 'data', 'data', 'data', 'distance', 'empty', 'end', 'end', 'end', 'fill_n', 'find', 'find_if', 'lower_bound', 'lower_bound', 'make_move_iterator', 'make_reverse_iterator', 'max', 'max', 'max_element', 'min']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_expression",
                "message": "Expected expression",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 7
                    },
                    "start": {
                        "character": 0,
                        "line": 7
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 78
    }
}
Diagnostics received from LSP.
Errors received: [[7, [0, 1]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_expression",
                "message": "Expected expression",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 7
                    },
                    "start": {
                        "character": 0,
                        "line": 7
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 81
    }
}
Diagnostics received from LSP.
Errors received: [[7, [0, 1]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "-Winvalid-pp-token",
                "message": "Missing terminating '\"' character",
                "range": {
                    "end": {
                        "character": 11,
                        "line": 6
                    },
                    "start": {
                        "character": 9,
                        "line": 6
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "expected_expression",
                "message": "Expected expression",
                "range": {
                    "end": {
                        "character": 11,
                        "line": 6
                    },
                    "start": {
                        "character": 9,
                        "line": 6
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 83
    }
}
Diagnostics received from LSP.
Errors received: [[6, [9, 11]]]
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "-Winvalid-pp-token",
                "message": "Missing terminating '\"' character",
                "range": {
                    "end": {
                        "character": 12,
                        "line": 6
                    },
                    "start": {
                        "character": 9,
                        "line": 6
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "expected_expression",
                "message": "Expected expression",
                "range": {
                    "end": {
                        "character": 12,
                        "line": 6
                    },
                    "start": {
                        "character": 9,
                        "line": 6
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 84
    }
}
Diagnostics received from LSP.
Errors received: [[6, [9, 12]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "-Winvalid-pp-token",
                "message": "Missing terminating '\"' character",
                "range": {
                    "end": {
                        "character": 13,
                        "line": 6
                    },
                    "start": {
                        "character": 9,
                        "line": 6
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "expected_expression",
                "message": "Expected expression",
                "range": {
                    "end": {
                        "character": 13,
                        "line": 6
                    },
                    "start": {
                        "character": 9,
                        "line": 6
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 86
    }
}
Diagnostics received from LSP.
Errors received: [[6, [9, 13]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 7
                    },
                    "start": {
                        "character": 0,
                        "line": 7
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 88
    }
}
Diagnostics received from LSP.
Errors received: [[7, [0, 1]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpu8w1xu5x.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpu8w1xu5x.cpp",
        "version": 90
    }
}
Diagnostics received from LSP.
Errors received: []
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Request sent with method textDocument/hover
Request sent with method textDocument/hover
Request sent with method textDocument/hover
Request sent with method textDocument/hover
Request sent with method textDocument/hover
Request sent with method textDocument/hover
Request sent with method textDocument/hover
Request sent with method textDocument/hover
Request sent with method textDocument/hover
Request sent with method textDocument/hover
Request sent with method textDocument/hover
Request sent with method textDocument/hover
Request sent with method textDocument/hover
Request sent with method textDocument/hover
Request sent with method textDocument/hover
Request sent with method textDocument/hover
Request sent with method textDocument/hover
Request sent with method textDocument/hover
Request sent with method textDocument/hover
Request sent with method textDocument/hover
Request sent with method textDocument/hover
Request sent with method textDocument/hover
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Request sent with method textDocument/hover
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": null
}
Received hover response.
Hover response does not contain 'contents'.
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": null
}
Received hover response.
Hover response does not contain 'contents'.
