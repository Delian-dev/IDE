Temporary file created: C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
LSP process started successfully.
Request sent with method initialize
Handling response from LSP
Received response: {
    "id": 0,
    "jsonrpc": "2.0",
    "result": {
        "capabilities": {
            "astProvider": true,
            "callHierarchyProvider": true,
            "clangdInlayHintsProvider": true,
            "codeActionProvider": true,
            "compilationDatabase": {
                "automaticReload": true
            },
            "completionProvider": {
                "resolveProvider": false,
                "triggerCharacters": [
                    ".",
                    "<",
                    ">",
                    ":",
                    "\"",
                    "/",
                    "*"
                ]
            },
            "declarationProvider": true,
            "definitionProvider": true,
            "documentFormattingProvider": true,
            "documentHighlightProvider": true,
            "documentLinkProvider": {
                "resolveProvider": false
            },
            "documentOnTypeFormattingProvider": {
                "firstTriggerCharacter": "\n",
                "moreTriggerCharacter": []
            },
            "documentRangeFormattingProvider": true,
            "documentSymbolProvider": true,
            "executeCommandProvider": {
                "commands": [
                    "clangd.applyFix",
                    "clangd.applyRename",
                    "clangd.applyTweak"
                ]
            },
            "foldingRangeProvider": true,
            "hoverProvider": true,
            "implementationProvider": true,
            "inactiveRegionsProvider": true,
            "inlayHintProvider": true,
            "memoryUsageProvider": true,
            "referencesProvider": true,
            "renameProvider": true,
            "selectionRangeProvider": true,
            "semanticTokensProvider": {
                "full": {
                    "delta": true
                },
                "legend": {
                    "tokenModifiers": [
                        "declaration",
                        "definition",
                        "deprecated",
                        "deduced",
                        "readonly",
                        "static",
                        "abstract",
                        "virtual",
                        "dependentName",
                        "defaultLibrary",
                        "usedAsMutableReference",
                        "usedAsMutablePointer",
                        "constructorOrDestructor",
                        "userDefined",
                        "functionScope",
                        "classScope",
                        "fileScope",
                        "globalScope"
                    ],
                    "tokenTypes": [
                        "variable",
                        "variable",
                        "parameter",
                        "function",
                        "method",
                        "function",
                        "property",
                        "variable",
                        "class",
                        "interface",
                        "enum",
                        "enumMember",
                        "type",
                        "type",
                        "unknown",
                        "namespace",
                        "typeParameter",
                        "concept",
                        "type",
                        "macro",
                        "modifier",
                        "operator",
                        "bracket",
                        "label",
                        "comment"
                    ]
                },
                "range": false
            },
            "signatureHelpProvider": {
                "triggerCharacters": [
                    "(",
                    ")",
                    "{",
                    "}",
                    "<",
                    ">",
                    ","
                ]
            },
            "standardTypeHierarchyProvider": true,
            "textDocumentSync": {
                "change": 2,
                "openClose": true,
                "save": true
            },
            "typeDefinitionProvider": true,
            "typeHierarchyProvider": true,
            "workspaceSymbolProvider": true
        },
        "serverInfo": {
            "name": "clangd",
            "version": "clangd version 20.1.0 windows x86_64-pc-windows-msvc"
        }
    }
}
LSP initialized successfully.
Request sent with method textDocument/didOpen
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpb6dtbp3o.cpp",
        "version": 0
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "redefinition_different_type",
                "message": "Redefinition of 's' with a different type: 'cls' vs 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>')\n\ntmpb6dtbp3o.cpp:15:11: note: previous definition is here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 16
                    },
                    "start": {
                        "character": 7,
                        "line": 16
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "message": "Previous definition is here\n\ntmpb6dtbp3o.cpp:17:8: error: redefinition of 's' with a different type: 'cls' vs 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>')",
                "range": {
                    "end": {
                        "character": 11,
                        "line": 14
                    },
                    "start": {
                        "character": 10,
                        "line": 14
                    }
                },
                "severity": 3
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpb6dtbp3o.cpp",
        "version": 2
    }
}
Diagnostics received from LSP.
Errors received: [[16, [7, 8]]]
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "redefinition_different_type",
                "message": "Redefinition of 's' with a different type: 'cls' vs 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>')\n\ntmpb6dtbp3o.cpp:15:11: note: previous definition is here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 16
                    },
                    "start": {
                        "character": 7,
                        "line": 16
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "message": "Previous definition is here\n\ntmpb6dtbp3o.cpp:17:8: error: redefinition of 's' with a different type: 'cls' vs 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>')",
                "range": {
                    "end": {
                        "character": 11,
                        "line": 14
                    },
                    "start": {
                        "character": 10,
                        "line": 14
                    }
                },
                "severity": 3
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpb6dtbp3o.cpp",
        "version": 2
    }
}
Diagnostics received from LSP.
Errors received: [[16, [7, 8]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header vector is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpb6dtbp3o.cpp",
        "version": 4
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header vector is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpb6dtbp3o.cpp",
        "version": 6
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header vector is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpb6dtbp3o.cpp",
        "version": 8
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.5999544858932495,
                "sortText": "403334b1std",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "main",
                "insertText": "main",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " main()",
                "score": 1.5662822723388672,
                "sortText": "40378410main",
                "textEdit": {
                    "newText": "main",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 0.9800145626068115,
                "sortText": "40851dc4size_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR32_T_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_CHAR32_T_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR32_T_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR_LOCK_FREE",
                "insertText": "ATOMIC_CHAR_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_CHAR_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_FLAG_INIT",
                "insertText": "ATOMIC_FLAG_INIT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_FLAG_INIT",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_FLAG_INIT",
                "textEdit": {
                    "newText": "ATOMIC_FLAG_INIT",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_INT_LOCK_FREE",
                "insertText": "ATOMIC_INT_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_INT_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_INT_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_INT_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_LLONG_LOCK_FREE",
                "insertText": "ATOMIC_LLONG_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_LLONG_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_LLONG_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_LLONG_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_LONG_LOCK_FREE",
                "insertText": "ATOMIC_LONG_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_LONG_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_LONG_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_LONG_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_SHORT_LOCK_FREE",
                "insertText": "ATOMIC_SHORT_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_SHORT_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_SHORT_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_SHORT_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_VAR_INIT",
                "insertText": "ATOMIC_VAR_INIT",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ATOMIC_VAR_INIT(_Value)",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_VAR_INIT",
                "textEdit": {
                    "newText": "ATOMIC_VAR_INIT",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_WCHAR_T_LOCK_FREE",
                "insertText": "ATOMIC_WCHAR_T_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_WCHAR_T_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_WCHAR_T_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_WCHAR_T_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "__FUNCTION__",
                "insertText": "__FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __FUNCTION__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__FUNCTION__",
                "textEdit": {
                    "newText": "__FUNCTION__",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "__PRETTY_FUNCTION__",
                "insertText": "__PRETTY_FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __PRETTY_FUNCTION__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__PRETTY_FUNCTION__",
                "textEdit": {
                    "newText": "__PRETTY_FUNCTION__",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "__func__",
                "insertText": "__func__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __func__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__func__",
                "textEdit": {
                    "newText": "__func__",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "alignas",
                "insertText": "alignas",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignas(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8alignas",
                "textEdit": {
                    "newText": "alignas",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "alignof",
                "insertText": "alignof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignof(type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8alignof",
                "textEdit": {
                    "newText": "alignof",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8constexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete [] expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "dynamic_cast",
                "insertText": "dynamic_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " dynamic_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8dynamic_cast",
                "textEdit": {
                    "newText": "dynamic_cast",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "extern",
                "insertText": "extern",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " extern",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8extern",
                "textEdit": {
                    "newText": "extern",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "false",
                "insertText": "false",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " false",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8false",
                "textEdit": {
                    "newText": "false",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "goto",
                "insertText": "goto",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " goto label;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8goto",
                "textEdit": {
                    "newText": "goto",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type(expressions)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type[size](expressions)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "noexcept",
                "insertText": "noexcept",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " noexcept(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8noexcept",
                "textEdit": {
                    "newText": "noexcept",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "detail": "std::nullptr_t",
                "filterText": "nullptr",
                "insertText": "nullptr",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " nullptr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8nullptr",
                "textEdit": {
                    "newText": "nullptr",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "reinterpret_cast",
                "insertText": "reinterpret_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " reinterpret_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8reinterpret_cast",
                "textEdit": {
                    "newText": "reinterpret_cast",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "return",
                "insertText": "return",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " return expression;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8return",
                "textEdit": {
                    "newText": "return",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof",
                "insertText": "sizeof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof(expression-or-type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8sizeof",
                "textEdit": {
                    "newText": "sizeof",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof...",
                "insertText": "sizeof...",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof...(parameter-pack)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8sizeof...",
                "textEdit": {
                    "newText": "sizeof...",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "static",
                "insertText": "static",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " static",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static",
                "textEdit": {
                    "newText": "static",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "static_assert",
                "insertText": "static_assert",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_assert(expression, message);",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static_assert",
                "textEdit": {
                    "newText": "static_assert",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "static_cast",
                "insertText": "static_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static_cast",
                "textEdit": {
                    "newText": "static_cast",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "thread_local",
                "insertText": "thread_local",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " thread_local",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8thread_local",
                "textEdit": {
                    "newText": "thread_local",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "throw",
                "insertText": "throw",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " throw expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8throw",
                "textEdit": {
                    "newText": "throw",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "true",
                "insertText": "true",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " true",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8true",
                "textEdit": {
                    "newText": "true",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "typedef",
                "insertText": "typedef",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typedef type name;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typedef",
                "textEdit": {
                    "newText": "typedef",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "detail": "std::type_info",
                "filterText": "typeid",
                "insertText": "typeid",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typeid(expression-or-type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typeid",
                "textEdit": {
                    "newText": "typeid",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using name = type;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8using",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "using namespace",
                "insertText": "using namespace",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using namespace identifier;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8using namespace",
                "textEdit": {
                    "newText": "using namespace",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic",
                "insertText": "atomic",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022atomic<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic",
                "textEdit": {
                    "newText": "atomic",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_bool",
                "insertText": "atomic_bool",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_bool",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_bool",
                "textEdit": {
                    "newText": "atomic_bool",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_char",
                "insertText": "atomic_char",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_char",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_char",
                "textEdit": {
                    "newText": "atomic_char",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_char32_t",
                "insertText": "atomic_char32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_char32_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_char32_t",
                "textEdit": {
                    "newText": "atomic_char32_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag",
                "insertText": "atomic_flag",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022atomic_flag",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_flag",
                "textEdit": {
                    "newText": "atomic_flag",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int",
                "insertText": "atomic_int",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int",
                "textEdit": {
                    "newText": "atomic_int",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int16_t",
                "insertText": "atomic_int16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int16_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int16_t",
                "textEdit": {
                    "newText": "atomic_int16_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int32_t",
                "insertText": "atomic_int32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int32_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int32_t",
                "textEdit": {
                    "newText": "atomic_int32_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int64_t",
                "insertText": "atomic_int64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int64_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int64_t",
                "textEdit": {
                    "newText": "atomic_int64_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int8_t",
                "insertText": "atomic_int8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int8_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int8_t",
                "textEdit": {
                    "newText": "atomic_int8_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast16_t",
                "insertText": "atomic_int_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast16_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int_fast16_t",
                "textEdit": {
                    "newText": "atomic_int_fast16_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast32_t",
                "insertText": "atomic_int_fast32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast32_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int_fast32_t",
                "textEdit": {
                    "newText": "atomic_int_fast32_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast64_t",
                "insertText": "atomic_int_fast64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast64_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int_fast64_t",
                "textEdit": {
                    "newText": "atomic_int_fast64_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast8_t",
                "insertText": "atomic_int_fast8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast8_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int_fast8_t",
                "textEdit": {
                    "newText": "atomic_int_fast8_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least16_t",
                "insertText": "atomic_int_least16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least16_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int_least16_t",
                "textEdit": {
                    "newText": "atomic_int_least16_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least32_t",
                "insertText": "atomic_int_least32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least32_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int_least32_t",
                "textEdit": {
                    "newText": "atomic_int_least32_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least64_t",
                "insertText": "atomic_int_least64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least64_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int_least64_t",
                "textEdit": {
                    "newText": "atomic_int_least64_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least8_t",
                "insertText": "atomic_int_least8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least8_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int_least8_t",
                "textEdit": {
                    "newText": "atomic_int_least8_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_intmax_t",
                "insertText": "atomic_intmax_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_intmax_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_intmax_t",
                "textEdit": {
                    "newText": "atomic_intmax_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_intptr_t",
                "insertText": "atomic_intptr_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_intptr_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_intptr_t",
                "textEdit": {
                    "newText": "atomic_intptr_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_llong",
                "insertText": "atomic_llong",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_llong",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_llong",
                "textEdit": {
                    "newText": "atomic_llong",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ptrdiff_t",
                "insertText": "atomic_ptrdiff_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ptrdiff_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_ptrdiff_t",
                "textEdit": {
                    "newText": "atomic_ptrdiff_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_schar",
                "insertText": "atomic_schar",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_schar",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_schar",
                "textEdit": {
                    "newText": "atomic_schar",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_short",
                "insertText": "atomic_short",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_short",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_short",
                "textEdit": {
                    "newText": "atomic_short",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_size_t",
                "insertText": "atomic_size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_size_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_size_t",
                "textEdit": {
                    "newText": "atomic_size_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uchar",
                "insertText": "atomic_uchar",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uchar",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_uchar",
                "textEdit": {
                    "newText": "atomic_uchar",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint",
                "insertText": "atomic_uint",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_uint",
                "textEdit": {
                    "newText": "atomic_uint",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint32_t",
                "insertText": "atomic_uint32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint32_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_uint32_t",
                "textEdit": {
                    "newText": "atomic_uint32_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint64_t",
                "insertText": "atomic_uint64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint64_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_uint64_t",
                "textEdit": {
                    "newText": "atomic_uint64_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast16_t",
                "insertText": "atomic_uint_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast16_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_uint_fast16_t",
                "textEdit": {
                    "newText": "atomic_uint_fast16_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast64_t",
                "insertText": "atomic_uint_fast64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast64_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_uint_fast64_t",
                "textEdit": {
                    "newText": "atomic_uint_fast64_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['std', 'main', 'size_t', 'ATOMIC_CHAR32_T_LOCK_FREE', 'ATOMIC_CHAR_LOCK_FREE', 'ATOMIC_FLAG_INIT', 'ATOMIC_INT_LOCK_FREE', 'ATOMIC_LLONG_LOCK_FREE', 'ATOMIC_LONG_LOCK_FREE', 'ATOMIC_SHORT_LOCK_FREE', 'ATOMIC_VAR_INIT', 'ATOMIC_WCHAR_T_LOCK_FREE', '_Nonnull', '_Null_unspecified', '_Nullable', '__FUNCTION__', '__PRETTY_FUNCTION__', '__func__', 'alignas', 'alignof', 'auto', 'bool', 'char', 'char16_t', 'char32_t', 'class', 'const', 'const_cast', 'constexpr', 'decltype', 'delete', 'delete', 'double', 'dynamic_cast', 'enum', 'extern', 'false', 'float', 'goto', 'int', 'long', 'new', 'new', 'noexcept', 'nullptr', 'operator', 'reinterpret_cast', 'return', 'short', 'signed', 'sizeof', 'sizeof...', 'static', 'static_assert', 'static_cast', 'struct', 'thread_local', 'throw', 'true', 'typedef', 'typeid', 'typename', 'union', 'unsigned', 'using', 'using namespace', 'void', 'volatile', 'wchar_t', 'atomic', 'atomic_bool', 'atomic_char', 'atomic_char32_t', 'atomic_flag', 'atomic_int', 'atomic_int16_t', 'atomic_int32_t', 'atomic_int64_t', 'atomic_int8_t', 'atomic_int_fast16_t', 'atomic_int_fast32_t', 'atomic_int_fast64_t', 'atomic_int_fast8_t', 'atomic_int_least16_t', 'atomic_int_least32_t', 'atomic_int_least64_t', 'atomic_int_least8_t', 'atomic_intmax_t', 'atomic_intptr_t', 'atomic_llong', 'atomic_ptrdiff_t', 'atomic_schar', 'atomic_short', 'atomic_size_t', 'atomic_uchar', 'atomic_uint', 'atomic_uint32_t', 'atomic_uint64_t', 'atomic_uint_fast16_t', 'atomic_uint_fast64_t']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header vector is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpb6dtbp3o.cpp",
        "version": 9
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'i'",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 8
                    },
                    "start": {
                        "character": 6,
                        "line": 8
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header vector is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpb6dtbp3o.cpp",
        "version": 10
    }
}
Diagnostics received from LSP.
Errors received: [[8, [6, 7]]]
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdint.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdint.h>"
                },
                "filterText": "INT16_C",
                "insertText": "INT16_C",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022INT16_C(x)",
                "score": 0.9173901677131653,
                "sortText": "409525ebINT16_C",
                "textEdit": {
                    "newText": "INT16_C",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT16_MAX",
                "insertText": "INT16_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT16_MAX",
                "score": 0.9173901677131653,
                "sortText": "409525ebINT16_MAX",
                "textEdit": {
                    "newText": "INT16_MAX",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdint.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdint.h>"
                },
                "filterText": "INT32_C",
                "insertText": "INT32_C",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022INT32_C(x)",
                "score": 0.9173901677131653,
                "sortText": "409525ebINT32_C",
                "textEdit": {
                    "newText": "INT32_C",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT32_MAX",
                "insertText": "INT32_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT32_MAX",
                "score": 0.9173901677131653,
                "sortText": "409525ebINT32_MAX",
                "textEdit": {
                    "newText": "INT32_MAX",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT32_MIN",
                "insertText": "INT32_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT32_MIN",
                "score": 0.9173901677131653,
                "sortText": "409525ebINT32_MIN",
                "textEdit": {
                    "newText": "INT32_MIN",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdint.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdint.h>"
                },
                "filterText": "INT64_C",
                "insertText": "INT64_C",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022INT64_C(x)",
                "score": 0.9173901677131653,
                "sortText": "409525ebINT64_C",
                "textEdit": {
                    "newText": "INT64_C",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT64_MAX",
                "insertText": "INT64_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT64_MAX",
                "score": 0.9173901677131653,
                "sortText": "409525ebINT64_MAX",
                "textEdit": {
                    "newText": "INT64_MAX",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT64_MIN",
                "insertText": "INT64_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT64_MIN",
                "score": 0.9173901677131653,
                "sortText": "409525ebINT64_MIN",
                "textEdit": {
                    "newText": "INT64_MIN",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdint.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdint.h>"
                },
                "filterText": "INT8_C",
                "insertText": "INT8_C",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022INT8_C(x)",
                "score": 0.9173901677131653,
                "sortText": "409525ebINT8_C",
                "textEdit": {
                    "newText": "INT8_C",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT8_MAX",
                "insertText": "INT8_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT8_MAX",
                "score": 0.9173901677131653,
                "sortText": "409525ebINT8_MAX",
                "textEdit": {
                    "newText": "INT8_MAX",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT8_MIN",
                "insertText": "INT8_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT8_MIN",
                "score": 0.9173901677131653,
                "sortText": "409525ebINT8_MIN",
                "textEdit": {
                    "newText": "INT8_MIN",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdint.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdint.h>"
                },
                "filterText": "INTMAX_C",
                "insertText": "INTMAX_C",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022INTMAX_C(x)",
                "score": 0.9173901677131653,
                "sortText": "409525ebINTMAX_C",
                "textEdit": {
                    "newText": "INTMAX_C",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INTMAX_MAX",
                "insertText": "INTMAX_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INTMAX_MAX",
                "score": 0.9173901677131653,
                "sortText": "409525ebINTMAX_MAX",
                "textEdit": {
                    "newText": "INTMAX_MAX",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INTMAX_MIN",
                "insertText": "INTMAX_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INTMAX_MIN",
                "score": 0.9173901677131653,
                "sortText": "409525ebINTMAX_MIN",
                "textEdit": {
                    "newText": "INTMAX_MIN",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INTPTR_MAX",
                "insertText": "INTPTR_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INTPTR_MAX",
                "score": 0.9173901677131653,
                "sortText": "409525ebINTPTR_MAX",
                "textEdit": {
                    "newText": "INTPTR_MAX",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INTPTR_MIN",
                "insertText": "INTPTR_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INTPTR_MIN",
                "score": 0.9173901677131653,
                "sortText": "409525ebINTPTR_MIN",
                "textEdit": {
                    "newText": "INTPTR_MIN",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_FAST16_MAX",
                "insertText": "INT_FAST16_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_FAST16_MAX",
                "score": 0.9173901677131653,
                "sortText": "409525ebINT_FAST16_MAX",
                "textEdit": {
                    "newText": "INT_FAST16_MAX",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_FAST16_MIN",
                "insertText": "INT_FAST16_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_FAST16_MIN",
                "score": 0.9173901677131653,
                "sortText": "409525ebINT_FAST16_MIN",
                "textEdit": {
                    "newText": "INT_FAST16_MIN",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_FAST32_MAX",
                "insertText": "INT_FAST32_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_FAST32_MAX",
                "score": 0.9173901677131653,
                "sortText": "409525ebINT_FAST32_MAX",
                "textEdit": {
                    "newText": "INT_FAST32_MAX",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_FAST32_MIN",
                "insertText": "INT_FAST32_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_FAST32_MIN",
                "score": 0.9173901677131653,
                "sortText": "409525ebINT_FAST32_MIN",
                "textEdit": {
                    "newText": "INT_FAST32_MIN",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_FAST64_MAX",
                "insertText": "INT_FAST64_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_FAST64_MAX",
                "score": 0.9173901677131653,
                "sortText": "409525ebINT_FAST64_MAX",
                "textEdit": {
                    "newText": "INT_FAST64_MAX",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_FAST8_MIN",
                "insertText": "INT_FAST8_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_FAST8_MIN",
                "score": 0.9173901677131653,
                "sortText": "409525ebINT_FAST8_MIN",
                "textEdit": {
                    "newText": "INT_FAST8_MIN",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_LEAST16_MAX",
                "insertText": "INT_LEAST16_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_LEAST16_MAX",
                "score": 0.9173901677131653,
                "sortText": "409525ebINT_LEAST16_MAX",
                "textEdit": {
                    "newText": "INT_LEAST16_MAX",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_LEAST16_MIN",
                "insertText": "INT_LEAST16_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_LEAST16_MIN",
                "score": 0.9173901677131653,
                "sortText": "409525ebINT_LEAST16_MIN",
                "textEdit": {
                    "newText": "INT_LEAST16_MIN",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_LEAST32_MAX",
                "insertText": "INT_LEAST32_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_LEAST32_MAX",
                "score": 0.9173901677131653,
                "sortText": "409525ebINT_LEAST32_MAX",
                "textEdit": {
                    "newText": "INT_LEAST32_MAX",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_LEAST32_MIN",
                "insertText": "INT_LEAST32_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_LEAST32_MIN",
                "score": 0.9173901677131653,
                "sortText": "409525ebINT_LEAST32_MIN",
                "textEdit": {
                    "newText": "INT_LEAST32_MIN",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_LEAST64_MAX",
                "insertText": "INT_LEAST64_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_LEAST64_MAX",
                "score": 0.9173901677131653,
                "sortText": "409525ebINT_LEAST64_MAX",
                "textEdit": {
                    "newText": "INT_LEAST64_MAX",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_LEAST8_MAX",
                "insertText": "INT_LEAST8_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_LEAST8_MAX",
                "score": 0.9173901677131653,
                "sortText": "409525ebINT_LEAST8_MAX",
                "textEdit": {
                    "newText": "INT_LEAST8_MAX",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_LEAST8_MIN",
                "insertText": "INT_LEAST8_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_LEAST8_MIN",
                "score": 0.9173901677131653,
                "sortText": "409525ebINT_LEAST8_MIN",
                "textEdit": {
                    "newText": "INT_LEAST8_MIN",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "IC_AFFINE",
                "insertText": "IC_AFFINE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022IC_AFFINE",
                "score": 0.8436345458030701,
                "sortText": "40a80791IC_AFFINE",
                "textEdit": {
                    "newText": "IC_AFFINE",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "IC_PROJECTIVE",
                "insertText": "IC_PROJECTIVE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022IC_PROJECTIVE",
                "score": 0.8436345458030701,
                "sortText": "40a80791IC_PROJECTIVE",
                "textEdit": {
                    "newText": "IC_PROJECTIVE",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <climits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <climits>"
                },
                "filterText": "INT_MAX",
                "insertText": "INT_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_MAX",
                "score": 0.8436345458030701,
                "sortText": "40a80791INT_MAX",
                "textEdit": {
                    "newText": "INT_MAX",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <climits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <climits>"
                },
                "filterText": "INT_MIN",
                "insertText": "INT_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_MIN",
                "score": 0.8436345458030701,
                "sortText": "40a80791INT_MIN",
                "textEdit": {
                    "newText": "INT_MIN",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "independent_bits_engine",
                "insertText": "independent_bits_engine",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022independent_bits_engine<class Engine, size_t Wx, class UIntType>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3independent_bits_engine",
                "textEdit": {
                    "newText": "independent_bits_engine",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <valarray>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <valarray>"
                },
                "filterText": "indirect_array",
                "insertText": "indirect_array",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022indirect_array<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3indirect_array",
                "textEdit": {
                    "newText": "indirect_array",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <initializer_list>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <initializer_list>"
                },
                "filterText": "initializer_list",
                "insertText": "initializer_list",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022initializer_list<class Elem>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3initializer_list",
                "textEdit": {
                    "newText": "initializer_list",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "insert_iterator",
                "insertText": "insert_iterator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022insert_iterator<class Container>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3insert_iterator",
                "textEdit": {
                    "newText": "insert_iterator",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ios>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ios>"
                },
                "filterText": "io_errc",
                "insertText": "io_errc",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022io_errc",
                "score": 0.8070572018623352,
                "sortText": "40b164b3io_errc",
                "textEdit": {
                    "newText": "io_errc",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>"
                },
                "filterText": "is_error_code_enum",
                "insertText": "is_error_code_enum",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022is_error_code_enum<class Enum>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3is_error_code_enum",
                "textEdit": {
                    "newText": "is_error_code_enum",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>"
                },
                "filterText": "is_error_condition_enum",
                "insertText": "is_error_condition_enum",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022is_error_condition_enum<class Enum>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3is_error_condition_enum",
                "textEdit": {
                    "newText": "is_error_condition_enum",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "istream_iterator",
                "insertText": "istream_iterator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022istream_iterator<class Ty, class Elem, class Traits, class Diff>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3istream_iterator",
                "textEdit": {
                    "newText": "istream_iterator",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "istreambuf_iterator",
                "insertText": "istreambuf_iterator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022istreambuf_iterator<class Elem, class Traits>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3istreambuf_iterator",
                "textEdit": {
                    "newText": "istreambuf_iterator",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "iterator",
                "insertText": "iterator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022iterator<class Category, class Ty, class Diff, class Pointer, class Reference>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3iterator",
                "textEdit": {
                    "newText": "iterator",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int16_t",
                "insertText": "int16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int16_t",
                "score": 0.6617947220802307,
                "sortText": "40d6949fint16_t",
                "textEdit": {
                    "newText": "int16_t",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int32_t",
                "insertText": "int32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int32_t",
                "score": 0.6617947220802307,
                "sortText": "40d6949fint32_t",
                "textEdit": {
                    "newText": "int32_t",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int64_t",
                "insertText": "int64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int64_t",
                "score": 0.6617947220802307,
                "sortText": "40d6949fint64_t",
                "textEdit": {
                    "newText": "int64_t",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int8_t",
                "insertText": "int8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int8_t",
                "score": 0.6617947220802307,
                "sortText": "40d6949fint8_t",
                "textEdit": {
                    "newText": "int8_t",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_fast16_t",
                "insertText": "int_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int_fast16_t",
                "score": 0.6617947220802307,
                "sortText": "40d6949fint_fast16_t",
                "textEdit": {
                    "newText": "int_fast16_t",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_fast32_t",
                "insertText": "int_fast32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int_fast32_t",
                "score": 0.6617947220802307,
                "sortText": "40d6949fint_fast32_t",
                "textEdit": {
                    "newText": "int_fast32_t",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_fast64_t",
                "insertText": "int_fast64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int_fast64_t",
                "score": 0.6617947220802307,
                "sortText": "40d6949fint_fast64_t",
                "textEdit": {
                    "newText": "int_fast64_t",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_fast8_t",
                "insertText": "int_fast8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int_fast8_t",
                "score": 0.6617947220802307,
                "sortText": "40d6949fint_fast8_t",
                "textEdit": {
                    "newText": "int_fast8_t",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_least16_t",
                "insertText": "int_least16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int_least16_t",
                "score": 0.6617947220802307,
                "sortText": "40d6949fint_least16_t",
                "textEdit": {
                    "newText": "int_least16_t",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_least32_t",
                "insertText": "int_least32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int_least32_t",
                "score": 0.6617947220802307,
                "sortText": "40d6949fint_least32_t",
                "textEdit": {
                    "newText": "int_least32_t",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_least64_t",
                "insertText": "int_least64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int_least64_t",
                "score": 0.6617947220802307,
                "sortText": "40d6949fint_least64_t",
                "textEdit": {
                    "newText": "int_least64_t",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "intmax_t",
                "insertText": "intmax_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022intmax_t",
                "score": 0.6617947220802307,
                "sortText": "40d6949fintmax_t",
                "textEdit": {
                    "newText": "intmax_t",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ios>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "const error_category &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ios>"
                },
                "filterText": "iostream_category",
                "insertText": "iostream_category",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022iostream_category()",
                "score": 0.5893728137016296,
                "sortText": "40e91eddiostream_category",
                "textEdit": {
                    "newText": "iostream_category",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Upgrade_to_double<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "imag",
                "insertText": "imag",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022imag(Ty)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464imag",
                "textEdit": {
                    "newText": "imag",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "imag",
                "insertText": "imag",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022imag(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464imag",
                "textEdit": {
                    "newText": "imag",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "insert_iterator<Container>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "inserter",
                "insertText": "inserter",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022inserter(Container &Cont, typename Container::iterator Where)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464inserter",
                "textEdit": {
                    "newText": "inserter",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <sys/types.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <sys/types.h>"
                },
                "filterText": "ino_t",
                "insertText": "ino_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022ino_t",
                "score": 0.5252236127853394,
                "sortText": "40f98af2ino_t",
                "textEdit": {
                    "newText": "ino_t",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>"
                },
                "filterText": "is_error_code_enum_v",
                "insertText": "is_error_code_enum_v",
                "insertTextFormat": 1,
                "kind": 6,
                "label": "\u2022is_error_code_enum_v<class Ty>",
                "score": 0.37649863958358765,
                "sortText": "413f3b92is_error_code_enum_v",
                "textEdit": {
                    "newText": "is_error_code_enum_v",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>"
                },
                "filterText": "is_error_condition_enum_v",
                "insertText": "is_error_condition_enum_v",
                "insertTextFormat": 1,
                "kind": 6,
                "label": "\u2022is_error_condition_enum_v<class Ty>",
                "score": 0.37649863958358765,
                "sortText": "413f3b92is_error_condition_enum_v",
                "textEdit": {
                    "newText": "is_error_condition_enum_v",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "itoa",
                "insertText": "itoa",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022itoa(int Value, char *Buffer, int Radix)",
                "score": 0.3469603955745697,
                "sortText": "414e5b35itoa",
                "textEdit": {
                    "newText": "itoa",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEIDRM"
                },
                "filterText": "identifier_removed",
                "insertText": "errc::identifier_removed",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::identifier_removed",
                "score": 0.3138078451156616,
                "sortText": "415f5494identifier_removed",
                "textEdit": {
                    "newText": "errc::identifier_removed",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEILSEQ"
                },
                "filterText": "illegal_byte_sequence",
                "insertText": "errc::illegal_byte_sequence",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::illegal_byte_sequence",
                "score": 0.3138078451156616,
                "sortText": "415f5494illegal_byte_sequence",
                "textEdit": {
                    "newText": "errc::illegal_byte_sequence",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nENOTTY"
                },
                "filterText": "inappropriate_io_control_operation",
                "insertText": "errc::inappropriate_io_control_operation",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::inappropriate_io_control_operation",
                "score": 0.3138078451156616,
                "sortText": "415f5494inappropriate_io_control_operation",
                "textEdit": {
                    "newText": "errc::inappropriate_io_control_operation",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEINTR"
                },
                "filterText": "interrupted",
                "insertText": "errc::interrupted",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::interrupted",
                "score": 0.3138078451156616,
                "sortText": "415f5494interrupted",
                "textEdit": {
                    "newText": "errc::interrupted",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEINVAL"
                },
                "filterText": "invalid_argument",
                "insertText": "errc::invalid_argument",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::invalid_argument",
                "score": 0.3138078451156616,
                "sortText": "415f5494invalid_argument",
                "textEdit": {
                    "newText": "errc::invalid_argument",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nESPIPE"
                },
                "filterText": "invalid_seek",
                "insertText": "errc::invalid_seek",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::invalid_seek",
                "score": 0.3138078451156616,
                "sortText": "415f5494invalid_seek",
                "textEdit": {
                    "newText": "errc::invalid_seek",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEIO"
                },
                "filterText": "io_error",
                "insertText": "errc::io_error",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::io_error",
                "score": 0.3138078451156616,
                "sortText": "415f5494io_error",
                "textEdit": {
                    "newText": "errc::io_error",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEISDIR"
                },
                "filterText": "is_a_directory",
                "insertText": "errc::is_a_directory",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::is_a_directory",
                "score": 0.3138078451156616,
                "sortText": "415f5494is_a_directory",
                "textEdit": {
                    "newText": "errc::is_a_directory",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "independent_bits_engine",
                "insertText": "tr1::independent_bits_engine",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::independent_bits_engine",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8independent_bits_engine",
                "textEdit": {
                    "newText": "tr1::independent_bits_engine",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cinttypes>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cinttypes>"
                },
                "filterText": "imaxabs",
                "insertText": "imaxabs",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022imaxabs",
                "score": 0.25286611914634705,
                "sortText": "417e8855imaxabs",
                "textEdit": {
                    "newText": "imaxabs",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cinttypes>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cinttypes>"
                },
                "filterText": "imaxdiv",
                "insertText": "imaxdiv",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022imaxdiv",
                "score": 0.25286611914634705,
                "sortText": "417e8855imaxdiv",
                "textEdit": {
                    "newText": "imaxdiv",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cinttypes>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cinttypes>"
                },
                "filterText": "imaxdiv_t",
                "insertText": "imaxdiv_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022imaxdiv_t",
                "score": 0.25286611914634705,
                "sortText": "417e8855imaxdiv_t",
                "textEdit": {
                    "newText": "imaxdiv_t",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cctype>"
                },
                "filterText": "isalnum",
                "insertText": "isalnum",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022isalnum",
                "score": 0.25286611914634705,
                "sortText": "417e8855isalnum",
                "textEdit": {
                    "newText": "isalnum",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cctype>"
                },
                "filterText": "isalpha",
                "insertText": "isalpha",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022isalpha",
                "score": 0.25286611914634705,
                "sortText": "417e8855isalpha",
                "textEdit": {
                    "newText": "isalpha",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cctype>"
                },
                "filterText": "isblank",
                "insertText": "isblank",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022isblank",
                "score": 0.25286611914634705,
                "sortText": "417e8855isblank",
                "textEdit": {
                    "newText": "isblank",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cctype>"
                },
                "filterText": "iscntrl",
                "insertText": "iscntrl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iscntrl",
                "score": 0.25286611914634705,
                "sortText": "417e8855iscntrl",
                "textEdit": {
                    "newText": "iscntrl",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cctype>"
                },
                "filterText": "isdigit",
                "insertText": "isdigit",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022isdigit",
                "score": 0.25286611914634705,
                "sortText": "417e8855isdigit",
                "textEdit": {
                    "newText": "isdigit",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cctype>"
                },
                "filterText": "isgraph",
                "insertText": "isgraph",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022isgraph",
                "score": 0.25286611914634705,
                "sortText": "417e8855isgraph",
                "textEdit": {
                    "newText": "isgraph",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cctype>"
                },
                "filterText": "islower",
                "insertText": "islower",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022islower",
                "score": 0.25286611914634705,
                "sortText": "417e8855islower",
                "textEdit": {
                    "newText": "islower",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cctype>"
                },
                "filterText": "isprint",
                "insertText": "isprint",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022isprint",
                "score": 0.25286611914634705,
                "sortText": "417e8855isprint",
                "textEdit": {
                    "newText": "isprint",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cctype>"
                },
                "filterText": "ispunct",
                "insertText": "ispunct",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022ispunct",
                "score": 0.25286611914634705,
                "sortText": "417e8855ispunct",
                "textEdit": {
                    "newText": "ispunct",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cctype>"
                },
                "filterText": "isspace",
                "insertText": "isspace",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022isspace",
                "score": 0.25286611914634705,
                "sortText": "417e8855isspace",
                "textEdit": {
                    "newText": "isspace",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cctype>"
                },
                "filterText": "isupper",
                "insertText": "isupper",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022isupper",
                "score": 0.25286611914634705,
                "sortText": "417e8855isupper",
                "textEdit": {
                    "newText": "isupper",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "iswalnum",
                "insertText": "iswalnum",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iswalnum",
                "score": 0.25286611914634705,
                "sortText": "417e8855iswalnum",
                "textEdit": {
                    "newText": "iswalnum",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "iswalpha",
                "insertText": "iswalpha",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iswalpha",
                "score": 0.25286611914634705,
                "sortText": "417e8855iswalpha",
                "textEdit": {
                    "newText": "iswalpha",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "iswblank",
                "insertText": "iswblank",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iswblank",
                "score": 0.25286611914634705,
                "sortText": "417e8855iswblank",
                "textEdit": {
                    "newText": "iswblank",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "iswcntrl",
                "insertText": "iswcntrl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iswcntrl",
                "score": 0.25286611914634705,
                "sortText": "417e8855iswcntrl",
                "textEdit": {
                    "newText": "iswcntrl",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "iswctype",
                "insertText": "iswctype",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iswctype",
                "score": 0.25286611914634705,
                "sortText": "417e8855iswctype",
                "textEdit": {
                    "newText": "iswctype",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "iswdigit",
                "insertText": "iswdigit",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iswdigit",
                "score": 0.25286611914634705,
                "sortText": "417e8855iswdigit",
                "textEdit": {
                    "newText": "iswdigit",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "iswgraph",
                "insertText": "iswgraph",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iswgraph",
                "score": 0.25286611914634705,
                "sortText": "417e8855iswgraph",
                "textEdit": {
                    "newText": "iswgraph",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "iswlower",
                "insertText": "iswlower",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iswlower",
                "score": 0.25286611914634705,
                "sortText": "417e8855iswlower",
                "textEdit": {
                    "newText": "iswlower",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "iswprint",
                "insertText": "iswprint",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iswprint",
                "score": 0.25286611914634705,
                "sortText": "417e8855iswprint",
                "textEdit": {
                    "newText": "iswprint",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "iswpunct",
                "insertText": "iswpunct",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iswpunct",
                "score": 0.25286611914634705,
                "sortText": "417e8855iswpunct",
                "textEdit": {
                    "newText": "iswpunct",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "iswspace",
                "insertText": "iswspace",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iswspace",
                "score": 0.25286611914634705,
                "sortText": "417e8855iswspace",
                "textEdit": {
                    "newText": "iswspace",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "iswupper",
                "insertText": "iswupper",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iswupper",
                "score": 0.25286611914634705,
                "sortText": "417e8855iswupper",
                "textEdit": {
                    "newText": "iswupper",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwctype>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwctype>"
                },
                "filterText": "iswxdigit",
                "insertText": "iswxdigit",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022iswxdigit",
                "score": 0.25286611914634705,
                "sortText": "417e8855iswxdigit",
                "textEdit": {
                    "newText": "iswxdigit",
                    "range": {
                        "end": {
                            "character": 7,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['INT16_C', 'INT16_MAX', 'INT32_C', 'INT32_MAX', 'INT32_MIN', 'INT64_C', 'INT64_MAX', 'INT64_MIN', 'INT8_C', 'INT8_MAX', 'INT8_MIN', 'INTMAX_C', 'INTMAX_MAX', 'INTMAX_MIN', 'INTPTR_MAX', 'INTPTR_MIN', 'INT_FAST16_MAX', 'INT_FAST16_MIN', 'INT_FAST32_MAX', 'INT_FAST32_MIN', 'INT_FAST64_MAX', 'INT_FAST8_MIN', 'INT_LEAST16_MAX', 'INT_LEAST16_MIN', 'INT_LEAST32_MAX', 'INT_LEAST32_MIN', 'INT_LEAST64_MAX', 'INT_LEAST8_MAX', 'INT_LEAST8_MIN', 'IC_AFFINE', 'IC_PROJECTIVE', 'INT_MAX', 'INT_MIN', 'int', 'independent_bits_engine', 'indirect_array', 'initializer_list', 'insert_iterator', 'io_errc', 'is_error_code_enum', 'is_error_condition_enum', 'istream_iterator', 'istreambuf_iterator', 'iterator', 'int16_t', 'int32_t', 'int64_t', 'int8_t', 'int_fast16_t', 'int_fast32_t', 'int_fast64_t', 'int_fast8_t', 'int_least16_t', 'int_least32_t', 'int_least64_t', 'intmax_t', 'iostream_category', 'imag', 'imag', 'inserter', 'ino_t', 'is_error_code_enum_v', 'is_error_condition_enum_v', 'itoa', 'errc::identifier_removed', 'errc::illegal_byte_sequence', 'errc::inappropriate_io_control_operation', 'errc::interrupted', 'errc::invalid_argument', 'errc::invalid_seek', 'errc::io_error', 'errc::is_a_directory', 'tr1::independent_bits_engine', 'imaxabs', 'imaxdiv', 'imaxdiv_t', 'isalnum', 'isalpha', 'isblank', 'iscntrl', 'isdigit', 'isgraph', 'islower', 'isprint', 'ispunct', 'isspace', 'isupper', 'iswalnum', 'iswalpha', 'iswblank', 'iswcntrl', 'iswctype', 'iswdigit', 'iswgraph', 'iswlower', 'iswprint', 'iswpunct', 'iswspace', 'iswupper', 'iswxdigit']
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": null
}
Received hover response.
Hover response does not contain 'contents'.
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "independent_bits_engine",
                "insertText": "independent_bits_engine",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022independent_bits_engine<class Engine, size_t Wx, class UIntType>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3independent_bits_engine",
                "textEdit": {
                    "newText": "independent_bits_engine",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "index_sequence",
                "insertText": "index_sequence",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022index_sequence<size_t Vals>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3index_sequence",
                "textEdit": {
                    "newText": "index_sequence",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "index_sequence_for",
                "insertText": "index_sequence_for",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022index_sequence_for<class Types>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3index_sequence_for",
                "textEdit": {
                    "newText": "index_sequence_for",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <valarray>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <valarray>"
                },
                "filterText": "indirect_array",
                "insertText": "indirect_array",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022indirect_array<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3indirect_array",
                "textEdit": {
                    "newText": "indirect_array",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <initializer_list>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <initializer_list>"
                },
                "filterText": "initializer_list",
                "insertText": "initializer_list",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022initializer_list<class Elem>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3initializer_list",
                "textEdit": {
                    "newText": "initializer_list",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>\nfrom <iterator>"
                },
                "filterText": "input_iterator_tag",
                "insertText": "input_iterator_tag",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022input_iterator_tag",
                "score": 0.8070572018623352,
                "sortText": "40b164b3input_iterator_tag",
                "textEdit": {
                    "newText": "input_iterator_tag",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "insert_iterator",
                "insertText": "insert_iterator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022insert_iterator<class Container>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3insert_iterator",
                "textEdit": {
                    "newText": "insert_iterator",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "integer_sequence",
                "insertText": "integer_sequence",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022integer_sequence<class Ty, Ty Vals>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3integer_sequence",
                "textEdit": {
                    "newText": "integer_sequence",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "integral_constant",
                "insertText": "integral_constant",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022integral_constant<class Ty, Ty Val>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3integral_constant",
                "textEdit": {
                    "newText": "integral_constant",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdexcept>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdexcept>"
                },
                "filterText": "invalid_argument",
                "insertText": "invalid_argument",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022invalid_argument",
                "score": 0.8070572018623352,
                "sortText": "40b164b3invalid_argument",
                "textEdit": {
                    "newText": "invalid_argument",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdint.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdint.h>"
                },
                "filterText": "INT16_C",
                "insertText": "INT16_C",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022INT16_C(x)",
                "score": 0.9173901677131653,
                "sortText": "40b2812eINT16_C",
                "textEdit": {
                    "newText": "INT16_C",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT16_MAX",
                "insertText": "INT16_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT16_MAX",
                "score": 0.9173901677131653,
                "sortText": "40b2812eINT16_MAX",
                "textEdit": {
                    "newText": "INT16_MAX",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT16_MIN",
                "insertText": "INT16_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT16_MIN",
                "score": 0.9173901677131653,
                "sortText": "40b2812eINT16_MIN",
                "textEdit": {
                    "newText": "INT16_MIN",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdint.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdint.h>"
                },
                "filterText": "INT32_C",
                "insertText": "INT32_C",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022INT32_C(x)",
                "score": 0.9173901677131653,
                "sortText": "40b2812eINT32_C",
                "textEdit": {
                    "newText": "INT32_C",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT32_MAX",
                "insertText": "INT32_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT32_MAX",
                "score": 0.9173901677131653,
                "sortText": "40b2812eINT32_MAX",
                "textEdit": {
                    "newText": "INT32_MAX",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT32_MIN",
                "insertText": "INT32_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT32_MIN",
                "score": 0.9173901677131653,
                "sortText": "40b2812eINT32_MIN",
                "textEdit": {
                    "newText": "INT32_MIN",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdint.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdint.h>"
                },
                "filterText": "INT64_C",
                "insertText": "INT64_C",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022INT64_C(x)",
                "score": 0.9173901677131653,
                "sortText": "40b2812eINT64_C",
                "textEdit": {
                    "newText": "INT64_C",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT64_MIN",
                "insertText": "INT64_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT64_MIN",
                "score": 0.9173901677131653,
                "sortText": "40b2812eINT64_MIN",
                "textEdit": {
                    "newText": "INT64_MIN",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT8_MAX",
                "insertText": "INT8_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT8_MAX",
                "score": 0.9173901677131653,
                "sortText": "40b2812eINT8_MAX",
                "textEdit": {
                    "newText": "INT8_MAX",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT8_MIN",
                "insertText": "INT8_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT8_MIN",
                "score": 0.9173901677131653,
                "sortText": "40b2812eINT8_MIN",
                "textEdit": {
                    "newText": "INT8_MIN",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INTMAX_MAX",
                "insertText": "INTMAX_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INTMAX_MAX",
                "score": 0.9173901677131653,
                "sortText": "40b2812eINTMAX_MAX",
                "textEdit": {
                    "newText": "INTMAX_MAX",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INTPTR_MAX",
                "insertText": "INTPTR_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INTPTR_MAX",
                "score": 0.9173901677131653,
                "sortText": "40b2812eINTPTR_MAX",
                "textEdit": {
                    "newText": "INTPTR_MAX",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INTPTR_MIN",
                "insertText": "INTPTR_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INTPTR_MIN",
                "score": 0.9173901677131653,
                "sortText": "40b2812eINTPTR_MIN",
                "textEdit": {
                    "newText": "INTPTR_MIN",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_FAST16_MAX",
                "insertText": "INT_FAST16_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_FAST16_MAX",
                "score": 0.9173901677131653,
                "sortText": "40b2812eINT_FAST16_MAX",
                "textEdit": {
                    "newText": "INT_FAST16_MAX",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_FAST16_MIN",
                "insertText": "INT_FAST16_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_FAST16_MIN",
                "score": 0.9173901677131653,
                "sortText": "40b2812eINT_FAST16_MIN",
                "textEdit": {
                    "newText": "INT_FAST16_MIN",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_FAST32_MAX",
                "insertText": "INT_FAST32_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_FAST32_MAX",
                "score": 0.9173901677131653,
                "sortText": "40b2812eINT_FAST32_MAX",
                "textEdit": {
                    "newText": "INT_FAST32_MAX",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_FAST32_MIN",
                "insertText": "INT_FAST32_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_FAST32_MIN",
                "score": 0.9173901677131653,
                "sortText": "40b2812eINT_FAST32_MIN",
                "textEdit": {
                    "newText": "INT_FAST32_MIN",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_FAST64_MAX",
                "insertText": "INT_FAST64_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_FAST64_MAX",
                "score": 0.9173901677131653,
                "sortText": "40b2812eINT_FAST64_MAX",
                "textEdit": {
                    "newText": "INT_FAST64_MAX",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_FAST64_MIN",
                "insertText": "INT_FAST64_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_FAST64_MIN",
                "score": 0.9173901677131653,
                "sortText": "40b2812eINT_FAST64_MIN",
                "textEdit": {
                    "newText": "INT_FAST64_MIN",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_FAST8_MAX",
                "insertText": "INT_FAST8_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_FAST8_MAX",
                "score": 0.9173901677131653,
                "sortText": "40b2812eINT_FAST8_MAX",
                "textEdit": {
                    "newText": "INT_FAST8_MAX",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_FAST8_MIN",
                "insertText": "INT_FAST8_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_FAST8_MIN",
                "score": 0.9173901677131653,
                "sortText": "40b2812eINT_FAST8_MIN",
                "textEdit": {
                    "newText": "INT_FAST8_MIN",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_LEAST16_MIN",
                "insertText": "INT_LEAST16_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_LEAST16_MIN",
                "score": 0.9173901677131653,
                "sortText": "40b2812eINT_LEAST16_MIN",
                "textEdit": {
                    "newText": "INT_LEAST16_MIN",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_LEAST32_MAX",
                "insertText": "INT_LEAST32_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_LEAST32_MAX",
                "score": 0.9173901677131653,
                "sortText": "40b2812eINT_LEAST32_MAX",
                "textEdit": {
                    "newText": "INT_LEAST32_MAX",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_LEAST32_MIN",
                "insertText": "INT_LEAST32_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_LEAST32_MIN",
                "score": 0.9173901677131653,
                "sortText": "40b2812eINT_LEAST32_MIN",
                "textEdit": {
                    "newText": "INT_LEAST32_MIN",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_LEAST64_MAX",
                "insertText": "INT_LEAST64_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_LEAST64_MAX",
                "score": 0.9173901677131653,
                "sortText": "40b2812eINT_LEAST64_MAX",
                "textEdit": {
                    "newText": "INT_LEAST64_MAX",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_LEAST64_MIN",
                "insertText": "INT_LEAST64_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_LEAST64_MIN",
                "score": 0.9173901677131653,
                "sortText": "40b2812eINT_LEAST64_MIN",
                "textEdit": {
                    "newText": "INT_LEAST64_MIN",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_LEAST8_MAX",
                "insertText": "INT_LEAST8_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_LEAST8_MAX",
                "score": 0.9173901677131653,
                "sortText": "40b2812eINT_LEAST8_MAX",
                "textEdit": {
                    "newText": "INT_LEAST8_MAX",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "INT_LEAST8_MIN",
                "insertText": "INT_LEAST8_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_LEAST8_MIN",
                "score": 0.9173901677131653,
                "sortText": "40b2812eINT_LEAST8_MIN",
                "textEdit": {
                    "newText": "INT_LEAST8_MIN",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "INFINITY",
                "insertText": "INFINITY",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INFINITY",
                "score": 0.8436345458030701,
                "sortText": "40c3069fINFINITY",
                "textEdit": {
                    "newText": "INFINITY",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <climits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <climits>"
                },
                "filterText": "INT_MAX",
                "insertText": "INT_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022INT_MAX",
                "score": 0.8436345458030701,
                "sortText": "40c3069fINT_MAX",
                "textEdit": {
                    "newText": "INT_MAX",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int16_t",
                "insertText": "int16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int16_t",
                "score": 0.6617947220802307,
                "sortText": "40d6949fint16_t",
                "textEdit": {
                    "newText": "int16_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int32_t",
                "insertText": "int32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int32_t",
                "score": 0.6617947220802307,
                "sortText": "40d6949fint32_t",
                "textEdit": {
                    "newText": "int32_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int64_t",
                "insertText": "int64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int64_t",
                "score": 0.6617947220802307,
                "sortText": "40d6949fint64_t",
                "textEdit": {
                    "newText": "int64_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int8_t",
                "insertText": "int8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int8_t",
                "score": 0.6617947220802307,
                "sortText": "40d6949fint8_t",
                "textEdit": {
                    "newText": "int8_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_fast16_t",
                "insertText": "int_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int_fast16_t",
                "score": 0.6617947220802307,
                "sortText": "40d6949fint_fast16_t",
                "textEdit": {
                    "newText": "int_fast16_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_fast32_t",
                "insertText": "int_fast32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int_fast32_t",
                "score": 0.6617947220802307,
                "sortText": "40d6949fint_fast32_t",
                "textEdit": {
                    "newText": "int_fast32_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_fast64_t",
                "insertText": "int_fast64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int_fast64_t",
                "score": 0.6617947220802307,
                "sortText": "40d6949fint_fast64_t",
                "textEdit": {
                    "newText": "int_fast64_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_fast8_t",
                "insertText": "int_fast8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int_fast8_t",
                "score": 0.6617947220802307,
                "sortText": "40d6949fint_fast8_t",
                "textEdit": {
                    "newText": "int_fast8_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_least16_t",
                "insertText": "int_least16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int_least16_t",
                "score": 0.6617947220802307,
                "sortText": "40d6949fint_least16_t",
                "textEdit": {
                    "newText": "int_least16_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_least32_t",
                "insertText": "int_least32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int_least32_t",
                "score": 0.6617947220802307,
                "sortText": "40d6949fint_least32_t",
                "textEdit": {
                    "newText": "int_least32_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_least64_t",
                "insertText": "int_least64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int_least64_t",
                "score": 0.6617947220802307,
                "sortText": "40d6949fint_least64_t",
                "textEdit": {
                    "newText": "int_least64_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_least8_t",
                "insertText": "int_least8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022int_least8_t",
                "score": 0.6617947220802307,
                "sortText": "40d6949fint_least8_t",
                "textEdit": {
                    "newText": "int_least8_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "intmax_t",
                "insertText": "intmax_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022intmax_t",
                "score": 0.6617947220802307,
                "sortText": "40d6949fintmax_t",
                "textEdit": {
                    "newText": "intmax_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "intptr_t",
                "insertText": "intptr_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022intptr_t",
                "score": 0.6617947220802307,
                "sortText": "40d6949fintptr_t",
                "textEdit": {
                    "newText": "intptr_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplinterface.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplinterface.h>\n<summary> This class describes an exception thrown when an invalid operation is performed that is not more accurately described by another exception type thrown by the Concurrency Runtime.\n</summary> <remarks> The various methods which throw this exception will generally document under what circumstances they will throw it.\n</remarks>"
                },
                "filterText": "invalid_operation",
                "insertText": "Concurrency::invalid_operation",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022Concurrency::invalid_operation",
                "score": 0.6378918290138245,
                "sortText": "40dcb31finvalid_operation",
                "textEdit": {
                    "newText": "Concurrency::invalid_operation",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "includes",
                "insertText": "includes",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022includes(InIt1 First1, InIt1 Last1, InIt2 First2, InIt2 Last2, Pr Pred)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddincludes",
                "textEdit": {
                    "newText": "includes",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "includes",
                "insertText": "includes",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022includes(InIt1 First1, InIt1 Last1, InIt2 First2, InIt2 Last2)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddincludes",
                "textEdit": {
                    "newText": "includes",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "inplace_merge",
                "insertText": "inplace_merge",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022inplace_merge(BidIt First, BidIt Mid, BidIt Last)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddinplace_merge",
                "textEdit": {
                    "newText": "inplace_merge",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "inplace_merge",
                "insertText": "inplace_merge",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022inplace_merge(BidIt First, BidIt Mid, BidIt Last, Pr Pred)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddinplace_merge",
                "textEdit": {
                    "newText": "inplace_merge",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ios>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "ios_base &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ios>"
                },
                "filterText": "internal",
                "insertText": "internal",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022internal(ios_base &Iosbase)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddinternal",
                "textEdit": {
                    "newText": "internal",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <numeric>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <numeric>"
                },
                "filterText": "inner_product",
                "insertText": "inner_product",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022inner_product(InIt1 First1, InIt1 Last1, InIt2 First2, Ty Val, BinOp1 Reduce_op, BinOp2 Transform_op)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464inner_product",
                "textEdit": {
                    "newText": "inner_product",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <numeric>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <numeric>"
                },
                "filterText": "inner_product",
                "insertText": "inner_product",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022inner_product(const InIt1 First1, const InIt1 Last1, const InIt2 First2, Ty Val)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464inner_product",
                "textEdit": {
                    "newText": "inner_product",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "insert_iterator<Container>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "inserter",
                "insertText": "inserter",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022inserter(Container &Cont, typename Container::iterator Where)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464inserter",
                "textEdit": {
                    "newText": "inserter",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "decltype(_Invoker1<Callable, Ty1>::_Call(static_cast<Callable &&>(Obj), static_cast<Ty1 &&>(Arg1), static_cast<Types2 &&>(Args2)...))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "invoke",
                "insertText": "invoke",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022invoke(Callable &&Obj, Ty1 &&Arg1, Types2 &&Args2...)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464invoke",
                "textEdit": {
                    "newText": "invoke",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "decltype(static_cast<Callable &&>(Obj)())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "invoke",
                "insertText": "invoke",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022invoke(Callable &&Obj)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464invoke",
                "textEdit": {
                    "newText": "invoke",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <sys/types.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <sys/types.h>"
                },
                "filterText": "ino_t",
                "insertText": "ino_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022ino_t",
                "score": 0.5252236127853394,
                "sortText": "40f98af2ino_t",
                "textEdit": {
                    "newText": "ino_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nENOTTY"
                },
                "filterText": "inappropriate_io_control_operation",
                "insertText": "errc::inappropriate_io_control_operation",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::inappropriate_io_control_operation",
                "score": 0.3138078451156616,
                "sortText": "415f5494inappropriate_io_control_operation",
                "textEdit": {
                    "newText": "errc::inappropriate_io_control_operation",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEINTR"
                },
                "filterText": "interrupted",
                "insertText": "errc::interrupted",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::interrupted",
                "score": 0.3138078451156616,
                "sortText": "415f5494interrupted",
                "textEdit": {
                    "newText": "errc::interrupted",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEINVAL"
                },
                "filterText": "invalid_argument",
                "insertText": "errc::invalid_argument",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::invalid_argument",
                "score": 0.3138078451156616,
                "sortText": "415f5494invalid_argument",
                "textEdit": {
                    "newText": "errc::invalid_argument",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nESPIPE"
                },
                "filterText": "invalid_seek",
                "insertText": "errc::invalid_seek",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::invalid_seek",
                "score": 0.3138078451156616,
                "sortText": "415f5494invalid_seek",
                "textEdit": {
                    "newText": "errc::invalid_seek",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "type_info",
                "insertText": "type_info",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " type_info",
                "score": 0.73712557554245,
                "sortText": "417278cetype_info",
                "textEdit": {
                    "newText": "type_info",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "independent_bits_engine",
                "insertText": "tr1::independent_bits_engine",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::independent_bits_engine",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8independent_bits_engine",
                "textEdit": {
                    "newText": "tr1::independent_bits_engine",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int16_t",
                "insertText": "tr1::int16_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::int16_t",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8int16_t",
                "textEdit": {
                    "newText": "tr1::int16_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int32_t",
                "insertText": "tr1::int32_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::int32_t",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8int32_t",
                "textEdit": {
                    "newText": "tr1::int32_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int64_t",
                "insertText": "tr1::int64_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::int64_t",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8int64_t",
                "textEdit": {
                    "newText": "tr1::int64_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int8_t",
                "insertText": "tr1::int8_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::int8_t",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8int8_t",
                "textEdit": {
                    "newText": "tr1::int8_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_fast16_t",
                "insertText": "tr1::int_fast16_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::int_fast16_t",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8int_fast16_t",
                "textEdit": {
                    "newText": "tr1::int_fast16_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_fast32_t",
                "insertText": "tr1::int_fast32_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::int_fast32_t",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8int_fast32_t",
                "textEdit": {
                    "newText": "tr1::int_fast32_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_fast64_t",
                "insertText": "tr1::int_fast64_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::int_fast64_t",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8int_fast64_t",
                "textEdit": {
                    "newText": "tr1::int_fast64_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_fast8_t",
                "insertText": "tr1::int_fast8_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::int_fast8_t",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8int_fast8_t",
                "textEdit": {
                    "newText": "tr1::int_fast8_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_least16_t",
                "insertText": "tr1::int_least16_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::int_least16_t",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8int_least16_t",
                "textEdit": {
                    "newText": "tr1::int_least16_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_least32_t",
                "insertText": "tr1::int_least32_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::int_least32_t",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8int_least32_t",
                "textEdit": {
                    "newText": "tr1::int_least32_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_least64_t",
                "insertText": "tr1::int_least64_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::int_least64_t",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8int_least64_t",
                "textEdit": {
                    "newText": "tr1::int_least64_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_least8_t",
                "insertText": "tr1::int_least8_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::int_least8_t",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8int_least8_t",
                "textEdit": {
                    "newText": "tr1::int_least8_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "integral_constant",
                "insertText": "tr1::integral_constant",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::integral_constant",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8integral_constant",
                "textEdit": {
                    "newText": "tr1::integral_constant",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "intmax_t",
                "insertText": "tr1::intmax_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::intmax_t",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8intmax_t",
                "textEdit": {
                    "newText": "tr1::intmax_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "intptr_t",
                "insertText": "tr1::intptr_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::intptr_t",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8intptr_t",
                "textEdit": {
                    "newText": "tr1::intptr_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int16_t",
                "insertText": "int16_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022int16_t",
                "score": 0.25286611914634705,
                "sortText": "417e8855int16_t",
                "textEdit": {
                    "newText": "int16_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int32_t",
                "insertText": "int32_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022int32_t",
                "score": 0.25286611914634705,
                "sortText": "417e8855int32_t",
                "textEdit": {
                    "newText": "int32_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int64_t",
                "insertText": "int64_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022int64_t",
                "score": 0.25286611914634705,
                "sortText": "417e8855int64_t",
                "textEdit": {
                    "newText": "int64_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int8_t",
                "insertText": "int8_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022int8_t",
                "score": 0.25286611914634705,
                "sortText": "417e8855int8_t",
                "textEdit": {
                    "newText": "int8_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_fast16_t",
                "insertText": "int_fast16_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022int_fast16_t",
                "score": 0.25286611914634705,
                "sortText": "417e8855int_fast16_t",
                "textEdit": {
                    "newText": "int_fast16_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_fast32_t",
                "insertText": "int_fast32_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022int_fast32_t",
                "score": 0.25286611914634705,
                "sortText": "417e8855int_fast32_t",
                "textEdit": {
                    "newText": "int_fast32_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_fast64_t",
                "insertText": "int_fast64_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022int_fast64_t",
                "score": 0.25286611914634705,
                "sortText": "417e8855int_fast64_t",
                "textEdit": {
                    "newText": "int_fast64_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_fast8_t",
                "insertText": "int_fast8_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022int_fast8_t",
                "score": 0.25286611914634705,
                "sortText": "417e8855int_fast8_t",
                "textEdit": {
                    "newText": "int_fast8_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_least16_t",
                "insertText": "int_least16_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022int_least16_t",
                "score": 0.25286611914634705,
                "sortText": "417e8855int_least16_t",
                "textEdit": {
                    "newText": "int_least16_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_least32_t",
                "insertText": "int_least32_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022int_least32_t",
                "score": 0.25286611914634705,
                "sortText": "417e8855int_least32_t",
                "textEdit": {
                    "newText": "int_least32_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_least64_t",
                "insertText": "int_least64_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022int_least64_t",
                "score": 0.25286611914634705,
                "sortText": "417e8855int_least64_t",
                "textEdit": {
                    "newText": "int_least64_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "int_least8_t",
                "insertText": "int_least8_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022int_least8_t",
                "score": 0.25286611914634705,
                "sortText": "417e8855int_least8_t",
                "textEdit": {
                    "newText": "int_least8_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 8
                        },
                        "start": {
                            "character": 6,
                            "line": 8
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['int', 'independent_bits_engine', 'index_sequence', 'index_sequence_for', 'indirect_array', 'initializer_list', 'input_iterator_tag', 'insert_iterator', 'integer_sequence', 'integral_constant', 'invalid_argument', 'INT16_C', 'INT16_MAX', 'INT16_MIN', 'INT32_C', 'INT32_MAX', 'INT32_MIN', 'INT64_C', 'INT64_MIN', 'INT8_MAX', 'INT8_MIN', 'INTMAX_MAX', 'INTPTR_MAX', 'INTPTR_MIN', 'INT_FAST16_MAX', 'INT_FAST16_MIN', 'INT_FAST32_MAX', 'INT_FAST32_MIN', 'INT_FAST64_MAX', 'INT_FAST64_MIN', 'INT_FAST8_MAX', 'INT_FAST8_MIN', 'INT_LEAST16_MIN', 'INT_LEAST32_MAX', 'INT_LEAST32_MIN', 'INT_LEAST64_MAX', 'INT_LEAST64_MIN', 'INT_LEAST8_MAX', 'INT_LEAST8_MIN', 'INFINITY', 'INT_MAX', 'int16_t', 'int32_t', 'int64_t', 'int8_t', 'int_fast16_t', 'int_fast32_t', 'int_fast64_t', 'int_fast8_t', 'int_least16_t', 'int_least32_t', 'int_least64_t', 'int_least8_t', 'intmax_t', 'intptr_t', 'Concurrency::invalid_operation', 'includes', 'includes', 'inplace_merge', 'inplace_merge', 'internal', 'inner_product', 'inner_product', 'inserter', 'invoke', 'invoke', 'ino_t', 'errc::inappropriate_io_control_operation', 'errc::interrupted', 'errc::invalid_argument', 'errc::invalid_seek', 'type_info', 'tr1::independent_bits_engine', 'tr1::int16_t', 'tr1::int32_t', 'tr1::int64_t', 'tr1::int8_t', 'tr1::int_fast16_t', 'tr1::int_fast32_t', 'tr1::int_fast64_t', 'tr1::int_fast8_t', 'tr1::int_least16_t', 'tr1::int_least32_t', 'tr1::int_least64_t', 'tr1::int_least8_t', 'tr1::integral_constant', 'tr1::intmax_t', 'tr1::intptr_t', 'int16_t', 'int32_t', 'int64_t', 'int8_t', 'int_fast16_t', 'int_fast32_t', 'int_fast64_t', 'int_fast8_t', 'int_least16_t', 'int_least32_t', 'int_least64_t', 'int_least8_t']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'in'",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 8
                    },
                    "start": {
                        "character": 6,
                        "line": 8
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header vector is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpb6dtbp3o.cpp",
        "version": 11
    }
}
Diagnostics received from LSP.
Errors received: [[8, [6, 8]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 9
                    },
                    "start": {
                        "character": 0,
                        "line": 9
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header vector is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpb6dtbp3o.cpp",
        "version": 12
    }
}
Diagnostics received from LSP.
Errors received: [[9, [0, 1]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": [
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.787254273891449,
                "sortText": "40b67681const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 8
                        },
                        "start": {
                            "character": 10,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.787254273891449,
                "sortText": "40b67681operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 8
                        },
                        "start": {
                            "character": 10,
                            "line": 8
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.787254273891449,
                "sortText": "40b67681volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 8
                        },
                        "start": {
                            "character": 10,
                            "line": 8
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['const', 'operator', 'volatile']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_unqualified_id",
                "message": "Expected unqualified-id",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 9
                    },
                    "start": {
                        "character": 0,
                        "line": 9
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header vector is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpb6dtbp3o.cpp",
        "version": 13
    }
}
Diagnostics received from LSP.
Errors received: [[9, [0, 1]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_semi_declaration",
                "message": "Expected ';' at end of declaration (fix available)",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 9
                    },
                    "start": {
                        "character": 0,
                        "line": 9
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header vector is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpb6dtbp3o.cpp",
        "version": 14
    }
}
Diagnostics received from LSP.
Errors received: [[9, [0, 1]]]
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": null
}
Received hover response.
Hover response does not contain 'contents'.
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header vector is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpb6dtbp3o.cpp",
        "version": 16
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header vector is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpb6dtbp3o.cpp",
        "version": 18
    }
}
Diagnostics received from LSP.
Errors received: []
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": null
}
Received hover response.
Hover response does not contain 'contents'.
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header vector is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpb6dtbp3o.cpp",
        "version": 19
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "detail": "int",
                "filterText": "x",
                "insertText": "x",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " x",
                "score": 2.948925256729126,
                "sortText": "3fc344cfx",
                "textEdit": {
                    "newText": "x",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.5999544858932495,
                "sortText": "403334b1std",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "main",
                "insertText": "main",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " main()",
                "score": 1.0087924003601074,
                "sortText": "407edfe4main",
                "textEdit": {
                    "newText": "main",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 0.9800145626068115,
                "sortText": "40851dc4size_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR32_T_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_CHAR32_T_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR32_T_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR_LOCK_FREE",
                "insertText": "ATOMIC_CHAR_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_CHAR_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_FLAG_INIT",
                "insertText": "ATOMIC_FLAG_INIT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_FLAG_INIT",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_FLAG_INIT",
                "textEdit": {
                    "newText": "ATOMIC_FLAG_INIT",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_INT_LOCK_FREE",
                "insertText": "ATOMIC_INT_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_INT_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_INT_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_INT_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_LLONG_LOCK_FREE",
                "insertText": "ATOMIC_LLONG_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_LLONG_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_LLONG_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_LLONG_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_LONG_LOCK_FREE",
                "insertText": "ATOMIC_LONG_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_LONG_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_LONG_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_LONG_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_SHORT_LOCK_FREE",
                "insertText": "ATOMIC_SHORT_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_SHORT_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_SHORT_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_SHORT_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_VAR_INIT",
                "insertText": "ATOMIC_VAR_INIT",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ATOMIC_VAR_INIT(_Value)",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_VAR_INIT",
                "textEdit": {
                    "newText": "ATOMIC_VAR_INIT",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_WCHAR_T_LOCK_FREE",
                "insertText": "ATOMIC_WCHAR_T_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_WCHAR_T_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_WCHAR_T_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_WCHAR_T_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "__FUNCTION__",
                "insertText": "__FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __FUNCTION__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__FUNCTION__",
                "textEdit": {
                    "newText": "__FUNCTION__",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "__PRETTY_FUNCTION__",
                "insertText": "__PRETTY_FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __PRETTY_FUNCTION__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__PRETTY_FUNCTION__",
                "textEdit": {
                    "newText": "__PRETTY_FUNCTION__",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "__func__",
                "insertText": "__func__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __func__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__func__",
                "textEdit": {
                    "newText": "__func__",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "alignas",
                "insertText": "alignas",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignas(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8alignas",
                "textEdit": {
                    "newText": "alignas",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "alignof",
                "insertText": "alignof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignof(type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8alignof",
                "textEdit": {
                    "newText": "alignof",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8constexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete [] expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "dynamic_cast",
                "insertText": "dynamic_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " dynamic_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8dynamic_cast",
                "textEdit": {
                    "newText": "dynamic_cast",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "extern",
                "insertText": "extern",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " extern",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8extern",
                "textEdit": {
                    "newText": "extern",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "false",
                "insertText": "false",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " false",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8false",
                "textEdit": {
                    "newText": "false",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "goto",
                "insertText": "goto",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " goto label;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8goto",
                "textEdit": {
                    "newText": "goto",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type(expressions)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type[size](expressions)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "noexcept",
                "insertText": "noexcept",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " noexcept(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8noexcept",
                "textEdit": {
                    "newText": "noexcept",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "std::nullptr_t",
                "filterText": "nullptr",
                "insertText": "nullptr",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " nullptr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8nullptr",
                "textEdit": {
                    "newText": "nullptr",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "reinterpret_cast",
                "insertText": "reinterpret_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " reinterpret_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8reinterpret_cast",
                "textEdit": {
                    "newText": "reinterpret_cast",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "return",
                "insertText": "return",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " return expression;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8return",
                "textEdit": {
                    "newText": "return",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof",
                "insertText": "sizeof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof(expression-or-type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8sizeof",
                "textEdit": {
                    "newText": "sizeof",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof...",
                "insertText": "sizeof...",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof...(parameter-pack)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8sizeof...",
                "textEdit": {
                    "newText": "sizeof...",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "static",
                "insertText": "static",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " static",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static",
                "textEdit": {
                    "newText": "static",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "static_assert",
                "insertText": "static_assert",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_assert(expression, message);",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static_assert",
                "textEdit": {
                    "newText": "static_assert",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "static_cast",
                "insertText": "static_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static_cast",
                "textEdit": {
                    "newText": "static_cast",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "thread_local",
                "insertText": "thread_local",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " thread_local",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8thread_local",
                "textEdit": {
                    "newText": "thread_local",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "throw",
                "insertText": "throw",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " throw expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8throw",
                "textEdit": {
                    "newText": "throw",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "true",
                "insertText": "true",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " true",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8true",
                "textEdit": {
                    "newText": "true",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "typedef",
                "insertText": "typedef",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typedef type name;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typedef",
                "textEdit": {
                    "newText": "typedef",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "std::type_info",
                "filterText": "typeid",
                "insertText": "typeid",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typeid(expression-or-type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typeid",
                "textEdit": {
                    "newText": "typeid",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using name = type;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8using",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "using namespace",
                "insertText": "using namespace",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using namespace identifier;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8using namespace",
                "textEdit": {
                    "newText": "using namespace",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic",
                "insertText": "atomic",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022atomic<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic",
                "textEdit": {
                    "newText": "atomic",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_bool",
                "insertText": "atomic_bool",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_bool",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_bool",
                "textEdit": {
                    "newText": "atomic_bool",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_char",
                "insertText": "atomic_char",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_char",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_char",
                "textEdit": {
                    "newText": "atomic_char",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_char32_t",
                "insertText": "atomic_char32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_char32_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_char32_t",
                "textEdit": {
                    "newText": "atomic_char32_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag",
                "insertText": "atomic_flag",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022atomic_flag",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_flag",
                "textEdit": {
                    "newText": "atomic_flag",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int",
                "insertText": "atomic_int",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int",
                "textEdit": {
                    "newText": "atomic_int",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int16_t",
                "insertText": "atomic_int16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int16_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int16_t",
                "textEdit": {
                    "newText": "atomic_int16_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int32_t",
                "insertText": "atomic_int32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int32_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int32_t",
                "textEdit": {
                    "newText": "atomic_int32_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int64_t",
                "insertText": "atomic_int64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int64_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int64_t",
                "textEdit": {
                    "newText": "atomic_int64_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int8_t",
                "insertText": "atomic_int8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int8_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int8_t",
                "textEdit": {
                    "newText": "atomic_int8_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast16_t",
                "insertText": "atomic_int_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast16_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int_fast16_t",
                "textEdit": {
                    "newText": "atomic_int_fast16_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast32_t",
                "insertText": "atomic_int_fast32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast32_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int_fast32_t",
                "textEdit": {
                    "newText": "atomic_int_fast32_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast64_t",
                "insertText": "atomic_int_fast64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast64_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int_fast64_t",
                "textEdit": {
                    "newText": "atomic_int_fast64_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast8_t",
                "insertText": "atomic_int_fast8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast8_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int_fast8_t",
                "textEdit": {
                    "newText": "atomic_int_fast8_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least16_t",
                "insertText": "atomic_int_least16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least16_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int_least16_t",
                "textEdit": {
                    "newText": "atomic_int_least16_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least32_t",
                "insertText": "atomic_int_least32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least32_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int_least32_t",
                "textEdit": {
                    "newText": "atomic_int_least32_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least64_t",
                "insertText": "atomic_int_least64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least64_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int_least64_t",
                "textEdit": {
                    "newText": "atomic_int_least64_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least8_t",
                "insertText": "atomic_int_least8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least8_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int_least8_t",
                "textEdit": {
                    "newText": "atomic_int_least8_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_intmax_t",
                "insertText": "atomic_intmax_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_intmax_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_intmax_t",
                "textEdit": {
                    "newText": "atomic_intmax_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_intptr_t",
                "insertText": "atomic_intptr_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_intptr_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_intptr_t",
                "textEdit": {
                    "newText": "atomic_intptr_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_llong",
                "insertText": "atomic_llong",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_llong",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_llong",
                "textEdit": {
                    "newText": "atomic_llong",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ptrdiff_t",
                "insertText": "atomic_ptrdiff_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ptrdiff_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_ptrdiff_t",
                "textEdit": {
                    "newText": "atomic_ptrdiff_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_schar",
                "insertText": "atomic_schar",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_schar",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_schar",
                "textEdit": {
                    "newText": "atomic_schar",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_short",
                "insertText": "atomic_short",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_short",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_short",
                "textEdit": {
                    "newText": "atomic_short",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_size_t",
                "insertText": "atomic_size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_size_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_size_t",
                "textEdit": {
                    "newText": "atomic_size_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uchar",
                "insertText": "atomic_uchar",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uchar",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_uchar",
                "textEdit": {
                    "newText": "atomic_uchar",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint",
                "insertText": "atomic_uint",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_uint",
                "textEdit": {
                    "newText": "atomic_uint",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint32_t",
                "insertText": "atomic_uint32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint32_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_uint32_t",
                "textEdit": {
                    "newText": "atomic_uint32_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint64_t",
                "insertText": "atomic_uint64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint64_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_uint64_t",
                "textEdit": {
                    "newText": "atomic_uint64_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast16_t",
                "insertText": "atomic_uint_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast16_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_uint_fast16_t",
                "textEdit": {
                    "newText": "atomic_uint_fast16_t",
                    "range": {
                        "end": {
                            "character": 6,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['x', 'std', 'main', 'size_t', 'ATOMIC_CHAR32_T_LOCK_FREE', 'ATOMIC_CHAR_LOCK_FREE', 'ATOMIC_FLAG_INIT', 'ATOMIC_INT_LOCK_FREE', 'ATOMIC_LLONG_LOCK_FREE', 'ATOMIC_LONG_LOCK_FREE', 'ATOMIC_SHORT_LOCK_FREE', 'ATOMIC_VAR_INIT', 'ATOMIC_WCHAR_T_LOCK_FREE', '_Nonnull', '_Null_unspecified', '_Nullable', '__FUNCTION__', '__PRETTY_FUNCTION__', '__func__', 'alignas', 'alignof', 'auto', 'bool', 'char', 'char16_t', 'char32_t', 'class', 'const', 'const_cast', 'constexpr', 'decltype', 'delete', 'delete', 'double', 'dynamic_cast', 'enum', 'extern', 'false', 'float', 'goto', 'int', 'long', 'new', 'new', 'noexcept', 'nullptr', 'operator', 'reinterpret_cast', 'return', 'short', 'signed', 'sizeof', 'sizeof...', 'static', 'static_assert', 'static_cast', 'struct', 'thread_local', 'throw', 'true', 'typedef', 'typeid', 'typename', 'union', 'unsigned', 'using', 'using namespace', 'void', 'volatile', 'wchar_t', 'atomic', 'atomic_bool', 'atomic_char', 'atomic_char32_t', 'atomic_flag', 'atomic_int', 'atomic_int16_t', 'atomic_int32_t', 'atomic_int64_t', 'atomic_int8_t', 'atomic_int_fast16_t', 'atomic_int_fast32_t', 'atomic_int_fast64_t', 'atomic_int_fast8_t', 'atomic_int_least16_t', 'atomic_int_least32_t', 'atomic_int_least64_t', 'atomic_int_least8_t', 'atomic_intmax_t', 'atomic_intptr_t', 'atomic_llong', 'atomic_ptrdiff_t', 'atomic_schar', 'atomic_short', 'atomic_size_t', 'atomic_uchar', 'atomic_uint', 'atomic_uint32_t', 'atomic_uint64_t', 'atomic_uint_fast16_t']
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Failed to parse JSON response: Invalid control character at: line 1 column 49031 (char 49030)
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'c'",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 9
                    },
                    "start": {
                        "character": 6,
                        "line": 9
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header vector is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpb6dtbp3o.cpp",
        "version": 21
    }
}
Diagnostics received from LSP.
Errors received: [[9, [6, 7]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "filterText": "complex_literals",
                "insertText": "complex_literals",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " complex_literals",
                "score": 1.384774923324585,
                "sortText": "404ebfb2complex_literals",
                "textEdit": {
                    "newText": "complex_literals",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "Concurrency",
                "insertText": "Concurrency",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " Concurrency",
                "score": 1.227129578590393,
                "sortText": "4062ed6bConcurrency",
                "textEdit": {
                    "newText": "Concurrency",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "concurrency",
                "insertText": "concurrency",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " concurrency",
                "score": 1.227129578590393,
                "sortText": "4062ed6bconcurrency",
                "textEdit": {
                    "newText": "concurrency",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "control87",
                "insertText": "control87",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022control87",
                "score": 0.8436345458030701,
                "sortText": "40a80791control87",
                "textEdit": {
                    "newText": "control87",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8constexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "codecvt",
                "insertText": "codecvt",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt<class Elem, class Byte, class Statype>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt",
                "textEdit": {
                    "newText": "codecvt",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "codecvt_base",
                "insertText": "codecvt_base",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_base",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_base",
                "textEdit": {
                    "newText": "codecvt_base",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "codecvt_byname",
                "insertText": "codecvt_byname",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_byname<class Elem, class Byte, class Statype>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_byname",
                "textEdit": {
                    "newText": "codecvt_byname",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_mode",
                "insertText": "codecvt_mode",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022codecvt_mode",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_mode",
                "textEdit": {
                    "newText": "codecvt_mode",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf16",
                "insertText": "codecvt_utf16",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf16<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_utf16",
                "textEdit": {
                    "newText": "codecvt_utf16",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf8",
                "insertText": "codecvt_utf8",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf8<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_utf8",
                "textEdit": {
                    "newText": "codecvt_utf8",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf8_utf16",
                "insertText": "codecvt_utf8_utf16",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf8_utf16<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_utf8_utf16",
                "textEdit": {
                    "newText": "codecvt_utf8_utf16",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "collate",
                "insertText": "collate",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022collate<class Elem>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3collate",
                "textEdit": {
                    "newText": "collate",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "collate_byname",
                "insertText": "collate_byname",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022collate_byname<class Elem>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3collate_byname",
                "textEdit": {
                    "newText": "collate_byname",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "common_type",
                "insertText": "common_type",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022common_type<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3common_type",
                "textEdit": {
                    "newText": "common_type",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "common_type_t",
                "insertText": "common_type_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022common_type_t<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3common_type_t",
                "textEdit": {
                    "newText": "common_type_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "complex",
                "insertText": "complex",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022complex<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3complex",
                "textEdit": {
                    "newText": "complex",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable",
                "insertText": "condition_variable",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable",
                "score": 0.8070572018623352,
                "sortText": "40b164b3condition_variable",
                "textEdit": {
                    "newText": "condition_variable",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable_any",
                "insertText": "condition_variable_any",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable_any",
                "score": 0.8070572018623352,
                "sortText": "40b164b3condition_variable_any",
                "textEdit": {
                    "newText": "condition_variable_any",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "conditional",
                "insertText": "conditional",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022conditional<bool Test, class Ty1, class Ty2>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3conditional",
                "textEdit": {
                    "newText": "conditional",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "conditional_t",
                "insertText": "conditional_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022conditional_t<bool Test, class Ty1, class Ty2>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3conditional_t",
                "textEdit": {
                    "newText": "conditional_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "conjunction",
                "insertText": "conjunction",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022conjunction<class Traits>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3conjunction",
                "textEdit": {
                    "newText": "conjunction",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun1_ref_t",
                "insertText": "const_mem_fun1_ref_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun1_ref_t<class Result, class Ty, class Arg>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun1_ref_t",
                "textEdit": {
                    "newText": "const_mem_fun1_ref_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun1_t",
                "insertText": "const_mem_fun1_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun1_t<class Result, class Ty, class Arg>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun1_t",
                "textEdit": {
                    "newText": "const_mem_fun1_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun_ref_t",
                "insertText": "const_mem_fun_ref_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun_ref_t<class Result, class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun_ref_t",
                "textEdit": {
                    "newText": "const_mem_fun_ref_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <functional>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <functional>"
                },
                "filterText": "const_mem_fun_t",
                "insertText": "const_mem_fun_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022const_mem_fun_t<class Result, class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3const_mem_fun_t",
                "textEdit": {
                    "newText": "const_mem_fun_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy_options",
                "insertText": "experimental::filesystem::copy_options",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022experimental::filesystem::copy_options",
                "score": 0.5803174376487732,
                "sortText": "40eb7051copy_options",
                "textEdit": {
                    "newText": "experimental::filesystem::copy_options",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<_Upgrade_to_double<Ty>>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "conj",
                "insertText": "conj",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022conj(Ty Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464conj",
                "textEdit": {
                    "newText": "conj",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "conj",
                "insertText": "conj",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022conj(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464conj",
                "textEdit": {
                    "newText": "conj",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty1>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022const_pointer_cast<class Ty1>(const shared_ptr<Ty2> &Other)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464const_pointer_cast",
                "textEdit": {
                    "newText": "const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty1>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022const_pointer_cast<class Ty1>(shared_ptr<Ty2> &&Other)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464const_pointer_cast",
                "textEdit": {
                    "newText": "const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy",
                "insertText": "copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy(InIt First, InIt Last, OutIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy",
                "textEdit": {
                    "newText": "copy",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "BidIt2",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_backward",
                "insertText": "copy_backward",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_backward(BidIt1 First, BidIt1 Last, BidIt2 Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_backward",
                "textEdit": {
                    "newText": "copy_backward",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_if",
                "insertText": "copy_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_if(InIt First, InIt Last, OutIt Dest, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_if",
                "textEdit": {
                    "newText": "copy_if",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_n",
                "insertText": "copy_n",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_n(InIt First, Diff Count_raw, OutIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_n",
                "textEdit": {
                    "newText": "copy_n",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(const valarray<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(const valarray<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count",
                "insertText": "count",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count(const InIt First, const InIt Last, const Ty &Val)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464count",
                "textEdit": {
                    "newText": "count",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count_if",
                "insertText": "count_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count_if(InIt First, InIt Last, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464count_if",
                "textEdit": {
                    "newText": "count_if",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "::std::_Common_float_type_t<Ty1, Ty2>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nremquo() is hand-crafted"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(Ty1 Left, Ty2 Right)",
                "score": 0.5297134518623352,
                "sortText": "40f864b3copysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(long double Number, long double Sign)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcopysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(float Number, float Sign)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcopysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nThe following order matches N4950 [cmath.syn]."
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nThe following order matches N4950 [cmath.syn]."
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 0.45782190561294556,
                "sortText": "4115985ecout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy",
                "insertText": "experimental::filesystem::copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy(const path &, const path &, copy_options, error_code &)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy",
                "textEdit": {
                    "newText": "experimental::filesystem::copy",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy",
                "insertText": "experimental::filesystem::copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy(const path &, const path &, error_code &)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy",
                "textEdit": {
                    "newText": "experimental::filesystem::copy",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy",
                "insertText": "experimental::filesystem::copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy(const path &, const path &)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy",
                "textEdit": {
                    "newText": "experimental::filesystem::copy",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy",
                "insertText": "experimental::filesystem::copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy(const path &, const path &, copy_options)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy",
                "textEdit": {
                    "newText": "experimental::filesystem::copy",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy_file",
                "insertText": "experimental::filesystem::copy_file",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy_file(const path &, const path &, copy_options = copy_options::none)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy_file",
                "textEdit": {
                    "newText": "experimental::filesystem::copy_file",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy_file",
                "insertText": "experimental::filesystem::copy_file",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy_file(const path &, const path &, copy_options, error_code &)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy_file",
                "textEdit": {
                    "newText": "experimental::filesystem::copy_file",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy_file",
                "insertText": "experimental::filesystem::copy_file",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy_file(const path &, const path &, error_code &)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy_file",
                "textEdit": {
                    "newText": "experimental::filesystem::copy_file",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy_symlink",
                "insertText": "experimental::filesystem::copy_symlink",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy_symlink(const path &, const path &)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy_symlink",
                "textEdit": {
                    "newText": "experimental::filesystem::copy_symlink",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy_symlink",
                "insertText": "experimental::filesystem::copy_symlink",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::copy_symlink(const path &, const path &, error_code &)",
                "score": 0.4565367102622986,
                "sortText": "411640d2copy_symlink",
                "textEdit": {
                    "newText": "experimental::filesystem::copy_symlink",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "call_once",
                "insertText": "call_once",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022call_once(once_flag &Once, Fn &&Fx, Args &&Ax...)",
                "score": 0.5893728137016296,
                "sortText": "411dae4ccall_once",
                "textEdit": {
                    "newText": "call_once",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(double Number, double Sign)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcopysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysignf",
                "insertText": "copysignf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysignf(float Number, float Sign)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcopysignf",
                "textEdit": {
                    "newText": "copysignf",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysignl",
                "insertText": "copysignl",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysignl(long double Number, long double Sign)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcopysignl",
                "textEdit": {
                    "newText": "copysignl",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(double X)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosf",
                "insertText": "cosf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosf(float X)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcosf",
                "textEdit": {
                    "newText": "cosf",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(double X)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "coshf",
                "insertText": "coshf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022coshf(float X)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcoshf",
                "textEdit": {
                    "newText": "coshf",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "coshl",
                "insertText": "coshl",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022coshl(long double X)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcoshl",
                "textEdit": {
                    "newText": "coshl",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosl",
                "insertText": "cosl",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosl(long double X)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcosl",
                "textEdit": {
                    "newText": "cosl",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "conjunction_v",
                "insertText": "conjunction_v",
                "insertTextFormat": 1,
                "kind": 6,
                "label": "\u2022conjunction_v<class Traits>",
                "score": 0.37649863958358765,
                "sortText": "413f3b92conjunction_v",
                "textEdit": {
                    "newText": "conjunction_v",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "std::codecvt_mode",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "consume_header",
                "insertText": "consume_header",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022consume_header",
                "score": 0.37649863958358765,
                "sortText": "413f3b92consume_header",
                "textEdit": {
                    "newText": "consume_header",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplinterface.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Concurrency::task_group_status",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplinterface.h>\n<summary> The tasks queued to the <c>task_group</c> or <c>structured_task_group</c> object completed successfully.\n</summary>"
                },
                "filterText": "completed",
                "insertText": "Concurrency::completed",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022Concurrency::completed",
                "score": 0.3304901719093323,
                "sortText": "4156c9fecompleted",
                "textEdit": {
                    "newText": "Concurrency::completed",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::regex_constants::syntax_option_type",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "collate",
                "insertText": "regex_constants::collate",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022regex_constants::collate",
                "score": 0.3138078451156616,
                "sortText": "415f5494collate",
                "textEdit": {
                    "newText": "regex_constants::collate",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNABORTED"
                },
                "filterText": "connection_aborted",
                "insertText": "errc::connection_aborted",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_aborted",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_aborted",
                "textEdit": {
                    "newText": "errc::connection_aborted",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEALREADY"
                },
                "filterText": "connection_already_in_progress",
                "insertText": "errc::connection_already_in_progress",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_already_in_progress",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_already_in_progress",
                "textEdit": {
                    "newText": "errc::connection_already_in_progress",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNREFUSED"
                },
                "filterText": "connection_refused",
                "insertText": "errc::connection_refused",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_refused",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_refused",
                "textEdit": {
                    "newText": "errc::connection_refused",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNRESET"
                },
                "filterText": "connection_reset",
                "insertText": "errc::connection_reset",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_reset",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_reset",
                "textEdit": {
                    "newText": "errc::connection_reset",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ios>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "ios_base::event",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ios>"
                },
                "filterText": "copyfmt_event",
                "insertText": "ios_base::copyfmt_event",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022ios_base::copyfmt_event",
                "score": 0.3138078451156616,
                "sortText": "415f5494copyfmt_event",
                "textEdit": {
                    "newText": "ios_base::copyfmt_event",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "is_copy_constructible",
                "insertText": "is_copy_constructible",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022is_copy_constructible<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "41650b86is_copy_constructible",
                "textEdit": {
                    "newText": "is_copy_constructible",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "linear_congruential_engine",
                "insertText": "linear_congruential_engine",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022linear_congruential_engine<class Uint, Uint Ax, Uint Cx, Uint Mx>",
                "score": 0.8070572018623352,
                "sortText": "41650b86linear_congruential_engine",
                "textEdit": {
                    "newText": "linear_congruential_engine",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "std::experimental::filesystem::copy_options",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "copy_symlinks",
                "insertText": "experimental::filesystem::copy_options::copy_symlinks",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022experimental::filesystem::copy_options::copy_symlinks",
                "score": 0.2961350679397583,
                "sortText": "416860fccopy_symlinks",
                "textEdit": {
                    "newText": "experimental::filesystem::copy_options::copy_symlinks",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "conditional",
                "insertText": "tr1::conditional",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::conditional",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8conditional",
                "textEdit": {
                    "newText": "tr1::conditional",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "tr1::const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::const_pointer_cast",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8const_pointer_cast",
                "textEdit": {
                    "newText": "tr1::const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "linear_congruential",
                "insertText": "linear_congruential",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022linear_congruential<class Uint, Uint Ax, Uint Cx, Uint Mx>",
                "score": 0.678962767124176,
                "sortText": "417da39flinear_congruential",
                "textEdit": {
                    "newText": "linear_congruential",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022copysign",
                "score": 0.25286611914634705,
                "sortText": "417e8855copysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysignf",
                "insertText": "copysignf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022copysignf",
                "score": 0.25286611914634705,
                "sortText": "417e8855copysignf",
                "textEdit": {
                    "newText": "copysignf",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysignl",
                "insertText": "copysignl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022copysignl",
                "score": 0.25286611914634705,
                "sortText": "417e8855copysignl",
                "textEdit": {
                    "newText": "copysignl",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cos",
                "score": 0.25286611914634705,
                "sortText": "417e8855cos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosf",
                "insertText": "cosf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cosf",
                "score": 0.25286611914634705,
                "sortText": "417e8855cosf",
                "textEdit": {
                    "newText": "cosf",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cosh",
                "score": 0.25286611914634705,
                "sortText": "417e8855cosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "coshf",
                "insertText": "coshf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022coshf",
                "score": 0.25286611914634705,
                "sortText": "417e8855coshf",
                "textEdit": {
                    "newText": "coshf",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "coshl",
                "insertText": "coshl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022coshl",
                "score": 0.25286611914634705,
                "sortText": "417e8855coshl",
                "textEdit": {
                    "newText": "coshl",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosl",
                "insertText": "cosl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cosl",
                "score": 0.25286611914634705,
                "sortText": "417e8855cosl",
                "textEdit": {
                    "newText": "cosl",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_compare_exchange_strong",
                "insertText": "atomic_compare_exchange_strong",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_compare_exchange_strong(atomic<Ty> *const Mem, _Identity_t<Ty> *const Expected, const _Identity_t<Ty> Desired)",
                "score": 0.5893728137016296,
                "sortText": "419dae4catomic_compare_exchange_strong",
                "textEdit": {
                    "newText": "atomic_compare_exchange_strong",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_compare_exchange_strong_explicit",
                "insertText": "atomic_compare_exchange_strong_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_compare_exchange_strong_explicit(volatile atomic<Ty> *const Mem, _Identity_t<Ty> *const Expected, const _Identity_t<Ty> Desired, const memory_order Success, const memory_order Failure)",
                "score": 0.5893728137016296,
                "sortText": "419dae4catomic_compare_exchange_strong_explicit",
                "textEdit": {
                    "newText": "atomic_compare_exchange_strong_explicit",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_compare_exchange_strong_explicit",
                "insertText": "atomic_compare_exchange_strong_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_compare_exchange_strong_explicit(atomic<Ty> *const Mem, _Identity_t<Ty> *const Expected, const _Identity_t<Ty> Desired, const memory_order Success, const memory_order Failure)",
                "score": 0.5893728137016296,
                "sortText": "419dae4catomic_compare_exchange_strong_explicit",
                "textEdit": {
                    "newText": "atomic_compare_exchange_strong_explicit",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_compare_exchange_weak",
                "insertText": "atomic_compare_exchange_weak",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_compare_exchange_weak(shared_ptr<Ty> *Ptr, shared_ptr<Ty> *Exp, shared_ptr<Ty> Value)",
                "score": 0.5893728137016296,
                "sortText": "419dae4catomic_compare_exchange_weak",
                "textEdit": {
                    "newText": "atomic_compare_exchange_weak",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['complex_literals', 'Concurrency', 'concurrency', 'control87', 'const', 'const_cast', 'constexpr', 'codecvt', 'codecvt_base', 'codecvt_byname', 'codecvt_mode', 'codecvt_utf16', 'codecvt_utf8', 'codecvt_utf8_utf16', 'collate', 'collate_byname', 'common_type', 'common_type_t', 'complex', 'condition_variable', 'condition_variable_any', 'conditional', 'conditional_t', 'conjunction', 'const_mem_fun1_ref_t', 'const_mem_fun1_t', 'const_mem_fun_ref_t', 'const_mem_fun_t', 'experimental::filesystem::copy_options', 'conj', 'conj', 'const_pointer_cast', 'const_pointer_cast', 'copy', 'copy_backward', 'copy_if', 'copy_n', 'cos', 'cos', 'cosh', 'cosh', 'count', 'count_if', 'copysign', 'copysign', 'copysign', 'cos', 'cos', 'cos', 'cosh', 'cosh', 'cosh', 'cout', 'experimental::filesystem::copy', 'experimental::filesystem::copy', 'experimental::filesystem::copy', 'experimental::filesystem::copy', 'experimental::filesystem::copy_file', 'experimental::filesystem::copy_file', 'experimental::filesystem::copy_file', 'experimental::filesystem::copy_symlink', 'experimental::filesystem::copy_symlink', 'call_once', 'copysign', 'copysignf', 'copysignl', 'cos', 'cosf', 'cosh', 'coshf', 'coshl', 'cosl', 'conjunction_v', 'consume_header', 'Concurrency::completed', 'regex_constants::collate', 'errc::connection_aborted', 'errc::connection_already_in_progress', 'errc::connection_refused', 'errc::connection_reset', 'ios_base::copyfmt_event', 'is_copy_constructible', 'linear_congruential_engine', 'experimental::filesystem::copy_options::copy_symlinks', 'tr1::conditional', 'tr1::const_pointer_cast', 'linear_congruential', 'copysign', 'copysignf', 'copysignl', 'cos', 'cosf', 'cosh', 'coshf', 'coshl', 'cosl', 'atomic_compare_exchange_strong', 'atomic_compare_exchange_strong_explicit', 'atomic_compare_exchange_strong_explicit', 'atomic_compare_exchange_weak']
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'co'",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 9
                    },
                    "start": {
                        "character": 6,
                        "line": 9
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header vector is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpb6dtbp3o.cpp",
        "version": 22
    }
}
Diagnostics received from LSP.
Errors received: [[9, [6, 8]]]
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf16",
                "insertText": "codecvt_utf16",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf16<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40d3d3eacodecvt_utf16",
                "textEdit": {
                    "newText": "codecvt_utf16",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf8",
                "insertText": "codecvt_utf8",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf8<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40d3d3eacodecvt_utf8",
                "textEdit": {
                    "newText": "codecvt_utf8",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf8_utf16",
                "insertText": "codecvt_utf8_utf16",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf8_utf16<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40d3d3eacodecvt_utf8_utf16",
                "textEdit": {
                    "newText": "codecvt_utf8_utf16",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count",
                "insertText": "count",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count(const InIt First, const InIt Last, const Ty &Val)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464count",
                "textEdit": {
                    "newText": "count",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count_if",
                "insertText": "count_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count_if(InIt First, InIt Last, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464count_if",
                "textEdit": {
                    "newText": "count_if",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 0.45782190561294556,
                "sortText": "4115985ecout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "uintmax_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "hard_link_count",
                "insertText": "experimental::filesystem::hard_link_count",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::hard_link_count(const path &, error_code &)",
                "score": 0.4565367102622986,
                "sortText": "419640d2hard_link_count",
                "textEdit": {
                    "newText": "experimental::filesystem::hard_link_count",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "uintmax_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "hard_link_count",
                "insertText": "experimental::filesystem::hard_link_count",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022experimental::filesystem::hard_link_count(const path &)",
                "score": 0.4565367102622986,
                "sortText": "419640d2hard_link_count",
                "textEdit": {
                    "newText": "experimental::filesystem::hard_link_count",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdio.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdio.h>"
                },
                "filterText": "_get_printf_count_output",
                "insertText": "_get_printf_count_output",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_get_printf_count_output()",
                "score": 0.4419805109500885,
                "sortText": "41c36bf1_get_printf_count_output",
                "textEdit": {
                    "newText": "_get_printf_count_output",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdio.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdio.h>"
                },
                "filterText": "_set_printf_count_output",
                "insertText": "_set_printf_count_output",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_set_printf_count_output(int Value)",
                "score": 0.4419805109500885,
                "sortText": "41c36bf1_set_printf_count_output",
                "textEdit": {
                    "newText": "_set_printf_count_output",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['codecvt_utf16', 'codecvt_utf8', 'codecvt_utf8_utf16', 'count', 'count_if', 'cout', 'experimental::filesystem::hard_link_count', 'experimental::filesystem::hard_link_count', '_get_printf_count_output', '_set_printf_count_output']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 10
                    },
                    "start": {
                        "character": 0,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'cou'",
                "range": {
                    "end": {
                        "character": 9,
                        "line": 9
                    },
                    "start": {
                        "character": 6,
                        "line": 9
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header vector is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpb6dtbp3o.cpp",
        "version": 23
    }
}
Diagnostics received from LSP.
Errors received: [[10, [0, 1]], [9, [6, 9]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 10
                    },
                    "start": {
                        "character": 0,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "-Wunused-value",
                "message": "Expression result unused",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 9
                    },
                    "start": {
                        "character": 6,
                        "line": 9
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header vector is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpb6dtbp3o.cpp",
        "version": 24
    }
}
Diagnostics received from LSP.
Errors received: [[10, [0, 1]]]
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": null
}
Received hover response.
Hover response does not contain 'contents'.
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": [
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 0.45782190561294556,
                "sortText": "4095985ecout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf16",
                "insertText": "codecvt_utf16",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf16<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40cb381dcodecvt_utf16",
                "textEdit": {
                    "newText": "codecvt_utf16",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf8",
                "insertText": "codecvt_utf8",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf8<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40cb381dcodecvt_utf8",
                "textEdit": {
                    "newText": "codecvt_utf8",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf8_utf16",
                "insertText": "codecvt_utf8_utf16",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf8_utf16<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40cb381dcodecvt_utf8_utf16",
                "textEdit": {
                    "newText": "codecvt_utf8_utf16",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdio.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdio.h>"
                },
                "filterText": "_get_printf_count_output",
                "insertText": "_get_printf_count_output",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_get_printf_count_output()",
                "score": 0.4419805109500885,
                "sortText": "41b9fe24_get_printf_count_output",
                "textEdit": {
                    "newText": "_get_printf_count_output",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdio.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdio.h>"
                },
                "filterText": "_set_printf_count_output",
                "insertText": "_set_printf_count_output",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_set_printf_count_output(int Value)",
                "score": 0.4419805109500885,
                "sortText": "41b9fe24_set_printf_count_output",
                "textEdit": {
                    "newText": "_set_printf_count_output",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['cout', 'codecvt_utf16', 'codecvt_utf8', 'codecvt_utf8_utf16', '_get_printf_count_output', '_set_printf_count_output']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 10
                    },
                    "start": {
                        "character": 0,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "-Wunused-value",
                "message": "Expression result unused",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 9
                    },
                    "start": {
                        "character": 6,
                        "line": 9
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header vector is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpb6dtbp3o.cpp",
        "version": 25
    }
}
Diagnostics received from LSP.
Errors received: [[10, [0, 1]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 10
                    },
                    "start": {
                        "character": 0,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "-Wunused-value",
                "message": "Expression result unused",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 9
                    },
                    "start": {
                        "character": 6,
                        "line": 9
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header vector is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpb6dtbp3o.cpp",
        "version": 27
    }
}
Diagnostics received from LSP.
Errors received: [[10, [0, 1]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": [
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 0.45782190561294556,
                "sortText": "4095985ecout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf16",
                "insertText": "codecvt_utf16",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf16<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40cb381dcodecvt_utf16",
                "textEdit": {
                    "newText": "codecvt_utf16",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf8",
                "insertText": "codecvt_utf8",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf8<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40cb381dcodecvt_utf8",
                "textEdit": {
                    "newText": "codecvt_utf8",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf8_utf16",
                "insertText": "codecvt_utf8_utf16",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf8_utf16<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40cb381dcodecvt_utf8_utf16",
                "textEdit": {
                    "newText": "codecvt_utf8_utf16",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdio.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdio.h>"
                },
                "filterText": "_get_printf_count_output",
                "insertText": "_get_printf_count_output",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_get_printf_count_output()",
                "score": 0.4419805109500885,
                "sortText": "41b9fe24_get_printf_count_output",
                "textEdit": {
                    "newText": "_get_printf_count_output",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdio.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdio.h>"
                },
                "filterText": "_set_printf_count_output",
                "insertText": "_set_printf_count_output",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_set_printf_count_output(int Value)",
                "score": 0.4419805109500885,
                "sortText": "41b9fe24_set_printf_count_output",
                "textEdit": {
                    "newText": "_set_printf_count_output",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 9
                        },
                        "start": {
                            "character": 6,
                            "line": 9
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['cout', 'codecvt_utf16', 'codecvt_utf8', 'codecvt_utf8_utf16', '_get_printf_count_output', '_set_printf_count_output']
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "detail": "int",
                "filterText": "x",
                "insertText": "x",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " x",
                "score": 3.423351287841797,
                "sortText": "3fa4e7d0x",
                "textEdit": {
                    "newText": "x",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 2.7792155742645264,
                "sortText": "3fce2155cout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.513861060142517,
                "sortText": "403e39cdstd",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "main",
                "insertText": "main",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " main()",
                "score": 1.353448510169983,
                "sortText": "4052c233main",
                "textEdit": {
                    "newText": "main",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cerr",
                "insertText": "cerr",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cerr",
                "score": 0.960056483745575,
                "sortText": "408a39bdcerr",
                "textEdit": {
                    "newText": "cerr",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "clog",
                "insertText": "clog",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " clog",
                "score": 0.960056483745575,
                "sortText": "408a39bdclog",
                "textEdit": {
                    "newText": "clog",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "__FUNCTION__",
                "insertText": "__FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __FUNCTION__",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7__FUNCTION__",
                "textEdit": {
                    "newText": "__FUNCTION__",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "__PRETTY_FUNCTION__",
                "insertText": "__PRETTY_FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __PRETTY_FUNCTION__",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7__PRETTY_FUNCTION__",
                "textEdit": {
                    "newText": "__PRETTY_FUNCTION__",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "__func__",
                "insertText": "__func__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __func__",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7__func__",
                "textEdit": {
                    "newText": "__func__",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "alignof",
                "insertText": "alignof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignof(type)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7alignof",
                "textEdit": {
                    "newText": "alignof",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete [] expression",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete expression",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "dynamic_cast",
                "insertText": "dynamic_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " dynamic_cast<type>(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7dynamic_cast",
                "textEdit": {
                    "newText": "dynamic_cast",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "false",
                "insertText": "false",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " false",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7false",
                "textEdit": {
                    "newText": "false",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type(expressions)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type[size](expressions)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "noexcept",
                "insertText": "noexcept",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " noexcept(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7noexcept",
                "textEdit": {
                    "newText": "noexcept",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "std::nullptr_t",
                "filterText": "nullptr",
                "insertText": "nullptr",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " nullptr",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7nullptr",
                "textEdit": {
                    "newText": "nullptr",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "reinterpret_cast",
                "insertText": "reinterpret_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " reinterpret_cast<type>(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7reinterpret_cast",
                "textEdit": {
                    "newText": "reinterpret_cast",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof",
                "insertText": "sizeof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof(expression-or-type)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7sizeof",
                "textEdit": {
                    "newText": "sizeof",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof...",
                "insertText": "sizeof...",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof...(parameter-pack)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7sizeof...",
                "textEdit": {
                    "newText": "sizeof...",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "static_cast",
                "insertText": "static_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_cast<type>(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7static_cast",
                "textEdit": {
                    "newText": "static_cast",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "throw",
                "insertText": "throw",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " throw expression",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7throw",
                "textEdit": {
                    "newText": "throw",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "true",
                "insertText": "true",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " true",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7true",
                "textEdit": {
                    "newText": "true",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "std::type_info",
                "filterText": "typeid",
                "insertText": "typeid",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typeid(expression-or-type)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7typeid",
                "textEdit": {
                    "newText": "typeid",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR_LOCK_FREE",
                "insertText": "ATOMIC_CHAR_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR_LOCK_FREE",
                "score": 0.8113556504249573,
                "sortText": "40b04affATOMIC_CHAR_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_FLAG_INIT",
                "insertText": "ATOMIC_FLAG_INIT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_FLAG_INIT",
                "score": 0.8113556504249573,
                "sortText": "40b04affATOMIC_FLAG_INIT",
                "textEdit": {
                    "newText": "ATOMIC_FLAG_INIT",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_INT_LOCK_FREE",
                "insertText": "ATOMIC_INT_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_INT_LOCK_FREE",
                "score": 0.8113556504249573,
                "sortText": "40b04affATOMIC_INT_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_INT_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_LLONG_LOCK_FREE",
                "insertText": "ATOMIC_LLONG_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_LLONG_LOCK_FREE",
                "score": 0.8113556504249573,
                "sortText": "40b04affATOMIC_LLONG_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_LLONG_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_LONG_LOCK_FREE",
                "insertText": "ATOMIC_LONG_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_LONG_LOCK_FREE",
                "score": 0.8113556504249573,
                "sortText": "40b04affATOMIC_LONG_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_LONG_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_SHORT_LOCK_FREE",
                "insertText": "ATOMIC_SHORT_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_SHORT_LOCK_FREE",
                "score": 0.8113556504249573,
                "sortText": "40b04affATOMIC_SHORT_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_SHORT_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_VAR_INIT",
                "insertText": "ATOMIC_VAR_INIT",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ATOMIC_VAR_INIT(_Value)",
                "score": 0.8113556504249573,
                "sortText": "40b04affATOMIC_VAR_INIT",
                "textEdit": {
                    "newText": "ATOMIC_VAR_INIT",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_WCHAR_T_LOCK_FREE",
                "insertText": "ATOMIC_WCHAR_T_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_WCHAR_T_LOCK_FREE",
                "score": 0.8113556504249573,
                "sortText": "40b04affATOMIC_WCHAR_T_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_WCHAR_T_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 0.7135143280029297,
                "sortText": "40c95720size_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "_iobuf",
                "insertText": "_iobuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " _iobuf",
                "score": 0.6298295259475708,
                "sortText": "40dec37e_iobuf",
                "textEdit": {
                    "newText": "_iobuf",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "basic_ostream",
                "insertText": "basic_ostream",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_ostream<class Elem, class Traits>",
                "score": 0.6298295259475708,
                "sortText": "40dec37ebasic_ostream",
                "textEdit": {
                    "newText": "basic_ostream",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "type_info",
                "insertText": "type_info",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " type_info",
                "score": 0.6298295259475708,
                "sortText": "40dec37etype_info",
                "textEdit": {
                    "newText": "type_info",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic",
                "insertText": "atomic",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022atomic<class Ty>",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic",
                "textEdit": {
                    "newText": "atomic",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_char",
                "insertText": "atomic_char",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_char",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_char",
                "textEdit": {
                    "newText": "atomic_char",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_char32_t",
                "insertText": "atomic_char32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_char32_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_char32_t",
                "textEdit": {
                    "newText": "atomic_char32_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag",
                "insertText": "atomic_flag",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022atomic_flag",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_flag",
                "textEdit": {
                    "newText": "atomic_flag",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int",
                "insertText": "atomic_int",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_int",
                "textEdit": {
                    "newText": "atomic_int",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int16_t",
                "insertText": "atomic_int16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int16_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_int16_t",
                "textEdit": {
                    "newText": "atomic_int16_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int32_t",
                "insertText": "atomic_int32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int32_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_int32_t",
                "textEdit": {
                    "newText": "atomic_int32_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int64_t",
                "insertText": "atomic_int64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int64_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_int64_t",
                "textEdit": {
                    "newText": "atomic_int64_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int8_t",
                "insertText": "atomic_int8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int8_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_int8_t",
                "textEdit": {
                    "newText": "atomic_int8_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast16_t",
                "insertText": "atomic_int_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast16_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_int_fast16_t",
                "textEdit": {
                    "newText": "atomic_int_fast16_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast32_t",
                "insertText": "atomic_int_fast32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast32_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_int_fast32_t",
                "textEdit": {
                    "newText": "atomic_int_fast32_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast64_t",
                "insertText": "atomic_int_fast64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast64_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_int_fast64_t",
                "textEdit": {
                    "newText": "atomic_int_fast64_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast8_t",
                "insertText": "atomic_int_fast8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast8_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_int_fast8_t",
                "textEdit": {
                    "newText": "atomic_int_fast8_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least16_t",
                "insertText": "atomic_int_least16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least16_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_int_least16_t",
                "textEdit": {
                    "newText": "atomic_int_least16_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least32_t",
                "insertText": "atomic_int_least32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least32_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_int_least32_t",
                "textEdit": {
                    "newText": "atomic_int_least32_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least64_t",
                "insertText": "atomic_int_least64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least64_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_int_least64_t",
                "textEdit": {
                    "newText": "atomic_int_least64_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least8_t",
                "insertText": "atomic_int_least8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least8_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_int_least8_t",
                "textEdit": {
                    "newText": "atomic_int_least8_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_intmax_t",
                "insertText": "atomic_intmax_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_intmax_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_intmax_t",
                "textEdit": {
                    "newText": "atomic_intmax_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_intptr_t",
                "insertText": "atomic_intptr_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_intptr_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_intptr_t",
                "textEdit": {
                    "newText": "atomic_intptr_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_llong",
                "insertText": "atomic_llong",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_llong",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_llong",
                "textEdit": {
                    "newText": "atomic_llong",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ptrdiff_t",
                "insertText": "atomic_ptrdiff_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ptrdiff_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_ptrdiff_t",
                "textEdit": {
                    "newText": "atomic_ptrdiff_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_schar",
                "insertText": "atomic_schar",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_schar",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_schar",
                "textEdit": {
                    "newText": "atomic_schar",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_short",
                "insertText": "atomic_short",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_short",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_short",
                "textEdit": {
                    "newText": "atomic_short",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_size_t",
                "insertText": "atomic_size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_size_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_size_t",
                "textEdit": {
                    "newText": "atomic_size_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uchar",
                "insertText": "atomic_uchar",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uchar",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_uchar",
                "textEdit": {
                    "newText": "atomic_uchar",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint",
                "insertText": "atomic_uint",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_uint",
                "textEdit": {
                    "newText": "atomic_uint",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint32_t",
                "insertText": "atomic_uint32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint32_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_uint32_t",
                "textEdit": {
                    "newText": "atomic_uint32_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint64_t",
                "insertText": "atomic_uint64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint64_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_uint64_t",
                "textEdit": {
                    "newText": "atomic_uint64_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast16_t",
                "insertText": "atomic_uint_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast16_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_uint_fast16_t",
                "textEdit": {
                    "newText": "atomic_uint_fast16_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast64_t",
                "insertText": "atomic_uint_fast64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast64_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_uint_fast64_t",
                "textEdit": {
                    "newText": "atomic_uint_fast64_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast8_t",
                "insertText": "atomic_uint_fast8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast8_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_uint_fast8_t",
                "textEdit": {
                    "newText": "atomic_uint_fast8_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_least16_t",
                "insertText": "atomic_uint_least16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_least16_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_uint_least16_t",
                "textEdit": {
                    "newText": "atomic_uint_least16_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_least32_t",
                "insertText": "atomic_uint_least32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_least32_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_uint_least32_t",
                "textEdit": {
                    "newText": "atomic_uint_least32_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_least8_t",
                "insertText": "atomic_uint_least8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_least8_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_uint_least8_t",
                "textEdit": {
                    "newText": "atomic_uint_least8_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uintmax_t",
                "insertText": "atomic_uintmax_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uintmax_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_uintmax_t",
                "textEdit": {
                    "newText": "atomic_uintmax_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uintptr_t",
                "insertText": "atomic_uintptr_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uintptr_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_uintptr_t",
                "textEdit": {
                    "newText": "atomic_uintptr_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 9
                        },
                        "start": {
                            "character": 11,
                            "line": 9
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['x', 'cout', 'std', 'main', 'cerr', 'clog', '_Nonnull', '_Null_unspecified', '_Nullable', '__FUNCTION__', '__PRETTY_FUNCTION__', '__func__', 'alignof', 'auto', 'bool', 'char', 'char16_t', 'char32_t', 'class', 'const', 'const_cast', 'decltype', 'delete', 'delete', 'double', 'dynamic_cast', 'enum', 'false', 'float', 'int', 'long', 'new', 'new', 'noexcept', 'nullptr', 'operator', 'reinterpret_cast', 'short', 'signed', 'sizeof', 'sizeof...', 'static_cast', 'struct', 'throw', 'true', 'typeid', 'typename', 'union', 'unsigned', 'void', 'volatile', 'wchar_t', 'ATOMIC_CHAR_LOCK_FREE', 'ATOMIC_FLAG_INIT', 'ATOMIC_INT_LOCK_FREE', 'ATOMIC_LLONG_LOCK_FREE', 'ATOMIC_LONG_LOCK_FREE', 'ATOMIC_SHORT_LOCK_FREE', 'ATOMIC_VAR_INIT', 'ATOMIC_WCHAR_T_LOCK_FREE', 'size_t', '_iobuf', 'basic_ostream', 'type_info', 'atomic', 'atomic_char', 'atomic_char32_t', 'atomic_flag', 'atomic_int', 'atomic_int16_t', 'atomic_int32_t', 'atomic_int64_t', 'atomic_int8_t', 'atomic_int_fast16_t', 'atomic_int_fast32_t', 'atomic_int_fast64_t', 'atomic_int_fast8_t', 'atomic_int_least16_t', 'atomic_int_least32_t', 'atomic_int_least64_t', 'atomic_int_least8_t', 'atomic_intmax_t', 'atomic_intptr_t', 'atomic_llong', 'atomic_ptrdiff_t', 'atomic_schar', 'atomic_short', 'atomic_size_t', 'atomic_uchar', 'atomic_uint', 'atomic_uint32_t', 'atomic_uint64_t', 'atomic_uint_fast16_t', 'atomic_uint_fast64_t', 'atomic_uint_fast8_t', 'atomic_uint_least16_t', 'atomic_uint_least32_t', 'atomic_uint_least8_t', 'atomic_uintmax_t', 'atomic_uintptr_t']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_expression",
                "message": "Expected expression",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 10
                    },
                    "start": {
                        "character": 0,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header vector is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpb6dtbp3o.cpp",
        "version": 29
    }
}
Diagnostics received from LSP.
Errors received: [[10, [0, 1]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "detail": "int",
                "filterText": "x",
                "insertText": "x",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " x",
                "score": 3.5021395683288574,
                "sortText": "3f9fdcf2x",
                "textEdit": {
                    "newText": "x",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "main",
                "insertText": "main",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " main()",
                "score": 1.9921669960021973,
                "sortText": "400100acmain",
                "textEdit": {
                    "newText": "main",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.466963291168213,
                "sortText": "40443a8cstd",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 1.0467742681503296,
                "sortText": "407a034dcout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 0.8851884603500366,
                "sortText": "409d644asize_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.885036051273346,
                "sortText": "409d6e47_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.885036051273346,
                "sortText": "409d6e47_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.885036051273346,
                "sortText": "409d6e47_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "__FUNCTION__",
                "insertText": "__FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __FUNCTION__",
                "score": 0.885036051273346,
                "sortText": "409d6e47__FUNCTION__",
                "textEdit": {
                    "newText": "__FUNCTION__",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "__PRETTY_FUNCTION__",
                "insertText": "__PRETTY_FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __PRETTY_FUNCTION__",
                "score": 0.885036051273346,
                "sortText": "409d6e47__PRETTY_FUNCTION__",
                "textEdit": {
                    "newText": "__PRETTY_FUNCTION__",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "__func__",
                "insertText": "__func__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __func__",
                "score": 0.885036051273346,
                "sortText": "409d6e47__func__",
                "textEdit": {
                    "newText": "__func__",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "alignof",
                "insertText": "alignof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignof(type)",
                "score": 0.885036051273346,
                "sortText": "409d6e47alignof",
                "textEdit": {
                    "newText": "alignof",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.885036051273346,
                "sortText": "409d6e47auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.885036051273346,
                "sortText": "409d6e47bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.885036051273346,
                "sortText": "409d6e47char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.885036051273346,
                "sortText": "409d6e47char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.885036051273346,
                "sortText": "409d6e47char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.885036051273346,
                "sortText": "409d6e47class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.885036051273346,
                "sortText": "409d6e47const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete [] expression",
                "score": 0.885036051273346,
                "sortText": "409d6e47delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete expression",
                "score": 0.885036051273346,
                "sortText": "409d6e47delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.885036051273346,
                "sortText": "409d6e47double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "dynamic_cast",
                "insertText": "dynamic_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " dynamic_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47dynamic_cast",
                "textEdit": {
                    "newText": "dynamic_cast",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.885036051273346,
                "sortText": "409d6e47enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "false",
                "insertText": "false",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " false",
                "score": 0.885036051273346,
                "sortText": "409d6e47false",
                "textEdit": {
                    "newText": "false",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.885036051273346,
                "sortText": "409d6e47float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.885036051273346,
                "sortText": "409d6e47int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.885036051273346,
                "sortText": "409d6e47long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type(expressions)",
                "score": 0.885036051273346,
                "sortText": "409d6e47new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type[size](expressions)",
                "score": 0.885036051273346,
                "sortText": "409d6e47new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "noexcept",
                "insertText": "noexcept",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " noexcept(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47noexcept",
                "textEdit": {
                    "newText": "noexcept",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "std::nullptr_t",
                "filterText": "nullptr",
                "insertText": "nullptr",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " nullptr",
                "score": 0.885036051273346,
                "sortText": "409d6e47nullptr",
                "textEdit": {
                    "newText": "nullptr",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.885036051273346,
                "sortText": "409d6e47operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "reinterpret_cast",
                "insertText": "reinterpret_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " reinterpret_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47reinterpret_cast",
                "textEdit": {
                    "newText": "reinterpret_cast",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.885036051273346,
                "sortText": "409d6e47short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.885036051273346,
                "sortText": "409d6e47signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof",
                "insertText": "sizeof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof(expression-or-type)",
                "score": 0.885036051273346,
                "sortText": "409d6e47sizeof",
                "textEdit": {
                    "newText": "sizeof",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof...",
                "insertText": "sizeof...",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof...(parameter-pack)",
                "score": 0.885036051273346,
                "sortText": "409d6e47sizeof...",
                "textEdit": {
                    "newText": "sizeof...",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "static_cast",
                "insertText": "static_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47static_cast",
                "textEdit": {
                    "newText": "static_cast",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.885036051273346,
                "sortText": "409d6e47struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "throw",
                "insertText": "throw",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " throw expression",
                "score": 0.885036051273346,
                "sortText": "409d6e47throw",
                "textEdit": {
                    "newText": "throw",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "true",
                "insertText": "true",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " true",
                "score": 0.885036051273346,
                "sortText": "409d6e47true",
                "textEdit": {
                    "newText": "true",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "std::type_info",
                "filterText": "typeid",
                "insertText": "typeid",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typeid(expression-or-type)",
                "score": 0.885036051273346,
                "sortText": "409d6e47typeid",
                "textEdit": {
                    "newText": "typeid",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.885036051273346,
                "sortText": "409d6e47typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.885036051273346,
                "sortText": "409d6e47union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.885036051273346,
                "sortText": "409d6e47unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.885036051273346,
                "sortText": "409d6e47void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.885036051273346,
                "sortText": "409d6e47volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.885036051273346,
                "sortText": "409d6e47wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic",
                "insertText": "atomic",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022atomic<class Ty>",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic",
                "textEdit": {
                    "newText": "atomic",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_bool",
                "insertText": "atomic_bool",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_bool",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_bool",
                "textEdit": {
                    "newText": "atomic_bool",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_char",
                "insertText": "atomic_char",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_char",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_char",
                "textEdit": {
                    "newText": "atomic_char",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_char32_t",
                "insertText": "atomic_char32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_char32_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_char32_t",
                "textEdit": {
                    "newText": "atomic_char32_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag",
                "insertText": "atomic_flag",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022atomic_flag",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_flag",
                "textEdit": {
                    "newText": "atomic_flag",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int",
                "insertText": "atomic_int",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_int",
                "textEdit": {
                    "newText": "atomic_int",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int16_t",
                "insertText": "atomic_int16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int16_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_int16_t",
                "textEdit": {
                    "newText": "atomic_int16_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int32_t",
                "insertText": "atomic_int32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int32_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_int32_t",
                "textEdit": {
                    "newText": "atomic_int32_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int64_t",
                "insertText": "atomic_int64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int64_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_int64_t",
                "textEdit": {
                    "newText": "atomic_int64_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int8_t",
                "insertText": "atomic_int8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int8_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_int8_t",
                "textEdit": {
                    "newText": "atomic_int8_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast16_t",
                "insertText": "atomic_int_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast16_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_int_fast16_t",
                "textEdit": {
                    "newText": "atomic_int_fast16_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast32_t",
                "insertText": "atomic_int_fast32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast32_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_int_fast32_t",
                "textEdit": {
                    "newText": "atomic_int_fast32_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast64_t",
                "insertText": "atomic_int_fast64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast64_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_int_fast64_t",
                "textEdit": {
                    "newText": "atomic_int_fast64_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast8_t",
                "insertText": "atomic_int_fast8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast8_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_int_fast8_t",
                "textEdit": {
                    "newText": "atomic_int_fast8_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least16_t",
                "insertText": "atomic_int_least16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least16_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_int_least16_t",
                "textEdit": {
                    "newText": "atomic_int_least16_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least32_t",
                "insertText": "atomic_int_least32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least32_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_int_least32_t",
                "textEdit": {
                    "newText": "atomic_int_least32_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least64_t",
                "insertText": "atomic_int_least64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least64_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_int_least64_t",
                "textEdit": {
                    "newText": "atomic_int_least64_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least8_t",
                "insertText": "atomic_int_least8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least8_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_int_least8_t",
                "textEdit": {
                    "newText": "atomic_int_least8_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_intmax_t",
                "insertText": "atomic_intmax_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_intmax_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_intmax_t",
                "textEdit": {
                    "newText": "atomic_intmax_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_intptr_t",
                "insertText": "atomic_intptr_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_intptr_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_intptr_t",
                "textEdit": {
                    "newText": "atomic_intptr_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_llong",
                "insertText": "atomic_llong",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_llong",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_llong",
                "textEdit": {
                    "newText": "atomic_llong",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ptrdiff_t",
                "insertText": "atomic_ptrdiff_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ptrdiff_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_ptrdiff_t",
                "textEdit": {
                    "newText": "atomic_ptrdiff_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_schar",
                "insertText": "atomic_schar",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_schar",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_schar",
                "textEdit": {
                    "newText": "atomic_schar",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_short",
                "insertText": "atomic_short",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_short",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_short",
                "textEdit": {
                    "newText": "atomic_short",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_size_t",
                "insertText": "atomic_size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_size_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_size_t",
                "textEdit": {
                    "newText": "atomic_size_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uchar",
                "insertText": "atomic_uchar",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uchar",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_uchar",
                "textEdit": {
                    "newText": "atomic_uchar",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint",
                "insertText": "atomic_uint",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_uint",
                "textEdit": {
                    "newText": "atomic_uint",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint32_t",
                "insertText": "atomic_uint32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint32_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_uint32_t",
                "textEdit": {
                    "newText": "atomic_uint32_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint64_t",
                "insertText": "atomic_uint64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint64_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_uint64_t",
                "textEdit": {
                    "newText": "atomic_uint64_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast16_t",
                "insertText": "atomic_uint_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast16_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_uint_fast16_t",
                "textEdit": {
                    "newText": "atomic_uint_fast16_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast64_t",
                "insertText": "atomic_uint_fast64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast64_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_uint_fast64_t",
                "textEdit": {
                    "newText": "atomic_uint_fast64_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast8_t",
                "insertText": "atomic_uint_fast8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast8_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_uint_fast8_t",
                "textEdit": {
                    "newText": "atomic_uint_fast8_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_least16_t",
                "insertText": "atomic_uint_least16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_least16_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_uint_least16_t",
                "textEdit": {
                    "newText": "atomic_uint_least16_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_least32_t",
                "insertText": "atomic_uint_least32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_least32_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_uint_least32_t",
                "textEdit": {
                    "newText": "atomic_uint_least32_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_least8_t",
                "insertText": "atomic_uint_least8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_least8_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_uint_least8_t",
                "textEdit": {
                    "newText": "atomic_uint_least8_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uintmax_t",
                "insertText": "atomic_uintmax_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uintmax_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_uintmax_t",
                "textEdit": {
                    "newText": "atomic_uintmax_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uintptr_t",
                "insertText": "atomic_uintptr_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uintptr_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_uintptr_t",
                "textEdit": {
                    "newText": "atomic_uintptr_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ulong",
                "insertText": "atomic_ulong",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ulong",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_ulong",
                "textEdit": {
                    "newText": "atomic_ulong",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ushort",
                "insertText": "atomic_ushort",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ushort",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_ushort",
                "textEdit": {
                    "newText": "atomic_ushort",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_wchar_t",
                "insertText": "atomic_wchar_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_wchar_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_wchar_t",
                "textEdit": {
                    "newText": "atomic_wchar_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "_iobuf",
                "insertText": "_iobuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " _iobuf",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96_iobuf",
                "textEdit": {
                    "newText": "_iobuf",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "basic_ostream",
                "insertText": "basic_ostream",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_ostream<class Elem, class Traits>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96basic_ostream",
                "textEdit": {
                    "newText": "basic_ostream",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "type_info",
                "insertText": "type_info",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " type_info",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96type_info",
                "textEdit": {
                    "newText": "type_info",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR32_T_LOCK_FREE",
                "score": 0.6824626922607422,
                "sortText": "40d14a20ATOMIC_CHAR32_T_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR32_T_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR_LOCK_FREE",
                "insertText": "ATOMIC_CHAR_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR_LOCK_FREE",
                "score": 0.6824626922607422,
                "sortText": "40d14a20ATOMIC_CHAR_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_FLAG_INIT",
                "insertText": "ATOMIC_FLAG_INIT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_FLAG_INIT",
                "score": 0.6824626922607422,
                "sortText": "40d14a20ATOMIC_FLAG_INIT",
                "textEdit": {
                    "newText": "ATOMIC_FLAG_INIT",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_INT_LOCK_FREE",
                "insertText": "ATOMIC_INT_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_INT_LOCK_FREE",
                "score": 0.6824626922607422,
                "sortText": "40d14a20ATOMIC_INT_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_INT_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_LLONG_LOCK_FREE",
                "insertText": "ATOMIC_LLONG_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_LLONG_LOCK_FREE",
                "score": 0.6824626922607422,
                "sortText": "40d14a20ATOMIC_LLONG_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_LLONG_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_LONG_LOCK_FREE",
                "insertText": "ATOMIC_LONG_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_LONG_LOCK_FREE",
                "score": 0.6824626922607422,
                "sortText": "40d14a20ATOMIC_LONG_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_LONG_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 9
                        },
                        "start": {
                            "character": 12,
                            "line": 9
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['x', 'main', 'std', 'cout', 'size_t', '_Nonnull', '_Null_unspecified', '_Nullable', '__FUNCTION__', '__PRETTY_FUNCTION__', '__func__', 'alignof', 'auto', 'bool', 'char', 'char16_t', 'char32_t', 'class', 'const', 'const_cast', 'decltype', 'delete', 'delete', 'double', 'dynamic_cast', 'enum', 'false', 'float', 'int', 'long', 'new', 'new', 'noexcept', 'nullptr', 'operator', 'reinterpret_cast', 'short', 'signed', 'sizeof', 'sizeof...', 'static_cast', 'struct', 'throw', 'true', 'typeid', 'typename', 'union', 'unsigned', 'void', 'volatile', 'wchar_t', 'atomic', 'atomic_bool', 'atomic_char', 'atomic_char32_t', 'atomic_flag', 'atomic_int', 'atomic_int16_t', 'atomic_int32_t', 'atomic_int64_t', 'atomic_int8_t', 'atomic_int_fast16_t', 'atomic_int_fast32_t', 'atomic_int_fast64_t', 'atomic_int_fast8_t', 'atomic_int_least16_t', 'atomic_int_least32_t', 'atomic_int_least64_t', 'atomic_int_least8_t', 'atomic_intmax_t', 'atomic_intptr_t', 'atomic_llong', 'atomic_ptrdiff_t', 'atomic_schar', 'atomic_short', 'atomic_size_t', 'atomic_uchar', 'atomic_uint', 'atomic_uint32_t', 'atomic_uint64_t', 'atomic_uint_fast16_t', 'atomic_uint_fast64_t', 'atomic_uint_fast8_t', 'atomic_uint_least16_t', 'atomic_uint_least32_t', 'atomic_uint_least8_t', 'atomic_uintmax_t', 'atomic_uintptr_t', 'atomic_ulong', 'atomic_ushort', 'atomic_wchar_t', '_iobuf', 'basic_ostream', 'type_info', 'ATOMIC_CHAR32_T_LOCK_FREE', 'ATOMIC_CHAR_LOCK_FREE', 'ATOMIC_FLAG_INIT', 'ATOMIC_INT_LOCK_FREE', 'ATOMIC_LLONG_LOCK_FREE', 'ATOMIC_LONG_LOCK_FREE']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_expression",
                "message": "Expected expression",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 10
                    },
                    "start": {
                        "character": 0,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header vector is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpb6dtbp3o.cpp",
        "version": 30
    }
}
Diagnostics received from LSP.
Errors received: [[10, [0, 1]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 10
                    },
                    "start": {
                        "character": 0,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header vector is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpb6dtbp3o.cpp",
        "version": 31
    }
}
Diagnostics received from LSP.
Errors received: [[10, [0, 1]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header vector is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpb6dtbp3o.cpp",
        "version": 33
    }
}
Diagnostics received from LSP.
Errors received: []
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": null
}
Received hover response.
Hover response does not contain 'contents'.
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 10
                    },
                    "start": {
                        "character": 0,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "-Wunused-value",
                "message": "Expression result unused",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 9
                    },
                    "start": {
                        "character": 14,
                        "line": 9
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header vector is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpb6dtbp3o.cpp",
        "version": 34
    }
}
Diagnostics received from LSP.
Errors received: [[10, [0, 1]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "detail": "int",
                "filterText": "x",
                "insertText": "x",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " x",
                "score": 2.948925256729126,
                "sortText": "3fc344cfx",
                "textEdit": {
                    "newText": "x",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.5999544858932495,
                "sortText": "403334b1std",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "main",
                "insertText": "main",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " main()",
                "score": 1.0087924003601074,
                "sortText": "407edfe4main",
                "textEdit": {
                    "newText": "main",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 0.9800145626068115,
                "sortText": "40851dc4size_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR32_T_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_CHAR32_T_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR32_T_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR_LOCK_FREE",
                "insertText": "ATOMIC_CHAR_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_CHAR_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_FLAG_INIT",
                "insertText": "ATOMIC_FLAG_INIT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_FLAG_INIT",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_FLAG_INIT",
                "textEdit": {
                    "newText": "ATOMIC_FLAG_INIT",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_INT_LOCK_FREE",
                "insertText": "ATOMIC_INT_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_INT_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_INT_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_INT_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_LLONG_LOCK_FREE",
                "insertText": "ATOMIC_LLONG_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_LLONG_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_LLONG_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_LLONG_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_LONG_LOCK_FREE",
                "insertText": "ATOMIC_LONG_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_LONG_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_LONG_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_LONG_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_SHORT_LOCK_FREE",
                "insertText": "ATOMIC_SHORT_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_SHORT_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_SHORT_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_SHORT_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_VAR_INIT",
                "insertText": "ATOMIC_VAR_INIT",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ATOMIC_VAR_INIT(_Value)",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_VAR_INIT",
                "textEdit": {
                    "newText": "ATOMIC_VAR_INIT",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_WCHAR_T_LOCK_FREE",
                "insertText": "ATOMIC_WCHAR_T_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_WCHAR_T_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_WCHAR_T_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_WCHAR_T_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "__FUNCTION__",
                "insertText": "__FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __FUNCTION__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__FUNCTION__",
                "textEdit": {
                    "newText": "__FUNCTION__",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "__PRETTY_FUNCTION__",
                "insertText": "__PRETTY_FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __PRETTY_FUNCTION__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__PRETTY_FUNCTION__",
                "textEdit": {
                    "newText": "__PRETTY_FUNCTION__",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "__func__",
                "insertText": "__func__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __func__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__func__",
                "textEdit": {
                    "newText": "__func__",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "alignas",
                "insertText": "alignas",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignas(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8alignas",
                "textEdit": {
                    "newText": "alignas",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "alignof",
                "insertText": "alignof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignof(type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8alignof",
                "textEdit": {
                    "newText": "alignof",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8constexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete [] expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "dynamic_cast",
                "insertText": "dynamic_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " dynamic_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8dynamic_cast",
                "textEdit": {
                    "newText": "dynamic_cast",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "extern",
                "insertText": "extern",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " extern",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8extern",
                "textEdit": {
                    "newText": "extern",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "false",
                "insertText": "false",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " false",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8false",
                "textEdit": {
                    "newText": "false",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "goto",
                "insertText": "goto",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " goto label;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8goto",
                "textEdit": {
                    "newText": "goto",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type(expressions)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type[size](expressions)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "noexcept",
                "insertText": "noexcept",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " noexcept(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8noexcept",
                "textEdit": {
                    "newText": "noexcept",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "std::nullptr_t",
                "filterText": "nullptr",
                "insertText": "nullptr",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " nullptr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8nullptr",
                "textEdit": {
                    "newText": "nullptr",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "reinterpret_cast",
                "insertText": "reinterpret_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " reinterpret_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8reinterpret_cast",
                "textEdit": {
                    "newText": "reinterpret_cast",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "return",
                "insertText": "return",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " return expression;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8return",
                "textEdit": {
                    "newText": "return",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof",
                "insertText": "sizeof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof(expression-or-type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8sizeof",
                "textEdit": {
                    "newText": "sizeof",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof...",
                "insertText": "sizeof...",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof...(parameter-pack)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8sizeof...",
                "textEdit": {
                    "newText": "sizeof...",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "static",
                "insertText": "static",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " static",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static",
                "textEdit": {
                    "newText": "static",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "static_assert",
                "insertText": "static_assert",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_assert(expression, message);",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static_assert",
                "textEdit": {
                    "newText": "static_assert",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "static_cast",
                "insertText": "static_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static_cast",
                "textEdit": {
                    "newText": "static_cast",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "thread_local",
                "insertText": "thread_local",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " thread_local",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8thread_local",
                "textEdit": {
                    "newText": "thread_local",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "throw",
                "insertText": "throw",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " throw expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8throw",
                "textEdit": {
                    "newText": "throw",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "true",
                "insertText": "true",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " true",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8true",
                "textEdit": {
                    "newText": "true",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "typedef",
                "insertText": "typedef",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typedef type name;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typedef",
                "textEdit": {
                    "newText": "typedef",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "std::type_info",
                "filterText": "typeid",
                "insertText": "typeid",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typeid(expression-or-type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typeid",
                "textEdit": {
                    "newText": "typeid",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using name = type;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8using",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "using namespace",
                "insertText": "using namespace",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using namespace identifier;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8using namespace",
                "textEdit": {
                    "newText": "using namespace",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic",
                "insertText": "atomic",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022atomic<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic",
                "textEdit": {
                    "newText": "atomic",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_bool",
                "insertText": "atomic_bool",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_bool",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_bool",
                "textEdit": {
                    "newText": "atomic_bool",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_char",
                "insertText": "atomic_char",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_char",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_char",
                "textEdit": {
                    "newText": "atomic_char",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_char32_t",
                "insertText": "atomic_char32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_char32_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_char32_t",
                "textEdit": {
                    "newText": "atomic_char32_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag",
                "insertText": "atomic_flag",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022atomic_flag",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_flag",
                "textEdit": {
                    "newText": "atomic_flag",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int",
                "insertText": "atomic_int",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int",
                "textEdit": {
                    "newText": "atomic_int",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int16_t",
                "insertText": "atomic_int16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int16_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int16_t",
                "textEdit": {
                    "newText": "atomic_int16_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int32_t",
                "insertText": "atomic_int32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int32_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int32_t",
                "textEdit": {
                    "newText": "atomic_int32_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int64_t",
                "insertText": "atomic_int64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int64_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int64_t",
                "textEdit": {
                    "newText": "atomic_int64_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int8_t",
                "insertText": "atomic_int8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int8_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int8_t",
                "textEdit": {
                    "newText": "atomic_int8_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast16_t",
                "insertText": "atomic_int_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast16_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int_fast16_t",
                "textEdit": {
                    "newText": "atomic_int_fast16_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast32_t",
                "insertText": "atomic_int_fast32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast32_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int_fast32_t",
                "textEdit": {
                    "newText": "atomic_int_fast32_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast64_t",
                "insertText": "atomic_int_fast64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast64_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int_fast64_t",
                "textEdit": {
                    "newText": "atomic_int_fast64_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast8_t",
                "insertText": "atomic_int_fast8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast8_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int_fast8_t",
                "textEdit": {
                    "newText": "atomic_int_fast8_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least16_t",
                "insertText": "atomic_int_least16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least16_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int_least16_t",
                "textEdit": {
                    "newText": "atomic_int_least16_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least32_t",
                "insertText": "atomic_int_least32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least32_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int_least32_t",
                "textEdit": {
                    "newText": "atomic_int_least32_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least64_t",
                "insertText": "atomic_int_least64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least64_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int_least64_t",
                "textEdit": {
                    "newText": "atomic_int_least64_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least8_t",
                "insertText": "atomic_int_least8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least8_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int_least8_t",
                "textEdit": {
                    "newText": "atomic_int_least8_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_intmax_t",
                "insertText": "atomic_intmax_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_intmax_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_intmax_t",
                "textEdit": {
                    "newText": "atomic_intmax_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_intptr_t",
                "insertText": "atomic_intptr_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_intptr_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_intptr_t",
                "textEdit": {
                    "newText": "atomic_intptr_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_llong",
                "insertText": "atomic_llong",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_llong",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_llong",
                "textEdit": {
                    "newText": "atomic_llong",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ptrdiff_t",
                "insertText": "atomic_ptrdiff_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ptrdiff_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_ptrdiff_t",
                "textEdit": {
                    "newText": "atomic_ptrdiff_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_schar",
                "insertText": "atomic_schar",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_schar",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_schar",
                "textEdit": {
                    "newText": "atomic_schar",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_short",
                "insertText": "atomic_short",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_short",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_short",
                "textEdit": {
                    "newText": "atomic_short",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_size_t",
                "insertText": "atomic_size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_size_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_size_t",
                "textEdit": {
                    "newText": "atomic_size_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uchar",
                "insertText": "atomic_uchar",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uchar",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_uchar",
                "textEdit": {
                    "newText": "atomic_uchar",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint",
                "insertText": "atomic_uint",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_uint",
                "textEdit": {
                    "newText": "atomic_uint",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint32_t",
                "insertText": "atomic_uint32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint32_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_uint32_t",
                "textEdit": {
                    "newText": "atomic_uint32_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint64_t",
                "insertText": "atomic_uint64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint64_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_uint64_t",
                "textEdit": {
                    "newText": "atomic_uint64_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast16_t",
                "insertText": "atomic_uint_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast16_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_uint_fast16_t",
                "textEdit": {
                    "newText": "atomic_uint_fast16_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['x', 'std', 'main', 'size_t', 'ATOMIC_CHAR32_T_LOCK_FREE', 'ATOMIC_CHAR_LOCK_FREE', 'ATOMIC_FLAG_INIT', 'ATOMIC_INT_LOCK_FREE', 'ATOMIC_LLONG_LOCK_FREE', 'ATOMIC_LONG_LOCK_FREE', 'ATOMIC_SHORT_LOCK_FREE', 'ATOMIC_VAR_INIT', 'ATOMIC_WCHAR_T_LOCK_FREE', '_Nonnull', '_Null_unspecified', '_Nullable', '__FUNCTION__', '__PRETTY_FUNCTION__', '__func__', 'alignas', 'alignof', 'auto', 'bool', 'char', 'char16_t', 'char32_t', 'class', 'const', 'const_cast', 'constexpr', 'decltype', 'delete', 'delete', 'double', 'dynamic_cast', 'enum', 'extern', 'false', 'float', 'goto', 'int', 'long', 'new', 'new', 'noexcept', 'nullptr', 'operator', 'reinterpret_cast', 'return', 'short', 'signed', 'sizeof', 'sizeof...', 'static', 'static_assert', 'static_cast', 'struct', 'thread_local', 'throw', 'true', 'typedef', 'typeid', 'typename', 'union', 'unsigned', 'using', 'using namespace', 'void', 'volatile', 'wchar_t', 'atomic', 'atomic_bool', 'atomic_char', 'atomic_char32_t', 'atomic_flag', 'atomic_int', 'atomic_int16_t', 'atomic_int32_t', 'atomic_int64_t', 'atomic_int8_t', 'atomic_int_fast16_t', 'atomic_int_fast32_t', 'atomic_int_fast64_t', 'atomic_int_fast8_t', 'atomic_int_least16_t', 'atomic_int_least32_t', 'atomic_int_least64_t', 'atomic_int_least8_t', 'atomic_intmax_t', 'atomic_intptr_t', 'atomic_llong', 'atomic_ptrdiff_t', 'atomic_schar', 'atomic_short', 'atomic_size_t', 'atomic_uchar', 'atomic_uint', 'atomic_uint32_t', 'atomic_uint64_t', 'atomic_uint_fast16_t']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 11
                    },
                    "start": {
                        "character": 0,
                        "line": 11
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "-Wunused-value",
                "message": "Expression result unused",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 10
                    },
                    "start": {
                        "character": 14,
                        "line": 10
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header vector is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpb6dtbp3o.cpp",
        "version": 35
    }
}
Diagnostics received from LSP.
Errors received: [[11, [0, 1]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "filterText": "chrono_literals",
                "insertText": "chrono_literals",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " chrono_literals",
                "score": 1.384774923324585,
                "sortText": "404ebfb2chrono_literals",
                "textEdit": {
                    "newText": "chrono_literals",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "complex_literals",
                "insertText": "complex_literals",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " complex_literals",
                "score": 1.384774923324585,
                "sortText": "404ebfb2complex_literals",
                "textEdit": {
                    "newText": "complex_literals",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "concurrency",
                "insertText": "concurrency",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " concurrency",
                "score": 1.227129578590393,
                "sortText": "4062ed6bconcurrency",
                "textEdit": {
                    "newText": "concurrency",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <climits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <climits>"
                },
                "filterText": "CHAR_BIT",
                "insertText": "CHAR_BIT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022CHAR_BIT",
                "score": 0.8436345458030701,
                "sortText": "40a80791CHAR_BIT",
                "textEdit": {
                    "newText": "CHAR_BIT",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <climits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <climits>"
                },
                "filterText": "CHAR_MAX",
                "insertText": "CHAR_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022CHAR_MAX",
                "score": 0.8436345458030701,
                "sortText": "40a80791CHAR_MAX",
                "textEdit": {
                    "newText": "CHAR_MAX",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <climits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <climits>"
                },
                "filterText": "CHAR_MIN",
                "insertText": "CHAR_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022CHAR_MIN",
                "score": 0.8436345458030701,
                "sortText": "40a80791CHAR_MIN",
                "textEdit": {
                    "newText": "CHAR_MIN",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <time.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <time.h>"
                },
                "filterText": "CLK_TCK",
                "insertText": "CLK_TCK",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022CLK_TCK",
                "score": 0.8436345458030701,
                "sortText": "40a80791CLK_TCK",
                "textEdit": {
                    "newText": "CLK_TCK",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "CLOCKS_PER_SEC",
                "insertText": "CLOCKS_PER_SEC",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022CLOCKS_PER_SEC",
                "score": 0.8436345458030701,
                "sortText": "40a80791CLOCKS_PER_SEC",
                "textEdit": {
                    "newText": "CLOCKS_PER_SEC",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "CW_DEFAULT",
                "insertText": "CW_DEFAULT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022CW_DEFAULT",
                "score": 0.8436345458030701,
                "sortText": "40a80791CW_DEFAULT",
                "textEdit": {
                    "newText": "CW_DEFAULT",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "clear87",
                "insertText": "clear87",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022clear87",
                "score": 0.8436345458030701,
                "sortText": "40a80791clear87",
                "textEdit": {
                    "newText": "clear87",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "control87",
                "insertText": "control87",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022control87",
                "score": 0.8436345458030701,
                "sortText": "40a80791control87",
                "textEdit": {
                    "newText": "control87",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8constexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "cauchy_distribution",
                "insertText": "cauchy_distribution",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022cauchy_distribution<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3cauchy_distribution",
                "textEdit": {
                    "newText": "cauchy_distribution",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "chi_squared_distribution",
                "insertText": "chi_squared_distribution",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022chi_squared_distribution<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3chi_squared_distribution",
                "textEdit": {
                    "newText": "chi_squared_distribution",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_mode",
                "insertText": "codecvt_mode",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022codecvt_mode",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_mode",
                "textEdit": {
                    "newText": "codecvt_mode",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf16",
                "insertText": "codecvt_utf16",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf16<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_utf16",
                "textEdit": {
                    "newText": "codecvt_utf16",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf8",
                "insertText": "codecvt_utf8",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf8<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_utf8",
                "textEdit": {
                    "newText": "codecvt_utf8",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "codecvt_utf8_utf16",
                "insertText": "codecvt_utf8_utf16",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022codecvt_utf8_utf16<class Elem, unsigned long Mymax, codecvt_mode Mymode>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3codecvt_utf8_utf16",
                "textEdit": {
                    "newText": "codecvt_utf8_utf16",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "common_type",
                "insertText": "common_type",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022common_type<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3common_type",
                "textEdit": {
                    "newText": "common_type",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "complex",
                "insertText": "complex",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022complex<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3complex",
                "textEdit": {
                    "newText": "complex",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable",
                "insertText": "condition_variable",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable",
                "score": 0.8070572018623352,
                "sortText": "40b164b3condition_variable",
                "textEdit": {
                    "newText": "condition_variable",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "condition_variable_any",
                "insertText": "condition_variable_any",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022condition_variable_any",
                "score": 0.8070572018623352,
                "sortText": "40b164b3condition_variable_any",
                "textEdit": {
                    "newText": "condition_variable_any",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "conjunction",
                "insertText": "conjunction",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022conjunction<class Traits>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3conjunction",
                "textEdit": {
                    "newText": "conjunction",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <condition_variable>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <condition_variable>"
                },
                "filterText": "cv_status",
                "insertText": "cv_status",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022cv_status",
                "score": 0.8070572018623352,
                "sortText": "40b164b3cv_status",
                "textEdit": {
                    "newText": "cv_status",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "CancellationTokenRegistration_TaskProc",
                "insertText": "Concurrency::details::CancellationTokenRegistration_TaskProc",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::details::CancellationTokenRegistration_TaskProc",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fCancellationTokenRegistration_TaskProc",
                "textEdit": {
                    "newText": "Concurrency::details::CancellationTokenRegistration_TaskProc",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token</c> class represents the ability to determine whether some operation has been requested to cancel. A given token can be associated with a <c>task_group</c>, <c>structured_task_group</c>, or <c>task</c> to provide implicit cancellation. It can also be polled for cancellation or have a callback registered for if and when the associated <c>cancellation_token_source</c> is canceled.\n</summary>"
                },
                "filterText": "cancellation_token",
                "insertText": "Concurrency::cancellation_token",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token_registration</c> class represents a callback notification from a <c>cancellation_token</c>. When the <c>register</c> method on a <c>cancellation_token</c> is used to receive notification of when cancellation occurs, a <c>cancellation_token_registration</c> object is returned as a handle to the callback so that the caller can request a specific callback no longer be made through use of the <c>deregister</c> method.\n</summary>"
                },
                "filterText": "cancellation_token_registration",
                "insertText": "Concurrency::cancellation_token_registration",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token_registration",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token_registration",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token_registration",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "<summary> The <c>cancellation_token_source</c> class represents the ability to cancel some cancelable operation.\n</summary>"
                },
                "filterText": "cancellation_token_source",
                "insertText": "Concurrency::cancellation_token_source",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Concurrency::cancellation_token_source",
                "score": 0.6378918290138245,
                "sortText": "40dcb31fcancellation_token_source",
                "textEdit": {
                    "newText": "Concurrency::cancellation_token_source",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <exception>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "exception_ptr",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <exception>"
                },
                "filterText": "current_exception",
                "insertText": "current_exception",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022current_exception()",
                "score": 0.5893728137016296,
                "sortText": "40e91eddcurrent_exception",
                "textEdit": {
                    "newText": "current_exception",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::begin(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "cbegin",
                "insertText": "cbegin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbegin(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cbegin",
                "textEdit": {
                    "newText": "cbegin",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::end(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "cend",
                "insertText": "cend",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cend(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cend",
                "textEdit": {
                    "newText": "cend",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<_Upgrade_to_double<Ty>>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "conj",
                "insertText": "conj",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022conj(Ty Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464conj",
                "textEdit": {
                    "newText": "conj",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "conj",
                "insertText": "conj",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022conj(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464conj",
                "textEdit": {
                    "newText": "conj",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty1>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022const_pointer_cast<class Ty1>(shared_ptr<Ty2> &&Other)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464const_pointer_cast",
                "textEdit": {
                    "newText": "const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty1>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022const_pointer_cast<class Ty1>(const shared_ptr<Ty2> &Other)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464const_pointer_cast",
                "textEdit": {
                    "newText": "const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy",
                "insertText": "copy",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy(InIt First, InIt Last, OutIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy",
                "textEdit": {
                    "newText": "copy",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "BidIt2",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_backward",
                "insertText": "copy_backward",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_backward(BidIt1 First, BidIt1 Last, BidIt2 Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_backward",
                "textEdit": {
                    "newText": "copy_backward",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_n",
                "insertText": "copy_n",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_n(InIt First, Diff Count_raw, OutIt Dest)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464copy_n",
                "textEdit": {
                    "newText": "copy_n",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(const valarray<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(const valarray<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464cosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count",
                "insertText": "count",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count(const InIt First, const InIt Last, const Ty &Val)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464count",
                "textEdit": {
                    "newText": "count",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::rbegin(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "crbegin",
                "insertText": "crbegin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022crbegin(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464crbegin",
                "textEdit": {
                    "newText": "crbegin",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(::std::rend(Cont))",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "crend",
                "insertText": "crend",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022crend(const Container &Cont)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464crend",
                "textEdit": {
                    "newText": "crend",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\nTypes\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
                },
                "filterText": "clock_t",
                "insertText": "clock_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022clock_t",
                "score": 0.5684974789619446,
                "sortText": "40ee76f3clock_t",
                "textEdit": {
                    "newText": "clock_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "checked_array_iterator",
                "insertText": "stdext::checked_array_iterator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022stdext::checked_array_iterator<class Ptr>",
                "score": 0.5384255647659302,
                "sortText": "40f629bechecked_array_iterator",
                "textEdit": {
                    "newText": "stdext::checked_array_iterator",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "::std::_Common_float_type_t<Ty1, Ty2>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nremquo() is hand-crafted"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(Ty1 Left, Ty2 Right)",
                "score": 0.5297134518623352,
                "sortText": "40f864b3copysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplwin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplwin.h>"
                },
                "filterText": "CaptureCallstack",
                "insertText": "Concurrency::details::platform::CaptureCallstack",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::details::platform::CaptureCallstack(void **, size_t, size_t)",
                "score": 0.5271684527397156,
                "sortText": "40f90b7dCaptureCallstack",
                "textEdit": {
                    "newText": "Concurrency::details::platform::CaptureCallstack",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> Cancels the currently executing task. This function can be called from within the body of a task to abort the task's execution and cause it to enter the <c>canceled</c> state. While it may be used in response to a cancellation request through a <c>cancellation_token</c>, you may also use it by itself, to initiate cancellation of the task that is currently executing.\n<para>It is not a supported scenario to call this function if you are not within the body of a <c>task</c>.\nDoing so will result in undefined behavior such as a crash or a hang in your application.</para> </summary> <seealso cref=\"task Class\"/>"
                },
                "filterText": "cancel_current_task",
                "insertText": "Concurrency::cancel_current_task",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::cancel_current_task()",
                "score": 0.5271684527397156,
                "sortText": "40f90b7dcancel_current_task",
                "textEdit": {
                    "newText": "Concurrency::cancel_current_task",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbrt(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbrt(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nNo modf(), types must match"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cbrt(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ceil(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\n3-arg hypot() is hand-crafted"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ceil(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ceil(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(long double Number, long double Sign)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcopysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copysign(float Number, float Sign)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcopysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nThe following order matches N4950 [cmath.syn]."
                },
                "filterText": "cos",
                "insertText": "cos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cos(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcos",
                "textEdit": {
                    "newText": "cos",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nThe following order matches N4950 [cmath.syn]."
                },
                "filterText": "cosh",
                "insertText": "cosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022cosh(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93bcosh",
                "textEdit": {
                    "newText": "cosh",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "task<typename details::_TaskTypeFromParam<Ty>::_Type>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> Creates a PPL <see cref=\"task Class\">task</see> object. <c>create_task</c> can be used anywhere you would have used a task constructor.\nIt is provided mainly for convenience, because it allows use of the <c>auto</c> keyword while creating tasks.\n</summary> <typeparam name=\"_Ty\"> The type of the parameter from which the task is to be constructed.\n</typeparam> <param name=\"_Param\"> The parameter from which the task is to be constructed. This could be a lambda or function object, a <c>task_completion_event</c> object, a different <c>task</c> object, or a Windows::Foundation::IAsyncInfo interface if you are using tasks in your Windows Store app.\n</param> <returns> A new task of type <c>T</c>, that is inferred from <paramref name=\"_Param\"/>.\n</returns> <remarks> The first overload behaves like a task constructor that takes a single parameter.\n<para>The second overload associates the cancellation token provided with the newly created task. If you use this overload you are not allowed to pass in a different <c>task</c> object as the first parameter.</para> <para>The type of the returned task is inferred from the first parameter to the function. If <paramref name=\"_Param\"/> is a <c>task_completion_event&lt;T&gt;</c>,\na <c>task&lt;T&gt;</c>, or a functor that returns either type <c>T</c> or <c>task&lt;T&gt;</c>, the type of the created task is <c>task&lt;T&gt;</c>.</para> <para>In a Windows Store app, if <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncOperation&lt;T&gt;^ or Windows::Foundation::IAsyncOperationWithProgress&lt;T,P&gt;^, or a functor that returns either of those types, the created task will be of type <c>task&lt;T&gt;</c>.\nIf <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncAction^ or Windows::Foundation::IAsyncActionWithProgress&lt;P&gt;^, or a functor that returns either of those types, the created task will have type <c>task&lt;void&gt;</c>.</para> </remarks> <seealso cref=\"task Class\"/> <seealso cref=\"Task Parallelism (Concurrency Runtime)\"/>"
                },
                "filterText": "create_task",
                "insertText": "Concurrency::create_task",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::create_task(Ty Param, task_options TaskOptions = task_options())",
                "score": 0.5095226764678955,
                "sortText": "40fd8feccreate_task",
                "textEdit": {
                    "newText": "Concurrency::create_task",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ppltasks.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "task<ReturnType>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ppltasks.h>\n<summary> Creates a PPL <see cref=\"task Class\">task</see> object. <c>create_task</c> can be used anywhere you would have used a task constructor.\nIt is provided mainly for convenience, because it allows use of the <c>auto</c> keyword while creating tasks.\n</summary> <typeparam name=\"_Ty\"> The type of the parameter from which the task is to be constructed.\n</typeparam> <param name=\"_Param\"> The parameter from which the task is to be constructed. This could be a lambda or function object, a <c>task_completion_event</c> object, a different <c>task</c> object, or a Windows::Foundation::IAsyncInfo interface if you are using tasks in your Windows Store app.\n</param> <param name=\"_Token\"> The cancellation token to associate with the task. When the source for this token is canceled, cancellation will be requested on the task.\n</param> <returns> A new task of type <c>T</c>, that is inferred from <paramref name=\"_Param\"/>.\n</returns> <remarks> The first overload behaves like a task constructor that takes a single parameter.\n<para>The second overload associates the cancellation token provided with the newly created task. If you use this overload you are not allowed to pass in a different <c>task</c> object as the first parameter.</para> <para>The type of the returned task is inferred from the first parameter to the function. If <paramref name=\"_Param\"/> is a <c>task_completion_event&lt;T&gt;</c>,\na <c>task&lt;T&gt;</c>, or a functor that returns either type <c>T</c> or <c>task&lt;T&gt;</c>, the type of the created task is <c>task&lt;T&gt;</c>.</para> <para>In a Windows Store app, if <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncOperation&lt;T&gt;^ or Windows::Foundation::IAsyncOperationWithProgress&lt;T,P&gt;^, or a functor that returns either of those types, the created task will be of type <c>task&lt;T&gt;</c>.\nIf <paramref name=\"_Param\"/> is of type Windows::Foundation::IAsyncAction^ or Windows::Foundation::IAsyncActionWithProgress&lt;P&gt;^, or a functor that returns either of those types, the created task will have type <c>task&lt;void&gt;</c>.</para> </remarks> <seealso cref=\"task Class\"/> <seealso cref=\"Task Parallelism (Concurrency Runtime)\"/>"
                },
                "filterText": "create_task",
                "insertText": "Concurrency::create_task",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::create_task(const task<ReturnType> &Task)",
                "score": 0.5095226764678955,
                "sortText": "40fd8feccreate_task",
                "textEdit": {
                    "newText": "Concurrency::create_task",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "calloc",
                "insertText": "calloc",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022calloc(size_t Count, size_t Size)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbcalloc",
                "textEdit": {
                    "newText": "calloc",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "clearerr",
                "insertText": "clearerr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022clearerr(FILE *Stream)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbclearerr",
                "textEdit": {
                    "newText": "clearerr",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdio.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdio.h>"
                },
                "filterText": "clearerr_s",
                "insertText": "clearerr_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022clearerr_s(FILE *Stream)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbclearerr_s",
                "textEdit": {
                    "newText": "clearerr_s",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "clock_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "clock",
                "insertText": "clock",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022clock()",
                "score": 0.4419805109500885,
                "sortText": "411db4bbclock",
                "textEdit": {
                    "newText": "clock",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <time.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <time.h>"
                },
                "filterText": "ctime_s",
                "insertText": "ctime_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ctime_s(char *const Buffer, const size_t SizeInBytes, const time_t *const Time)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbctime_s",
                "textEdit": {
                    "newText": "ctime_s",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "conjunction_v",
                "insertText": "conjunction_v",
                "insertTextFormat": 1,
                "kind": 6,
                "label": "\u2022conjunction_v<class Traits>",
                "score": 0.37649863958358765,
                "sortText": "413f3b92conjunction_v",
                "textEdit": {
                    "newText": "conjunction_v",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <codecvt>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "std::codecvt_mode",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <codecvt>"
                },
                "filterText": "consume_header",
                "insertText": "consume_header",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022consume_header",
                "score": 0.37649863958358765,
                "sortText": "413f3b92consume_header",
                "textEdit": {
                    "newText": "consume_header",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "ctime",
                "insertText": "ctime",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ctime(const time_t *const Time)",
                "score": 0.3469603955745697,
                "sortText": "414e5b35ctime",
                "textEdit": {
                    "newText": "ctime",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNABORTED"
                },
                "filterText": "connection_aborted",
                "insertText": "errc::connection_aborted",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_aborted",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_aborted",
                "textEdit": {
                    "newText": "errc::connection_aborted",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEALREADY"
                },
                "filterText": "connection_already_in_progress",
                "insertText": "errc::connection_already_in_progress",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_already_in_progress",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_already_in_progress",
                "textEdit": {
                    "newText": "errc::connection_already_in_progress",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNREFUSED"
                },
                "filterText": "connection_refused",
                "insertText": "errc::connection_refused",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_refused",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_refused",
                "textEdit": {
                    "newText": "errc::connection_refused",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nECONNRESET"
                },
                "filterText": "connection_reset",
                "insertText": "errc::connection_reset",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::connection_reset",
                "score": 0.3138078451156616,
                "sortText": "415f5494connection_reset",
                "textEdit": {
                    "newText": "errc::connection_reset",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEXDEV"
                },
                "filterText": "cross_device_link",
                "insertText": "errc::cross_device_link",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::cross_device_link",
                "score": 0.3138078451156616,
                "sortText": "415f5494cross_device_link",
                "textEdit": {
                    "newText": "errc::cross_device_link",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "cauchy_distribution",
                "insertText": "tr1::cauchy_distribution",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::cauchy_distribution",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8cauchy_distribution",
                "textEdit": {
                    "newText": "tr1::cauchy_distribution",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "chi_squared_distribution",
                "insertText": "tr1::chi_squared_distribution",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::chi_squared_distribution",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8chi_squared_distribution",
                "textEdit": {
                    "newText": "tr1::chi_squared_distribution",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "const_pointer_cast",
                "insertText": "tr1::const_pointer_cast",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::const_pointer_cast",
                "score": 0.2698061466217041,
                "sortText": "4175dbf8const_pointer_cast",
                "textEdit": {
                    "newText": "tr1::const_pointer_cast",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "calloc",
                "insertText": "calloc",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022calloc",
                "score": 0.25286611914634705,
                "sortText": "417e8855calloc",
                "textEdit": {
                    "newText": "calloc",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrt",
                "insertText": "cbrt",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cbrt",
                "score": 0.25286611914634705,
                "sortText": "417e8855cbrt",
                "textEdit": {
                    "newText": "cbrt",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrtf",
                "insertText": "cbrtf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cbrtf",
                "score": 0.25286611914634705,
                "sortText": "417e8855cbrtf",
                "textEdit": {
                    "newText": "cbrtf",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "cbrtl",
                "insertText": "cbrtl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022cbrtl",
                "score": 0.25286611914634705,
                "sortText": "417e8855cbrtl",
                "textEdit": {
                    "newText": "cbrtl",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceil",
                "insertText": "ceil",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022ceil",
                "score": 0.25286611914634705,
                "sortText": "417e8855ceil",
                "textEdit": {
                    "newText": "ceil",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceilf",
                "insertText": "ceilf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022ceilf",
                "score": 0.25286611914634705,
                "sortText": "417e8855ceilf",
                "textEdit": {
                    "newText": "ceilf",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "ceill",
                "insertText": "ceill",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022ceill",
                "score": 0.25286611914634705,
                "sortText": "417e8855ceill",
                "textEdit": {
                    "newText": "ceill",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "clock",
                "insertText": "clock",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022clock",
                "score": 0.25286611914634705,
                "sortText": "417e8855clock",
                "textEdit": {
                    "newText": "clock",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "clock_t",
                "insertText": "clock_t",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022clock_t",
                "score": 0.25286611914634705,
                "sortText": "417e8855clock_t",
                "textEdit": {
                    "newText": "clock_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysign",
                "insertText": "copysign",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022copysign",
                "score": 0.25286611914634705,
                "sortText": "417e8855copysign",
                "textEdit": {
                    "newText": "copysign",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysignf",
                "insertText": "copysignf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022copysignf",
                "score": 0.25286611914634705,
                "sortText": "417e8855copysignf",
                "textEdit": {
                    "newText": "copysignf",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "copysignl",
                "insertText": "copysignl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022copysignl",
                "score": 0.25286611914634705,
                "sortText": "417e8855copysignl",
                "textEdit": {
                    "newText": "copysignl",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['chrono_literals', 'complex_literals', 'concurrency', 'CHAR_BIT', 'CHAR_MAX', 'CHAR_MIN', 'CLK_TCK', 'CLOCKS_PER_SEC', 'CW_DEFAULT', 'clear87', 'control87', 'char', 'char16_t', 'char32_t', 'class', 'const', 'const_cast', 'constexpr', 'cauchy_distribution', 'chi_squared_distribution', 'codecvt_mode', 'codecvt_utf16', 'codecvt_utf8', 'codecvt_utf8_utf16', 'common_type', 'complex', 'condition_variable', 'condition_variable_any', 'conjunction', 'cv_status', 'Concurrency::details::CancellationTokenRegistration_TaskProc', 'Concurrency::cancellation_token', 'Concurrency::cancellation_token_registration', 'Concurrency::cancellation_token_source', 'current_exception', 'cbegin', 'cend', 'conj', 'conj', 'const_pointer_cast', 'const_pointer_cast', 'copy', 'copy_backward', 'copy_n', 'cos', 'cos', 'cosh', 'cosh', 'count', 'crbegin', 'crend', 'clock_t', 'stdext::checked_array_iterator', 'copysign', 'Concurrency::details::platform::CaptureCallstack', 'Concurrency::cancel_current_task', 'cbrt', 'cbrt', 'cbrt', 'ceil', 'ceil', 'ceil', 'copysign', 'copysign', 'cos', 'cos', 'cos', 'cosh', 'cosh', 'cosh', 'Concurrency::create_task', 'Concurrency::create_task', 'calloc', 'clearerr', 'clearerr_s', 'clock', 'ctime_s', 'conjunction_v', 'consume_header', 'ctime', 'errc::connection_aborted', 'errc::connection_already_in_progress', 'errc::connection_refused', 'errc::connection_reset', 'errc::cross_device_link', 'tr1::cauchy_distribution', 'tr1::chi_squared_distribution', 'tr1::const_pointer_cast', 'calloc', 'cbrt', 'cbrtf', 'cbrtl', 'ceil', 'ceilf', 'ceill', 'clock', 'clock_t', 'copysign', 'copysignf', 'copysignl']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'c'",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 9
                    },
                    "start": {
                        "character": 0,
                        "line": 9
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_semi_declaration",
                "message": "Expected ';' at end of declaration (fix available)",
                "range": {
                    "end": {
                        "character": 12,
                        "line": 10
                    },
                    "start": {
                        "character": 10,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 11
                    },
                    "start": {
                        "character": 0,
                        "line": 11
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "-Wunused-value",
                "message": "Expression result unused",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 10
                    },
                    "start": {
                        "character": 14,
                        "line": 10
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header vector is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpb6dtbp3o.cpp",
        "version": 36
    }
}
Diagnostics received from LSP.
Errors received: [[9, [0, 1]], [10, [10, 12]], [11, [0, 1]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "cregex_iterator",
                "insertText": "cregex_iterator",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022cregex_iterator",
                "score": 0.8070572018623352,
                "sortText": "40e50b86cregex_iterator",
                "textEdit": {
                    "newText": "cregex_iterator",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "istream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cin",
                "insertText": "cin",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cin",
                "score": 0.45782190561294556,
                "sortText": "4115985ecin",
                "textEdit": {
                    "newText": "cin",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "copy_if",
                "insertText": "copy_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022copy_if(InIt First, InIt Last, OutIt Dest, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "41232696copy_if",
                "textEdit": {
                    "newText": "copy_if",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Iter_diff_t<InIt>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "count_if",
                "insertText": "count_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022count_if(InIt First, InIt Last, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "41232696count_if",
                "textEdit": {
                    "newText": "count_if",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <regex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <regex>"
                },
                "filterText": "cregex_iterator",
                "insertText": "tr1::cregex_iterator",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::cregex_iterator",
                "score": 0.2698061466217041,
                "sortText": "41b0c9f4cregex_iterator",
                "textEdit": {
                    "newText": "tr1::cregex_iterator",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "remove_copy_if",
                "insertText": "remove_copy_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022remove_copy_if(InIt First, InIt Last, OutIt Dest, Pr Pred)",
                "score": 0.5751283168792725,
                "sortText": "426cc464remove_copy_if",
                "textEdit": {
                    "newText": "remove_copy_if",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "replace_copy_if",
                "insertText": "replace_copy_if",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022replace_copy_if(InIt First, InIt Last, OutIt Dest, Pr Pred, const Ty &Val)",
                "score": 0.5751283168792725,
                "sortText": "426cc464replace_copy_if",
                "textEdit": {
                    "newText": "replace_copy_if",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['cregex_iterator', 'cin', 'copy_if', 'count_if', 'tr1::cregex_iterator', 'remove_copy_if', 'replace_copy_if']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'ci'",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 9
                    },
                    "start": {
                        "character": 0,
                        "line": 9
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_semi_declaration",
                "message": "Expected ';' at end of declaration (fix available)",
                "range": {
                    "end": {
                        "character": 12,
                        "line": 10
                    },
                    "start": {
                        "character": 10,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 11
                    },
                    "start": {
                        "character": 0,
                        "line": 11
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "-Wunused-value",
                "message": "Expression result unused",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 10
                    },
                    "start": {
                        "character": 14,
                        "line": 10
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header vector is not used directly (fixes available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpb6dtbp3o.cpp",
        "version": 37
    }
}
Diagnostics received from LSP.
Errors received: [[9, [0, 2]], [10, [10, 12]], [11, [0, 1]]]
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": null
}
Received hover response.
Hover response does not contain 'contents'.
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 10
                    },
                    "start": {
                        "character": 6,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 11
                    },
                    "start": {
                        "character": 0,
                        "line": 11
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "-Wunused-value",
                "message": "Expression result unused",
                "range": {
                    "end": {
                        "character": 3,
                        "line": 9
                    },
                    "start": {
                        "character": 0,
                        "line": 9
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "-Wunused-value",
                "message": "Expression result unused",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 10
                    },
                    "start": {
                        "character": 14,
                        "line": 10
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header vector is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpb6dtbp3o.cpp",
        "version": 39
    }
}
Diagnostics received from LSP.
Errors received: [[10, [6, 10]], [11, [0, 1]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": [
            {
                "detail": "istream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cin",
                "insertText": "cin",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cin",
                "score": 0.45782190561294556,
                "sortText": "4095985ecin",
                "textEdit": {
                    "newText": "cin",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 9
                        },
                        "start": {
                            "character": 0,
                            "line": 9
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['cin']
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "detail": "int",
                "filterText": "x",
                "insertText": "x",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " x",
                "score": 3.423351287841797,
                "sortText": "3fa4e7d0x",
                "textEdit": {
                    "newText": "x",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "istream",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iostream>"
                },
                "filterText": "cin",
                "insertText": "cin",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cin",
                "score": 2.013059616088867,
                "sortText": "3fff2a08cin",
                "textEdit": {
                    "newText": "cin",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.513861060142517,
                "sortText": "403e39cdstd",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "main",
                "insertText": "main",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " main()",
                "score": 1.353448510169983,
                "sortText": "4052c233main",
                "textEdit": {
                    "newText": "main",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "__FUNCTION__",
                "insertText": "__FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __FUNCTION__",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7__FUNCTION__",
                "textEdit": {
                    "newText": "__FUNCTION__",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "__PRETTY_FUNCTION__",
                "insertText": "__PRETTY_FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __PRETTY_FUNCTION__",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7__PRETTY_FUNCTION__",
                "textEdit": {
                    "newText": "__PRETTY_FUNCTION__",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "__func__",
                "insertText": "__func__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __func__",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7__func__",
                "textEdit": {
                    "newText": "__func__",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "alignof",
                "insertText": "alignof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignof(type)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7alignof",
                "textEdit": {
                    "newText": "alignof",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete expression",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete [] expression",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "dynamic_cast",
                "insertText": "dynamic_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " dynamic_cast<type>(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7dynamic_cast",
                "textEdit": {
                    "newText": "dynamic_cast",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "false",
                "insertText": "false",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " false",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7false",
                "textEdit": {
                    "newText": "false",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type[size](expressions)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type(expressions)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "noexcept",
                "insertText": "noexcept",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " noexcept(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7noexcept",
                "textEdit": {
                    "newText": "noexcept",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "std::nullptr_t",
                "filterText": "nullptr",
                "insertText": "nullptr",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " nullptr",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7nullptr",
                "textEdit": {
                    "newText": "nullptr",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "reinterpret_cast",
                "insertText": "reinterpret_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " reinterpret_cast<type>(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7reinterpret_cast",
                "textEdit": {
                    "newText": "reinterpret_cast",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof",
                "insertText": "sizeof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof(expression-or-type)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7sizeof",
                "textEdit": {
                    "newText": "sizeof",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof...",
                "insertText": "sizeof...",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof...(parameter-pack)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7sizeof...",
                "textEdit": {
                    "newText": "sizeof...",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "static_cast",
                "insertText": "static_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_cast<type>(expression)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7static_cast",
                "textEdit": {
                    "newText": "static_cast",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "throw",
                "insertText": "throw",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " throw expression",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7throw",
                "textEdit": {
                    "newText": "throw",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "true",
                "insertText": "true",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " true",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7true",
                "textEdit": {
                    "newText": "true",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "std::type_info",
                "filterText": "typeid",
                "insertText": "typeid",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typeid(expression-or-type)",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7typeid",
                "textEdit": {
                    "newText": "typeid",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.8480401635169983,
                "sortText": "40a6e6d7wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR_LOCK_FREE",
                "insertText": "ATOMIC_CHAR_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR_LOCK_FREE",
                "score": 0.8113556504249573,
                "sortText": "40b04affATOMIC_CHAR_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_FLAG_INIT",
                "insertText": "ATOMIC_FLAG_INIT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_FLAG_INIT",
                "score": 0.8113556504249573,
                "sortText": "40b04affATOMIC_FLAG_INIT",
                "textEdit": {
                    "newText": "ATOMIC_FLAG_INIT",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_INT_LOCK_FREE",
                "insertText": "ATOMIC_INT_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_INT_LOCK_FREE",
                "score": 0.8113556504249573,
                "sortText": "40b04affATOMIC_INT_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_INT_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_LLONG_LOCK_FREE",
                "insertText": "ATOMIC_LLONG_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_LLONG_LOCK_FREE",
                "score": 0.8113556504249573,
                "sortText": "40b04affATOMIC_LLONG_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_LLONG_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_LONG_LOCK_FREE",
                "insertText": "ATOMIC_LONG_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_LONG_LOCK_FREE",
                "score": 0.8113556504249573,
                "sortText": "40b04affATOMIC_LONG_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_LONG_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_SHORT_LOCK_FREE",
                "insertText": "ATOMIC_SHORT_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_SHORT_LOCK_FREE",
                "score": 0.8113556504249573,
                "sortText": "40b04affATOMIC_SHORT_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_SHORT_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_VAR_INIT",
                "insertText": "ATOMIC_VAR_INIT",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ATOMIC_VAR_INIT(_Value)",
                "score": 0.8113556504249573,
                "sortText": "40b04affATOMIC_VAR_INIT",
                "textEdit": {
                    "newText": "ATOMIC_VAR_INIT",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_WCHAR_T_LOCK_FREE",
                "insertText": "ATOMIC_WCHAR_T_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_WCHAR_T_LOCK_FREE",
                "score": 0.8113556504249573,
                "sortText": "40b04affATOMIC_WCHAR_T_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_WCHAR_T_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 0.7135143280029297,
                "sortText": "40c95720size_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "_iobuf",
                "insertText": "_iobuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " _iobuf",
                "score": 0.6298295259475708,
                "sortText": "40dec37e_iobuf",
                "textEdit": {
                    "newText": "_iobuf",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "basic_istream",
                "insertText": "basic_istream",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_istream<class Elem, class Traits>",
                "score": 0.6298295259475708,
                "sortText": "40dec37ebasic_istream",
                "textEdit": {
                    "newText": "basic_istream",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "type_info",
                "insertText": "type_info",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " type_info",
                "score": 0.6298295259475708,
                "sortText": "40dec37etype_info",
                "textEdit": {
                    "newText": "type_info",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic",
                "insertText": "atomic",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022atomic<class Ty>",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic",
                "textEdit": {
                    "newText": "atomic",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_bool",
                "insertText": "atomic_bool",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_bool",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_bool",
                "textEdit": {
                    "newText": "atomic_bool",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_char",
                "insertText": "atomic_char",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_char",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_char",
                "textEdit": {
                    "newText": "atomic_char",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_char32_t",
                "insertText": "atomic_char32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_char32_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_char32_t",
                "textEdit": {
                    "newText": "atomic_char32_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag",
                "insertText": "atomic_flag",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022atomic_flag",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_flag",
                "textEdit": {
                    "newText": "atomic_flag",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int",
                "insertText": "atomic_int",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_int",
                "textEdit": {
                    "newText": "atomic_int",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int16_t",
                "insertText": "atomic_int16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int16_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_int16_t",
                "textEdit": {
                    "newText": "atomic_int16_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int32_t",
                "insertText": "atomic_int32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int32_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_int32_t",
                "textEdit": {
                    "newText": "atomic_int32_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int64_t",
                "insertText": "atomic_int64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int64_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_int64_t",
                "textEdit": {
                    "newText": "atomic_int64_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int8_t",
                "insertText": "atomic_int8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int8_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_int8_t",
                "textEdit": {
                    "newText": "atomic_int8_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast16_t",
                "insertText": "atomic_int_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast16_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_int_fast16_t",
                "textEdit": {
                    "newText": "atomic_int_fast16_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast32_t",
                "insertText": "atomic_int_fast32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast32_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_int_fast32_t",
                "textEdit": {
                    "newText": "atomic_int_fast32_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast64_t",
                "insertText": "atomic_int_fast64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast64_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_int_fast64_t",
                "textEdit": {
                    "newText": "atomic_int_fast64_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast8_t",
                "insertText": "atomic_int_fast8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast8_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_int_fast8_t",
                "textEdit": {
                    "newText": "atomic_int_fast8_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least16_t",
                "insertText": "atomic_int_least16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least16_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_int_least16_t",
                "textEdit": {
                    "newText": "atomic_int_least16_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least32_t",
                "insertText": "atomic_int_least32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least32_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_int_least32_t",
                "textEdit": {
                    "newText": "atomic_int_least32_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least64_t",
                "insertText": "atomic_int_least64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least64_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_int_least64_t",
                "textEdit": {
                    "newText": "atomic_int_least64_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least8_t",
                "insertText": "atomic_int_least8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least8_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_int_least8_t",
                "textEdit": {
                    "newText": "atomic_int_least8_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_intmax_t",
                "insertText": "atomic_intmax_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_intmax_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_intmax_t",
                "textEdit": {
                    "newText": "atomic_intmax_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_intptr_t",
                "insertText": "atomic_intptr_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_intptr_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_intptr_t",
                "textEdit": {
                    "newText": "atomic_intptr_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_llong",
                "insertText": "atomic_llong",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_llong",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_llong",
                "textEdit": {
                    "newText": "atomic_llong",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ptrdiff_t",
                "insertText": "atomic_ptrdiff_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ptrdiff_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_ptrdiff_t",
                "textEdit": {
                    "newText": "atomic_ptrdiff_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_schar",
                "insertText": "atomic_schar",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_schar",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_schar",
                "textEdit": {
                    "newText": "atomic_schar",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_short",
                "insertText": "atomic_short",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_short",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_short",
                "textEdit": {
                    "newText": "atomic_short",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_size_t",
                "insertText": "atomic_size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_size_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_size_t",
                "textEdit": {
                    "newText": "atomic_size_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uchar",
                "insertText": "atomic_uchar",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uchar",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_uchar",
                "textEdit": {
                    "newText": "atomic_uchar",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint",
                "insertText": "atomic_uint",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_uint",
                "textEdit": {
                    "newText": "atomic_uint",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint32_t",
                "insertText": "atomic_uint32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint32_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_uint32_t",
                "textEdit": {
                    "newText": "atomic_uint32_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint64_t",
                "insertText": "atomic_uint64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint64_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_uint64_t",
                "textEdit": {
                    "newText": "atomic_uint64_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast16_t",
                "insertText": "atomic_uint_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast16_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_uint_fast16_t",
                "textEdit": {
                    "newText": "atomic_uint_fast16_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast64_t",
                "insertText": "atomic_uint_fast64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast64_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_uint_fast64_t",
                "textEdit": {
                    "newText": "atomic_uint_fast64_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast8_t",
                "insertText": "atomic_uint_fast8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast8_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_uint_fast8_t",
                "textEdit": {
                    "newText": "atomic_uint_fast8_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_least16_t",
                "insertText": "atomic_uint_least16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_least16_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_uint_least16_t",
                "textEdit": {
                    "newText": "atomic_uint_least16_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_least32_t",
                "insertText": "atomic_uint_least32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_least32_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_uint_least32_t",
                "textEdit": {
                    "newText": "atomic_uint_least32_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_least8_t",
                "insertText": "atomic_uint_least8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_least8_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_uint_least8_t",
                "textEdit": {
                    "newText": "atomic_uint_least8_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uintmax_t",
                "insertText": "atomic_uintmax_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uintmax_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_uintmax_t",
                "textEdit": {
                    "newText": "atomic_uintmax_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uintptr_t",
                "insertText": "atomic_uintptr_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uintptr_t",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_uintptr_t",
                "textEdit": {
                    "newText": "atomic_uintptr_t",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ulong",
                "insertText": "atomic_ulong",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ulong",
                "score": 0.6259929537773132,
                "sortText": "40dfbeedatomic_ulong",
                "textEdit": {
                    "newText": "atomic_ulong",
                    "range": {
                        "end": {
                            "character": 4,
                            "line": 9
                        },
                        "start": {
                            "character": 4,
                            "line": 9
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['x', 'cin', 'std', 'main', '_Nonnull', '_Null_unspecified', '_Nullable', '__FUNCTION__', '__PRETTY_FUNCTION__', '__func__', 'alignof', 'auto', 'bool', 'char', 'char16_t', 'char32_t', 'class', 'const', 'const_cast', 'decltype', 'delete', 'delete', 'double', 'dynamic_cast', 'enum', 'false', 'float', 'int', 'long', 'new', 'new', 'noexcept', 'nullptr', 'operator', 'reinterpret_cast', 'short', 'signed', 'sizeof', 'sizeof...', 'static_cast', 'struct', 'throw', 'true', 'typeid', 'typename', 'union', 'unsigned', 'void', 'volatile', 'wchar_t', 'ATOMIC_CHAR_LOCK_FREE', 'ATOMIC_FLAG_INIT', 'ATOMIC_INT_LOCK_FREE', 'ATOMIC_LLONG_LOCK_FREE', 'ATOMIC_LONG_LOCK_FREE', 'ATOMIC_SHORT_LOCK_FREE', 'ATOMIC_VAR_INIT', 'ATOMIC_WCHAR_T_LOCK_FREE', 'size_t', '_iobuf', 'basic_istream', 'type_info', 'atomic', 'atomic_bool', 'atomic_char', 'atomic_char32_t', 'atomic_flag', 'atomic_int', 'atomic_int16_t', 'atomic_int32_t', 'atomic_int64_t', 'atomic_int8_t', 'atomic_int_fast16_t', 'atomic_int_fast32_t', 'atomic_int_fast64_t', 'atomic_int_fast8_t', 'atomic_int_least16_t', 'atomic_int_least32_t', 'atomic_int_least64_t', 'atomic_int_least8_t', 'atomic_intmax_t', 'atomic_intptr_t', 'atomic_llong', 'atomic_ptrdiff_t', 'atomic_schar', 'atomic_short', 'atomic_size_t', 'atomic_uchar', 'atomic_uint', 'atomic_uint32_t', 'atomic_uint64_t', 'atomic_uint_fast16_t', 'atomic_uint_fast64_t', 'atomic_uint_fast8_t', 'atomic_uint_least16_t', 'atomic_uint_least32_t', 'atomic_uint_least8_t', 'atomic_uintmax_t', 'atomic_uintptr_t', 'atomic_ulong']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "typecheck_invalid_operands",
                "message": "Invalid operands to binary expression ('istream' (aka 'basic_istream<char, char_traits<char>>') and 'basic_ostream<char>')\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\utility:529:27:\nnote: candidate template ignored: could not match 'pair' against 'basic_istream'\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:1962:30:\nnote: candidate template ignored: could not match 'reverse_iterator' against 'basic_istream'\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:4506:30:\nnote: candidate template ignored: could not match 'move_iterator' against 'basic_istream'\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xstring:3288:17:\nnote: candidate template ignored: could not match 'basic_string' against 'basic_istream'\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xstring:3294:17:\nnote: candidate template ignored: could not match 'const _Elem *' against 'istream' (aka 'basic_istream<char, char_traits<char>>')\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xstring:3300:17:\nnote: candidate template ignored: could not match 'basic_string' against 'basic_istream'\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\memory:1898:17:\nnote: candidate template ignored: could not match 'shared_ptr' against 'basic_istream'\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\memory:1955:17:\nnote: candidate template ignored: could not match 'shared_ptr' against 'basic_istream'\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\memory:1960:17:\nnote: candidate template ignored: could not match 'shared_ptr' against 'basic_ostream'\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\memory:3655:17:\nnote: candidate template ignored: could not match 'unique_ptr' against 'basic_istream'\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\memory:3720:30:\nnote: candidate template ignored: could not match 'unique_ptr' against 'basic_istream'\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\memory:3725:30:\nnote: candidate template ignored: could not match 'unique_ptr' against 'basic_ostream'\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\vector:2368:30:\nnote: candidate template ignored: could not match 'vector' against 'basic_istream'",
                "range": {
                    "end": {
                        "character": 4,
                        "line": 9
                    },
                    "start": {
                        "character": 3,
                        "line": 9
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 11
                    },
                    "start": {
                        "character": 0,
                        "line": 11
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "-Wunused-value",
                "message": "Expression result unused",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 10
                    },
                    "start": {
                        "character": 14,
                        "line": 10
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header vector is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpb6dtbp3o.cpp",
        "version": 41
    }
}
Diagnostics received from LSP.
Errors received: [[9, [3, 4]], [11, [0, 1]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "detail": "int",
                "filterText": "x",
                "insertText": "x",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " x",
                "score": 3.5021395683288574,
                "sortText": "3f9fdcf2x",
                "textEdit": {
                    "newText": "x",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "main",
                "insertText": "main",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " main()",
                "score": 1.9921669960021973,
                "sortText": "400100acmain",
                "textEdit": {
                    "newText": "main",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.466963291168213,
                "sortText": "40443a8cstd",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "istream",
                "filterText": "cin",
                "insertText": "cin",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cin",
                "score": 0.9568464159965515,
                "sortText": "408b0c1dcin",
                "textEdit": {
                    "newText": "cin",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 0.8851884603500366,
                "sortText": "409d644asize_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.885036051273346,
                "sortText": "409d6e47_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.885036051273346,
                "sortText": "409d6e47_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.885036051273346,
                "sortText": "409d6e47_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "__FUNCTION__",
                "insertText": "__FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __FUNCTION__",
                "score": 0.885036051273346,
                "sortText": "409d6e47__FUNCTION__",
                "textEdit": {
                    "newText": "__FUNCTION__",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "__PRETTY_FUNCTION__",
                "insertText": "__PRETTY_FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __PRETTY_FUNCTION__",
                "score": 0.885036051273346,
                "sortText": "409d6e47__PRETTY_FUNCTION__",
                "textEdit": {
                    "newText": "__PRETTY_FUNCTION__",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "__func__",
                "insertText": "__func__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __func__",
                "score": 0.885036051273346,
                "sortText": "409d6e47__func__",
                "textEdit": {
                    "newText": "__func__",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "alignof",
                "insertText": "alignof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignof(type)",
                "score": 0.885036051273346,
                "sortText": "409d6e47alignof",
                "textEdit": {
                    "newText": "alignof",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.885036051273346,
                "sortText": "409d6e47auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.885036051273346,
                "sortText": "409d6e47bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.885036051273346,
                "sortText": "409d6e47char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.885036051273346,
                "sortText": "409d6e47char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.885036051273346,
                "sortText": "409d6e47char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.885036051273346,
                "sortText": "409d6e47class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.885036051273346,
                "sortText": "409d6e47const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete expression",
                "score": 0.885036051273346,
                "sortText": "409d6e47delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete [] expression",
                "score": 0.885036051273346,
                "sortText": "409d6e47delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.885036051273346,
                "sortText": "409d6e47double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "dynamic_cast",
                "insertText": "dynamic_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " dynamic_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47dynamic_cast",
                "textEdit": {
                    "newText": "dynamic_cast",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.885036051273346,
                "sortText": "409d6e47enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "false",
                "insertText": "false",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " false",
                "score": 0.885036051273346,
                "sortText": "409d6e47false",
                "textEdit": {
                    "newText": "false",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.885036051273346,
                "sortText": "409d6e47float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.885036051273346,
                "sortText": "409d6e47int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.885036051273346,
                "sortText": "409d6e47long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type[size](expressions)",
                "score": 0.885036051273346,
                "sortText": "409d6e47new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type(expressions)",
                "score": 0.885036051273346,
                "sortText": "409d6e47new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "noexcept",
                "insertText": "noexcept",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " noexcept(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47noexcept",
                "textEdit": {
                    "newText": "noexcept",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "std::nullptr_t",
                "filterText": "nullptr",
                "insertText": "nullptr",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " nullptr",
                "score": 0.885036051273346,
                "sortText": "409d6e47nullptr",
                "textEdit": {
                    "newText": "nullptr",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.885036051273346,
                "sortText": "409d6e47operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "reinterpret_cast",
                "insertText": "reinterpret_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " reinterpret_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47reinterpret_cast",
                "textEdit": {
                    "newText": "reinterpret_cast",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.885036051273346,
                "sortText": "409d6e47short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.885036051273346,
                "sortText": "409d6e47signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof",
                "insertText": "sizeof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof(expression-or-type)",
                "score": 0.885036051273346,
                "sortText": "409d6e47sizeof",
                "textEdit": {
                    "newText": "sizeof",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof...",
                "insertText": "sizeof...",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof...(parameter-pack)",
                "score": 0.885036051273346,
                "sortText": "409d6e47sizeof...",
                "textEdit": {
                    "newText": "sizeof...",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "static_cast",
                "insertText": "static_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47static_cast",
                "textEdit": {
                    "newText": "static_cast",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.885036051273346,
                "sortText": "409d6e47struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "throw",
                "insertText": "throw",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " throw expression",
                "score": 0.885036051273346,
                "sortText": "409d6e47throw",
                "textEdit": {
                    "newText": "throw",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "true",
                "insertText": "true",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " true",
                "score": 0.885036051273346,
                "sortText": "409d6e47true",
                "textEdit": {
                    "newText": "true",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "detail": "std::type_info",
                "filterText": "typeid",
                "insertText": "typeid",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typeid(expression-or-type)",
                "score": 0.885036051273346,
                "sortText": "409d6e47typeid",
                "textEdit": {
                    "newText": "typeid",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.885036051273346,
                "sortText": "409d6e47typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.885036051273346,
                "sortText": "409d6e47union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.885036051273346,
                "sortText": "409d6e47unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.885036051273346,
                "sortText": "409d6e47void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.885036051273346,
                "sortText": "409d6e47volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.885036051273346,
                "sortText": "409d6e47wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic",
                "insertText": "atomic",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022atomic<class Ty>",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic",
                "textEdit": {
                    "newText": "atomic",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_bool",
                "insertText": "atomic_bool",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_bool",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_bool",
                "textEdit": {
                    "newText": "atomic_bool",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_char",
                "insertText": "atomic_char",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_char",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_char",
                "textEdit": {
                    "newText": "atomic_char",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_char32_t",
                "insertText": "atomic_char32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_char32_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_char32_t",
                "textEdit": {
                    "newText": "atomic_char32_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag",
                "insertText": "atomic_flag",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022atomic_flag",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_flag",
                "textEdit": {
                    "newText": "atomic_flag",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int",
                "insertText": "atomic_int",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_int",
                "textEdit": {
                    "newText": "atomic_int",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int16_t",
                "insertText": "atomic_int16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int16_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_int16_t",
                "textEdit": {
                    "newText": "atomic_int16_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int32_t",
                "insertText": "atomic_int32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int32_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_int32_t",
                "textEdit": {
                    "newText": "atomic_int32_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int64_t",
                "insertText": "atomic_int64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int64_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_int64_t",
                "textEdit": {
                    "newText": "atomic_int64_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int8_t",
                "insertText": "atomic_int8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int8_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_int8_t",
                "textEdit": {
                    "newText": "atomic_int8_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast16_t",
                "insertText": "atomic_int_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast16_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_int_fast16_t",
                "textEdit": {
                    "newText": "atomic_int_fast16_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast32_t",
                "insertText": "atomic_int_fast32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast32_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_int_fast32_t",
                "textEdit": {
                    "newText": "atomic_int_fast32_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast64_t",
                "insertText": "atomic_int_fast64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast64_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_int_fast64_t",
                "textEdit": {
                    "newText": "atomic_int_fast64_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast8_t",
                "insertText": "atomic_int_fast8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast8_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_int_fast8_t",
                "textEdit": {
                    "newText": "atomic_int_fast8_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least16_t",
                "insertText": "atomic_int_least16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least16_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_int_least16_t",
                "textEdit": {
                    "newText": "atomic_int_least16_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least32_t",
                "insertText": "atomic_int_least32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least32_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_int_least32_t",
                "textEdit": {
                    "newText": "atomic_int_least32_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least64_t",
                "insertText": "atomic_int_least64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least64_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_int_least64_t",
                "textEdit": {
                    "newText": "atomic_int_least64_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least8_t",
                "insertText": "atomic_int_least8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least8_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_int_least8_t",
                "textEdit": {
                    "newText": "atomic_int_least8_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_intmax_t",
                "insertText": "atomic_intmax_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_intmax_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_intmax_t",
                "textEdit": {
                    "newText": "atomic_intmax_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_intptr_t",
                "insertText": "atomic_intptr_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_intptr_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_intptr_t",
                "textEdit": {
                    "newText": "atomic_intptr_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_llong",
                "insertText": "atomic_llong",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_llong",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_llong",
                "textEdit": {
                    "newText": "atomic_llong",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ptrdiff_t",
                "insertText": "atomic_ptrdiff_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ptrdiff_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_ptrdiff_t",
                "textEdit": {
                    "newText": "atomic_ptrdiff_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_schar",
                "insertText": "atomic_schar",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_schar",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_schar",
                "textEdit": {
                    "newText": "atomic_schar",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_short",
                "insertText": "atomic_short",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_short",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_short",
                "textEdit": {
                    "newText": "atomic_short",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_size_t",
                "insertText": "atomic_size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_size_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_size_t",
                "textEdit": {
                    "newText": "atomic_size_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uchar",
                "insertText": "atomic_uchar",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uchar",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_uchar",
                "textEdit": {
                    "newText": "atomic_uchar",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint",
                "insertText": "atomic_uint",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_uint",
                "textEdit": {
                    "newText": "atomic_uint",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint32_t",
                "insertText": "atomic_uint32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint32_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_uint32_t",
                "textEdit": {
                    "newText": "atomic_uint32_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint64_t",
                "insertText": "atomic_uint64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint64_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_uint64_t",
                "textEdit": {
                    "newText": "atomic_uint64_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast16_t",
                "insertText": "atomic_uint_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast16_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_uint_fast16_t",
                "textEdit": {
                    "newText": "atomic_uint_fast16_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast64_t",
                "insertText": "atomic_uint_fast64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast64_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_uint_fast64_t",
                "textEdit": {
                    "newText": "atomic_uint_fast64_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast8_t",
                "insertText": "atomic_uint_fast8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast8_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_uint_fast8_t",
                "textEdit": {
                    "newText": "atomic_uint_fast8_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_least16_t",
                "insertText": "atomic_uint_least16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_least16_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_uint_least16_t",
                "textEdit": {
                    "newText": "atomic_uint_least16_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_least32_t",
                "insertText": "atomic_uint_least32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_least32_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_uint_least32_t",
                "textEdit": {
                    "newText": "atomic_uint_least32_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_least8_t",
                "insertText": "atomic_uint_least8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_least8_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_uint_least8_t",
                "textEdit": {
                    "newText": "atomic_uint_least8_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uintmax_t",
                "insertText": "atomic_uintmax_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uintmax_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_uintmax_t",
                "textEdit": {
                    "newText": "atomic_uintmax_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uintptr_t",
                "insertText": "atomic_uintptr_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uintptr_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_uintptr_t",
                "textEdit": {
                    "newText": "atomic_uintptr_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ulong",
                "insertText": "atomic_ulong",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ulong",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_ulong",
                "textEdit": {
                    "newText": "atomic_ulong",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ushort",
                "insertText": "atomic_ushort",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ushort",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_ushort",
                "textEdit": {
                    "newText": "atomic_ushort",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_wchar_t",
                "insertText": "atomic_wchar_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_wchar_t",
                "score": 0.7424666881561279,
                "sortText": "40c1edb4atomic_wchar_t",
                "textEdit": {
                    "newText": "atomic_wchar_t",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "_iobuf",
                "insertText": "_iobuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " _iobuf",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96_iobuf",
                "textEdit": {
                    "newText": "_iobuf",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "basic_istream",
                "insertText": "basic_istream",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " basic_istream<class Elem, class Traits>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96basic_istream",
                "textEdit": {
                    "newText": "basic_istream",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "filterText": "type_info",
                "insertText": "type_info",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " type_info",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96type_info",
                "textEdit": {
                    "newText": "type_info",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR32_T_LOCK_FREE",
                "score": 0.6824626922607422,
                "sortText": "40d14a20ATOMIC_CHAR32_T_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR32_T_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR_LOCK_FREE",
                "insertText": "ATOMIC_CHAR_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR_LOCK_FREE",
                "score": 0.6824626922607422,
                "sortText": "40d14a20ATOMIC_CHAR_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_FLAG_INIT",
                "insertText": "ATOMIC_FLAG_INIT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_FLAG_INIT",
                "score": 0.6824626922607422,
                "sortText": "40d14a20ATOMIC_FLAG_INIT",
                "textEdit": {
                    "newText": "ATOMIC_FLAG_INIT",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_INT_LOCK_FREE",
                "insertText": "ATOMIC_INT_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_INT_LOCK_FREE",
                "score": 0.6824626922607422,
                "sortText": "40d14a20ATOMIC_INT_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_INT_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_LLONG_LOCK_FREE",
                "insertText": "ATOMIC_LLONG_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_LLONG_LOCK_FREE",
                "score": 0.6824626922607422,
                "sortText": "40d14a20ATOMIC_LLONG_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_LLONG_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_LONG_LOCK_FREE",
                "insertText": "ATOMIC_LONG_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_LONG_LOCK_FREE",
                "score": 0.6824626922607422,
                "sortText": "40d14a20ATOMIC_LONG_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_LONG_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 5,
                            "line": 9
                        },
                        "start": {
                            "character": 5,
                            "line": 9
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['x', 'main', 'std', 'cin', 'size_t', '_Nonnull', '_Null_unspecified', '_Nullable', '__FUNCTION__', '__PRETTY_FUNCTION__', '__func__', 'alignof', 'auto', 'bool', 'char', 'char16_t', 'char32_t', 'class', 'const', 'const_cast', 'decltype', 'delete', 'delete', 'double', 'dynamic_cast', 'enum', 'false', 'float', 'int', 'long', 'new', 'new', 'noexcept', 'nullptr', 'operator', 'reinterpret_cast', 'short', 'signed', 'sizeof', 'sizeof...', 'static_cast', 'struct', 'throw', 'true', 'typeid', 'typename', 'union', 'unsigned', 'void', 'volatile', 'wchar_t', 'atomic', 'atomic_bool', 'atomic_char', 'atomic_char32_t', 'atomic_flag', 'atomic_int', 'atomic_int16_t', 'atomic_int32_t', 'atomic_int64_t', 'atomic_int8_t', 'atomic_int_fast16_t', 'atomic_int_fast32_t', 'atomic_int_fast64_t', 'atomic_int_fast8_t', 'atomic_int_least16_t', 'atomic_int_least32_t', 'atomic_int_least64_t', 'atomic_int_least8_t', 'atomic_intmax_t', 'atomic_intptr_t', 'atomic_llong', 'atomic_ptrdiff_t', 'atomic_schar', 'atomic_short', 'atomic_size_t', 'atomic_uchar', 'atomic_uint', 'atomic_uint32_t', 'atomic_uint64_t', 'atomic_uint_fast16_t', 'atomic_uint_fast64_t', 'atomic_uint_fast8_t', 'atomic_uint_least16_t', 'atomic_uint_least32_t', 'atomic_uint_least8_t', 'atomic_uintmax_t', 'atomic_uintptr_t', 'atomic_ulong', 'atomic_ushort', 'atomic_wchar_t', '_iobuf', 'basic_istream', 'type_info', 'ATOMIC_CHAR32_T_LOCK_FREE', 'ATOMIC_CHAR_LOCK_FREE', 'ATOMIC_FLAG_INIT', 'ATOMIC_INT_LOCK_FREE', 'ATOMIC_LLONG_LOCK_FREE', 'ATOMIC_LONG_LOCK_FREE']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "typecheck_invalid_operands",
                "message": "Invalid operands to binary expression ('istream' (aka 'basic_istream<char, char_traits<char>>') and 'ostream' (aka 'basic_ostream<char, char_traits<char>>'))\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\istream:870:31:\nnote: candidate function template not viable: no known conversion from 'ostream' (aka 'basic_ostream<char, char_traits<char>>') to 'signed char *' for 2nd argument\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\istream:875:31:\nnote: candidate function template not viable: no known conversion from 'ostream' (aka 'basic_ostream<char, char_traits<char>>') to 'unsigned char *' for 2nd argument\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\istream:904:31:\nnote: candidate function template not viable: no known conversion from 'ostream' (aka 'basic_ostream<char, char_traits<char>>') to 'signed char &' for 2nd argument\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\istream:910:31:\nnote: candidate function template not viable: no known conversion from 'ostream' (aka 'basic_ostream<char, char_traits<char>>') to 'unsigned char &' for 2nd argument\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\istream:881:32:\nnote: candidate template ignored: deduced conflicting types for parameter '_Elem' ('char' vs. 'ostream' (aka 'basic_ostream<char, char_traits<char>>'))\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xstring:3359:32:\nnote: candidate template ignored: could not match 'basic_string' against 'basic_ostream'\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\istream:865:32:\nnote: candidate template ignored: could not match '_Elem *' against 'ostream' (aka 'basic_ostream<char, char_traits<char>>')\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\istream:923:9:\nnote: candidate template ignored: substitution failure [with _Istr = istream &, _Ty = ostream &]: 'type name' declared as a pointer to a reference of type 'istream &' (aka 'basic_istream<char, char_traits<char>> &')\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\istream:190:39:\nnote: candidate function not viable: no known conversion from 'ostream' (aka 'basic_ostream<char, char_traits<char>>') to 'basic_istream<char> &(*)(basic_istream<char> &) __attribute__((cdecl))' for 1st argument\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\istream:195:39:\nnote: candidate function not viable: no known conversion from 'ostream' (aka 'basic_ostream<char, char_traits<char>>') to '_Myios &(*)(_Myios &) __attribute__((cdecl))' (aka 'basic_ios<char, std::char_traits<char>> &(*)(basic_ios<char, std::char_traits<char>> &)') for 1st argument\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\istream:200:39:\nnote: candidate function not viable: no known conversion from 'ostream' (aka 'basic_ostream<char, char_traits<char>>') to 'ios_base &(*)(ios_base &) __attribute__((cdecl))' for 1st argument\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\istream:229:39:\nnote: candidate function not viable: no known conversion from 'ostream' (aka 'basic_ostream<char, char_traits<char>>') to 'bool &' for 1st argument\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\istream:233:39:\nnote: candidate function not viable: no known conversion from 'ostream' (aka 'basic_ostream<char, char_traits<char>>') to 'short &' for 1st argument\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\istream:265:39:\nnote: candidate function not viable: no known conversion from 'ostream' (aka 'basic_ostream<char, char_traits<char>>') to 'unsigned short &' for 1st argument\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\istream:269:39:\nnote: candidate function not viable: no known conversion from 'ostream' (aka 'basic_ostream<char, char_traits<char>>') to 'int &' for 1st argument\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\istream:277:39:\nnote: candidate function not viable: no known conversion from 'ostream' (aka 'basic_ostream<char, char_traits<char>>') to 'unsigned int &' for 1st argument\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\istream:281:39:\nnote: candidate function not viable: no known conversion from 'ostream' (aka 'basic_ostream<char, char_traits<char>>') to 'long &' for 1st argument\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\istream:285:39:\nnote: candidate function not viable: no known conversion from 'ostream' (aka 'basic_ostream<char, char_traits<char>>') to 'unsigned long &' for 1st argument\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\istream:289:39:\nnote: candidate function not viable: no known conversion from 'ostream' (aka 'basic_ostream<char, char_traits<char>>') to 'long long &' for 1st argument\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\istream:293:39:\nnote: candidate function not viable: no known conversion from 'ostream' (aka 'basic_ostream<char, char_traits<char>>') to 'unsigned long long &' for 1st argument\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\istream:297:39:\nnote: candidate function not viable: no known conversion from 'ostream' (aka 'basic_ostream<char, char_traits<char>>') to 'float &' for 1st argument\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\istream:301:39:\nnote: candidate function not viable: no known conversion from 'ostream' (aka 'basic_ostream<char, char_traits<char>>') to 'double &' for 1st argument\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\istream:305:39:\nnote: candidate function not viable: no known conversion from 'ostream' (aka 'basic_ostream<char, char_traits<char>>') to 'long double &' for 1st argument\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\istream:309:39:\nnote: candidate function not viable: no known conversion from 'ostream' (aka 'basic_ostream<char, char_traits<char>>') to 'void *&' for 1st argument\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\istream:313:39:\nnote: candidate function not viable: no known conversion from 'ostream' (aka 'basic_ostream<char, char_traits<char>>') to '_Mysb *' (aka 'basic_streambuf<char, std::char_traits<char>> *') for 1st argument",
                "range": {
                    "end": {
                        "character": 5,
                        "line": 9
                    },
                    "start": {
                        "character": 3,
                        "line": 9
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 11
                    },
                    "start": {
                        "character": 0,
                        "line": 11
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "-Wunused-value",
                "message": "Expression result unused",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 10
                    },
                    "start": {
                        "character": 14,
                        "line": 10
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header vector is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpb6dtbp3o.cpp",
        "version": 42
    }
}
Diagnostics received from LSP.
Errors received: [[9, [3, 5]], [11, [0, 1]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 10
                    },
                    "start": {
                        "character": 6,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 11
                    },
                    "start": {
                        "character": 0,
                        "line": 11
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "-Wunused-value",
                "message": "Expression result unused",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 10
                    },
                    "start": {
                        "character": 14,
                        "line": 10
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header vector is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpb6dtbp3o.cpp",
        "version": 43
    }
}
Diagnostics received from LSP.
Errors received: [[10, [6, 10]], [11, [0, 1]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 11
                    },
                    "start": {
                        "character": 0,
                        "line": 11
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "-Wunused-value",
                "message": "Expression result unused",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 10
                    },
                    "start": {
                        "character": 14,
                        "line": 10
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header vector is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpb6dtbp3o.cpp",
        "version": 44
    }
}
Diagnostics received from LSP.
Errors received: [[11, [0, 1]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "detail": "int",
                "filterText": "x",
                "insertText": "x",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " x",
                "score": 2.948925256729126,
                "sortText": "3fc344cfx",
                "textEdit": {
                    "newText": "x",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.5999544858932495,
                "sortText": "403334b1std",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "error_code",
                "insertText": "error_code",
                "insertTextFormat": 1,
                "kind": 4,
                "label": " error_code(Enum Errcode)",
                "score": 1.1264111995697021,
                "sortText": "406fd1c2error_code",
                "textEdit": {
                    "newText": "error_code",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "main",
                "insertText": "main",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " main()",
                "score": 1.0087924003601074,
                "sortText": "407edfe4main",
                "textEdit": {
                    "newText": "main",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "mbstate_t",
                "insertText": "mbstate_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " mbstate_t",
                "score": 0.9800145626068115,
                "sortText": "40851dc4mbstate_t",
                "textEdit": {
                    "newText": "mbstate_t",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 0.9800145626068115,
                "sortText": "40851dc4size_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR32_T_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_CHAR32_T_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR32_T_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR_LOCK_FREE",
                "insertText": "ATOMIC_CHAR_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_CHAR_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_FLAG_INIT",
                "insertText": "ATOMIC_FLAG_INIT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_FLAG_INIT",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_FLAG_INIT",
                "textEdit": {
                    "newText": "ATOMIC_FLAG_INIT",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_INT_LOCK_FREE",
                "insertText": "ATOMIC_INT_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_INT_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_INT_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_INT_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_LLONG_LOCK_FREE",
                "insertText": "ATOMIC_LLONG_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_LLONG_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_LLONG_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_LLONG_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_LONG_LOCK_FREE",
                "insertText": "ATOMIC_LONG_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_LONG_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_LONG_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_LONG_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_SHORT_LOCK_FREE",
                "insertText": "ATOMIC_SHORT_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_SHORT_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_SHORT_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_SHORT_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_VAR_INIT",
                "insertText": "ATOMIC_VAR_INIT",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ATOMIC_VAR_INIT(_Value)",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_VAR_INIT",
                "textEdit": {
                    "newText": "ATOMIC_VAR_INIT",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_WCHAR_T_LOCK_FREE",
                "insertText": "ATOMIC_WCHAR_T_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_WCHAR_T_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_WCHAR_T_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_WCHAR_T_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__FUNCTION__",
                "insertText": "__FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __FUNCTION__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__FUNCTION__",
                "textEdit": {
                    "newText": "__FUNCTION__",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__PRETTY_FUNCTION__",
                "insertText": "__PRETTY_FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __PRETTY_FUNCTION__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__PRETTY_FUNCTION__",
                "textEdit": {
                    "newText": "__PRETTY_FUNCTION__",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__func__",
                "insertText": "__func__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __func__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__func__",
                "textEdit": {
                    "newText": "__func__",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "alignas",
                "insertText": "alignas",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignas(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8alignas",
                "textEdit": {
                    "newText": "alignas",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "alignof",
                "insertText": "alignof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignof(type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8alignof",
                "textEdit": {
                    "newText": "alignof",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8constexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete [] expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "dynamic_cast",
                "insertText": "dynamic_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " dynamic_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8dynamic_cast",
                "textEdit": {
                    "newText": "dynamic_cast",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "extern",
                "insertText": "extern",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " extern",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8extern",
                "textEdit": {
                    "newText": "extern",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "false",
                "insertText": "false",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " false",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8false",
                "textEdit": {
                    "newText": "false",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "goto",
                "insertText": "goto",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " goto label;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8goto",
                "textEdit": {
                    "newText": "goto",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type[size](expressions)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type(expressions)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "noexcept",
                "insertText": "noexcept",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " noexcept(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8noexcept",
                "textEdit": {
                    "newText": "noexcept",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "std::nullptr_t",
                "filterText": "nullptr",
                "insertText": "nullptr",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " nullptr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8nullptr",
                "textEdit": {
                    "newText": "nullptr",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "reinterpret_cast",
                "insertText": "reinterpret_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " reinterpret_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8reinterpret_cast",
                "textEdit": {
                    "newText": "reinterpret_cast",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "return",
                "insertText": "return",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " return expression;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8return",
                "textEdit": {
                    "newText": "return",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof",
                "insertText": "sizeof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof(expression-or-type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8sizeof",
                "textEdit": {
                    "newText": "sizeof",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof...",
                "insertText": "sizeof...",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof...(parameter-pack)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8sizeof...",
                "textEdit": {
                    "newText": "sizeof...",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "static",
                "insertText": "static",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " static",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static",
                "textEdit": {
                    "newText": "static",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "static_assert",
                "insertText": "static_assert",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_assert(expression, message);",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static_assert",
                "textEdit": {
                    "newText": "static_assert",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "static_cast",
                "insertText": "static_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static_cast",
                "textEdit": {
                    "newText": "static_cast",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "thread_local",
                "insertText": "thread_local",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " thread_local",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8thread_local",
                "textEdit": {
                    "newText": "thread_local",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "throw",
                "insertText": "throw",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " throw expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8throw",
                "textEdit": {
                    "newText": "throw",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "true",
                "insertText": "true",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " true",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8true",
                "textEdit": {
                    "newText": "true",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "typedef",
                "insertText": "typedef",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typedef type name;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typedef",
                "textEdit": {
                    "newText": "typedef",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "std::type_info",
                "filterText": "typeid",
                "insertText": "typeid",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typeid(expression-or-type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typeid",
                "textEdit": {
                    "newText": "typeid",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using name = type;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8using",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "using namespace",
                "insertText": "using namespace",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using namespace identifier;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8using namespace",
                "textEdit": {
                    "newText": "using namespace",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "ostream",
                "filterText": "cout",
                "insertText": "cout",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " cout",
                "score": 0.8294593095779419,
                "sortText": "40aba88ecout",
                "textEdit": {
                    "newText": "cout",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const Elem *Val)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, char Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, Elem Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const signed char *Val)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, signed char Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const unsigned char *Val)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, unsigned char Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "Ostr &&",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(Ostr &&Os, const Ty &Val)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const error_code &Errcode)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const basic_string<Elem, Traits, Alloc> &Str)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Out, const shared_ptr<Ty> &Px)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Out, const unique_ptr<Yty, Dx> &Px)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, const char *Val)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<Elem, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<Elem, Traits> &Ostr, char Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "basic_ostream<char, Traits> &",
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator<<(basic_ostream<char, Traits> &Ostr, const char *Val)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, unsigned char *Str)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, Elem &Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, basic_string<Elem, Traits, Alloc> &Str)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, signed char *Str)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<Elem, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<Elem, Traits> &Istr, Elem *Str)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, signed char &Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "basic_istream<char, Traits> &",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(basic_istream<char, Traits> &Istr, unsigned char &Ch)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "Istr &&",
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " operator>>(Istr &&Is, Ty &&Val)",
                "score": 0.8084393739700317,
                "sortText": "40b10a1eoperator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic",
                "insertText": "atomic",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022atomic<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic",
                "textEdit": {
                    "newText": "atomic",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_bool",
                "insertText": "atomic_bool",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_bool",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_bool",
                "textEdit": {
                    "newText": "atomic_bool",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_char",
                "insertText": "atomic_char",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_char",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_char",
                "textEdit": {
                    "newText": "atomic_char",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_char32_t",
                "insertText": "atomic_char32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_char32_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_char32_t",
                "textEdit": {
                    "newText": "atomic_char32_t",
                    "range": {
                        "end": {
                            "character": 14,
                            "line": 10
                        },
                        "start": {
                            "character": 14,
                            "line": 10
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['x', 'std', 'error_code', 'main', 'mbstate_t', 'size_t', 'ATOMIC_CHAR32_T_LOCK_FREE', 'ATOMIC_CHAR_LOCK_FREE', 'ATOMIC_FLAG_INIT', 'ATOMIC_INT_LOCK_FREE', 'ATOMIC_LLONG_LOCK_FREE', 'ATOMIC_LONG_LOCK_FREE', 'ATOMIC_SHORT_LOCK_FREE', 'ATOMIC_VAR_INIT', 'ATOMIC_WCHAR_T_LOCK_FREE', '_Nonnull', '_Null_unspecified', '_Nullable', '__FUNCTION__', '__PRETTY_FUNCTION__', '__func__', 'alignas', 'alignof', 'auto', 'bool', 'char', 'char16_t', 'char32_t', 'class', 'const', 'const_cast', 'constexpr', 'decltype', 'delete', 'delete', 'double', 'dynamic_cast', 'enum', 'extern', 'false', 'float', 'goto', 'int', 'long', 'new', 'new', 'noexcept', 'nullptr', 'operator', 'reinterpret_cast', 'return', 'short', 'signed', 'sizeof', 'sizeof...', 'static', 'static_assert', 'static_cast', 'struct', 'thread_local', 'throw', 'true', 'typedef', 'typeid', 'typename', 'union', 'unsigned', 'using', 'using namespace', 'void', 'volatile', 'wchar_t', 'cout', 'operator<<', 'operator<<', 'operator<<', 'operator<<', 'operator<<', 'operator<<', 'operator<<', 'operator<<', 'operator<<', 'operator<<', 'operator<<', 'operator<<', 'operator<<', 'operator<<', 'operator<<', 'operator>>', 'operator>>', 'operator>>', 'operator>>', 'operator>>', 'operator>>', 'operator>>', 'operator>>', 'atomic', 'atomic_bool', 'atomic_char', 'atomic_char32_t']
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header vector is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpb6dtbp3o.cpp",
        "version": 47
    }
}
Diagnostics received from LSP.
Errors received: []
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cin, cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cin, cout
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpb6dtbp3o.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header vector is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpb6dtbp3o.cpp",
        "version": 50
    }
}
Diagnostics received from LSP.
Errors received: []
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cin, cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cin, cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cin, cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cin, cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": null
}
Received hover response.
Hover response does not contain 'contents'.
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": null
}
Received hover response.
Hover response does not contain 'contents'.
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": null
}
Received hover response.
Hover response does not contain 'contents'.
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": null
}
Received hover response.
Hover response does not contain 'contents'.
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": null
}
Received hover response.
Hover response does not contain 'contents'.
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cin, cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cin, cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cin, cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cin, cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cin, cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cin, cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cin, cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cin, cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cin, cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cin, cout
