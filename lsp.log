Temporary file created: C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
LSP process started successfully.
Request sent with method initialize
Handling response from LSP
Received response: {
    "id": 0,
    "jsonrpc": "2.0",
    "result": {
        "capabilities": {
            "astProvider": true,
            "callHierarchyProvider": true,
            "clangdInlayHintsProvider": true,
            "codeActionProvider": true,
            "compilationDatabase": {
                "automaticReload": true
            },
            "completionProvider": {
                "resolveProvider": false,
                "triggerCharacters": [
                    ".",
                    "<",
                    ">",
                    ":",
                    "\"",
                    "/",
                    "*"
                ]
            },
            "declarationProvider": true,
            "definitionProvider": true,
            "documentFormattingProvider": true,
            "documentHighlightProvider": true,
            "documentLinkProvider": {
                "resolveProvider": false
            },
            "documentOnTypeFormattingProvider": {
                "firstTriggerCharacter": "\n",
                "moreTriggerCharacter": []
            },
            "documentRangeFormattingProvider": true,
            "documentSymbolProvider": true,
            "executeCommandProvider": {
                "commands": [
                    "clangd.applyFix",
                    "clangd.applyRename",
                    "clangd.applyTweak"
                ]
            },
            "foldingRangeProvider": true,
            "hoverProvider": true,
            "implementationProvider": true,
            "inactiveRegionsProvider": true,
            "inlayHintProvider": true,
            "memoryUsageProvider": true,
            "referencesProvider": true,
            "renameProvider": true,
            "selectionRangeProvider": true,
            "semanticTokensProvider": {
                "full": {
                    "delta": true
                },
                "legend": {
                    "tokenModifiers": [
                        "declaration",
                        "definition",
                        "deprecated",
                        "deduced",
                        "readonly",
                        "static",
                        "abstract",
                        "virtual",
                        "dependentName",
                        "defaultLibrary",
                        "usedAsMutableReference",
                        "usedAsMutablePointer",
                        "constructorOrDestructor",
                        "userDefined",
                        "functionScope",
                        "classScope",
                        "fileScope",
                        "globalScope"
                    ],
                    "tokenTypes": [
                        "variable",
                        "variable",
                        "parameter",
                        "function",
                        "method",
                        "function",
                        "property",
                        "variable",
                        "class",
                        "interface",
                        "enum",
                        "enumMember",
                        "type",
                        "type",
                        "unknown",
                        "namespace",
                        "typeParameter",
                        "concept",
                        "type",
                        "macro",
                        "modifier",
                        "operator",
                        "bracket",
                        "label",
                        "comment"
                    ]
                },
                "range": false
            },
            "signatureHelpProvider": {
                "triggerCharacters": [
                    "(",
                    ")",
                    "{",
                    "}",
                    "<",
                    ">",
                    ","
                ]
            },
            "standardTypeHierarchyProvider": true,
            "textDocumentSync": {
                "change": 2,
                "openClose": true,
                "save": true
            },
            "typeDefinitionProvider": true,
            "typeHierarchyProvider": true,
            "workspaceSymbolProvider": true
        },
        "serverInfo": {
            "name": "clangd",
            "version": "clangd version 20.1.0 windows x86_64-pc-windows-msvc"
        }
    }
}
LSP initialized successfully.
Request sent with method textDocument/didOpen
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 0
    }
}
Diagnostics received from LSP.
Errors received: []
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": null
}
Received hover response.
Hover response does not contain 'contents'.
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": null
}
Received hover response.
Hover response does not contain 'contents'.
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": null
}
Received hover response.
Hover response does not contain 'contents'.
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 6
    }
}
Diagnostics received from LSP.
Errors received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "-Wextra-tokens",
                "message": "Extra tokens at end of #include directive (fix available)",
                "range": {
                    "end": {
                        "character": 25,
                        "line": 0
                    },
                    "start": {
                        "character": 19,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 6
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "-Wextra-tokens",
                "message": "Extra tokens at end of #include directive (fix available)",
                "range": {
                    "end": {
                        "character": 25,
                        "line": 0
                    },
                    "start": {
                        "character": 19,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 12
    }
}
Diagnostics received from LSP.
Errors received: []
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "-Wextra-tokens",
                "message": "Extra tokens at end of #include directive (fix available)",
                "range": {
                    "end": {
                        "character": 25,
                        "line": 0
                    },
                    "start": {
                        "character": 19,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 16
    }
}
Diagnostics received from LSP.
Errors received: []
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "-Wextra-tokens",
                "message": "Extra tokens at end of #include directive (fix available)",
                "range": {
                    "end": {
                        "character": 28,
                        "line": 0
                    },
                    "start": {
                        "character": 19,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 16
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "-Wextra-tokens",
                "message": "Extra tokens at end of #include directive (fix available)",
                "range": {
                    "end": {
                        "character": 28,
                        "line": 0
                    },
                    "start": {
                        "character": 19,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 20
    }
}
Diagnostics received from LSP.
Errors received: []
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "-Wextra-tokens",
                "message": "Extra tokens at end of #include directive (fix available)",
                "range": {
                    "end": {
                        "character": 28,
                        "line": 0
                    },
                    "start": {
                        "character": 19,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 24
    }
}
Diagnostics received from LSP.
Errors received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "-Wextra-tokens",
                "message": "Extra tokens at end of #include directive (fix available)",
                "range": {
                    "end": {
                        "character": 30,
                        "line": 0
                    },
                    "start": {
                        "character": 19,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 24
    }
}
Diagnostics received from LSP.
Errors received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "-Wextra-tokens",
                "message": "Extra tokens at end of #include directive (fix available)",
                "range": {
                    "end": {
                        "character": 34,
                        "line": 0
                    },
                    "start": {
                        "character": 19,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 24
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "-Wextra-tokens",
                "message": "Extra tokens at end of #include directive (fix available)",
                "range": {
                    "end": {
                        "character": 34,
                        "line": 0
                    },
                    "start": {
                        "character": 19,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 26
    }
}
Diagnostics received from LSP.
Errors received: []
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "-Wextra-tokens",
                "message": "Extra tokens at end of #include directive (fix available)",
                "range": {
                    "end": {
                        "character": 34,
                        "line": 0
                    },
                    "start": {
                        "character": 19,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 30
    }
}
Diagnostics received from LSP.
Errors received: []
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "-Wextra-tokens",
                "message": "Extra tokens at end of #include directive (fix available)",
                "range": {
                    "end": {
                        "character": 34,
                        "line": 0
                    },
                    "start": {
                        "character": 19,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 32
    }
}
Diagnostics received from LSP.
Errors received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "-Wextra-tokens",
                "message": "Extra tokens at end of #include directive (fix available)",
                "range": {
                    "end": {
                        "character": 23,
                        "line": 0
                    },
                    "start": {
                        "character": 19,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 32
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "-Wextra-tokens",
                "message": "Extra tokens at end of #include directive (fix available)",
                "range": {
                    "end": {
                        "character": 23,
                        "line": 0
                    },
                    "start": {
                        "character": 19,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 34
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "-Wextra-tokens",
                "message": "Extra tokens at end of #include directive (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 0
                    },
                    "start": {
                        "character": 19,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 34
    }
}
Diagnostics received from LSP.
Errors received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "-Wextra-tokens",
                "message": "Extra tokens at end of #include directive (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 0
                    },
                    "start": {
                        "character": 19,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 42
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "-Wextra-tokens",
                "message": "Extra tokens at end of #include directive (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 0
                    },
                    "start": {
                        "character": 19,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 46
    }
}
Diagnostics received from LSP.
Errors received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "-Wextra-tokens",
                "message": "Extra tokens at end of #include directive (fix available)",
                "range": {
                    "end": {
                        "character": 27,
                        "line": 0
                    },
                    "start": {
                        "character": 19,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 46
    }
}
Diagnostics received from LSP.
Errors received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "-Wextra-tokens",
                "message": "Extra tokens at end of #include directive (fix available)",
                "range": {
                    "end": {
                        "character": 33,
                        "line": 0
                    },
                    "start": {
                        "character": 19,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 46
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.968748688697815,
                "sortText": "4004000bstd",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 1.5456733703613281,
                "sortText": "403a2760size_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "using namespace",
                "insertText": "using namespace",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using namespace identifier;",
                "score": 1.1789171695709229,
                "sortText": "4069193eusing namespace",
                "textEdit": {
                    "newText": "using namespace",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "_iobuf",
                "insertText": "_iobuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " _iobuf",
                "score": 1.0411033630371094,
                "sortText": "407abd20_iobuf",
                "textEdit": {
                    "newText": "_iobuf",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "type_info",
                "insertText": "type_info",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " type_info",
                "score": 1.0411033630371094,
                "sortText": "407abd20type_info",
                "textEdit": {
                    "newText": "type_info",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "namespace",
                "insertText": "namespace",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " namespace name = namespace;",
                "score": 1.0196586847305298,
                "sortText": "407d7bd3namespace",
                "textEdit": {
                    "newText": "namespace",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using qualifier::name;",
                "score": 1.0196586847305298,
                "sortText": "407d7bd3using",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using name = type;",
                "score": 1.0196586847305298,
                "sortText": "407d7bd3using",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR32_T_LOCK_FREE",
                "score": 0.9372367262840271,
                "sortText": "40901141ATOMIC_CHAR32_T_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR32_T_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR_LOCK_FREE",
                "insertText": "ATOMIC_CHAR_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR_LOCK_FREE",
                "score": 0.9372367262840271,
                "sortText": "40901141ATOMIC_CHAR_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_FLAG_INIT",
                "insertText": "ATOMIC_FLAG_INIT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_FLAG_INIT",
                "score": 0.9372367262840271,
                "sortText": "40901141ATOMIC_FLAG_INIT",
                "textEdit": {
                    "newText": "ATOMIC_FLAG_INIT",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_INT_LOCK_FREE",
                "insertText": "ATOMIC_INT_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_INT_LOCK_FREE",
                "score": 0.9372367262840271,
                "sortText": "40901141ATOMIC_INT_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_INT_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_LLONG_LOCK_FREE",
                "insertText": "ATOMIC_LLONG_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_LLONG_LOCK_FREE",
                "score": 0.9372367262840271,
                "sortText": "40901141ATOMIC_LLONG_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_LLONG_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_LONG_LOCK_FREE",
                "insertText": "ATOMIC_LONG_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_LONG_LOCK_FREE",
                "score": 0.9372367262840271,
                "sortText": "40901141ATOMIC_LONG_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_LONG_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_SHORT_LOCK_FREE",
                "insertText": "ATOMIC_SHORT_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_SHORT_LOCK_FREE",
                "score": 0.9372367262840271,
                "sortText": "40901141ATOMIC_SHORT_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_SHORT_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_VAR_INIT",
                "insertText": "ATOMIC_VAR_INIT",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ATOMIC_VAR_INIT(_Value)",
                "score": 0.9372367262840271,
                "sortText": "40901141ATOMIC_VAR_INIT",
                "textEdit": {
                    "newText": "ATOMIC_VAR_INIT",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_WCHAR_T_LOCK_FREE",
                "insertText": "ATOMIC_WCHAR_T_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_WCHAR_T_LOCK_FREE",
                "score": 0.9372367262840271,
                "sortText": "40901141ATOMIC_WCHAR_T_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_WCHAR_T_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic",
                "insertText": "atomic",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022atomic<class Ty>",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic",
                "textEdit": {
                    "newText": "atomic",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_bool",
                "insertText": "atomic_bool",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_bool",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_bool",
                "textEdit": {
                    "newText": "atomic_bool",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_char",
                "insertText": "atomic_char",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_char",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_char",
                "textEdit": {
                    "newText": "atomic_char",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_char32_t",
                "insertText": "atomic_char32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_char32_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_char32_t",
                "textEdit": {
                    "newText": "atomic_char32_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag",
                "insertText": "atomic_flag",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022atomic_flag",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_flag",
                "textEdit": {
                    "newText": "atomic_flag",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int",
                "insertText": "atomic_int",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_int",
                "textEdit": {
                    "newText": "atomic_int",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int16_t",
                "insertText": "atomic_int16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int16_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_int16_t",
                "textEdit": {
                    "newText": "atomic_int16_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int32_t",
                "insertText": "atomic_int32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int32_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_int32_t",
                "textEdit": {
                    "newText": "atomic_int32_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int64_t",
                "insertText": "atomic_int64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int64_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_int64_t",
                "textEdit": {
                    "newText": "atomic_int64_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int8_t",
                "insertText": "atomic_int8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int8_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_int8_t",
                "textEdit": {
                    "newText": "atomic_int8_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast16_t",
                "insertText": "atomic_int_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast16_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_int_fast16_t",
                "textEdit": {
                    "newText": "atomic_int_fast16_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast32_t",
                "insertText": "atomic_int_fast32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast32_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_int_fast32_t",
                "textEdit": {
                    "newText": "atomic_int_fast32_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast64_t",
                "insertText": "atomic_int_fast64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast64_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_int_fast64_t",
                "textEdit": {
                    "newText": "atomic_int_fast64_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast8_t",
                "insertText": "atomic_int_fast8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast8_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_int_fast8_t",
                "textEdit": {
                    "newText": "atomic_int_fast8_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least16_t",
                "insertText": "atomic_int_least16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least16_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_int_least16_t",
                "textEdit": {
                    "newText": "atomic_int_least16_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least32_t",
                "insertText": "atomic_int_least32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least32_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_int_least32_t",
                "textEdit": {
                    "newText": "atomic_int_least32_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least64_t",
                "insertText": "atomic_int_least64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least64_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_int_least64_t",
                "textEdit": {
                    "newText": "atomic_int_least64_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least8_t",
                "insertText": "atomic_int_least8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least8_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_int_least8_t",
                "textEdit": {
                    "newText": "atomic_int_least8_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_intmax_t",
                "insertText": "atomic_intmax_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_intmax_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_intmax_t",
                "textEdit": {
                    "newText": "atomic_intmax_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_intptr_t",
                "insertText": "atomic_intptr_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_intptr_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_intptr_t",
                "textEdit": {
                    "newText": "atomic_intptr_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_llong",
                "insertText": "atomic_llong",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_llong",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_llong",
                "textEdit": {
                    "newText": "atomic_llong",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ptrdiff_t",
                "insertText": "atomic_ptrdiff_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ptrdiff_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_ptrdiff_t",
                "textEdit": {
                    "newText": "atomic_ptrdiff_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_schar",
                "insertText": "atomic_schar",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_schar",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_schar",
                "textEdit": {
                    "newText": "atomic_schar",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_short",
                "insertText": "atomic_short",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_short",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_short",
                "textEdit": {
                    "newText": "atomic_short",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_size_t",
                "insertText": "atomic_size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_size_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_size_t",
                "textEdit": {
                    "newText": "atomic_size_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uchar",
                "insertText": "atomic_uchar",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uchar",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_uchar",
                "textEdit": {
                    "newText": "atomic_uchar",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint",
                "insertText": "atomic_uint",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_uint",
                "textEdit": {
                    "newText": "atomic_uint",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint32_t",
                "insertText": "atomic_uint32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint32_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_uint32_t",
                "textEdit": {
                    "newText": "atomic_uint32_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint64_t",
                "insertText": "atomic_uint64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint64_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_uint64_t",
                "textEdit": {
                    "newText": "atomic_uint64_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast16_t",
                "insertText": "atomic_uint_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast16_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_uint_fast16_t",
                "textEdit": {
                    "newText": "atomic_uint_fast16_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast64_t",
                "insertText": "atomic_uint_fast64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast64_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_uint_fast64_t",
                "textEdit": {
                    "newText": "atomic_uint_fast64_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast8_t",
                "insertText": "atomic_uint_fast8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast8_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_uint_fast8_t",
                "textEdit": {
                    "newText": "atomic_uint_fast8_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_least16_t",
                "insertText": "atomic_uint_least16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_least16_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_uint_least16_t",
                "textEdit": {
                    "newText": "atomic_uint_least16_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_least32_t",
                "insertText": "atomic_uint_least32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_least32_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_uint_least32_t",
                "textEdit": {
                    "newText": "atomic_uint_least32_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_least8_t",
                "insertText": "atomic_uint_least8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_least8_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_uint_least8_t",
                "textEdit": {
                    "newText": "atomic_uint_least8_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uintmax_t",
                "insertText": "atomic_uintmax_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uintmax_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_uintmax_t",
                "textEdit": {
                    "newText": "atomic_uintmax_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uintptr_t",
                "insertText": "atomic_uintptr_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uintptr_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_uintptr_t",
                "textEdit": {
                    "newText": "atomic_uintptr_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ulong",
                "insertText": "atomic_ulong",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ulong",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_ulong",
                "textEdit": {
                    "newText": "atomic_ulong",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ushort",
                "insertText": "atomic_ushort",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ushort",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_ushort",
                "textEdit": {
                    "newText": "atomic_ushort",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_wchar_t",
                "insertText": "atomic_wchar_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_wchar_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_wchar_t",
                "textEdit": {
                    "newText": "atomic_wchar_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7a_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7a_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7a_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "alignas",
                "insertText": "alignas",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignas(expression)",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aalignas",
                "textEdit": {
                    "newText": "alignas",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "asm",
                "insertText": "asm",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " asm(string-literal)",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aasm",
                "textEdit": {
                    "newText": "asm",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aauto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7abool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7achar",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7achar16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7achar32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aclass",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aconst",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aconstexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7adecltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7adouble",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aenum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "extern",
                "insertText": "extern",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " extern",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aextern",
                "textEdit": {
                    "newText": "extern",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7afloat",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "inline",
                "insertText": "inline",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " inline",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7ainline",
                "textEdit": {
                    "newText": "inline",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aint",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7along",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aoperator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7ashort",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7asigned",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "static",
                "insertText": "static",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " static",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7astatic",
                "textEdit": {
                    "newText": "static",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "static_assert",
                "insertText": "static_assert",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_assert(expression, message);",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7astatic_assert",
                "textEdit": {
                    "newText": "static_assert",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7astruct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "template",
                "insertText": "template",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " template",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7atemplate",
                "textEdit": {
                    "newText": "template",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "template",
                "insertText": "template",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " template",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7atemplate",
                "textEdit": {
                    "newText": "template",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "thread_local",
                "insertText": "thread_local",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " thread_local",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7athread_local",
                "textEdit": {
                    "newText": "thread_local",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "typedef",
                "insertText": "typedef",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typedef type name;",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7atypedef",
                "textEdit": {
                    "newText": "typedef",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7atypename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aunion",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aunsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7avoid",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7avolatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7awchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "__INCLUDE_LEVEL__",
                "insertText": "__INCLUDE_LEVEL__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __INCLUDE_LEVEL__",
                "score": 0.5491840839385986,
                "sortText": "40f368ac__INCLUDE_LEVEL__",
                "textEdit": {
                    "newText": "__INCLUDE_LEVEL__",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "__has_include",
                "insertText": "__has_include",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_include",
                "score": 0.5491840839385986,
                "sortText": "40f368ac__has_include",
                "textEdit": {
                    "newText": "__has_include",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "__has_include_next",
                "insertText": "__has_include_next",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_include_next",
                "score": 0.5491840839385986,
                "sortText": "40f368ac__has_include_next",
                "textEdit": {
                    "newText": "__has_include_next",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "_ATOMIC_CHOOSE_INTRINSIC",
                "insertText": "_ATOMIC_CHOOSE_INTRINSIC",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_ATOMIC_CHOOSE_INTRINSIC",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_ATOMIC_CHOOSE_INTRINSIC",
                "textEdit": {
                    "newText": "_ATOMIC_CHOOSE_INTRINSIC",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "_ATOMIC_POST_LOAD_BARRIER_AS_NEEDED",
                "insertText": "_ATOMIC_POST_LOAD_BARRIER_AS_NEEDED",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_ATOMIC_POST_LOAD_BARRIER_AS_NEEDED",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_ATOMIC_POST_LOAD_BARRIER_AS_NEEDED",
                "textEdit": {
                    "newText": "_ATOMIC_POST_LOAD_BARRIER_AS_NEEDED",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "_ATOMIC_STORE_32_SEQ_CST",
                "insertText": "_ATOMIC_STORE_32_SEQ_CST",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_ATOMIC_STORE_32_SEQ_CST",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_ATOMIC_STORE_32_SEQ_CST",
                "textEdit": {
                    "newText": "_ATOMIC_STORE_32_SEQ_CST",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.968748688697815,
                "sortText": "4004000bstd",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 1.5456733703613281,
                "sortText": "403a2760size_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "string_literals",
                "insertText": "string_literals",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " string_literals",
                "score": 1.1835381984710693,
                "sortText": "406881d2string_literals",
                "textEdit": {
                    "newText": "string_literals",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "stdext",
                "insertText": "stdext",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " stdext",
                "score": 1.0266375541687012,
                "sortText": "407c9724stdext",
                "textEdit": {
                    "newText": "stdext",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "SIG_ATOMIC_MAX",
                "insertText": "SIG_ATOMIC_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SIG_ATOMIC_MAX",
                "score": 0.9372367262840271,
                "sortText": "40901141SIG_ATOMIC_MAX",
                "textEdit": {
                    "newText": "SIG_ATOMIC_MAX",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "SIG_ATOMIC_MIN",
                "insertText": "SIG_ATOMIC_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SIG_ATOMIC_MIN",
                "score": 0.9372367262840271,
                "sortText": "40901141SIG_ATOMIC_MIN",
                "textEdit": {
                    "newText": "SIG_ATOMIC_MIN",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "shared_ptr",
                "insertText": "shared_ptr",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022shared_ptr<class Ty>",
                "score": 0.9031737446784973,
                "sortText": "4098c99bshared_ptr",
                "textEdit": {
                    "newText": "shared_ptr",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <streambuf>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <streambuf>"
                },
                "filterText": "streambuf",
                "insertText": "streambuf",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022streambuf",
                "score": 0.9031737446784973,
                "sortText": "4098c99bstreambuf",
                "textEdit": {
                    "newText": "streambuf",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ios>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ios>\nfrom <streambuf>"
                },
                "filterText": "streamoff",
                "insertText": "streamoff",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022streamoff",
                "score": 0.9031737446784973,
                "sortText": "4098c99bstreamoff",
                "textEdit": {
                    "newText": "streamoff",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iosfwd>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iosfwd>"
                },
                "filterText": "streampos",
                "insertText": "streampos",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022streampos",
                "score": 0.9031737446784973,
                "sortText": "4098c99bstreampos",
                "textEdit": {
                    "newText": "streampos",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ios>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ios>"
                },
                "filterText": "streamsize",
                "insertText": "streamsize",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022streamsize",
                "score": 0.9031737446784973,
                "sortText": "4098c99bstreamsize",
                "textEdit": {
                    "newText": "streamsize",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string>"
                },
                "filterText": "string",
                "insertText": "string",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022string",
                "score": 0.9031737446784973,
                "sortText": "4098c99bstring",
                "textEdit": {
                    "newText": "string",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <sstream>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <sstream>"
                },
                "filterText": "stringbuf",
                "insertText": "stringbuf",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022stringbuf",
                "score": 0.9031737446784973,
                "sortText": "4098c99bstringbuf",
                "textEdit": {
                    "newText": "stringbuf",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <sstream>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <sstream>"
                },
                "filterText": "stringstream",
                "insertText": "stringstream",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022stringstream",
                "score": 0.9031737446784973,
                "sortText": "4098c99bstringstream",
                "textEdit": {
                    "newText": "stringstream",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>"
                },
                "filterText": "system_error",
                "insertText": "system_error",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022system_error",
                "score": 0.9031737446784973,
                "sortText": "4098c99bsystem_error",
                "textEdit": {
                    "newText": "system_error",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "SEEK_CUR",
                "insertText": "SEEK_CUR",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SEEK_CUR",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5SEEK_CUR",
                "textEdit": {
                    "newText": "SEEK_CUR",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "SEEK_END",
                "insertText": "SEEK_END",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SEEK_END",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5SEEK_END",
                "textEdit": {
                    "newText": "SEEK_END",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "SEEK_SET",
                "insertText": "SEEK_SET",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SEEK_SET",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5SEEK_SET",
                "textEdit": {
                    "newText": "SEEK_SET",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "SW_DENORMAL",
                "insertText": "SW_DENORMAL",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SW_DENORMAL",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5SW_DENORMAL",
                "textEdit": {
                    "newText": "SW_DENORMAL",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "SW_INEXACT",
                "insertText": "SW_INEXACT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SW_INEXACT",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5SW_INEXACT",
                "textEdit": {
                    "newText": "SW_INEXACT",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "SW_INVALID",
                "insertText": "SW_INVALID",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SW_INVALID",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5SW_INVALID",
                "textEdit": {
                    "newText": "SW_INVALID",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "SW_OVERFLOW",
                "insertText": "SW_OVERFLOW",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SW_OVERFLOW",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5SW_OVERFLOW",
                "textEdit": {
                    "newText": "SW_OVERFLOW",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "SW_SQRTNEG",
                "insertText": "SW_SQRTNEG",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SW_SQRTNEG",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5SW_SQRTNEG",
                "textEdit": {
                    "newText": "SW_SQRTNEG",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "SW_STACKOVERFLOW",
                "insertText": "SW_STACKOVERFLOW",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SW_STACKOVERFLOW",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5SW_STACKOVERFLOW",
                "textEdit": {
                    "newText": "SW_STACKOVERFLOW",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "SW_STACKUNDERFLOW",
                "insertText": "SW_STACKUNDERFLOW",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SW_STACKUNDERFLOW",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5SW_STACKUNDERFLOW",
                "textEdit": {
                    "newText": "SW_STACKUNDERFLOW",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "SW_UNDERFLOW",
                "insertText": "SW_UNDERFLOW",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SW_UNDERFLOW",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5SW_UNDERFLOW",
                "textEdit": {
                    "newText": "SW_UNDERFLOW",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "SW_UNEMULATED",
                "insertText": "SW_UNEMULATED",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SW_UNEMULATED",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5SW_UNEMULATED",
                "textEdit": {
                    "newText": "SW_UNEMULATED",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "SW_ZERODIVIDE",
                "insertText": "SW_ZERODIVIDE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SW_ZERODIVIDE",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5SW_ZERODIVIDE",
                "textEdit": {
                    "newText": "SW_ZERODIVIDE",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdio.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdio.h>"
                },
                "filterText": "SYS_OPEN",
                "insertText": "SYS_OPEN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SYS_OPEN",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5SYS_OPEN",
                "textEdit": {
                    "newText": "SYS_OPEN",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "status87",
                "insertText": "status87",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022status87",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5status87",
                "textEdit": {
                    "newText": "status87",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "stderr",
                "insertText": "stderr",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022stderr",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5stderr",
                "textEdit": {
                    "newText": "stderr",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "stdin",
                "insertText": "stdin",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022stdin",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5stdin",
                "textEdit": {
                    "newText": "stdin",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "stdout",
                "insertText": "stdout",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022stdout",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5stdout",
                "textEdit": {
                    "newText": "stdout",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "sys_errlist",
                "insertText": "sys_errlist",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022sys_errlist",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5sys_errlist",
                "textEdit": {
                    "newText": "sys_errlist",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "sys_nerr",
                "insertText": "sys_nerr",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022sys_nerr",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5sys_nerr",
                "textEdit": {
                    "newText": "sys_nerr",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <sys/stat.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <sys/stat.h>"
                },
                "filterText": "S_IEXEC",
                "insertText": "S_IEXEC",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022S_IEXEC",
                "score": 0.8724930882453918,
                "sortText": "40a0a44bS_IEXEC",
                "textEdit": {
                    "newText": "S_IEXEC",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <sys/stat.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <sys/stat.h>"
                },
                "filterText": "S_IFCHR",
                "insertText": "S_IFCHR",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022S_IFCHR",
                "score": 0.8724930882453918,
                "sortText": "40a0a44bS_IFCHR",
                "textEdit": {
                    "newText": "S_IFCHR",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <sys/stat.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <sys/stat.h>"
                },
                "filterText": "S_IFDIR",
                "insertText": "S_IFDIR",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022S_IFDIR",
                "score": 0.8724930882453918,
                "sortText": "40a0a44bS_IFDIR",
                "textEdit": {
                    "newText": "S_IFDIR",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <sys/stat.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <sys/stat.h>"
                },
                "filterText": "S_IFMT",
                "insertText": "S_IFMT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022S_IFMT",
                "score": 0.8724930882453918,
                "sortText": "40a0a44bS_IFMT",
                "textEdit": {
                    "newText": "S_IFMT",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <sys/stat.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <sys/stat.h>"
                },
                "filterText": "S_IFREG",
                "insertText": "S_IFREG",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022S_IFREG",
                "score": 0.8724930882453918,
                "sortText": "40a0a44bS_IFREG",
                "textEdit": {
                    "newText": "S_IFREG",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <sys/stat.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <sys/stat.h>"
                },
                "filterText": "S_IREAD",
                "insertText": "S_IREAD",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022S_IREAD",
                "score": 0.8724930882453918,
                "sortText": "40a0a44bS_IREAD",
                "textEdit": {
                    "newText": "S_IREAD",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <sys/stat.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <sys/stat.h>"
                },
                "filterText": "S_IWRITE",
                "insertText": "S_IWRITE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022S_IWRITE",
                "score": 0.8724930882453918,
                "sortText": "40a0a44bS_IWRITE",
                "textEdit": {
                    "newText": "S_IWRITE",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7ashort",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7asigned",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "static",
                "insertText": "static",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " static",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7astatic",
                "textEdit": {
                    "newText": "static",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "static_assert",
                "insertText": "static_assert",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_assert(expression, message);",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7astatic_assert",
                "textEdit": {
                    "newText": "static_assert",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7astruct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <sys/stat.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <sys/stat.h>"
                },
                "filterText": "stat",
                "insertText": "stat",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022stat",
                "score": 0.5742632150650024,
                "sortText": "40ecfd16stat",
                "textEdit": {
                    "newText": "stat",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.size())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "size",
                "insertText": "size",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022size(const Container &Cont)",
                "score": 0.4551366865634918,
                "sortText": "4116f853size",
                "textEdit": {
                    "newText": "size",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty1>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "static_pointer_cast",
                "insertText": "static_pointer_cast",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022static_pointer_cast<class Ty1>(const shared_ptr<Ty2> &Other)",
                "score": 0.4551366865634918,
                "sortText": "4116f853static_pointer_cast",
                "textEdit": {
                    "newText": "static_pointer_cast",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty1>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "static_pointer_cast",
                "insertText": "static_pointer_cast",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022static_pointer_cast<class Ty1>(shared_ptr<Ty2> &&Other)",
                "score": 0.4551366865634918,
                "sortText": "4116f853static_pointer_cast",
                "textEdit": {
                    "newText": "static_pointer_cast",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "size",
                "insertText": "size",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022size(const Ty (&)[Size])",
                "score": 0.35654914379119873,
                "sortText": "41497264size",
                "textEdit": {
                    "newText": "size",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "swap",
                "insertText": "swap",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022swap(basic_string<Elem, Traits, Alloc> &Left, basic_string<Elem, Traits, Alloc> &Right)",
                "score": 0.35654914379119873,
                "sortText": "41497264swap",
                "textEdit": {
                    "newText": "swap",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "swap",
                "insertText": "swap",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022swap(unique_ptr<Ty, Dx> &Left, unique_ptr<Ty, Dx> &Right)",
                "score": 0.35654914379119873,
                "sortText": "41497264swap",
                "textEdit": {
                    "newText": "swap",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "swap",
                "insertText": "swap",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022swap(shared_ptr<Ty> &Left, shared_ptr<Ty> &Right)",
                "score": 0.35654914379119873,
                "sortText": "41497264swap",
                "textEdit": {
                    "newText": "swap",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "swap",
                "insertText": "swap",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022swap(Ty (&)[Size], Ty (&)[Size])",
                "score": 0.35654914379119873,
                "sortText": "41497264swap",
                "textEdit": {
                    "newText": "swap",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "swap",
                "insertText": "swap",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022swap(weak_ptr<Ty> &Left, weak_ptr<Ty> &Right)",
                "score": 0.35654914379119873,
                "sortText": "41497264swap",
                "textEdit": {
                    "newText": "swap",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "swap",
                "insertText": "swap",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022swap(Ty &, Ty &)",
                "score": 0.35654914379119873,
                "sortText": "41497264swap",
                "textEdit": {
                    "newText": "swap",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "swap",
                "insertText": "swap",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022swap(pair<Ty1, Ty2> &Left, pair<Ty1, Ty2> &Right)",
                "score": 0.35654914379119873,
                "sortText": "41497264swap",
                "textEdit": {
                    "newText": "swap",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "const error_category &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>"
                },
                "filterText": "system_category",
                "insertText": "system_category",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022system_category()",
                "score": 0.35654914379119873,
                "sortText": "41497264system_category",
                "textEdit": {
                    "newText": "system_category",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdio.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdio.h>"
                },
                "filterText": "scanf_s",
                "insertText": "scanf_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022scanf_s(const char *const Format, ...)",
                "score": 0.27191126346588135,
                "sortText": "4174c80cscanf_s",
                "textEdit": {
                    "newText": "scanf_s",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "setvbuf",
                "insertText": "setvbuf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022setvbuf(FILE *Stream, char *Buffer, int Mode, size_t Size)",
                "score": 0.27191126346588135,
                "sortText": "4174c80csetvbuf",
                "textEdit": {
                    "newText": "setvbuf",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "snprintf",
                "insertText": "snprintf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022snprintf(char *const Buffer, const size_t BufferCount, const char *const Format, ...)",
                "score": 0.27191126346588135,
                "sortText": "4174c80csnprintf",
                "textEdit": {
                    "newText": "snprintf",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "sprintf",
                "insertText": "sprintf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022sprintf(char *const Buffer, const char *const Format, ...)",
                "score": 0.27191126346588135,
                "sortText": "4174c80csprintf",
                "textEdit": {
                    "newText": "sprintf",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdio.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdio.h>"
                },
                "filterText": "sprintf_s",
                "insertText": "sprintf_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022sprintf_s(char *const Buffer, const size_t BufferCount, const char *const Format, ...)",
                "score": 0.27191126346588135,
                "sortText": "4174c80csprintf_s",
                "textEdit": {
                    "newText": "sprintf_s",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdio.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdio.h>"
                },
                "filterText": "sprintf_s",
                "insertText": "sprintf_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022sprintf_s(char (&Buffer)[Size], const char *Format, ...)",
                "score": 0.27191126346588135,
                "sortText": "4174c80csprintf_s",
                "textEdit": {
                    "newText": "sprintf_s",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "srand",
                "insertText": "srand",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022srand(unsigned int Seed)",
                "score": 0.27191126346588135,
                "sortText": "4174c80csrand",
                "textEdit": {
                    "newText": "srand",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdio.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdio.h>"
                },
                "filterText": "sscanf_s",
                "insertText": "sscanf_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022sscanf_s(const char *const Buffer, const char *const Format, ...)",
                "score": 0.27191126346588135,
                "sortText": "4174c80csscanf_s",
                "textEdit": {
                    "newText": "sscanf_s",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strcmp",
                "insertText": "strcmp",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strcmp(const char *Str1, const char *Str2)",
                "score": 0.27191126346588135,
                "sortText": "4174c80cstrcmp",
                "textEdit": {
                    "newText": "strcmp",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string.h>"
                },
                "filterText": "strncat_s",
                "insertText": "strncat_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strncat_s(char (&Destination)[Size], const char *Source, size_t Count)",
                "score": 0.27191126346588135,
                "sortText": "4174c80cstrncat_s",
                "textEdit": {
                    "newText": "strncat_s",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string.h>"
                },
                "filterText": "strncpy_s",
                "insertText": "strncpy_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strncpy_s(char *Destination, rsize_t SizeInBytes, const char *Source, rsize_t MaxCount)",
                "score": 0.27191126346588135,
                "sortText": "4174c80cstrncpy_s",
                "textEdit": {
                    "newText": "strncpy_s",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string.h>"
                },
                "filterText": "strnlen",
                "insertText": "strnlen",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strnlen(const char *String, size_t MaxCount)",
                "score": 0.27191126346588135,
                "sortText": "4174c80cstrnlen",
                "textEdit": {
                    "newText": "strnlen",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strstr",
                "insertText": "strstr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strstr(char *const String, const char *const SubString)",
                "score": 0.27191126346588135,
                "sortText": "4174c80cstrstr",
                "textEdit": {
                    "newText": "strstr",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "strtod",
                "insertText": "strtod",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strtod(const char *String, char **EndPtr)",
                "score": 0.27191126346588135,
                "sortText": "4174c80cstrtod",
                "textEdit": {
                    "newText": "strtod",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "strtof",
                "insertText": "strtof",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strtof(const char *String, char **EndPtr)",
                "score": 0.27191126346588135,
                "sortText": "4174c80cstrtof",
                "textEdit": {
                    "newText": "strtof",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "strtol",
                "insertText": "strtol",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strtol(const char *String, char **EndPtr, int Radix)",
                "score": 0.27191126346588135,
                "sortText": "4174c80cstrtol",
                "textEdit": {
                    "newText": "strtol",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "strtold",
                "insertText": "strtold",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strtold(const char *String, char **EndPtr)",
                "score": 0.27191126346588135,
                "sortText": "4174c80cstrtold",
                "textEdit": {
                    "newText": "strtold",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "strtoll",
                "insertText": "strtoll",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strtoll(const char *String, char **EndPtr, int Radix)",
                "score": 0.27191126346588135,
                "sortText": "4174c80cstrtoll",
                "textEdit": {
                    "newText": "strtoll",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "unsigned long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "strtoul",
                "insertText": "strtoul",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strtoul(const char *String, char **EndPtr, int Radix)",
                "score": 0.27191126346588135,
                "sortText": "4174c80cstrtoul",
                "textEdit": {
                    "newText": "strtoul",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "unsigned long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "strtoull",
                "insertText": "strtoull",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strtoull(const char *String, char **EndPtr, int Radix)",
                "score": 0.27191126346588135,
                "sortText": "4174c80cstrtoull",
                "textEdit": {
                    "newText": "strtoull",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strxfrm",
                "insertText": "strxfrm",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strxfrm(char *Destination, const char *Source, size_t MaxCount)",
                "score": 0.27191126346588135,
                "sortText": "4174c80cstrxfrm",
                "textEdit": {
                    "newText": "strxfrm",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwchar>"
                },
                "filterText": "swprintf",
                "insertText": "swprintf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022swprintf(wchar_t *const Buffer, const size_t BufferCount, const wchar_t *const Format, ...)",
                "score": 0.27191126346588135,
                "sortText": "4174c80cswprintf",
                "textEdit": {
                    "newText": "swprintf",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstdio.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstdio.h>"
                },
                "filterText": "swprintf_s",
                "insertText": "swprintf_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022swprintf_s(wchar_t (&Buffer)[Size], const wchar_t *Format, ...)",
                "score": 0.27191126346588135,
                "sortText": "4174c80cswprintf_s",
                "textEdit": {
                    "newText": "swprintf_s",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstdio.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstdio.h>"
                },
                "filterText": "swprintf_s",
                "insertText": "swprintf_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022swprintf_s(wchar_t *const Buffer, const size_t BufferCount, const wchar_t *const Format, ...)",
                "score": 0.27191126346588135,
                "sortText": "4174c80cswprintf_s",
                "textEdit": {
                    "newText": "swprintf_s",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstdio.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstdio.h>"
                },
                "filterText": "swscanf_s",
                "insertText": "swscanf_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022swscanf_s(const wchar_t *const Buffer, const wchar_t *const Format, ...)",
                "score": 0.27191126346588135,
                "sortText": "4174c80cswscanf_s",
                "textEdit": {
                    "newText": "swscanf_s",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "system",
                "insertText": "system",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022system(const char *Command)",
                "score": 0.27191126346588135,
                "sortText": "4174c80csystem",
                "textEdit": {
                    "newText": "system",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nENOTRECOVERABLE"
                },
                "filterText": "state_not_recoverable",
                "insertText": "errc::state_not_recoverable",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::state_not_recoverable",
                "score": 0.256162166595459,
                "sortText": "417cd850state_not_recoverable",
                "textEdit": {
                    "newText": "errc::state_not_recoverable",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ios>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "std::io_errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ios>"
                },
                "filterText": "stream",
                "insertText": "io_errc::stream",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022io_errc::stream",
                "score": 0.256162166595459,
                "sortText": "417cd850stream",
                "textEdit": {
                    "newText": "io_errc::stream",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nETIME"
                },
                "filterText": "stream_timeout",
                "insertText": "errc::stream_timeout",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::stream_timeout",
                "score": 0.256162166595459,
                "sortText": "417cd850stream_timeout",
                "textEdit": {
                    "newText": "errc::stream_timeout",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::pointer_safety",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "strict",
                "insertText": "pointer_safety::strict",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022pointer_safety::strict",
                "score": 0.256162166595459,
                "sortText": "417cd850strict",
                "textEdit": {
                    "newText": "pointer_safety::strict",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <sys/stat.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <sys/stat.h>"
                },
                "filterText": "stat",
                "insertText": "stat",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022stat(const char *const FileName, struct stat *const Stat)",
                "score": 0.2522033154964447,
                "sortText": "417edf35stat",
                "textEdit": {
                    "newText": "stat",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "scanf",
                "insertText": "scanf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022scanf(const char *const Format, ...)",
                "score": 0.23015829920768738,
                "sortText": "41945162scanf",
                "textEdit": {
                    "newText": "scanf",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "setbuf",
                "insertText": "setbuf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022setbuf(FILE *Stream, char *Buffer)",
                "score": 0.23015829920768738,
                "sortText": "41945162setbuf",
                "textEdit": {
                    "newText": "setbuf",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "sscanf",
                "insertText": "sscanf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022sscanf(const char *const Buffer, const char *const Format, ...)",
                "score": 0.23015829920768738,
                "sortText": "41945162sscanf",
                "textEdit": {
                    "newText": "sscanf",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string.h>\nDeclarations of functions defined in oldnames.lib:"
                },
                "filterText": "strcmpi",
                "insertText": "strcmpi",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strcmpi(const char *String1, const char *String2)",
                "score": 0.23015829920768738,
                "sortText": "41945162strcmpi",
                "textEdit": {
                    "newText": "strcmpi",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string.h>"
                },
                "filterText": "strdup",
                "insertText": "strdup",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strdup(const char *String)",
                "score": 0.23015829920768738,
                "sortText": "41945162strdup",
                "textEdit": {
                    "newText": "strdup",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strerror",
                "insertText": "strerror",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strerror(int ErrorMessage)",
                "score": 0.23015829920768738,
                "sortText": "41945162strerror",
                "textEdit": {
                    "newText": "strerror",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string.h>"
                },
                "filterText": "strlwr",
                "insertText": "strlwr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strlwr(char *String)",
                "score": 0.23015829920768738,
                "sortText": "41945162strlwr",
                "textEdit": {
                    "newText": "strlwr",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string.h>"
                },
                "filterText": "strrev",
                "insertText": "strrev",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strrev(char *String)",
                "score": 0.23015829920768738,
                "sortText": "41945162strrev",
                "textEdit": {
                    "newText": "strrev",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "swab",
                "insertText": "swab",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022swab(char *Buf1, char *Buf2, int SizeInBytes)",
                "score": 0.23015829920768738,
                "sortText": "41945162swab",
                "textEdit": {
                    "newText": "swab",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "-Wextra-tokens",
                "message": "Extra tokens at end of #include directive (fix available)",
                "range": {
                    "end": {
                        "character": 33,
                        "line": 0
                    },
                    "start": {
                        "character": 19,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "unknown_typename",
                "message": "Unknown type name 's'",
                "range": {
                    "end": {
                        "character": 21,
                        "line": 2
                    },
                    "start": {
                        "character": 20,
                        "line": 2
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 52
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=2, column=20, column_end = 21, message=Unknown type name 's')]
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "-Wextra-tokens",
                "message": "Extra tokens at end of #include directive (fix available)",
                "range": {
                    "end": {
                        "character": 33,
                        "line": 0
                    },
                    "start": {
                        "character": 19,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'sd'",
                "range": {
                    "end": {
                        "character": 22,
                        "line": 2
                    },
                    "start": {
                        "character": 20,
                        "line": 2
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 54
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=2, column=20, column_end = 22, message=Unknown type name 'sd')]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "set_difference",
                "insertText": "set_difference",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022set_difference(InIt1 First1, InIt1 Last1, InIt2 First2, InIt2 Last2, OutIt Dest, Pr Pred)",
                "score": 0.4551366865634918,
                "sortText": "41513a3eset_difference",
                "textEdit": {
                    "newText": "set_difference",
                    "range": {
                        "end": {
                            "character": 22,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "set_difference",
                "insertText": "set_difference",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022set_difference(InIt1 First1, InIt1 Last1, InIt2 First2, InIt2 Last2, OutIt Dest)",
                "score": 0.4551366865634918,
                "sortText": "41513a3eset_difference",
                "textEdit": {
                    "newText": "set_difference",
                    "range": {
                        "end": {
                            "character": 22,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "set_symmetric_difference",
                "insertText": "set_symmetric_difference",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022set_symmetric_difference(InIt1 First1, InIt1 Last1, InIt2 First2, InIt2 Last2, OutIt Dest, Pr Pred)",
                "score": 0.4551366865634918,
                "sortText": "416e5b34set_symmetric_difference",
                "textEdit": {
                    "newText": "set_symmetric_difference",
                    "range": {
                        "end": {
                            "character": 22,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "set_symmetric_difference",
                "insertText": "set_symmetric_difference",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022set_symmetric_difference(InIt1 First1, InIt1 Last1, InIt2 First2, InIt2 Last2, OutIt Dest)",
                "score": 0.4551366865634918,
                "sortText": "416e5b34set_symmetric_difference",
                "textEdit": {
                    "newText": "set_symmetric_difference",
                    "range": {
                        "end": {
                            "character": 22,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "chi_squared_distribution",
                "insertText": "chi_squared_distribution",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022chi_squared_distribution<class Ty>",
                "score": 0.9031737446784973,
                "sortText": "4218c99bchi_squared_distribution",
                "textEdit": {
                    "newText": "chi_squared_distribution",
                    "range": {
                        "end": {
                            "character": 22,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <errno.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <errno.h>"
                },
                "filterText": "_set_doserrno",
                "insertText": "_set_doserrno",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_set_doserrno(unsigned long Value)",
                "score": 0.27191126346588135,
                "sortText": "42f4c80c_set_doserrno",
                "textEdit": {
                    "newText": "_set_doserrno",
                    "range": {
                        "end": {
                            "character": 22,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nENODEV"
                },
                "filterText": "no_such_device",
                "insertText": "errc::no_such_device",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::no_such_device",
                "score": 0.256162166595459,
                "sortText": "42fcd850no_such_device",
                "textEdit": {
                    "newText": "errc::no_such_device",
                    "range": {
                        "end": {
                            "character": 22,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nENXIO"
                },
                "filterText": "no_such_device_or_address",
                "insertText": "errc::no_such_device_or_address",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::no_such_device_or_address",
                "score": 0.256162166595459,
                "sortText": "42fcd850no_such_device_or_address",
                "textEdit": {
                    "newText": "errc::no_such_device_or_address",
                    "range": {
                        "end": {
                            "character": 22,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "chi_squared_distribution",
                "insertText": "tr1::chi_squared_distribution",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::chi_squared_distribution",
                "score": 0.22078968584537506,
                "sortText": "431de94fchi_squared_distribution",
                "textEdit": {
                    "newText": "tr1::chi_squared_distribution",
                    "range": {
                        "end": {
                            "character": 22,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "-Wextra-tokens",
                "message": "Extra tokens at end of #include directive (fix available)",
                "range": {
                    "end": {
                        "character": 33,
                        "line": 0
                    },
                    "start": {
                        "character": 19,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'sds'",
                "range": {
                    "end": {
                        "character": 23,
                        "line": 2
                    },
                    "start": {
                        "character": 20,
                        "line": 2
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 56
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=2, column=20, column_end = 23, message=Unknown type name 'sds')]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "namespace std\n\nnamespace std {}"
        },
        "range": {
            "end": {
                "character": 5,
                "line": 2
            },
            "start": {
                "character": 0,
                "line": 2
            }
        }
    }
}
Received hover response.
Hover text: namespace std

namespace std {}
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "namespace std\n\nnamespace std {}"
        },
        "range": {
            "end": {
                "character": 5,
                "line": 2
            },
            "start": {
                "character": 0,
                "line": 2
            }
        }
    }
}
Received hover response.
Hover text: namespace std

namespace std {}
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": null
}
Received hover response.
Hover response does not contain 'contents'.
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": null
}
Received hover response.
Hover response does not contain 'contents'.
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "set_difference",
                "insertText": "set_difference",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022set_difference(InIt1 First1, InIt1 Last1, InIt2 First2, InIt2 Last2, OutIt Dest, Pr Pred)",
                "score": 0.4551366865634918,
                "sortText": "41513a3eset_difference",
                "textEdit": {
                    "newText": "set_difference",
                    "range": {
                        "end": {
                            "character": 22,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "set_difference",
                "insertText": "set_difference",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022set_difference(InIt1 First1, InIt1 Last1, InIt2 First2, InIt2 Last2, OutIt Dest)",
                "score": 0.4551366865634918,
                "sortText": "41513a3eset_difference",
                "textEdit": {
                    "newText": "set_difference",
                    "range": {
                        "end": {
                            "character": 22,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "set_symmetric_difference",
                "insertText": "set_symmetric_difference",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022set_symmetric_difference(InIt1 First1, InIt1 Last1, InIt2 First2, InIt2 Last2, OutIt Dest, Pr Pred)",
                "score": 0.4551366865634918,
                "sortText": "416e5b34set_symmetric_difference",
                "textEdit": {
                    "newText": "set_symmetric_difference",
                    "range": {
                        "end": {
                            "character": 22,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "set_symmetric_difference",
                "insertText": "set_symmetric_difference",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022set_symmetric_difference(InIt1 First1, InIt1 Last1, InIt2 First2, InIt2 Last2, OutIt Dest)",
                "score": 0.4551366865634918,
                "sortText": "416e5b34set_symmetric_difference",
                "textEdit": {
                    "newText": "set_symmetric_difference",
                    "range": {
                        "end": {
                            "character": 22,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "chi_squared_distribution",
                "insertText": "chi_squared_distribution",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022chi_squared_distribution<class Ty>",
                "score": 0.9031737446784973,
                "sortText": "4218c99bchi_squared_distribution",
                "textEdit": {
                    "newText": "chi_squared_distribution",
                    "range": {
                        "end": {
                            "character": 22,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <errno.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <errno.h>"
                },
                "filterText": "_set_doserrno",
                "insertText": "_set_doserrno",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_set_doserrno(unsigned long Value)",
                "score": 0.27191126346588135,
                "sortText": "42f4c80c_set_doserrno",
                "textEdit": {
                    "newText": "_set_doserrno",
                    "range": {
                        "end": {
                            "character": 22,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nENODEV"
                },
                "filterText": "no_such_device",
                "insertText": "errc::no_such_device",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::no_such_device",
                "score": 0.256162166595459,
                "sortText": "42fcd850no_such_device",
                "textEdit": {
                    "newText": "errc::no_such_device",
                    "range": {
                        "end": {
                            "character": 22,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nENXIO"
                },
                "filterText": "no_such_device_or_address",
                "insertText": "errc::no_such_device_or_address",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::no_such_device_or_address",
                "score": 0.256162166595459,
                "sortText": "42fcd850no_such_device_or_address",
                "textEdit": {
                    "newText": "errc::no_such_device_or_address",
                    "range": {
                        "end": {
                            "character": 22,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "chi_squared_distribution",
                "insertText": "tr1::chi_squared_distribution",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::chi_squared_distribution",
                "score": 0.22078968584537506,
                "sortText": "431de94fchi_squared_distribution",
                "textEdit": {
                    "newText": "tr1::chi_squared_distribution",
                    "range": {
                        "end": {
                            "character": 22,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "-Wextra-tokens",
                "message": "Extra tokens at end of #include directive (fix available)",
                "range": {
                    "end": {
                        "character": 33,
                        "line": 0
                    },
                    "start": {
                        "character": 19,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'sd'",
                "range": {
                    "end": {
                        "character": 22,
                        "line": 2
                    },
                    "start": {
                        "character": 20,
                        "line": 2
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 62
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=2, column=20, column_end = 22, message=Unknown type name 'sd')]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.968748688697815,
                "sortText": "4004000bstd",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 1.5456733703613281,
                "sortText": "403a2760size_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "string_literals",
                "insertText": "string_literals",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " string_literals",
                "score": 1.1835381984710693,
                "sortText": "406881d2string_literals",
                "textEdit": {
                    "newText": "string_literals",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "stdext",
                "insertText": "stdext",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " stdext",
                "score": 1.0266375541687012,
                "sortText": "407c9724stdext",
                "textEdit": {
                    "newText": "stdext",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "SIG_ATOMIC_MAX",
                "insertText": "SIG_ATOMIC_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SIG_ATOMIC_MAX",
                "score": 0.9372367262840271,
                "sortText": "40901141SIG_ATOMIC_MAX",
                "textEdit": {
                    "newText": "SIG_ATOMIC_MAX",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdint>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdint>"
                },
                "filterText": "SIG_ATOMIC_MIN",
                "insertText": "SIG_ATOMIC_MIN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SIG_ATOMIC_MIN",
                "score": 0.9372367262840271,
                "sortText": "40901141SIG_ATOMIC_MIN",
                "textEdit": {
                    "newText": "SIG_ATOMIC_MIN",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "shared_ptr",
                "insertText": "shared_ptr",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022shared_ptr<class Ty>",
                "score": 0.9031737446784973,
                "sortText": "4098c99bshared_ptr",
                "textEdit": {
                    "newText": "shared_ptr",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <streambuf>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <streambuf>"
                },
                "filterText": "streambuf",
                "insertText": "streambuf",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022streambuf",
                "score": 0.9031737446784973,
                "sortText": "4098c99bstreambuf",
                "textEdit": {
                    "newText": "streambuf",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ios>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ios>\nfrom <streambuf>"
                },
                "filterText": "streamoff",
                "insertText": "streamoff",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022streamoff",
                "score": 0.9031737446784973,
                "sortText": "4098c99bstreamoff",
                "textEdit": {
                    "newText": "streamoff",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iosfwd>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iosfwd>"
                },
                "filterText": "streampos",
                "insertText": "streampos",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022streampos",
                "score": 0.9031737446784973,
                "sortText": "4098c99bstreampos",
                "textEdit": {
                    "newText": "streampos",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ios>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ios>"
                },
                "filterText": "streamsize",
                "insertText": "streamsize",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022streamsize",
                "score": 0.9031737446784973,
                "sortText": "4098c99bstreamsize",
                "textEdit": {
                    "newText": "streamsize",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string>"
                },
                "filterText": "string",
                "insertText": "string",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022string",
                "score": 0.9031737446784973,
                "sortText": "4098c99bstring",
                "textEdit": {
                    "newText": "string",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <sstream>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <sstream>"
                },
                "filterText": "stringbuf",
                "insertText": "stringbuf",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022stringbuf",
                "score": 0.9031737446784973,
                "sortText": "4098c99bstringbuf",
                "textEdit": {
                    "newText": "stringbuf",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <sstream>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <sstream>"
                },
                "filterText": "stringstream",
                "insertText": "stringstream",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022stringstream",
                "score": 0.9031737446784973,
                "sortText": "4098c99bstringstream",
                "textEdit": {
                    "newText": "stringstream",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>"
                },
                "filterText": "system_error",
                "insertText": "system_error",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022system_error",
                "score": 0.9031737446784973,
                "sortText": "4098c99bsystem_error",
                "textEdit": {
                    "newText": "system_error",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "SEEK_CUR",
                "insertText": "SEEK_CUR",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SEEK_CUR",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5SEEK_CUR",
                "textEdit": {
                    "newText": "SEEK_CUR",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "SEEK_END",
                "insertText": "SEEK_END",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SEEK_END",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5SEEK_END",
                "textEdit": {
                    "newText": "SEEK_END",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "SEEK_SET",
                "insertText": "SEEK_SET",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SEEK_SET",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5SEEK_SET",
                "textEdit": {
                    "newText": "SEEK_SET",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "SW_DENORMAL",
                "insertText": "SW_DENORMAL",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SW_DENORMAL",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5SW_DENORMAL",
                "textEdit": {
                    "newText": "SW_DENORMAL",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "SW_INEXACT",
                "insertText": "SW_INEXACT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SW_INEXACT",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5SW_INEXACT",
                "textEdit": {
                    "newText": "SW_INEXACT",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "SW_INVALID",
                "insertText": "SW_INVALID",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SW_INVALID",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5SW_INVALID",
                "textEdit": {
                    "newText": "SW_INVALID",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "SW_OVERFLOW",
                "insertText": "SW_OVERFLOW",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SW_OVERFLOW",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5SW_OVERFLOW",
                "textEdit": {
                    "newText": "SW_OVERFLOW",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "SW_SQRTNEG",
                "insertText": "SW_SQRTNEG",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SW_SQRTNEG",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5SW_SQRTNEG",
                "textEdit": {
                    "newText": "SW_SQRTNEG",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "SW_STACKOVERFLOW",
                "insertText": "SW_STACKOVERFLOW",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SW_STACKOVERFLOW",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5SW_STACKOVERFLOW",
                "textEdit": {
                    "newText": "SW_STACKOVERFLOW",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "SW_STACKUNDERFLOW",
                "insertText": "SW_STACKUNDERFLOW",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SW_STACKUNDERFLOW",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5SW_STACKUNDERFLOW",
                "textEdit": {
                    "newText": "SW_STACKUNDERFLOW",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "SW_UNDERFLOW",
                "insertText": "SW_UNDERFLOW",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SW_UNDERFLOW",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5SW_UNDERFLOW",
                "textEdit": {
                    "newText": "SW_UNDERFLOW",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "SW_UNEMULATED",
                "insertText": "SW_UNEMULATED",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SW_UNEMULATED",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5SW_UNEMULATED",
                "textEdit": {
                    "newText": "SW_UNEMULATED",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "SW_ZERODIVIDE",
                "insertText": "SW_ZERODIVIDE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SW_ZERODIVIDE",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5SW_ZERODIVIDE",
                "textEdit": {
                    "newText": "SW_ZERODIVIDE",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdio.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdio.h>"
                },
                "filterText": "SYS_OPEN",
                "insertText": "SYS_OPEN",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022SYS_OPEN",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5SYS_OPEN",
                "textEdit": {
                    "newText": "SYS_OPEN",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <float.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <float.h>"
                },
                "filterText": "status87",
                "insertText": "status87",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022status87",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5status87",
                "textEdit": {
                    "newText": "status87",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "stderr",
                "insertText": "stderr",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022stderr",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5stderr",
                "textEdit": {
                    "newText": "stderr",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "stdin",
                "insertText": "stdin",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022stdin",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5stdin",
                "textEdit": {
                    "newText": "stdin",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "stdout",
                "insertText": "stdout",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022stdout",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5stdout",
                "textEdit": {
                    "newText": "stdout",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "sys_errlist",
                "insertText": "sys_errlist",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022sys_errlist",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5sys_errlist",
                "textEdit": {
                    "newText": "sys_errlist",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "sys_nerr",
                "insertText": "sys_nerr",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022sys_nerr",
                "score": 0.8917710185050964,
                "sortText": "409bb4e5sys_nerr",
                "textEdit": {
                    "newText": "sys_nerr",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <sys/stat.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <sys/stat.h>"
                },
                "filterText": "S_IEXEC",
                "insertText": "S_IEXEC",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022S_IEXEC",
                "score": 0.8724930882453918,
                "sortText": "40a0a44bS_IEXEC",
                "textEdit": {
                    "newText": "S_IEXEC",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <sys/stat.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <sys/stat.h>"
                },
                "filterText": "S_IFCHR",
                "insertText": "S_IFCHR",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022S_IFCHR",
                "score": 0.8724930882453918,
                "sortText": "40a0a44bS_IFCHR",
                "textEdit": {
                    "newText": "S_IFCHR",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <sys/stat.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <sys/stat.h>"
                },
                "filterText": "S_IFDIR",
                "insertText": "S_IFDIR",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022S_IFDIR",
                "score": 0.8724930882453918,
                "sortText": "40a0a44bS_IFDIR",
                "textEdit": {
                    "newText": "S_IFDIR",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <sys/stat.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <sys/stat.h>"
                },
                "filterText": "S_IFMT",
                "insertText": "S_IFMT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022S_IFMT",
                "score": 0.8724930882453918,
                "sortText": "40a0a44bS_IFMT",
                "textEdit": {
                    "newText": "S_IFMT",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <sys/stat.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <sys/stat.h>"
                },
                "filterText": "S_IFREG",
                "insertText": "S_IFREG",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022S_IFREG",
                "score": 0.8724930882453918,
                "sortText": "40a0a44bS_IFREG",
                "textEdit": {
                    "newText": "S_IFREG",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <sys/stat.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <sys/stat.h>"
                },
                "filterText": "S_IREAD",
                "insertText": "S_IREAD",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022S_IREAD",
                "score": 0.8724930882453918,
                "sortText": "40a0a44bS_IREAD",
                "textEdit": {
                    "newText": "S_IREAD",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <sys/stat.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <sys/stat.h>"
                },
                "filterText": "S_IWRITE",
                "insertText": "S_IWRITE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022S_IWRITE",
                "score": 0.8724930882453918,
                "sortText": "40a0a44bS_IWRITE",
                "textEdit": {
                    "newText": "S_IWRITE",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7ashort",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7asigned",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "static",
                "insertText": "static",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " static",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7astatic",
                "textEdit": {
                    "newText": "static",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "static_assert",
                "insertText": "static_assert",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_assert(expression, message);",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7astatic_assert",
                "textEdit": {
                    "newText": "static_assert",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7astruct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <sys/stat.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <sys/stat.h>"
                },
                "filterText": "stat",
                "insertText": "stat",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022stat",
                "score": 0.5742632150650024,
                "sortText": "40ecfd16stat",
                "textEdit": {
                    "newText": "stat",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "decltype(Cont.size())",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "size",
                "insertText": "size",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022size(const Container &Cont)",
                "score": 0.4551366865634918,
                "sortText": "4116f853size",
                "textEdit": {
                    "newText": "size",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty1>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "static_pointer_cast",
                "insertText": "static_pointer_cast",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022static_pointer_cast<class Ty1>(const shared_ptr<Ty2> &Other)",
                "score": 0.4551366865634918,
                "sortText": "4116f853static_pointer_cast",
                "textEdit": {
                    "newText": "static_pointer_cast",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty1>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "static_pointer_cast",
                "insertText": "static_pointer_cast",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022static_pointer_cast<class Ty1>(shared_ptr<Ty2> &&Other)",
                "score": 0.4551366865634918,
                "sortText": "4116f853static_pointer_cast",
                "textEdit": {
                    "newText": "static_pointer_cast",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>"
                },
                "filterText": "size",
                "insertText": "size",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022size(const Ty (&)[Size])",
                "score": 0.35654914379119873,
                "sortText": "41497264size",
                "textEdit": {
                    "newText": "size",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "swap",
                "insertText": "swap",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022swap(basic_string<Elem, Traits, Alloc> &Left, basic_string<Elem, Traits, Alloc> &Right)",
                "score": 0.35654914379119873,
                "sortText": "41497264swap",
                "textEdit": {
                    "newText": "swap",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "swap",
                "insertText": "swap",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022swap(unique_ptr<Ty, Dx> &Left, unique_ptr<Ty, Dx> &Right)",
                "score": 0.35654914379119873,
                "sortText": "41497264swap",
                "textEdit": {
                    "newText": "swap",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "swap",
                "insertText": "swap",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022swap(shared_ptr<Ty> &Left, shared_ptr<Ty> &Right)",
                "score": 0.35654914379119873,
                "sortText": "41497264swap",
                "textEdit": {
                    "newText": "swap",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "swap",
                "insertText": "swap",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022swap(Ty (&)[Size], Ty (&)[Size])",
                "score": 0.35654914379119873,
                "sortText": "41497264swap",
                "textEdit": {
                    "newText": "swap",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "swap",
                "insertText": "swap",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022swap(weak_ptr<Ty> &Left, weak_ptr<Ty> &Right)",
                "score": 0.35654914379119873,
                "sortText": "41497264swap",
                "textEdit": {
                    "newText": "swap",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "swap",
                "insertText": "swap",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022swap(Ty &, Ty &)",
                "score": 0.35654914379119873,
                "sortText": "41497264swap",
                "textEdit": {
                    "newText": "swap",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "swap",
                "insertText": "swap",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022swap(pair<Ty1, Ty2> &Left, pair<Ty1, Ty2> &Right)",
                "score": 0.35654914379119873,
                "sortText": "41497264swap",
                "textEdit": {
                    "newText": "swap",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "const error_category &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>"
                },
                "filterText": "system_category",
                "insertText": "system_category",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022system_category()",
                "score": 0.35654914379119873,
                "sortText": "41497264system_category",
                "textEdit": {
                    "newText": "system_category",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdio.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdio.h>"
                },
                "filterText": "scanf_s",
                "insertText": "scanf_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022scanf_s(const char *const Format, ...)",
                "score": 0.27191126346588135,
                "sortText": "4174c80cscanf_s",
                "textEdit": {
                    "newText": "scanf_s",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "setvbuf",
                "insertText": "setvbuf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022setvbuf(FILE *Stream, char *Buffer, int Mode, size_t Size)",
                "score": 0.27191126346588135,
                "sortText": "4174c80csetvbuf",
                "textEdit": {
                    "newText": "setvbuf",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "snprintf",
                "insertText": "snprintf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022snprintf(char *const Buffer, const size_t BufferCount, const char *const Format, ...)",
                "score": 0.27191126346588135,
                "sortText": "4174c80csnprintf",
                "textEdit": {
                    "newText": "snprintf",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "sprintf",
                "insertText": "sprintf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022sprintf(char *const Buffer, const char *const Format, ...)",
                "score": 0.27191126346588135,
                "sortText": "4174c80csprintf",
                "textEdit": {
                    "newText": "sprintf",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdio.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdio.h>"
                },
                "filterText": "sprintf_s",
                "insertText": "sprintf_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022sprintf_s(char *const Buffer, const size_t BufferCount, const char *const Format, ...)",
                "score": 0.27191126346588135,
                "sortText": "4174c80csprintf_s",
                "textEdit": {
                    "newText": "sprintf_s",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdio.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdio.h>"
                },
                "filterText": "sprintf_s",
                "insertText": "sprintf_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022sprintf_s(char (&Buffer)[Size], const char *Format, ...)",
                "score": 0.27191126346588135,
                "sortText": "4174c80csprintf_s",
                "textEdit": {
                    "newText": "sprintf_s",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "srand",
                "insertText": "srand",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022srand(unsigned int Seed)",
                "score": 0.27191126346588135,
                "sortText": "4174c80csrand",
                "textEdit": {
                    "newText": "srand",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdio.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdio.h>"
                },
                "filterText": "sscanf_s",
                "insertText": "sscanf_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022sscanf_s(const char *const Buffer, const char *const Format, ...)",
                "score": 0.27191126346588135,
                "sortText": "4174c80csscanf_s",
                "textEdit": {
                    "newText": "sscanf_s",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strcmp",
                "insertText": "strcmp",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strcmp(const char *Str1, const char *Str2)",
                "score": 0.27191126346588135,
                "sortText": "4174c80cstrcmp",
                "textEdit": {
                    "newText": "strcmp",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string.h>"
                },
                "filterText": "strncat_s",
                "insertText": "strncat_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strncat_s(char (&Destination)[Size], const char *Source, size_t Count)",
                "score": 0.27191126346588135,
                "sortText": "4174c80cstrncat_s",
                "textEdit": {
                    "newText": "strncat_s",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string.h>"
                },
                "filterText": "strncpy_s",
                "insertText": "strncpy_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strncpy_s(char *Destination, rsize_t SizeInBytes, const char *Source, rsize_t MaxCount)",
                "score": 0.27191126346588135,
                "sortText": "4174c80cstrncpy_s",
                "textEdit": {
                    "newText": "strncpy_s",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string.h>"
                },
                "filterText": "strnlen",
                "insertText": "strnlen",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strnlen(const char *String, size_t MaxCount)",
                "score": 0.27191126346588135,
                "sortText": "4174c80cstrnlen",
                "textEdit": {
                    "newText": "strnlen",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strstr",
                "insertText": "strstr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strstr(char *const String, const char *const SubString)",
                "score": 0.27191126346588135,
                "sortText": "4174c80cstrstr",
                "textEdit": {
                    "newText": "strstr",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "strtod",
                "insertText": "strtod",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strtod(const char *String, char **EndPtr)",
                "score": 0.27191126346588135,
                "sortText": "4174c80cstrtod",
                "textEdit": {
                    "newText": "strtod",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "strtof",
                "insertText": "strtof",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strtof(const char *String, char **EndPtr)",
                "score": 0.27191126346588135,
                "sortText": "4174c80cstrtof",
                "textEdit": {
                    "newText": "strtof",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "strtol",
                "insertText": "strtol",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strtol(const char *String, char **EndPtr, int Radix)",
                "score": 0.27191126346588135,
                "sortText": "4174c80cstrtol",
                "textEdit": {
                    "newText": "strtol",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "strtold",
                "insertText": "strtold",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strtold(const char *String, char **EndPtr)",
                "score": 0.27191126346588135,
                "sortText": "4174c80cstrtold",
                "textEdit": {
                    "newText": "strtold",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "strtoll",
                "insertText": "strtoll",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strtoll(const char *String, char **EndPtr, int Radix)",
                "score": 0.27191126346588135,
                "sortText": "4174c80cstrtoll",
                "textEdit": {
                    "newText": "strtoll",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "unsigned long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "strtoul",
                "insertText": "strtoul",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strtoul(const char *String, char **EndPtr, int Radix)",
                "score": 0.27191126346588135,
                "sortText": "4174c80cstrtoul",
                "textEdit": {
                    "newText": "strtoul",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "unsigned long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "strtoull",
                "insertText": "strtoull",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strtoull(const char *String, char **EndPtr, int Radix)",
                "score": 0.27191126346588135,
                "sortText": "4174c80cstrtoull",
                "textEdit": {
                    "newText": "strtoull",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strxfrm",
                "insertText": "strxfrm",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strxfrm(char *Destination, const char *Source, size_t MaxCount)",
                "score": 0.27191126346588135,
                "sortText": "4174c80cstrxfrm",
                "textEdit": {
                    "newText": "strxfrm",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwchar>"
                },
                "filterText": "swprintf",
                "insertText": "swprintf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022swprintf(wchar_t *const Buffer, const size_t BufferCount, const wchar_t *const Format, ...)",
                "score": 0.27191126346588135,
                "sortText": "4174c80cswprintf",
                "textEdit": {
                    "newText": "swprintf",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstdio.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstdio.h>"
                },
                "filterText": "swprintf_s",
                "insertText": "swprintf_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022swprintf_s(wchar_t (&Buffer)[Size], const wchar_t *Format, ...)",
                "score": 0.27191126346588135,
                "sortText": "4174c80cswprintf_s",
                "textEdit": {
                    "newText": "swprintf_s",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstdio.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstdio.h>"
                },
                "filterText": "swprintf_s",
                "insertText": "swprintf_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022swprintf_s(wchar_t *const Buffer, const size_t BufferCount, const wchar_t *const Format, ...)",
                "score": 0.27191126346588135,
                "sortText": "4174c80cswprintf_s",
                "textEdit": {
                    "newText": "swprintf_s",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstdio.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstdio.h>"
                },
                "filterText": "swscanf_s",
                "insertText": "swscanf_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022swscanf_s(const wchar_t *const Buffer, const wchar_t *const Format, ...)",
                "score": 0.27191126346588135,
                "sortText": "4174c80cswscanf_s",
                "textEdit": {
                    "newText": "swscanf_s",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "system",
                "insertText": "system",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022system(const char *Command)",
                "score": 0.27191126346588135,
                "sortText": "4174c80csystem",
                "textEdit": {
                    "newText": "system",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nENOTRECOVERABLE"
                },
                "filterText": "state_not_recoverable",
                "insertText": "errc::state_not_recoverable",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::state_not_recoverable",
                "score": 0.256162166595459,
                "sortText": "417cd850state_not_recoverable",
                "textEdit": {
                    "newText": "errc::state_not_recoverable",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ios>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "std::io_errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ios>"
                },
                "filterText": "stream",
                "insertText": "io_errc::stream",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022io_errc::stream",
                "score": 0.256162166595459,
                "sortText": "417cd850stream",
                "textEdit": {
                    "newText": "io_errc::stream",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nETIME"
                },
                "filterText": "stream_timeout",
                "insertText": "errc::stream_timeout",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::stream_timeout",
                "score": 0.256162166595459,
                "sortText": "417cd850stream_timeout",
                "textEdit": {
                    "newText": "errc::stream_timeout",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::pointer_safety",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "strict",
                "insertText": "pointer_safety::strict",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022pointer_safety::strict",
                "score": 0.256162166595459,
                "sortText": "417cd850strict",
                "textEdit": {
                    "newText": "pointer_safety::strict",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <sys/stat.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <sys/stat.h>"
                },
                "filterText": "stat",
                "insertText": "stat",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022stat(const char *const FileName, struct stat *const Stat)",
                "score": 0.2522033154964447,
                "sortText": "417edf35stat",
                "textEdit": {
                    "newText": "stat",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "scanf",
                "insertText": "scanf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022scanf(const char *const Format, ...)",
                "score": 0.23015829920768738,
                "sortText": "41945162scanf",
                "textEdit": {
                    "newText": "scanf",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "setbuf",
                "insertText": "setbuf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022setbuf(FILE *Stream, char *Buffer)",
                "score": 0.23015829920768738,
                "sortText": "41945162setbuf",
                "textEdit": {
                    "newText": "setbuf",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "sscanf",
                "insertText": "sscanf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022sscanf(const char *const Buffer, const char *const Format, ...)",
                "score": 0.23015829920768738,
                "sortText": "41945162sscanf",
                "textEdit": {
                    "newText": "sscanf",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string.h>\nDeclarations of functions defined in oldnames.lib:"
                },
                "filterText": "strcmpi",
                "insertText": "strcmpi",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strcmpi(const char *String1, const char *String2)",
                "score": 0.23015829920768738,
                "sortText": "41945162strcmpi",
                "textEdit": {
                    "newText": "strcmpi",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string.h>"
                },
                "filterText": "strdup",
                "insertText": "strdup",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strdup(const char *String)",
                "score": 0.23015829920768738,
                "sortText": "41945162strdup",
                "textEdit": {
                    "newText": "strdup",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstring>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstring>"
                },
                "filterText": "strerror",
                "insertText": "strerror",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strerror(int ErrorMessage)",
                "score": 0.23015829920768738,
                "sortText": "41945162strerror",
                "textEdit": {
                    "newText": "strerror",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string.h>"
                },
                "filterText": "strlwr",
                "insertText": "strlwr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strlwr(char *String)",
                "score": 0.23015829920768738,
                "sortText": "41945162strlwr",
                "textEdit": {
                    "newText": "strlwr",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string.h>"
                },
                "filterText": "strrev",
                "insertText": "strrev",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022strrev(char *String)",
                "score": 0.23015829920768738,
                "sortText": "41945162strrev",
                "textEdit": {
                    "newText": "strrev",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "swab",
                "insertText": "swab",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022swab(char *Buf1, char *Buf2, int SizeInBytes)",
                "score": 0.23015829920768738,
                "sortText": "41945162swab",
                "textEdit": {
                    "newText": "swab",
                    "range": {
                        "end": {
                            "character": 21,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.968748688697815,
                "sortText": "4004000bstd",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 1.5456733703613281,
                "sortText": "403a2760size_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "using namespace",
                "insertText": "using namespace",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using namespace identifier;",
                "score": 1.1789171695709229,
                "sortText": "4069193eusing namespace",
                "textEdit": {
                    "newText": "using namespace",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "_iobuf",
                "insertText": "_iobuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " _iobuf",
                "score": 1.0411033630371094,
                "sortText": "407abd20_iobuf",
                "textEdit": {
                    "newText": "_iobuf",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "type_info",
                "insertText": "type_info",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " type_info",
                "score": 1.0411033630371094,
                "sortText": "407abd20type_info",
                "textEdit": {
                    "newText": "type_info",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "namespace",
                "insertText": "namespace",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " namespace name = namespace;",
                "score": 1.0196586847305298,
                "sortText": "407d7bd3namespace",
                "textEdit": {
                    "newText": "namespace",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using qualifier::name;",
                "score": 1.0196586847305298,
                "sortText": "407d7bd3using",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using name = type;",
                "score": 1.0196586847305298,
                "sortText": "407d7bd3using",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR32_T_LOCK_FREE",
                "score": 0.9372367262840271,
                "sortText": "40901141ATOMIC_CHAR32_T_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR32_T_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR_LOCK_FREE",
                "insertText": "ATOMIC_CHAR_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR_LOCK_FREE",
                "score": 0.9372367262840271,
                "sortText": "40901141ATOMIC_CHAR_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_FLAG_INIT",
                "insertText": "ATOMIC_FLAG_INIT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_FLAG_INIT",
                "score": 0.9372367262840271,
                "sortText": "40901141ATOMIC_FLAG_INIT",
                "textEdit": {
                    "newText": "ATOMIC_FLAG_INIT",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_INT_LOCK_FREE",
                "insertText": "ATOMIC_INT_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_INT_LOCK_FREE",
                "score": 0.9372367262840271,
                "sortText": "40901141ATOMIC_INT_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_INT_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_LLONG_LOCK_FREE",
                "insertText": "ATOMIC_LLONG_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_LLONG_LOCK_FREE",
                "score": 0.9372367262840271,
                "sortText": "40901141ATOMIC_LLONG_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_LLONG_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_LONG_LOCK_FREE",
                "insertText": "ATOMIC_LONG_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_LONG_LOCK_FREE",
                "score": 0.9372367262840271,
                "sortText": "40901141ATOMIC_LONG_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_LONG_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_SHORT_LOCK_FREE",
                "insertText": "ATOMIC_SHORT_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_SHORT_LOCK_FREE",
                "score": 0.9372367262840271,
                "sortText": "40901141ATOMIC_SHORT_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_SHORT_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_VAR_INIT",
                "insertText": "ATOMIC_VAR_INIT",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ATOMIC_VAR_INIT(_Value)",
                "score": 0.9372367262840271,
                "sortText": "40901141ATOMIC_VAR_INIT",
                "textEdit": {
                    "newText": "ATOMIC_VAR_INIT",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_WCHAR_T_LOCK_FREE",
                "insertText": "ATOMIC_WCHAR_T_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_WCHAR_T_LOCK_FREE",
                "score": 0.9372367262840271,
                "sortText": "40901141ATOMIC_WCHAR_T_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_WCHAR_T_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic",
                "insertText": "atomic",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022atomic<class Ty>",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic",
                "textEdit": {
                    "newText": "atomic",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_bool",
                "insertText": "atomic_bool",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_bool",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_bool",
                "textEdit": {
                    "newText": "atomic_bool",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_char",
                "insertText": "atomic_char",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_char",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_char",
                "textEdit": {
                    "newText": "atomic_char",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_char32_t",
                "insertText": "atomic_char32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_char32_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_char32_t",
                "textEdit": {
                    "newText": "atomic_char32_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag",
                "insertText": "atomic_flag",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022atomic_flag",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_flag",
                "textEdit": {
                    "newText": "atomic_flag",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int",
                "insertText": "atomic_int",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_int",
                "textEdit": {
                    "newText": "atomic_int",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int16_t",
                "insertText": "atomic_int16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int16_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_int16_t",
                "textEdit": {
                    "newText": "atomic_int16_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int32_t",
                "insertText": "atomic_int32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int32_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_int32_t",
                "textEdit": {
                    "newText": "atomic_int32_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int64_t",
                "insertText": "atomic_int64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int64_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_int64_t",
                "textEdit": {
                    "newText": "atomic_int64_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int8_t",
                "insertText": "atomic_int8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int8_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_int8_t",
                "textEdit": {
                    "newText": "atomic_int8_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast16_t",
                "insertText": "atomic_int_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast16_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_int_fast16_t",
                "textEdit": {
                    "newText": "atomic_int_fast16_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast32_t",
                "insertText": "atomic_int_fast32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast32_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_int_fast32_t",
                "textEdit": {
                    "newText": "atomic_int_fast32_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast64_t",
                "insertText": "atomic_int_fast64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast64_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_int_fast64_t",
                "textEdit": {
                    "newText": "atomic_int_fast64_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast8_t",
                "insertText": "atomic_int_fast8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast8_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_int_fast8_t",
                "textEdit": {
                    "newText": "atomic_int_fast8_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least16_t",
                "insertText": "atomic_int_least16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least16_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_int_least16_t",
                "textEdit": {
                    "newText": "atomic_int_least16_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least32_t",
                "insertText": "atomic_int_least32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least32_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_int_least32_t",
                "textEdit": {
                    "newText": "atomic_int_least32_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least64_t",
                "insertText": "atomic_int_least64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least64_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_int_least64_t",
                "textEdit": {
                    "newText": "atomic_int_least64_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least8_t",
                "insertText": "atomic_int_least8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least8_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_int_least8_t",
                "textEdit": {
                    "newText": "atomic_int_least8_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_intmax_t",
                "insertText": "atomic_intmax_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_intmax_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_intmax_t",
                "textEdit": {
                    "newText": "atomic_intmax_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_intptr_t",
                "insertText": "atomic_intptr_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_intptr_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_intptr_t",
                "textEdit": {
                    "newText": "atomic_intptr_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_llong",
                "insertText": "atomic_llong",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_llong",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_llong",
                "textEdit": {
                    "newText": "atomic_llong",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ptrdiff_t",
                "insertText": "atomic_ptrdiff_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ptrdiff_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_ptrdiff_t",
                "textEdit": {
                    "newText": "atomic_ptrdiff_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_schar",
                "insertText": "atomic_schar",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_schar",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_schar",
                "textEdit": {
                    "newText": "atomic_schar",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_short",
                "insertText": "atomic_short",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_short",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_short",
                "textEdit": {
                    "newText": "atomic_short",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_size_t",
                "insertText": "atomic_size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_size_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_size_t",
                "textEdit": {
                    "newText": "atomic_size_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uchar",
                "insertText": "atomic_uchar",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uchar",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_uchar",
                "textEdit": {
                    "newText": "atomic_uchar",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint",
                "insertText": "atomic_uint",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_uint",
                "textEdit": {
                    "newText": "atomic_uint",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint32_t",
                "insertText": "atomic_uint32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint32_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_uint32_t",
                "textEdit": {
                    "newText": "atomic_uint32_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint64_t",
                "insertText": "atomic_uint64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint64_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_uint64_t",
                "textEdit": {
                    "newText": "atomic_uint64_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast16_t",
                "insertText": "atomic_uint_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast16_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_uint_fast16_t",
                "textEdit": {
                    "newText": "atomic_uint_fast16_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast64_t",
                "insertText": "atomic_uint_fast64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast64_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_uint_fast64_t",
                "textEdit": {
                    "newText": "atomic_uint_fast64_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast8_t",
                "insertText": "atomic_uint_fast8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast8_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_uint_fast8_t",
                "textEdit": {
                    "newText": "atomic_uint_fast8_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_least16_t",
                "insertText": "atomic_uint_least16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_least16_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_uint_least16_t",
                "textEdit": {
                    "newText": "atomic_uint_least16_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_least32_t",
                "insertText": "atomic_uint_least32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_least32_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_uint_least32_t",
                "textEdit": {
                    "newText": "atomic_uint_least32_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_least8_t",
                "insertText": "atomic_uint_least8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_least8_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_uint_least8_t",
                "textEdit": {
                    "newText": "atomic_uint_least8_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uintmax_t",
                "insertText": "atomic_uintmax_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uintmax_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_uintmax_t",
                "textEdit": {
                    "newText": "atomic_uintmax_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uintptr_t",
                "insertText": "atomic_uintptr_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uintptr_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_uintptr_t",
                "textEdit": {
                    "newText": "atomic_uintptr_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ulong",
                "insertText": "atomic_ulong",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ulong",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_ulong",
                "textEdit": {
                    "newText": "atomic_ulong",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ushort",
                "insertText": "atomic_ushort",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ushort",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_ushort",
                "textEdit": {
                    "newText": "atomic_ushort",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_wchar_t",
                "insertText": "atomic_wchar_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_wchar_t",
                "score": 0.9031737446784973,
                "sortText": "4098c99batomic_wchar_t",
                "textEdit": {
                    "newText": "atomic_wchar_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7a_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7a_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7a_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "alignas",
                "insertText": "alignas",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignas(expression)",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aalignas",
                "textEdit": {
                    "newText": "alignas",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "asm",
                "insertText": "asm",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " asm(string-literal)",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aasm",
                "textEdit": {
                    "newText": "asm",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aauto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7abool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7achar",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7achar16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7achar32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aclass",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aconst",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aconstexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7adecltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7adouble",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aenum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "extern",
                "insertText": "extern",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " extern",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aextern",
                "textEdit": {
                    "newText": "extern",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7afloat",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "inline",
                "insertText": "inline",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " inline",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7ainline",
                "textEdit": {
                    "newText": "inline",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aint",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7along",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aoperator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7ashort",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7asigned",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "static",
                "insertText": "static",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " static",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7astatic",
                "textEdit": {
                    "newText": "static",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "static_assert",
                "insertText": "static_assert",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_assert(expression, message);",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7astatic_assert",
                "textEdit": {
                    "newText": "static_assert",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7astruct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "template",
                "insertText": "template",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " template",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7atemplate",
                "textEdit": {
                    "newText": "template",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "template",
                "insertText": "template",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " template",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7atemplate",
                "textEdit": {
                    "newText": "template",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "thread_local",
                "insertText": "thread_local",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " thread_local",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7athread_local",
                "textEdit": {
                    "newText": "thread_local",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "typedef",
                "insertText": "typedef",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typedef type name;",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7atypedef",
                "textEdit": {
                    "newText": "typedef",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7atypename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aunion",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7aunsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7avoid",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7avolatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.7722705602645874,
                "sortText": "40ba4c7awchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "__INCLUDE_LEVEL__",
                "insertText": "__INCLUDE_LEVEL__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __INCLUDE_LEVEL__",
                "score": 0.5491840839385986,
                "sortText": "40f368ac__INCLUDE_LEVEL__",
                "textEdit": {
                    "newText": "__INCLUDE_LEVEL__",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "__has_include",
                "insertText": "__has_include",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_include",
                "score": 0.5491840839385986,
                "sortText": "40f368ac__has_include",
                "textEdit": {
                    "newText": "__has_include",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "__has_include_next",
                "insertText": "__has_include_next",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_include_next",
                "score": 0.5491840839385986,
                "sortText": "40f368ac__has_include_next",
                "textEdit": {
                    "newText": "__has_include_next",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "_ATOMIC_CHOOSE_INTRINSIC",
                "insertText": "_ATOMIC_CHOOSE_INTRINSIC",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_ATOMIC_CHOOSE_INTRINSIC",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_ATOMIC_CHOOSE_INTRINSIC",
                "textEdit": {
                    "newText": "_ATOMIC_CHOOSE_INTRINSIC",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "_ATOMIC_POST_LOAD_BARRIER_AS_NEEDED",
                "insertText": "_ATOMIC_POST_LOAD_BARRIER_AS_NEEDED",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_ATOMIC_POST_LOAD_BARRIER_AS_NEEDED",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_ATOMIC_POST_LOAD_BARRIER_AS_NEEDED",
                "textEdit": {
                    "newText": "_ATOMIC_POST_LOAD_BARRIER_AS_NEEDED",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "_ATOMIC_STORE_32_SEQ_CST",
                "insertText": "_ATOMIC_STORE_32_SEQ_CST",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_ATOMIC_STORE_32_SEQ_CST",
                "score": 0.5306733846664429,
                "sortText": "40f825ca_ATOMIC_STORE_32_SEQ_CST",
                "textEdit": {
                    "newText": "_ATOMIC_STORE_32_SEQ_CST",
                    "range": {
                        "end": {
                            "character": 20,
                            "line": 2
                        },
                        "start": {
                            "character": 20,
                            "line": 2
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "-Wextra-tokens",
                "message": "Extra tokens at end of #include directive (fix available)",
                "range": {
                    "end": {
                        "character": 33,
                        "line": 0
                    },
                    "start": {
                        "character": 19,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "unknown_typename",
                "message": "Unknown type name 's'",
                "range": {
                    "end": {
                        "character": 21,
                        "line": 2
                    },
                    "start": {
                        "character": 20,
                        "line": 2
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 64
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=2, column=20, column_end = 21, message=Unknown type name 's')]
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "-Wextra-tokens",
                "message": "Extra tokens at end of #include directive (fix available)",
                "range": {
                    "end": {
                        "character": 33,
                        "line": 0
                    },
                    "start": {
                        "character": 19,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 66
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": [
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 2.7533249855041504,
                "sortText": "3f4fc986std",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "filterText": "stdext",
                "insertText": "stdext",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " stdext",
                "score": 1.8423324823379517,
                "sortText": "40142e73stdext",
                "textEdit": {
                    "newText": "stdext",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "stderr",
                "insertText": "stderr",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022stderr",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cstderr",
                "textEdit": {
                    "newText": "stderr",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "stdin",
                "insertText": "stdin",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022stdin",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cstdin",
                "textEdit": {
                    "newText": "stdin",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdio>"
                },
                "filterText": "stdout",
                "insertText": "stdout",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022stdout",
                "score": 0.5943357944488525,
                "sortText": "40e7d99cstdout",
                "textEdit": {
                    "newText": "stdout",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "student_t_distribution",
                "insertText": "std::student_t_distribution",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022std::student_t_distribution<class Ty>",
                "score": 0.5417693853378296,
                "sortText": "412ff5e7student_t_distribution",
                "textEdit": {
                    "newText": "std::student_t_distribution",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <random>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <random>"
                },
                "filterText": "student_t_distribution",
                "insertText": "std::tr1::student_t_distribution",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022std::tr1::student_t_distribution",
                "score": 0.2596149444580078,
                "sortText": "41b89da0student_t_distribution",
                "textEdit": {
                    "newText": "std::tr1::student_t_distribution",
                    "range": {
                        "end": {
                            "character": 19,
                            "line": 2
                        },
                        "start": {
                            "character": 16,
                            "line": 2
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "-Wextra-tokens",
                "message": "Extra tokens at end of #include directive (fix available)",
                "range": {
                    "end": {
                        "character": 33,
                        "line": 0
                    },
                    "start": {
                        "character": 19,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "expected_semi_after_namespace_name",
                "message": "Expected ';' after namespace name (fix available)",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 2
                    },
                    "start": {
                        "character": 19,
                        "line": 2
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unused-includes",
                "codeDescription": {
                    "href": "https://clangd.llvm.org/guides/include-cleaner"
                },
                "message": "Included header iostream is not used directly (fix available)",
                "range": {
                    "end": {
                        "character": 33,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clangd",
                "tags": [
                    1
                ]
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 72
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=2, column=19, column_end = 19, message=Expected ';' after namespace name (fix available))]
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "namespace std\n\nnamespace std {}"
        },
        "range": {
            "end": {
                "character": 19,
                "line": 2
            },
            "start": {
                "character": 16,
                "line": 2
            }
        }
    }
}
Received hover response.
Hover text: namespace std

namespace std {}
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "-Wextra-tokens",
                "message": "Extra tokens at end of #include directive (fix available)",
                "range": {
                    "end": {
                        "character": 33,
                        "line": 0
                    },
                    "start": {
                        "character": 19,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 74
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "-Wextra-tokens",
                "message": "Extra tokens at end of #include directive (fix available)",
                "range": {
                    "end": {
                        "character": 33,
                        "line": 0
                    },
                    "start": {
                        "character": 19,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'std::cout'? (fix available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream:40:75:\nnote: 'std::cout' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 33
                    },
                    "start": {
                        "character": 4,
                        "line": 33
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 103
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=33, column=4, column_end = 8, message=Use of undeclared identifier 'cout'; did you mean 'std::cout'? (fix available)

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream:40:75:
note: 'std::cout' declared here)]
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": null
}
Received hover response.
Hover response does not contain 'contents'.
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "-Wextra-tokens",
                "message": "Extra tokens at end of #include directive (fix available)",
                "range": {
                    "end": {
                        "character": 24,
                        "line": 0
                    },
                    "start": {
                        "character": 19,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'std::cout'? (fix available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream:40:75:\nnote: 'std::cout' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 33
                    },
                    "start": {
                        "character": 4,
                        "line": 33
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 103
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=33, column=4, column_end = 8, message=Use of undeclared identifier 'cout'; did you mean 'std::cout'? (fix available)

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream:40:75:
note: 'std::cout' declared here)]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "-Wextra-tokens",
                "message": "Extra tokens at end of #include directive (fix available)",
                "range": {
                    "end": {
                        "character": 24,
                        "line": 0
                    },
                    "start": {
                        "character": 19,
                        "line": 0
                    }
                },
                "severity": 2,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 105
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 105
    }
}
Diagnostics received from LSP.
Errors received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 107
    }
}
Diagnostics received from LSP.
Errors received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 107
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 116
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 118
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": [
            {
                "filterText": "__unaligned",
                "insertText": "__unaligned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __unaligned",
                "score": 0.9053945541381836,
                "sortText": "40983810__unaligned",
                "textEdit": {
                    "newText": "__unaligned",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 7
                        },
                        "start": {
                            "character": 0,
                            "line": 7
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.9053945541381836,
                "sortText": "40983810const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 7
                        },
                        "start": {
                            "character": 0,
                            "line": 7
                        }
                    }
                }
            },
            {
                "filterText": "noexcept",
                "insertText": "noexcept",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " noexcept",
                "score": 0.9053945541381836,
                "sortText": "40983810noexcept",
                "textEdit": {
                    "newText": "noexcept",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 7
                        },
                        "start": {
                            "character": 0,
                            "line": 7
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.9053945541381836,
                "sortText": "40983810volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 7
                        },
                        "start": {
                            "character": 0,
                            "line": 7
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 120
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": [
            {
                "filterText": "__unaligned",
                "insertText": "__unaligned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __unaligned",
                "score": 0.9053945541381836,
                "sortText": "40983810__unaligned",
                "textEdit": {
                    "newText": "__unaligned",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.9053945541381836,
                "sortText": "40983810const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "noexcept",
                "insertText": "noexcept",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " noexcept",
                "score": 0.9053945541381836,
                "sortText": "40983810noexcept",
                "textEdit": {
                    "newText": "noexcept",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.9053945541381836,
                "sortText": "40983810volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 6
                        },
                        "start": {
                            "character": 0,
                            "line": 6
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 122
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "detail": "int *",
                "filterText": "arr",
                "insertText": "arr",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " arr",
                "score": 2.948925256729126,
                "sortText": "3fc344cfarr",
                "textEdit": {
                    "newText": "arr",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "l",
                "insertText": "l",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " l",
                "score": 2.948925256729126,
                "sortText": "3fc344cfl",
                "textEdit": {
                    "newText": "l",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "mid",
                "insertText": "mid",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " mid",
                "score": 2.948925256729126,
                "sortText": "3fc344cfmid",
                "textEdit": {
                    "newText": "mid",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "r",
                "insertText": "r",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " r",
                "score": 2.948925256729126,
                "sortText": "3fc344cfr",
                "textEdit": {
                    "newText": "r",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "x",
                "insertText": "x",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " x",
                "score": 2.948925256729126,
                "sortText": "3fc344cfx",
                "textEdit": {
                    "newText": "x",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "Binary Search Algorithm"
                },
                "filterText": "binarySearch",
                "insertText": "binarySearch",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " binarySearch(int *arr, int l, int r, int x)",
                "score": 2.0321624279022217,
                "sortText": "3ffdf10dbinarySearch",
                "textEdit": {
                    "newText": "binarySearch",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.5999544858932495,
                "sortText": "403334b1std",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "return",
                "insertText": "return",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " return expression;",
                "score": 1.3036514520645142,
                "sortText": "405921f3return",
                "textEdit": {
                    "newText": "return",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 0.9800145626068115,
                "sortText": "40851dc4size_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstring.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstring.h>"
                },
                "filterText": "wcswcs",
                "insertText": "wcswcs",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022wcswcs",
                "score": 0.8436345458030701,
                "sortText": "40a80791wcswcs",
                "textEdit": {
                    "newText": "wcswcs",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "__FUNCTION__",
                "insertText": "__FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __FUNCTION__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__FUNCTION__",
                "textEdit": {
                    "newText": "__FUNCTION__",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "__PRETTY_FUNCTION__",
                "insertText": "__PRETTY_FUNCTION__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __PRETTY_FUNCTION__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__PRETTY_FUNCTION__",
                "textEdit": {
                    "newText": "__PRETTY_FUNCTION__",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "__func__",
                "insertText": "__func__",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " __func__",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8__func__",
                "textEdit": {
                    "newText": "__func__",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "alignas",
                "insertText": "alignas",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignas(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8alignas",
                "textEdit": {
                    "newText": "alignas",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "alignof",
                "insertText": "alignof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignof(type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8alignof",
                "textEdit": {
                    "newText": "alignof",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8constexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete [] expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "dynamic_cast",
                "insertText": "dynamic_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " dynamic_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8dynamic_cast",
                "textEdit": {
                    "newText": "dynamic_cast",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "else",
                "insertText": "else",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " else",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8else",
                "textEdit": {
                    "newText": "else",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "else if",
                "insertText": "else if",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " else if (condition)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8else if",
                "textEdit": {
                    "newText": "else if",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "extern",
                "insertText": "extern",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " extern",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8extern",
                "textEdit": {
                    "newText": "extern",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "false",
                "insertText": "false",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " false",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8false",
                "textEdit": {
                    "newText": "false",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "goto",
                "insertText": "goto",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " goto label;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8goto",
                "textEdit": {
                    "newText": "goto",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type[size](expressions)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type(expressions)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "noexcept",
                "insertText": "noexcept",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " noexcept(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8noexcept",
                "textEdit": {
                    "newText": "noexcept",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "detail": "std::nullptr_t",
                "filterText": "nullptr",
                "insertText": "nullptr",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " nullptr",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8nullptr",
                "textEdit": {
                    "newText": "nullptr",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "reinterpret_cast",
                "insertText": "reinterpret_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " reinterpret_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8reinterpret_cast",
                "textEdit": {
                    "newText": "reinterpret_cast",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof",
                "insertText": "sizeof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof(expression-or-type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8sizeof",
                "textEdit": {
                    "newText": "sizeof",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof...",
                "insertText": "sizeof...",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof...(parameter-pack)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8sizeof...",
                "textEdit": {
                    "newText": "sizeof...",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "static",
                "insertText": "static",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " static",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static",
                "textEdit": {
                    "newText": "static",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "static_assert",
                "insertText": "static_assert",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_assert(expression, message);",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static_assert",
                "textEdit": {
                    "newText": "static_assert",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "static_cast",
                "insertText": "static_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_cast<type>(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8static_cast",
                "textEdit": {
                    "newText": "static_cast",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "thread_local",
                "insertText": "thread_local",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " thread_local",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8thread_local",
                "textEdit": {
                    "newText": "thread_local",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "throw",
                "insertText": "throw",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " throw expression",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8throw",
                "textEdit": {
                    "newText": "throw",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "true",
                "insertText": "true",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " true",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8true",
                "textEdit": {
                    "newText": "true",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "typedef",
                "insertText": "typedef",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typedef type name;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typedef",
                "textEdit": {
                    "newText": "typedef",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "detail": "std::type_info",
                "filterText": "typeid",
                "insertText": "typeid",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typeid(expression-or-type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typeid",
                "textEdit": {
                    "newText": "typeid",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using name = type;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8using",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "using namespace",
                "insertText": "using namespace",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using namespace identifier;",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8using namespace",
                "textEdit": {
                    "newText": "using namespace",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>"
                },
                "filterText": "errc",
                "insertText": "errc",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc",
                "score": 0.8070572018623352,
                "sortText": "40b164b3errc",
                "textEdit": {
                    "newText": "errc",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "_iobuf",
                "insertText": "_iobuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " _iobuf",
                "score": 0.73712557554245,
                "sortText": "40c34bbd_iobuf",
                "textEdit": {
                    "newText": "_iobuf",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "type_info",
                "insertText": "type_info",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " type_info",
                "score": 0.73712557554245,
                "sortText": "40c34bbdtype_info",
                "textEdit": {
                    "newText": "type_info",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstring.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstring.h>"
                },
                "filterText": "_wcsicmp_l",
                "insertText": "_wcsicmp_l",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_wcsicmp_l(const wchar_t *String1, const wchar_t *String2, _locale_t Locale)",
                "score": 0.4419805109500885,
                "sortText": "411db4bb_wcsicmp_l",
                "textEdit": {
                    "newText": "_wcsicmp_l",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstring.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstring.h>"
                },
                "filterText": "_wcslwr_s",
                "insertText": "_wcslwr_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_wcslwr_s(wchar_t (&String)[Size])",
                "score": 0.4419805109500885,
                "sortText": "411db4bb_wcslwr_s",
                "textEdit": {
                    "newText": "_wcslwr_s",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstring.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstring.h>"
                },
                "filterText": "_wcslwr_s",
                "insertText": "_wcslwr_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_wcslwr_s(wchar_t *String, size_t SizeInWords)",
                "score": 0.4419805109500885,
                "sortText": "411db4bb_wcslwr_s",
                "textEdit": {
                    "newText": "_wcslwr_s",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstring.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstring.h>"
                },
                "filterText": "_wcsnicoll",
                "insertText": "_wcsnicoll",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_wcsnicoll(const wchar_t *String1, const wchar_t *String2, size_t MaxCount)",
                "score": 0.4419805109500885,
                "sortText": "411db4bb_wcsnicoll",
                "textEdit": {
                    "newText": "_wcsnicoll",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstring.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstring.h>"
                },
                "filterText": "_wcsnset_s",
                "insertText": "_wcsnset_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_wcsnset_s(wchar_t *Destination, size_t SizeInWords, wchar_t Value, size_t MaxCount)",
                "score": 0.4419805109500885,
                "sortText": "411db4bb_wcsnset_s",
                "textEdit": {
                    "newText": "_wcsnset_s",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstring.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstring.h>"
                },
                "filterText": "_wcsupr_s_l",
                "insertText": "_wcsupr_s_l",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_wcsupr_s_l(wchar_t *String, size_t Size, _locale_t Locale)",
                "score": 0.4419805109500885,
                "sortText": "411db4bb_wcsupr_s_l",
                "textEdit": {
                    "newText": "_wcsupr_s_l",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstring.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstring.h>"
                },
                "filterText": "wcscat_s",
                "insertText": "wcscat_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcscat_s(wchar_t (&Destination)[Size], const wchar_t *Source)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbwcscat_s",
                "textEdit": {
                    "newText": "wcscat_s",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwchar>"
                },
                "filterText": "wcscoll",
                "insertText": "wcscoll",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcscoll(const wchar_t *String1, const wchar_t *String2)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbwcscoll",
                "textEdit": {
                    "newText": "wcscoll",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwchar>"
                },
                "filterText": "wcscspn",
                "insertText": "wcscspn",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcscspn(const wchar_t *String, const wchar_t *Control)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbwcscspn",
                "textEdit": {
                    "newText": "wcscspn",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstring.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstring.h>"
                },
                "filterText": "wcsncat_s",
                "insertText": "wcsncat_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcsncat_s(wchar_t (&Destination)[Size], const wchar_t *Source, size_t Count)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbwcsncat_s",
                "textEdit": {
                    "newText": "wcsncat_s",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwchar>"
                },
                "filterText": "wcsspn",
                "insertText": "wcsspn",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcsspn(const wchar_t *String, const wchar_t *Control)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbwcsspn",
                "textEdit": {
                    "newText": "wcsspn",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstring.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "wchar_t *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstring.h>"
                },
                "filterText": "wcstok_s",
                "insertText": "wcstok_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcstok_s(wchar_t *String, const wchar_t *Delimiter, wchar_t **Context)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbwcstok_s",
                "textEdit": {
                    "newText": "wcstok_s",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstring.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "wchar_t *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstring.h>"
                },
                "filterText": "_wcserror",
                "insertText": "_wcserror",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_wcserror(int ErrorNumber)",
                "score": 0.3469603955745697,
                "sortText": "414e5b35_wcserror",
                "textEdit": {
                    "newText": "_wcserror",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstring.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "wchar_t *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstring.h>"
                },
                "filterText": "_wcslwr",
                "insertText": "_wcslwr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_wcslwr(wchar_t *String)",
                "score": 0.3469603955745697,
                "sortText": "414e5b35_wcslwr",
                "textEdit": {
                    "newText": "_wcslwr",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstring.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "wchar_t *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstring.h>"
                },
                "filterText": "_wcsupr",
                "insertText": "_wcsupr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_wcsupr(wchar_t *String)",
                "score": 0.3469603955745697,
                "sortText": "414e5b35_wcsupr",
                "textEdit": {
                    "newText": "_wcsupr",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstring.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "wchar_t *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstring.h>"
                },
                "filterText": "wcsdup",
                "insertText": "wcsdup",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcsdup(const wchar_t *String)",
                "score": 0.3469603955745697,
                "sortText": "414e5b35wcsdup",
                "textEdit": {
                    "newText": "wcsdup",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstring.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstring.h>"
                },
                "filterText": "wcsnicmp",
                "insertText": "wcsnicmp",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcsnicmp(const wchar_t *String1, const wchar_t *String2, size_t MaxCount)",
                "score": 0.3469603955745697,
                "sortText": "414e5b35wcsnicmp",
                "textEdit": {
                    "newText": "wcsnicmp",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstring.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "wchar_t *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstring.h>"
                },
                "filterText": "wcsset",
                "insertText": "wcsset",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcsset(wchar_t *String, wchar_t Value)",
                "score": 0.3469603955745697,
                "sortText": "414e5b35wcsset",
                "textEdit": {
                    "newText": "wcsset",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cwchar>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "wchar_t *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cwchar>"
                },
                "filterText": "wcstok",
                "insertText": "wcstok",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcstok(wchar_t *String, const wchar_t *Delimiter)",
                "score": 0.3469603955745697,
                "sortText": "414e5b35wcstok",
                "textEdit": {
                    "newText": "wcstok",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_wstring.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "wchar_t *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_wstring.h>"
                },
                "filterText": "wcsupr",
                "insertText": "wcsupr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022wcsupr(wchar_t *String)",
                "score": 0.3469603955745697,
                "sortText": "414e5b35wcsupr",
                "textEdit": {
                    "newText": "wcsupr",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEAFNOSUPPORT"
                },
                "filterText": "address_family_not_supported",
                "insertText": "errc::address_family_not_supported",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::address_family_not_supported",
                "score": 0.3138078451156616,
                "sortText": "415f5494address_family_not_supported",
                "textEdit": {
                    "newText": "errc::address_family_not_supported",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEADDRINUSE"
                },
                "filterText": "address_in_use",
                "insertText": "errc::address_in_use",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::address_in_use",
                "score": 0.3138078451156616,
                "sortText": "415f5494address_in_use",
                "textEdit": {
                    "newText": "errc::address_in_use",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEADDRNOTAVAIL"
                },
                "filterText": "address_not_available",
                "insertText": "errc::address_not_available",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::address_not_available",
                "score": 0.3138078451156616,
                "sortText": "415f5494address_not_available",
                "textEdit": {
                    "newText": "errc::address_not_available",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEISCONN"
                },
                "filterText": "already_connected",
                "insertText": "errc::already_connected",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::already_connected",
                "score": 0.3138078451156616,
                "sortText": "415f5494already_connected",
                "textEdit": {
                    "newText": "errc::already_connected",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nE2BIG"
                },
                "filterText": "argument_list_too_long",
                "insertText": "errc::argument_list_too_long",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::argument_list_too_long",
                "score": 0.3138078451156616,
                "sortText": "415f5494argument_list_too_long",
                "textEdit": {
                    "newText": "errc::argument_list_too_long",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEDOM"
                },
                "filterText": "argument_out_of_domain",
                "insertText": "errc::argument_out_of_domain",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::argument_out_of_domain",
                "score": 0.3138078451156616,
                "sortText": "415f5494argument_out_of_domain",
                "textEdit": {
                    "newText": "errc::argument_out_of_domain",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEFAULT"
                },
                "filterText": "bad_address",
                "insertText": "errc::bad_address",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::bad_address",
                "score": 0.3138078451156616,
                "sortText": "415f5494bad_address",
                "textEdit": {
                    "newText": "errc::bad_address",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEBADF"
                },
                "filterText": "bad_file_descriptor",
                "insertText": "errc::bad_file_descriptor",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::bad_file_descriptor",
                "score": 0.3138078451156616,
                "sortText": "415f5494bad_file_descriptor",
                "textEdit": {
                    "newText": "errc::bad_file_descriptor",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEBADMSG"
                },
                "filterText": "bad_message",
                "insertText": "errc::bad_message",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::bad_message",
                "score": 0.3138078451156616,
                "sortText": "415f5494bad_message",
                "textEdit": {
                    "newText": "errc::bad_message",
                    "range": {
                        "end": {
                            "character": 0,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'a'",
                "range": {
                    "end": {
                        "character": 1,
                        "line": 19
                    },
                    "start": {
                        "character": 0,
                        "line": 19
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 124
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=19, column=0, column_end = 1, message=Use of undeclared identifier 'a')]
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "detail": "int *",
                "filterText": "arr",
                "insertText": "arr",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " arr",
                "score": 2.948925256729126,
                "sortText": "3fc344cfarr",
                "textEdit": {
                    "newText": "arr",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR32_T_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_CHAR32_T_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR32_T_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR_LOCK_FREE",
                "insertText": "ATOMIC_CHAR_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_CHAR_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_FLAG_INIT",
                "insertText": "ATOMIC_FLAG_INIT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_FLAG_INIT",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_FLAG_INIT",
                "textEdit": {
                    "newText": "ATOMIC_FLAG_INIT",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_INT_LOCK_FREE",
                "insertText": "ATOMIC_INT_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_INT_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_INT_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_INT_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_LLONG_LOCK_FREE",
                "insertText": "ATOMIC_LLONG_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_LLONG_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_LLONG_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_LLONG_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_LONG_LOCK_FREE",
                "insertText": "ATOMIC_LONG_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_LONG_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_LONG_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_LONG_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_SHORT_LOCK_FREE",
                "insertText": "ATOMIC_SHORT_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_SHORT_LOCK_FREE",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_SHORT_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_SHORT_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_VAR_INIT",
                "insertText": "ATOMIC_VAR_INIT",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ATOMIC_VAR_INIT(_Value)",
                "score": 0.9173901677131653,
                "sortText": "409525ebATOMIC_VAR_INIT",
                "textEdit": {
                    "newText": "ATOMIC_VAR_INIT",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "alignas",
                "insertText": "alignas",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignas(expression)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8alignas",
                "textEdit": {
                    "newText": "alignas",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "alignof",
                "insertText": "alignof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignof(type)",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8alignof",
                "textEdit": {
                    "newText": "alignof",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.8373723030090332,
                "sortText": "40a9a1f8auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_bool",
                "insertText": "atomic_bool",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_bool",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_bool",
                "textEdit": {
                    "newText": "atomic_bool",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_char",
                "insertText": "atomic_char",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_char",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_char",
                "textEdit": {
                    "newText": "atomic_char",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_char32_t",
                "insertText": "atomic_char32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_char32_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_char32_t",
                "textEdit": {
                    "newText": "atomic_char32_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag",
                "insertText": "atomic_flag",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022atomic_flag",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_flag",
                "textEdit": {
                    "newText": "atomic_flag",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int",
                "insertText": "atomic_int",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int",
                "textEdit": {
                    "newText": "atomic_int",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int16_t",
                "insertText": "atomic_int16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int16_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int16_t",
                "textEdit": {
                    "newText": "atomic_int16_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int32_t",
                "insertText": "atomic_int32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int32_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int32_t",
                "textEdit": {
                    "newText": "atomic_int32_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int64_t",
                "insertText": "atomic_int64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int64_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int64_t",
                "textEdit": {
                    "newText": "atomic_int64_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int8_t",
                "insertText": "atomic_int8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int8_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int8_t",
                "textEdit": {
                    "newText": "atomic_int8_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast16_t",
                "insertText": "atomic_int_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast16_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int_fast16_t",
                "textEdit": {
                    "newText": "atomic_int_fast16_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast32_t",
                "insertText": "atomic_int_fast32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast32_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int_fast32_t",
                "textEdit": {
                    "newText": "atomic_int_fast32_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast64_t",
                "insertText": "atomic_int_fast64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast64_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int_fast64_t",
                "textEdit": {
                    "newText": "atomic_int_fast64_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast8_t",
                "insertText": "atomic_int_fast8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast8_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int_fast8_t",
                "textEdit": {
                    "newText": "atomic_int_fast8_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least16_t",
                "insertText": "atomic_int_least16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least16_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int_least16_t",
                "textEdit": {
                    "newText": "atomic_int_least16_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least32_t",
                "insertText": "atomic_int_least32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least32_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int_least32_t",
                "textEdit": {
                    "newText": "atomic_int_least32_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least8_t",
                "insertText": "atomic_int_least8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least8_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_int_least8_t",
                "textEdit": {
                    "newText": "atomic_int_least8_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_intmax_t",
                "insertText": "atomic_intmax_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_intmax_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_intmax_t",
                "textEdit": {
                    "newText": "atomic_intmax_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_intptr_t",
                "insertText": "atomic_intptr_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_intptr_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_intptr_t",
                "textEdit": {
                    "newText": "atomic_intptr_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_llong",
                "insertText": "atomic_llong",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_llong",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_llong",
                "textEdit": {
                    "newText": "atomic_llong",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ptrdiff_t",
                "insertText": "atomic_ptrdiff_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ptrdiff_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_ptrdiff_t",
                "textEdit": {
                    "newText": "atomic_ptrdiff_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_short",
                "insertText": "atomic_short",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_short",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_short",
                "textEdit": {
                    "newText": "atomic_short",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uchar",
                "insertText": "atomic_uchar",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uchar",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_uchar",
                "textEdit": {
                    "newText": "atomic_uchar",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint",
                "insertText": "atomic_uint",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_uint",
                "textEdit": {
                    "newText": "atomic_uint",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint32_t",
                "insertText": "atomic_uint32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint32_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_uint32_t",
                "textEdit": {
                    "newText": "atomic_uint32_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint64_t",
                "insertText": "atomic_uint64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint64_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_uint64_t",
                "textEdit": {
                    "newText": "atomic_uint64_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast16_t",
                "insertText": "atomic_uint_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast16_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_uint_fast16_t",
                "textEdit": {
                    "newText": "atomic_uint_fast16_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast64_t",
                "insertText": "atomic_uint_fast64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast64_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_uint_fast64_t",
                "textEdit": {
                    "newText": "atomic_uint_fast64_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_least32_t",
                "insertText": "atomic_uint_least32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_least32_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_uint_least32_t",
                "textEdit": {
                    "newText": "atomic_uint_least32_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_least8_t",
                "insertText": "atomic_uint_least8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_least8_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_uint_least8_t",
                "textEdit": {
                    "newText": "atomic_uint_least8_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uintmax_t",
                "insertText": "atomic_uintmax_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uintmax_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_uintmax_t",
                "textEdit": {
                    "newText": "atomic_uintmax_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uintptr_t",
                "insertText": "atomic_uintptr_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uintptr_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_uintptr_t",
                "textEdit": {
                    "newText": "atomic_uintptr_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ulong",
                "insertText": "atomic_ulong",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ulong",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_ulong",
                "textEdit": {
                    "newText": "atomic_ulong",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ushort",
                "insertText": "atomic_ushort",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ushort",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_ushort",
                "textEdit": {
                    "newText": "atomic_ushort",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_wchar_t",
                "insertText": "atomic_wchar_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_wchar_t",
                "score": 0.8070572018623352,
                "sortText": "40b164b3atomic_wchar_t",
                "textEdit": {
                    "newText": "atomic_wchar_t",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "auto_ptr",
                "insertText": "auto_ptr",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022auto_ptr<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3auto_ptr",
                "textEdit": {
                    "newText": "auto_ptr",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "auto_ptr_ref",
                "insertText": "auto_ptr_ref",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022auto_ptr_ref<class Ty>",
                "score": 0.8070572018623352,
                "sortText": "40b164b3auto_ptr_ref",
                "textEdit": {
                    "newText": "auto_ptr_ref",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>\nfrom <iterator>"
                },
                "filterText": "advance",
                "insertText": "advance",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022advance(InIt &Where, Diff Off)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddadvance",
                "textEdit": {
                    "newText": "advance",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "as_const",
                "insertText": "as_const",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022as_const(const Ty &&)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddas_const",
                "textEdit": {
                    "newText": "as_const",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_compare_exchange_strong",
                "insertText": "atomic_compare_exchange_strong",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_compare_exchange_strong(atomic<Ty> *const Mem, _Identity_t<Ty> *const Expected, const _Identity_t<Ty> Desired)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddatomic_compare_exchange_strong",
                "textEdit": {
                    "newText": "atomic_compare_exchange_strong",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_compare_exchange_strong",
                "insertText": "atomic_compare_exchange_strong",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_compare_exchange_strong(shared_ptr<Ty> *Ptr, shared_ptr<Ty> *Exp, shared_ptr<Ty> Value)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddatomic_compare_exchange_strong",
                "textEdit": {
                    "newText": "atomic_compare_exchange_strong",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_compare_exchange_strong",
                "insertText": "atomic_compare_exchange_strong",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_compare_exchange_strong(volatile atomic<Ty> *const Mem, _Identity_t<Ty> *const Expected, const _Identity_t<Ty> Desired)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddatomic_compare_exchange_strong",
                "textEdit": {
                    "newText": "atomic_compare_exchange_strong",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_compare_exchange_strong_explicit",
                "insertText": "atomic_compare_exchange_strong_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_compare_exchange_strong_explicit(shared_ptr<Ty> *Ptr, shared_ptr<Ty> *Exp, shared_ptr<Ty> Value, memory_order, memory_order)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddatomic_compare_exchange_strong_explicit",
                "textEdit": {
                    "newText": "atomic_compare_exchange_strong_explicit",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_compare_exchange_weak",
                "insertText": "atomic_compare_exchange_weak",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_compare_exchange_weak(atomic<Ty> *const Mem, _Identity_t<Ty> *const Expected, const _Identity_t<Ty> Desired)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddatomic_compare_exchange_weak",
                "textEdit": {
                    "newText": "atomic_compare_exchange_weak",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_compare_exchange_weak",
                "insertText": "atomic_compare_exchange_weak",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_compare_exchange_weak(shared_ptr<Ty> *Ptr, shared_ptr<Ty> *Exp, shared_ptr<Ty> Value)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddatomic_compare_exchange_weak",
                "textEdit": {
                    "newText": "atomic_compare_exchange_weak",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_compare_exchange_weak_explicit",
                "insertText": "atomic_compare_exchange_weak_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_compare_exchange_weak_explicit(shared_ptr<Ty> *Ptr, shared_ptr<Ty> *Exp, shared_ptr<Ty> Value, memory_order, memory_order)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddatomic_compare_exchange_weak_explicit",
                "textEdit": {
                    "newText": "atomic_compare_exchange_weak_explicit",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_clear_explicit",
                "insertText": "atomic_flag_clear_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_clear_explicit(atomic_flag *const Flag, const memory_order Order)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddatomic_flag_clear_explicit",
                "textEdit": {
                    "newText": "atomic_flag_clear_explicit",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_clear_explicit",
                "insertText": "atomic_flag_clear_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_clear_explicit(volatile atomic_flag *const Flag, const memory_order Order)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddatomic_flag_clear_explicit",
                "textEdit": {
                    "newText": "atomic_flag_clear_explicit",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_test_and_set",
                "insertText": "atomic_flag_test_and_set",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_test_and_set(atomic_flag *const Flag)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddatomic_flag_test_and_set",
                "textEdit": {
                    "newText": "atomic_flag_test_and_set",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_test_and_set",
                "insertText": "atomic_flag_test_and_set",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_test_and_set(volatile atomic_flag *const Flag)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddatomic_flag_test_and_set",
                "textEdit": {
                    "newText": "atomic_flag_test_and_set",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_test_and_set_explicit",
                "insertText": "atomic_flag_test_and_set_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_test_and_set_explicit(atomic_flag *const Flag, const memory_order Order)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddatomic_flag_test_and_set_explicit",
                "textEdit": {
                    "newText": "atomic_flag_test_and_set_explicit",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_test_and_set_explicit",
                "insertText": "atomic_flag_test_and_set_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_test_and_set_explicit(volatile atomic_flag *const Flag, const memory_order Order)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddatomic_flag_test_and_set_explicit",
                "textEdit": {
                    "newText": "atomic_flag_test_and_set_explicit",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_init",
                "insertText": "atomic_init",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_init(atomic<Ty> *const Mem, const typename atomic<Ty>::value_type Value)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddatomic_init",
                "textEdit": {
                    "newText": "atomic_init",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_is_lock_free",
                "insertText": "atomic_is_lock_free",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_is_lock_free(const shared_ptr<Ty> *)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddatomic_is_lock_free",
                "textEdit": {
                    "newText": "atomic_is_lock_free",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_is_lock_free",
                "insertText": "atomic_is_lock_free",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_is_lock_free(const volatile atomic<Ty> *Mem)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddatomic_is_lock_free",
                "textEdit": {
                    "newText": "atomic_is_lock_free",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_signal_fence",
                "insertText": "atomic_signal_fence",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_signal_fence(const memory_order Order)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddatomic_signal_fence",
                "textEdit": {
                    "newText": "atomic_signal_fence",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_store",
                "insertText": "atomic_store",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_store(atomic<Ty> *const Mem, const _Identity_t<Ty> Value)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddatomic_store",
                "textEdit": {
                    "newText": "atomic_store",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_store",
                "insertText": "atomic_store",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_store(shared_ptr<Ty> *Ptr, shared_ptr<Ty> Other)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddatomic_store",
                "textEdit": {
                    "newText": "atomic_store",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_store_explicit",
                "insertText": "atomic_store_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_store_explicit(shared_ptr<Ty> *Ptr, shared_ptr<Ty> Other, memory_order)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddatomic_store_explicit",
                "textEdit": {
                    "newText": "atomic_store_explicit",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_thread_fence",
                "insertText": "atomic_thread_fence",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_thread_fence(const memory_order Order)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddatomic_thread_fence",
                "textEdit": {
                    "newText": "atomic_thread_fence",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocate_shared",
                "insertText": "allocate_shared",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022allocate_shared<class Ty>(const Alloc &Al, Types &&Args...)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464allocate_shared",
                "textEdit": {
                    "newText": "allocate_shared",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "add_const_t<Ty> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "as_const",
                "insertText": "as_const",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022as_const(Ty &Val)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464as_const",
                "textEdit": {
                    "newText": "as_const",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_exchange",
                "insertText": "atomic_exchange",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_exchange(volatile atomic<Ty> *const Mem, const _Identity_t<Ty> Value)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464atomic_exchange",
                "textEdit": {
                    "newText": "atomic_exchange",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_exchange",
                "insertText": "atomic_exchange",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_exchange(shared_ptr<Ty> *Ptr, shared_ptr<Ty> Other)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464atomic_exchange",
                "textEdit": {
                    "newText": "atomic_exchange",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_exchange_explicit",
                "insertText": "atomic_exchange_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_exchange_explicit(shared_ptr<Ty> *Ptr, shared_ptr<Ty> Other, memory_order)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464atomic_exchange_explicit",
                "textEdit": {
                    "newText": "atomic_exchange_explicit",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_add",
                "insertText": "atomic_fetch_add",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_add(volatile atomic<Ty> *Mem, const typename atomic<Ty>::difference_type Value)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464atomic_fetch_add",
                "textEdit": {
                    "newText": "atomic_fetch_add",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_add_explicit",
                "insertText": "atomic_fetch_add_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_add_explicit(atomic<Ty> *Mem, const typename atomic<Ty>::difference_type Value, const memory_order Order)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464atomic_fetch_add_explicit",
                "textEdit": {
                    "newText": "atomic_fetch_add_explicit",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_and",
                "insertText": "atomic_fetch_and",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_and(atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464atomic_fetch_and",
                "textEdit": {
                    "newText": "atomic_fetch_and",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_and_explicit",
                "insertText": "atomic_fetch_and_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_and_explicit(atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value, const memory_order Order)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464atomic_fetch_and_explicit",
                "textEdit": {
                    "newText": "atomic_fetch_and_explicit",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_or",
                "insertText": "atomic_fetch_or",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_or(volatile atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464atomic_fetch_or",
                "textEdit": {
                    "newText": "atomic_fetch_or",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_or",
                "insertText": "atomic_fetch_or",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_or(atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464atomic_fetch_or",
                "textEdit": {
                    "newText": "atomic_fetch_or",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_or_explicit",
                "insertText": "atomic_fetch_or_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_or_explicit(atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value, const memory_order Order)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464atomic_fetch_or_explicit",
                "textEdit": {
                    "newText": "atomic_fetch_or_explicit",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_or_explicit",
                "insertText": "atomic_fetch_or_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_or_explicit(volatile atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value, const memory_order Order)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464atomic_fetch_or_explicit",
                "textEdit": {
                    "newText": "atomic_fetch_or_explicit",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_sub",
                "insertText": "atomic_fetch_sub",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_sub(atomic<Ty> *Mem, const typename atomic<Ty>::difference_type Value)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464atomic_fetch_sub",
                "textEdit": {
                    "newText": "atomic_fetch_sub",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_sub_explicit",
                "insertText": "atomic_fetch_sub_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_sub_explicit(atomic<Ty> *Mem, const typename atomic<Ty>::difference_type Value, const memory_order Order)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464atomic_fetch_sub_explicit",
                "textEdit": {
                    "newText": "atomic_fetch_sub_explicit",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_xor",
                "insertText": "atomic_fetch_xor",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_xor(atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464atomic_fetch_xor",
                "textEdit": {
                    "newText": "atomic_fetch_xor",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_xor",
                "insertText": "atomic_fetch_xor",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_xor(volatile atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464atomic_fetch_xor",
                "textEdit": {
                    "newText": "atomic_fetch_xor",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_xor_explicit",
                "insertText": "atomic_fetch_xor_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_xor_explicit(atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value, const memory_order Order)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464atomic_fetch_xor_explicit",
                "textEdit": {
                    "newText": "atomic_fetch_xor_explicit",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_load",
                "insertText": "atomic_load",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_load(const atomic<Ty> *const Mem)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464atomic_load",
                "textEdit": {
                    "newText": "atomic_load",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_load",
                "insertText": "atomic_load",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_load(const shared_ptr<Ty> *Ptr)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464atomic_load",
                "textEdit": {
                    "newText": "atomic_load",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_load_explicit",
                "insertText": "atomic_load_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_load_explicit(const atomic<Ty> *const Mem, const memory_order Order)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464atomic_load_explicit",
                "textEdit": {
                    "newText": "atomic_load_explicit",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_load_explicit",
                "insertText": "atomic_load_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_load_explicit(const volatile atomic<Ty> *const Mem, const memory_order Order)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464atomic_load_explicit",
                "textEdit": {
                    "newText": "atomic_load_explicit",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_load_explicit",
                "insertText": "atomic_load_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_load_explicit(const shared_ptr<Ty> *Ptr, memory_order)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464atomic_load_explicit",
                "textEdit": {
                    "newText": "atomic_load_explicit",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <time.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <time.h>"
                },
                "filterText": "asctime_s",
                "insertText": "asctime_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asctime_s(char *Buffer, size_t SizeInBytes, const struct tm *Tm)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbasctime_s",
                "textEdit": {
                    "newText": "asctime_s",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <time.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <time.h>"
                },
                "filterText": "asctime_s",
                "insertText": "asctime_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asctime_s(char (&Buffer)[Size], const struct tm *Time)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbasctime_s",
                "textEdit": {
                    "newText": "asctime_s",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\nAppCRT Time Functions\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
                },
                "filterText": "asctime",
                "insertText": "asctime",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asctime(const struct tm *Tm)",
                "score": 0.3469603955745697,
                "sortText": "414e5b35asctime",
                "textEdit": {
                    "newText": "asctime",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEAFNOSUPPORT"
                },
                "filterText": "address_family_not_supported",
                "insertText": "errc::address_family_not_supported",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::address_family_not_supported",
                "score": 0.3138078451156616,
                "sortText": "415f5494address_family_not_supported",
                "textEdit": {
                    "newText": "errc::address_family_not_supported",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEADDRINUSE"
                },
                "filterText": "address_in_use",
                "insertText": "errc::address_in_use",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::address_in_use",
                "score": 0.3138078451156616,
                "sortText": "415f5494address_in_use",
                "textEdit": {
                    "newText": "errc::address_in_use",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEADDRNOTAVAIL"
                },
                "filterText": "address_not_available",
                "insertText": "errc::address_not_available",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::address_not_available",
                "score": 0.3138078451156616,
                "sortText": "415f5494address_not_available",
                "textEdit": {
                    "newText": "errc::address_not_available",
                    "range": {
                        "end": {
                            "character": 1,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'as'",
                "range": {
                    "end": {
                        "character": 2,
                        "line": 19
                    },
                    "start": {
                        "character": 0,
                        "line": 19
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 126
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=19, column=0, column_end = 2, message=Use of undeclared identifier 'as')]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_signal_fence",
                "insertText": "atomic_signal_fence",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_signal_fence(const memory_order Order)",
                "score": 0.5893728137016296,
                "sortText": "4136d3d1atomic_signal_fence",
                "textEdit": {
                    "newText": "atomic_signal_fence",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdatomic.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdatomic.h>"
                },
                "filterText": "atomic_signal_fence",
                "insertText": "atomic_signal_fence",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_signal_fence(memory_order)",
                "score": 0.44337138533592224,
                "sortText": "4168a99eatomic_signal_fence",
                "textEdit": {
                    "newText": "atomic_signal_fence",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <chrono>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <chrono>"
                },
                "filterText": "treat_as_floating_point",
                "insertText": "chrono::treat_as_floating_point",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022chrono::treat_as_floating_point<class Rep>",
                "score": 0.6575543284416199,
                "sortText": "4173b8c4treat_as_floating_point",
                "textEdit": {
                    "newText": "chrono::treat_as_floating_point",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <chrono>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <chrono>"
                },
                "filterText": "treat_as_floating_point_v",
                "insertText": "chrono::treat_as_floating_point_v",
                "insertTextFormat": 1,
                "kind": 6,
                "label": "\u2022chrono::treat_as_floating_point_v<class Rep>",
                "score": 0.3138078451156616,
                "sortText": "41fa1bd0treat_as_floating_point_v",
                "textEdit": {
                    "newText": "chrono::treat_as_floating_point_v",
                    "range": {
                        "end": {
                            "character": 3,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cassert>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cassert>"
                },
                "filterText": "assert",
                "insertText": "assert",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022assert(expression)",
                "score": 0.8436345458030701,
                "sortText": "40a80791assert",
                "textEdit": {
                    "newText": "assert",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "aligned_storage",
                "insertText": "aligned_storage",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022aligned_storage<size_t Len, size_t Align>",
                "score": 0.8070572018623352,
                "sortText": "40e50b86aligned_storage",
                "textEdit": {
                    "newText": "aligned_storage",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "aligned_storage_t",
                "insertText": "aligned_storage_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022aligned_storage_t<size_t Len, size_t Align>",
                "score": 0.8070572018623352,
                "sortText": "40e50b86aligned_storage_t",
                "textEdit": {
                    "newText": "aligned_storage_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_schar",
                "insertText": "atomic_schar",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_schar",
                "score": 0.8070572018623352,
                "sortText": "40e50b86atomic_schar",
                "textEdit": {
                    "newText": "atomic_schar",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_short",
                "insertText": "atomic_short",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_short",
                "score": 0.8070572018623352,
                "sortText": "40e50b86atomic_short",
                "textEdit": {
                    "newText": "atomic_short",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_size_t",
                "insertText": "atomic_size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_size_t",
                "score": 0.8070572018623352,
                "sortText": "40e50b86atomic_size_t",
                "textEdit": {
                    "newText": "atomic_size_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "as_const",
                "insertText": "as_const",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022as_const(const Ty &&)",
                "score": 0.5893728137016296,
                "sortText": "40e91eddas_const",
                "textEdit": {
                    "newText": "as_const",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "add_const_t<Ty> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "as_const",
                "insertText": "as_const",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022as_const(Ty &Val)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464as_const",
                "textEdit": {
                    "newText": "as_const",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asin",
                "insertText": "asin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asin(const valarray<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464asin",
                "textEdit": {
                    "newText": "asin",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asin",
                "insertText": "asin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asin(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464asin",
                "textEdit": {
                    "newText": "asin",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinh",
                "insertText": "asinh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asinh(const complex<Ty> &Left)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464asinh",
                "textEdit": {
                    "newText": "asinh",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <future>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "future<_Invoke_result_t<decay_t<Fty>, decay_t<ArgTypes>...>>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <future>"
                },
                "filterText": "async",
                "insertText": "async",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022async(Fty &&Fnarg, ArgTypes &&Args...)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464async",
                "textEdit": {
                    "newText": "async",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <future>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "future<_Invoke_result_t<decay_t<Fty>, decay_t<ArgTypes>...>>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <future>"
                },
                "filterText": "async",
                "insertText": "async",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022async(launch Policy, Fty &&Fnarg, ArgTypes &&Args...)",
                "score": 0.5751283168792725,
                "sortText": "40ecc464async",
                "textEdit": {
                    "newText": "async",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nThe following order matches N4950 [cmath.syn]."
                },
                "filterText": "asin",
                "insertText": "asin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asin(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93basin",
                "textEdit": {
                    "newText": "asin",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asin",
                "insertText": "asin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asin(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93basin",
                "textEdit": {
                    "newText": "asin",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asin",
                "insertText": "asin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asin(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93basin",
                "textEdit": {
                    "newText": "asin",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinh",
                "insertText": "asinh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asinh(float Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93basinh",
                "textEdit": {
                    "newText": "asinh",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nThe following order matches N4950 [cmath.syn]."
                },
                "filterText": "asinh",
                "insertText": "asinh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asinh(Ty Left)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93basinh",
                "textEdit": {
                    "newText": "asinh",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinh",
                "insertText": "asinh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asinh(long double Xx)",
                "score": 0.5127986073493958,
                "sortText": "40fcb93basinh",
                "textEdit": {
                    "newText": "asinh",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplinterface.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplinterface.h>"
                },
                "filterText": "atomic_size_t",
                "insertText": "Concurrency::details::atomic_size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022Concurrency::details::atomic_size_t",
                "score": 0.6378918290138245,
                "sortText": "410b0caeatomic_size_t",
                "textEdit": {
                    "newText": "Concurrency::details::atomic_size_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_signal_fence",
                "insertText": "atomic_signal_fence",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_signal_fence(const memory_order Order)",
                "score": 0.5893728137016296,
                "sortText": "411dae4catomic_signal_fence",
                "textEdit": {
                    "newText": "atomic_signal_fence",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_store",
                "insertText": "atomic_store",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_store(atomic<Ty> *const Mem, const _Identity_t<Ty> Value)",
                "score": 0.5893728137016296,
                "sortText": "411dae4catomic_store",
                "textEdit": {
                    "newText": "atomic_store",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_store",
                "insertText": "atomic_store",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_store(shared_ptr<Ty> *Ptr, shared_ptr<Ty> Other)",
                "score": 0.5893728137016296,
                "sortText": "411dae4catomic_store",
                "textEdit": {
                    "newText": "atomic_store",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_store",
                "insertText": "atomic_store",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_store(volatile atomic<Ty> *const Mem, const _Identity_t<Ty> Value)",
                "score": 0.5893728137016296,
                "sortText": "411dae4catomic_store",
                "textEdit": {
                    "newText": "atomic_store",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_store_explicit",
                "insertText": "atomic_store_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_store_explicit(shared_ptr<Ty> *Ptr, shared_ptr<Ty> Other, memory_order)",
                "score": 0.5893728137016296,
                "sortText": "411dae4catomic_store_explicit",
                "textEdit": {
                    "newText": "atomic_store_explicit",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_store_explicit",
                "insertText": "atomic_store_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_store_explicit(atomic<Ty> *const Mem, const _Identity_t<Ty> Value, const memory_order Order)",
                "score": 0.5893728137016296,
                "sortText": "411dae4catomic_store_explicit",
                "textEdit": {
                    "newText": "atomic_store_explicit",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_store_explicit",
                "insertText": "atomic_store_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_store_explicit(volatile atomic<Ty> *const Mem, const _Identity_t<Ty> Value, const memory_order Order)",
                "score": 0.5893728137016296,
                "sortText": "411dae4catomic_store_explicit",
                "textEdit": {
                    "newText": "atomic_store_explicit",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <time.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <time.h>"
                },
                "filterText": "asctime_s",
                "insertText": "asctime_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asctime_s(char *Buffer, size_t SizeInBytes, const struct tm *Tm)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbasctime_s",
                "textEdit": {
                    "newText": "asctime_s",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <time.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <time.h>"
                },
                "filterText": "asctime_s",
                "insertText": "asctime_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asctime_s(char (&Buffer)[Size], const struct tm *Time)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbasctime_s",
                "textEdit": {
                    "newText": "asctime_s",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asin",
                "insertText": "asin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asin(double X)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbasin",
                "textEdit": {
                    "newText": "asin",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinf",
                "insertText": "asinf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asinf(float X)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbasinf",
                "textEdit": {
                    "newText": "asinf",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinh",
                "insertText": "asinh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asinh(double X)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbasinh",
                "textEdit": {
                    "newText": "asinh",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinhf",
                "insertText": "asinhf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asinhf(float X)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbasinhf",
                "textEdit": {
                    "newText": "asinhf",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinhl",
                "insertText": "asinhl",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asinhl(long double X)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbasinhl",
                "textEdit": {
                    "newText": "asinhl",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinl",
                "insertText": "asinl",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asinl(long double X)",
                "score": 0.4419805109500885,
                "sortText": "411db4bbasinl",
                "textEdit": {
                    "newText": "asinl",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocate_shared",
                "insertText": "allocate_shared",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022allocate_shared<class Ty>(const Alloc &Al, Types &&Args...)",
                "score": 0.5751283168792725,
                "sortText": "41232696allocate_shared",
                "textEdit": {
                    "newText": "allocate_shared",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_schar",
                "insertText": "atomic_schar",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_schar",
                "score": 0.5702864527702332,
                "sortText": "41250290atomic_schar",
                "textEdit": {
                    "newText": "atomic_schar",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_short",
                "insertText": "atomic_short",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_short",
                "score": 0.5702864527702332,
                "sortText": "41250290atomic_short",
                "textEdit": {
                    "newText": "atomic_short",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_size_t",
                "insertText": "atomic_size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_size_t",
                "score": 0.5702864527702332,
                "sortText": "41250290atomic_size_t",
                "textEdit": {
                    "newText": "atomic_size_t",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\nAppCRT Time Functions\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
                },
                "filterText": "asctime",
                "insertText": "asctime",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asctime(const struct tm *Tm)",
                "score": 0.3469603955745697,
                "sortText": "414e5b35asctime",
                "textEdit": {
                    "newText": "asctime",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdatomic.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdatomic.h>"
                },
                "filterText": "atomic_signal_fence",
                "insertText": "atomic_signal_fence",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_signal_fence(memory_order)",
                "score": 0.44337138533592224,
                "sortText": "4155bed2atomic_signal_fence",
                "textEdit": {
                    "newText": "atomic_signal_fence",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "filterText": "static_assert",
                "insertText": "static_assert",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_assert(expression, message);",
                "score": 0.8373723030090332,
                "sortText": "415f397astatic_assert",
                "textEdit": {
                    "newText": "static_assert",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <future>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "std::launch",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <future>"
                },
                "filterText": "async",
                "insertText": "launch::async",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022launch::async",
                "score": 0.3138078451156616,
                "sortText": "415f5494async",
                "textEdit": {
                    "newText": "launch::async",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "is_assignable",
                "insertText": "is_assignable",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022is_assignable<class To, class From>",
                "score": 0.8070572018623352,
                "sortText": "41650b86is_assignable",
                "textEdit": {
                    "newText": "is_assignable",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "asctime",
                "insertText": "asctime",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022asctime",
                "score": 0.25286611914634705,
                "sortText": "417e8855asctime",
                "textEdit": {
                    "newText": "asctime",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asin",
                "insertText": "asin",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022asin",
                "score": 0.25286611914634705,
                "sortText": "417e8855asin",
                "textEdit": {
                    "newText": "asin",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinf",
                "insertText": "asinf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022asinf",
                "score": 0.25286611914634705,
                "sortText": "417e8855asinf",
                "textEdit": {
                    "newText": "asinf",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinh",
                "insertText": "asinh",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022asinh",
                "score": 0.25286611914634705,
                "sortText": "417e8855asinh",
                "textEdit": {
                    "newText": "asinh",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinhf",
                "insertText": "asinhf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022asinhf",
                "score": 0.25286611914634705,
                "sortText": "417e8855asinhf",
                "textEdit": {
                    "newText": "asinhf",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinhl",
                "insertText": "asinhl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022asinhl",
                "score": 0.25286611914634705,
                "sortText": "417e8855asinhl",
                "textEdit": {
                    "newText": "asinhl",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinl",
                "insertText": "asinl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022asinl",
                "score": 0.25286611914634705,
                "sortText": "417e8855asinl",
                "textEdit": {
                    "newText": "asinl",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <chrono>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <chrono>"
                },
                "filterText": "treat_as_floating_point",
                "insertText": "chrono::treat_as_floating_point",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022chrono::treat_as_floating_point<class Rep>",
                "score": 0.6575543284416199,
                "sortText": "41837fc8treat_as_floating_point",
                "textEdit": {
                    "newText": "chrono::treat_as_floating_point",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <tuple>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "tuple<Types &&...>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <tuple>"
                },
                "filterText": "forward_as_tuple",
                "insertText": "forward_as_tuple",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022forward_as_tuple(Types &&Args...)",
                "score": 0.5751283168792725,
                "sortText": "41a32696forward_as_tuple",
                "textEdit": {
                    "newText": "forward_as_tuple",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "aligned_storage",
                "insertText": "tr1::aligned_storage",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::aligned_storage",
                "score": 0.2698061466217041,
                "sortText": "41b0c9f4aligned_storage",
                "textEdit": {
                    "newText": "tr1::aligned_storage",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocate_shared",
                "insertText": "tr1::allocate_shared",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::allocate_shared",
                "score": 0.2698061466217041,
                "sortText": "41b0c9f4allocate_shared",
                "textEdit": {
                    "newText": "tr1::allocate_shared",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "is_assignable_v",
                "insertText": "is_assignable_v",
                "insertTextFormat": 1,
                "kind": 6,
                "label": "\u2022is_assignable_v<class To, class From>",
                "score": 0.37649863958358765,
                "sortText": "41ef6caeis_assignable_v",
                "textEdit": {
                    "newText": "is_assignable_v",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <chrono>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <chrono>"
                },
                "filterText": "treat_as_floating_point_v",
                "insertText": "chrono::treat_as_floating_point_v",
                "insertTextFormat": 1,
                "kind": 6,
                "label": "\u2022chrono::treat_as_floating_point_v<class Rep>",
                "score": 0.3138078451156616,
                "sortText": "420efedetreat_as_floating_point_v",
                "textEdit": {
                    "newText": "chrono::treat_as_floating_point_v",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplwin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "const ::std::shared_ptr<scheduler_interface> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplwin.h>"
                },
                "filterText": "get_ambient_scheduler",
                "insertText": "Concurrency::get_ambient_scheduler",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::get_ambient_scheduler()",
                "score": 0.5271684527397156,
                "sortText": "42790b7dget_ambient_scheduler",
                "textEdit": {
                    "newText": "Concurrency::get_ambient_scheduler",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplwin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplwin.h>"
                },
                "filterText": "set_ambient_scheduler",
                "insertText": "Concurrency::set_ambient_scheduler",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::set_ambient_scheduler(const ::std::shared_ptr<scheduler_interface> &Scheduler)",
                "score": 0.5271684527397156,
                "sortText": "42790b7dset_ambient_scheduler",
                "textEdit": {
                    "newText": "Concurrency::set_ambient_scheduler",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <future>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "std::future_errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <future>"
                },
                "filterText": "promise_already_satisfied",
                "insertText": "future_errc::promise_already_satisfied",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022future_errc::promise_already_satisfied",
                "score": 0.3138078451156616,
                "sortText": "42df5494promise_already_satisfied",
                "textEdit": {
                    "newText": "future_errc::promise_already_satisfied",
                    "range": {
                        "end": {
                            "character": 2,
                            "line": 19
                        },
                        "start": {
                            "character": 0,
                            "line": 19
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'asfasdas'",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 19
                    },
                    "start": {
                        "character": 0,
                        "line": 19
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 138
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=19, column=0, column_end = 8, message=Use of undeclared identifier 'asfasdas')]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'asfasdasasdas'",
                "range": {
                    "end": {
                        "character": 13,
                        "line": 19
                    },
                    "start": {
                        "character": 0,
                        "line": 19
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 148
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=19, column=0, column_end = 13, message=Use of undeclared identifier 'asfasdasasdas')]
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'asfasdasasdasd'",
                "range": {
                    "end": {
                        "character": 14,
                        "line": 19
                    },
                    "start": {
                        "character": 0,
                        "line": 19
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 150
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=19, column=0, column_end = 14, message=Use of undeclared identifier 'asfasdasasdasd')]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'asfasdasasdasdasdasdas'",
                "range": {
                    "end": {
                        "character": 22,
                        "line": 19
                    },
                    "start": {
                        "character": 0,
                        "line": 19
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 166
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=19, column=0, column_end = 22, message=Use of undeclared identifier 'asfasdasasdasdasdasdas')]
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'asfasdasasdasdasdasdasd'",
                "range": {
                    "end": {
                        "character": 23,
                        "line": 19
                    },
                    "start": {
                        "character": 0,
                        "line": 19
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 168
    }
}
Diagnostics received from LSP.
Errors received: [Error(line=19, column=0, column_end = 23, message=Use of undeclared identifier 'asfasdasasdasdasdasdasd')]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmp51d6mecz.cpp",
        "version": 180
    }
}
Diagnostics received from LSP.
Errors received: []
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": null
}
Received hover response.
Hover response does not contain 'contents'.
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "namespace std\n\nnamespace std {}"
        },
        "range": {
            "end": {
                "character": 5,
                "line": 2
            },
            "start": {
                "character": 0,
                "line": 2
            }
        }
    }
}
Received hover response.
Hover text: namespace std

namespace std {}
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmp51d6mecz.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/didChange
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
Request sent with method textDocument/hover
Handling response from LSP
Received response: {
    "id": 2,
    "jsonrpc": "2.0",
    "result": {
        "contents": {
            "kind": "plaintext",
            "value": "iostream\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\iostream\n\nprovides cout"
        }
    }
}
Received hover response.
Hover text: iostream

C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.43.34808\include\iostream

provides cout
