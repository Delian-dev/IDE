Temporary file created: C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
LSP process started successfully.
Request sent with method initialize
Handling response from LSP
Received response: {
    "id": 0,
    "jsonrpc": "2.0",
    "result": {
        "capabilities": {
            "astProvider": true,
            "callHierarchyProvider": true,
            "clangdInlayHintsProvider": true,
            "codeActionProvider": true,
            "compilationDatabase": {
                "automaticReload": true
            },
            "completionProvider": {
                "resolveProvider": false,
                "triggerCharacters": [
                    ".",
                    "<",
                    ">",
                    ":",
                    "\"",
                    "/",
                    "*"
                ]
            },
            "declarationProvider": true,
            "definitionProvider": true,
            "documentFormattingProvider": true,
            "documentHighlightProvider": true,
            "documentLinkProvider": {
                "resolveProvider": false
            },
            "documentOnTypeFormattingProvider": {
                "firstTriggerCharacter": "\n",
                "moreTriggerCharacter": []
            },
            "documentRangeFormattingProvider": true,
            "documentSymbolProvider": true,
            "executeCommandProvider": {
                "commands": [
                    "clangd.applyFix",
                    "clangd.applyRename",
                    "clangd.applyTweak"
                ]
            },
            "foldingRangeProvider": true,
            "hoverProvider": true,
            "implementationProvider": true,
            "inactiveRegionsProvider": true,
            "inlayHintProvider": true,
            "memoryUsageProvider": true,
            "referencesProvider": true,
            "renameProvider": true,
            "selectionRangeProvider": true,
            "semanticTokensProvider": {
                "full": {
                    "delta": true
                },
                "legend": {
                    "tokenModifiers": [
                        "declaration",
                        "definition",
                        "deprecated",
                        "deduced",
                        "readonly",
                        "static",
                        "abstract",
                        "virtual",
                        "dependentName",
                        "defaultLibrary",
                        "usedAsMutableReference",
                        "usedAsMutablePointer",
                        "constructorOrDestructor",
                        "userDefined",
                        "functionScope",
                        "classScope",
                        "fileScope",
                        "globalScope"
                    ],
                    "tokenTypes": [
                        "variable",
                        "variable",
                        "parameter",
                        "function",
                        "method",
                        "function",
                        "property",
                        "variable",
                        "class",
                        "interface",
                        "enum",
                        "enumMember",
                        "type",
                        "type",
                        "unknown",
                        "namespace",
                        "typeParameter",
                        "concept",
                        "type",
                        "macro",
                        "modifier",
                        "operator",
                        "bracket",
                        "label",
                        "comment"
                    ]
                },
                "range": false
            },
            "signatureHelpProvider": {
                "triggerCharacters": [
                    "(",
                    ")",
                    "{",
                    "}",
                    "<",
                    ">",
                    ","
                ]
            },
            "standardTypeHierarchyProvider": true,
            "textDocumentSync": {
                "change": 2,
                "openClose": true,
                "save": true
            },
            "typeDefinitionProvider": true,
            "typeHierarchyProvider": true,
            "workspaceSymbolProvider": true
        },
        "serverInfo": {
            "name": "clangd",
            "version": "clangd version 20.1.0 windows x86_64-pc-windows-msvc"
        }
    }
}
LSP initialized successfully.
Request sent with method textDocument/didOpen
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 0
    }
}
Diagnostics received from LSP.
Errors received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "muchie de la x la y cu costul cost"
                },
                "filterText": "Muchie",
                "insertText": "Muchie",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Muchie",
                "score": 2.66562557220459,
                "sortText": "3fd56664Muchie",
                "textEdit": {
                    "newText": "Muchie",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 1.1117926836013794,
                "sortText": "4071b0c7struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 1.0194766521453857,
                "sortText": "407d81casize_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "type_info",
                "insertText": "type_info",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " type_info",
                "score": 0.816092848777771,
                "sortText": "40af148atype_info",
                "textEdit": {
                    "newText": "type_info",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.7694156765937805,
                "sortText": "40bb0793_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.7694156765937805,
                "sortText": "40bb0793_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.7694156765937805,
                "sortText": "40bb0793_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "alignas",
                "insertText": "alignas",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignas(expression)",
                "score": 0.7694156765937805,
                "sortText": "40bb0793alignas",
                "textEdit": {
                    "newText": "alignas",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.7694156765937805,
                "sortText": "40bb0793auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.7694156765937805,
                "sortText": "40bb0793bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.7694156765937805,
                "sortText": "40bb0793char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.7694156765937805,
                "sortText": "40bb0793char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.7694156765937805,
                "sortText": "40bb0793char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.7694156765937805,
                "sortText": "40bb0793class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.7694156765937805,
                "sortText": "40bb0793const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.7694156765937805,
                "sortText": "40bb0793constexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.7694156765937805,
                "sortText": "40bb0793decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.7694156765937805,
                "sortText": "40bb0793double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.7694156765937805,
                "sortText": "40bb0793enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "explicit",
                "insertText": "explicit",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " explicit",
                "score": 0.7694156765937805,
                "sortText": "40bb0793explicit",
                "textEdit": {
                    "newText": "explicit",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "extern",
                "insertText": "extern",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " extern",
                "score": 0.7694156765937805,
                "sortText": "40bb0793extern",
                "textEdit": {
                    "newText": "extern",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.7694156765937805,
                "sortText": "40bb0793float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "friend",
                "insertText": "friend",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " friend",
                "score": 0.7694156765937805,
                "sortText": "40bb0793friend",
                "textEdit": {
                    "newText": "friend",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "inline",
                "insertText": "inline",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " inline",
                "score": 0.7694156765937805,
                "sortText": "40bb0793inline",
                "textEdit": {
                    "newText": "inline",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.7694156765937805,
                "sortText": "40bb0793int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.7694156765937805,
                "sortText": "40bb0793long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "mutable",
                "insertText": "mutable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " mutable",
                "score": 0.7694156765937805,
                "sortText": "40bb0793mutable",
                "textEdit": {
                    "newText": "mutable",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.7694156765937805,
                "sortText": "40bb0793operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "private",
                "insertText": "private",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " private",
                "score": 0.7694156765937805,
                "sortText": "40bb0793private",
                "textEdit": {
                    "newText": "private",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "protected",
                "insertText": "protected",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " protected",
                "score": 0.7694156765937805,
                "sortText": "40bb0793protected",
                "textEdit": {
                    "newText": "protected",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "public",
                "insertText": "public",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " public",
                "score": 0.7694156765937805,
                "sortText": "40bb0793public",
                "textEdit": {
                    "newText": "public",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.7694156765937805,
                "sortText": "40bb0793short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.7694156765937805,
                "sortText": "40bb0793signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "static",
                "insertText": "static",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " static",
                "score": 0.7694156765937805,
                "sortText": "40bb0793static",
                "textEdit": {
                    "newText": "static",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "static_assert",
                "insertText": "static_assert",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_assert(expression, message);",
                "score": 0.7694156765937805,
                "sortText": "40bb0793static_assert",
                "textEdit": {
                    "newText": "static_assert",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "template",
                "insertText": "template",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " template",
                "score": 0.7694156765937805,
                "sortText": "40bb0793template",
                "textEdit": {
                    "newText": "template",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "thread_local",
                "insertText": "thread_local",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " thread_local",
                "score": 0.7694156765937805,
                "sortText": "40bb0793thread_local",
                "textEdit": {
                    "newText": "thread_local",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "typedef",
                "insertText": "typedef",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typedef type name;",
                "score": 0.7694156765937805,
                "sortText": "40bb0793typedef",
                "textEdit": {
                    "newText": "typedef",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.7694156765937805,
                "sortText": "40bb0793typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.7694156765937805,
                "sortText": "40bb0793union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.7694156765937805,
                "sortText": "40bb0793unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using qualifier::name;",
                "score": 0.7694156765937805,
                "sortText": "40bb0793using",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using name = type;",
                "score": 0.7694156765937805,
                "sortText": "40bb0793using",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "virtual",
                "insertText": "virtual",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " virtual",
                "score": 0.7694156765937805,
                "sortText": "40bb0793virtual",
                "textEdit": {
                    "newText": "virtual",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.7694156765937805,
                "sortText": "40bb0793void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.7694156765937805,
                "sortText": "40bb0793volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.7694156765937805,
                "sortText": "40bb0793wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "concurrency",
                "insertText": "concurrency",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " concurrency",
                "score": 0.7385311722755432,
                "sortText": "40c2ef9fconcurrency",
                "textEdit": {
                    "newText": "concurrency",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "chrono_literals",
                "insertText": "chrono_literals",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " chrono_literals",
                "score": 0.5800500512123108,
                "sortText": "40eb81d7chrono_literals",
                "textEdit": {
                    "newText": "chrono_literals",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "platform",
                "insertText": "Concurrency::details::platform",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " Concurrency::details::platform",
                "score": 0.5557445883750916,
                "sortText": "40f1bab9platform",
                "textEdit": {
                    "newText": "Concurrency::details::platform",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string>"
                },
                "filterText": "char_traits",
                "insertText": "char_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022char_traits<class Elem>",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98char_traits",
                "textEdit": {
                    "newText": "char_traits",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "messages",
                "insertText": "messages",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022messages<class Elem>",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98messages",
                "textEdit": {
                    "newText": "messages",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "messages_base",
                "insertText": "messages_base",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022messages_base",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98messages_base",
                "textEdit": {
                    "newText": "messages_base",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "messages_byname",
                "insertText": "messages_byname",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022messages_byname<class Elem>",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98messages_byname",
                "textEdit": {
                    "newText": "messages_byname",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "once_flag",
                "insertText": "once_flag",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022once_flag",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98once_flag",
                "textEdit": {
                    "newText": "once_flag",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <eh.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <eh.h>"
                },
                "filterText": "_se_translator_function",
                "insertText": "_se_translator_function",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022_se_translator_function",
                "score": 0.3206652104854584,
                "sortText": "415bd1c5_se_translator_function",
                "textEdit": {
                    "newText": "_se_translator_function",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <eh.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <eh.h>"
                },
                "filterText": "unexpected_handler",
                "insertText": "unexpected_handler",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022unexpected_handler",
                "score": 0.3206652104854584,
                "sortText": "415bd1c5unexpected_handler",
                "textEdit": {
                    "newText": "unexpected_handler",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Monobj<Money>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "get_money",
                "insertText": "get_money",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022get_money(Money &Val_arg, bool Intl_arg = false)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4get_money",
                "textEdit": {
                    "newText": "get_money",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Timeobj<Elem, tm *>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "get_time",
                "insertText": "get_time",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022get_time(tm *Tptr_arg, const Elem *Fmt_arg)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4get_time",
                "textEdit": {
                    "newText": "get_time",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_ostream<Elem2, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<<(basic_ostream<Elem2, Traits> &Ostr, const _Timeobj<Elem, Ptr> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_ostream<Elem, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<<(basic_ostream<Elem, Traits> &Ostr, const _Smanip<Arg> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_ostream<Elem2, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<<(basic_ostream<Elem2, Traits> &Ostr, const _Fillobj<Elem> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_ostream<Elem, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<<(basic_ostream<Elem, Traits> &Ostr, const _Quote_in<Elem, Traits, Alloc> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_ostream<Elem, OsTraits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<<(basic_ostream<Elem, OsTraits> &Ostr, const _Quote_out<Elem, Traits, Sizet> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_ostream<Elem, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<<(basic_ostream<Elem, Traits> &Ostr, const _Monobj<Money> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_istream<Elem, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>>(basic_istream<Elem, Traits> &Istr, const _Monobj<Money> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_istream<Elem2, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>>(basic_istream<Elem2, Traits> &Istr, const _Timeobj<Elem, Ptr> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_istream<Elem, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>>(basic_istream<Elem, Traits> &Istr, const _Smanip<Arg> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_istream<Elem, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>>(basic_istream<Elem, Traits> &Istr, const _Quote_in<Elem, Traits, Alloc> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Monobj<const Money>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "put_money",
                "insertText": "put_money",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022put_money(const Money &Val_arg, bool Intl_arg = false)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4put_money",
                "textEdit": {
                    "newText": "put_money",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Timeobj<Elem, const tm *>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "put_time",
                "insertText": "put_time",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022put_time(const tm *Tptr_arg, const Elem *Fmt_arg)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4put_time",
                "textEdit": {
                    "newText": "put_time",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Quote_in<Elem, Traits, Alloc>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "quoted",
                "insertText": "quoted",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022quoted(basic_string<Elem, Traits, Alloc> &Str, Elem Delim = _Elem('\"'), Elem Escape = _Elem('\\\\'))",
                "score": 0.27917516231536865,
                "sortText": "41710ff4quoted",
                "textEdit": {
                    "newText": "quoted",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Quote_out<Elem, Traits, typename basic_string<Elem, Traits, Alloc>::size_type>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "quoted",
                "insertText": "quoted",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022quoted(const basic_string<Elem, Traits, Alloc> &Str, Elem Delim = _Elem('\"'), Elem Escape = _Elem('\\\\'))",
                "score": 0.27917516231536865,
                "sortText": "41710ff4quoted",
                "textEdit": {
                    "newText": "quoted",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Quote_out<Elem, void, size_t>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "quoted",
                "insertText": "quoted",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022quoted(const Elem *Ptr, Elem Delim = _Elem('\"'), Elem Escape = _Elem('\\\\'))",
                "score": 0.27917516231536865,
                "sortText": "41710ff4quoted",
                "textEdit": {
                    "newText": "quoted",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Fillobj<Elem>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "setfill",
                "insertText": "setfill",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022setfill(Elem Ch)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4setfill",
                "textEdit": {
                    "newText": "setfill",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <chrono>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <chrono>"
                },
                "filterText": "high_resolution_clock",
                "insertText": "chrono::high_resolution_clock",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022chrono::high_resolution_clock",
                "score": 0.2609104514122009,
                "sortText": "417a69f2high_resolution_clock",
                "textEdit": {
                    "newText": "chrono::high_resolution_clock",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <chrono>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <chrono>"
                },
                "filterText": "system_clock",
                "insertText": "chrono::system_clock",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022chrono::system_clock",
                "score": 0.2609104514122009,
                "sortText": "417a69f2system_clock",
                "textEdit": {
                    "newText": "chrono::system_clock",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "_Pragma",
                "insertText": "_Pragma",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " _Pragma",
                "score": 0.22312210500240326,
                "sortText": "419b85e1_Pragma",
                "textEdit": {
                    "newText": "_Pragma",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__BASE_FILE__",
                "insertText": "__BASE_FILE__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __BASE_FILE__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__BASE_FILE__",
                "textEdit": {
                    "newText": "__BASE_FILE__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__COUNTER__",
                "insertText": "__COUNTER__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __COUNTER__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__COUNTER__",
                "textEdit": {
                    "newText": "__COUNTER__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__DATE__",
                "insertText": "__DATE__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __DATE__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__DATE__",
                "textEdit": {
                    "newText": "__DATE__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__FILE_NAME__",
                "insertText": "__FILE_NAME__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __FILE_NAME__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__FILE_NAME__",
                "textEdit": {
                    "newText": "__FILE_NAME__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__FILE__",
                "insertText": "__FILE__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __FILE__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__FILE__",
                "textEdit": {
                    "newText": "__FILE__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__FLT_EVAL_METHOD__",
                "insertText": "__FLT_EVAL_METHOD__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __FLT_EVAL_METHOD__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__FLT_EVAL_METHOD__",
                "textEdit": {
                    "newText": "__FLT_EVAL_METHOD__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__INCLUDE_LEVEL__",
                "insertText": "__INCLUDE_LEVEL__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __INCLUDE_LEVEL__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__INCLUDE_LEVEL__",
                "textEdit": {
                    "newText": "__INCLUDE_LEVEL__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__LINE__",
                "insertText": "__LINE__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __LINE__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__LINE__",
                "textEdit": {
                    "newText": "__LINE__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__TIMESTAMP__",
                "insertText": "__TIMESTAMP__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __TIMESTAMP__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__TIMESTAMP__",
                "textEdit": {
                    "newText": "__TIMESTAMP__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__TIME__",
                "insertText": "__TIME__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __TIME__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__TIME__",
                "textEdit": {
                    "newText": "__TIME__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__building_module",
                "insertText": "__building_module",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __building_module",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__building_module",
                "textEdit": {
                    "newText": "__building_module",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_attribute",
                "insertText": "__has_attribute",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_attribute",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_attribute",
                "textEdit": {
                    "newText": "__has_attribute",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_builtin",
                "insertText": "__has_builtin",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_builtin",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_builtin",
                "textEdit": {
                    "newText": "__has_builtin",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_constexpr_builtin",
                "insertText": "__has_constexpr_builtin",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_constexpr_builtin",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_constexpr_builtin",
                "textEdit": {
                    "newText": "__has_constexpr_builtin",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_cpp_attribute",
                "insertText": "__has_cpp_attribute",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_cpp_attribute",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_cpp_attribute",
                "textEdit": {
                    "newText": "__has_cpp_attribute",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_declspec_attribute",
                "insertText": "__has_declspec_attribute",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_declspec_attribute",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_declspec_attribute",
                "textEdit": {
                    "newText": "__has_declspec_attribute",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_embed",
                "insertText": "__has_embed",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_embed",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_embed",
                "textEdit": {
                    "newText": "__has_embed",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_extension",
                "insertText": "__has_extension",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_extension",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_extension",
                "textEdit": {
                    "newText": "__has_extension",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_feature",
                "insertText": "__has_feature",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_feature",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_feature",
                "textEdit": {
                    "newText": "__has_feature",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_include",
                "insertText": "__has_include",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_include",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_include",
                "textEdit": {
                    "newText": "__has_include",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_include_next",
                "insertText": "__has_include_next",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_include_next",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_include_next",
                "textEdit": {
                    "newText": "__has_include_next",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_warning",
                "insertText": "__has_warning",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_warning",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_warning",
                "textEdit": {
                    "newText": "__has_warning",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['Muchie', 'struct', 'size_t', 'type_info', '_Nonnull', '_Null_unspecified', '_Nullable', 'alignas', 'auto', 'bool', 'char', 'char16_t', 'char32_t', 'class', 'const', 'constexpr', 'decltype', 'double', 'enum', 'explicit', 'extern', 'float', 'friend', 'inline', 'int', 'long', 'mutable', 'operator', 'private', 'protected', 'public', 'short', 'signed', 'static', 'static_assert', 'template', 'thread_local', 'typedef', 'typename', 'union', 'unsigned', 'using', 'using', 'virtual', 'void', 'volatile', 'wchar_t', 'concurrency', 'chrono_literals', 'Concurrency::details::platform', 'char_traits', 'messages', 'messages_base', 'messages_byname', 'once_flag', '_se_translator_function', 'unexpected_handler', 'get_money', 'get_time', 'operator<<', 'operator<<', 'operator<<', 'operator<<', 'operator<<', 'operator<<', 'operator>>', 'operator>>', 'operator>>', 'operator>>', 'put_money', 'put_time', 'quoted', 'quoted', 'quoted', 'setfill', 'chrono::high_resolution_clock', 'chrono::system_clock', '_Pragma', '__BASE_FILE__', '__COUNTER__', '__DATE__', '__FILE_NAME__', '__FILE__', '__FLT_EVAL_METHOD__', '__INCLUDE_LEVEL__', '__LINE__', '__TIMESTAMP__', '__TIME__', '__building_module', '__has_attribute', '__has_builtin', '__has_constexpr_builtin', '__has_cpp_attribute', '__has_declspec_attribute', '__has_embed', '__has_extension', '__has_feature', '__has_include', '__has_include_next', '__has_warning']
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_file_not_found",
                "message": "'bits/stdc++.h' file not found",
                "range": {
                    "end": {
                        "character": 24,
                        "line": 0
                    },
                    "start": {
                        "character": 9,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 3
    }
}
Diagnostics received from LSP.
Errors received: [[0, [9, 24]]]
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "filterText": "alignas",
                "insertText": "alignas",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignas(expression)",
                "score": 0.7694156765937805,
                "sortText": "40bb0793alignas",
                "textEdit": {
                    "newText": "alignas",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.7694156765937805,
                "sortText": "40bb0793auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "adopt_lock_t",
                "insertText": "adopt_lock_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022adopt_lock_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98adopt_lock_t",
                "textEdit": {
                    "newText": "adopt_lock_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator_arg_t",
                "insertText": "allocator_arg_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator_arg_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98allocator_arg_t",
                "textEdit": {
                    "newText": "allocator_arg_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_bool",
                "insertText": "atomic_bool",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_bool",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_bool",
                "textEdit": {
                    "newText": "atomic_bool",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_char",
                "insertText": "atomic_char",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_char",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_char",
                "textEdit": {
                    "newText": "atomic_char",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_char32_t",
                "insertText": "atomic_char32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_char32_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_char32_t",
                "textEdit": {
                    "newText": "atomic_char32_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag",
                "insertText": "atomic_flag",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022atomic_flag",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_flag",
                "textEdit": {
                    "newText": "atomic_flag",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int",
                "insertText": "atomic_int",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int",
                "textEdit": {
                    "newText": "atomic_int",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int16_t",
                "insertText": "atomic_int16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int16_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int16_t",
                "textEdit": {
                    "newText": "atomic_int16_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int32_t",
                "insertText": "atomic_int32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int32_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int32_t",
                "textEdit": {
                    "newText": "atomic_int32_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int64_t",
                "insertText": "atomic_int64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int64_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int64_t",
                "textEdit": {
                    "newText": "atomic_int64_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int8_t",
                "insertText": "atomic_int8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int8_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int8_t",
                "textEdit": {
                    "newText": "atomic_int8_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast16_t",
                "insertText": "atomic_int_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast16_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int_fast16_t",
                "textEdit": {
                    "newText": "atomic_int_fast16_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast32_t",
                "insertText": "atomic_int_fast32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast32_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int_fast32_t",
                "textEdit": {
                    "newText": "atomic_int_fast32_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast64_t",
                "insertText": "atomic_int_fast64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast64_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int_fast64_t",
                "textEdit": {
                    "newText": "atomic_int_fast64_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast8_t",
                "insertText": "atomic_int_fast8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast8_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int_fast8_t",
                "textEdit": {
                    "newText": "atomic_int_fast8_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least16_t",
                "insertText": "atomic_int_least16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least16_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int_least16_t",
                "textEdit": {
                    "newText": "atomic_int_least16_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least32_t",
                "insertText": "atomic_int_least32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least32_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int_least32_t",
                "textEdit": {
                    "newText": "atomic_int_least32_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least8_t",
                "insertText": "atomic_int_least8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least8_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int_least8_t",
                "textEdit": {
                    "newText": "atomic_int_least8_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_intmax_t",
                "insertText": "atomic_intmax_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_intmax_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_intmax_t",
                "textEdit": {
                    "newText": "atomic_intmax_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_intptr_t",
                "insertText": "atomic_intptr_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_intptr_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_intptr_t",
                "textEdit": {
                    "newText": "atomic_intptr_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_llong",
                "insertText": "atomic_llong",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_llong",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_llong",
                "textEdit": {
                    "newText": "atomic_llong",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ptrdiff_t",
                "insertText": "atomic_ptrdiff_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ptrdiff_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_ptrdiff_t",
                "textEdit": {
                    "newText": "atomic_ptrdiff_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_short",
                "insertText": "atomic_short",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_short",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_short",
                "textEdit": {
                    "newText": "atomic_short",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_size_t",
                "insertText": "atomic_size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_size_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_size_t",
                "textEdit": {
                    "newText": "atomic_size_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uchar",
                "insertText": "atomic_uchar",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uchar",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uchar",
                "textEdit": {
                    "newText": "atomic_uchar",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint",
                "insertText": "atomic_uint",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uint",
                "textEdit": {
                    "newText": "atomic_uint",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint32_t",
                "insertText": "atomic_uint32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint32_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uint32_t",
                "textEdit": {
                    "newText": "atomic_uint32_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint64_t",
                "insertText": "atomic_uint64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint64_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uint64_t",
                "textEdit": {
                    "newText": "atomic_uint64_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast16_t",
                "insertText": "atomic_uint_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast16_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uint_fast16_t",
                "textEdit": {
                    "newText": "atomic_uint_fast16_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast64_t",
                "insertText": "atomic_uint_fast64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast64_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uint_fast64_t",
                "textEdit": {
                    "newText": "atomic_uint_fast64_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast8_t",
                "insertText": "atomic_uint_fast8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast8_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uint_fast8_t",
                "textEdit": {
                    "newText": "atomic_uint_fast8_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_least16_t",
                "insertText": "atomic_uint_least16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_least16_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uint_least16_t",
                "textEdit": {
                    "newText": "atomic_uint_least16_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_least32_t",
                "insertText": "atomic_uint_least32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_least32_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uint_least32_t",
                "textEdit": {
                    "newText": "atomic_uint_least32_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_least8_t",
                "insertText": "atomic_uint_least8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_least8_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uint_least8_t",
                "textEdit": {
                    "newText": "atomic_uint_least8_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uintmax_t",
                "insertText": "atomic_uintmax_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uintmax_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uintmax_t",
                "textEdit": {
                    "newText": "atomic_uintmax_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uintptr_t",
                "insertText": "atomic_uintptr_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uintptr_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uintptr_t",
                "textEdit": {
                    "newText": "atomic_uintptr_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ulong",
                "insertText": "atomic_ulong",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ulong",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_ulong",
                "textEdit": {
                    "newText": "atomic_ulong",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ushort",
                "insertText": "atomic_ushort",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ushort",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_ushort",
                "textEdit": {
                    "newText": "atomic_ushort",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_wchar_t",
                "insertText": "atomic_wchar_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_wchar_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_wchar_t",
                "textEdit": {
                    "newText": "atomic_wchar_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR32_T_LOCK_FREE",
                "score": 0.35306480526924133,
                "sortText": "414b3b17ATOMIC_CHAR32_T_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR32_T_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR_LOCK_FREE",
                "insertText": "ATOMIC_CHAR_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR_LOCK_FREE",
                "score": 0.35306480526924133,
                "sortText": "414b3b17ATOMIC_CHAR_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_FLAG_INIT",
                "insertText": "ATOMIC_FLAG_INIT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_FLAG_INIT",
                "score": 0.35306480526924133,
                "sortText": "414b3b17ATOMIC_FLAG_INIT",
                "textEdit": {
                    "newText": "ATOMIC_FLAG_INIT",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_INT_LOCK_FREE",
                "insertText": "ATOMIC_INT_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_INT_LOCK_FREE",
                "score": 0.35306480526924133,
                "sortText": "414b3b17ATOMIC_INT_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_INT_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_LLONG_LOCK_FREE",
                "insertText": "ATOMIC_LLONG_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_LLONG_LOCK_FREE",
                "score": 0.35306480526924133,
                "sortText": "414b3b17ATOMIC_LLONG_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_LLONG_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_LONG_LOCK_FREE",
                "insertText": "ATOMIC_LONG_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_LONG_LOCK_FREE",
                "score": 0.35306480526924133,
                "sortText": "414b3b17ATOMIC_LONG_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_LONG_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_SHORT_LOCK_FREE",
                "insertText": "ATOMIC_SHORT_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_SHORT_LOCK_FREE",
                "score": 0.35306480526924133,
                "sortText": "414b3b17ATOMIC_SHORT_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_SHORT_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_VAR_INIT",
                "insertText": "ATOMIC_VAR_INIT",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ATOMIC_VAR_INIT(_Value)",
                "score": 0.35306480526924133,
                "sortText": "414b3b17ATOMIC_VAR_INIT",
                "textEdit": {
                    "newText": "ATOMIC_VAR_INIT",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>\n[valarray.transcend] Transcendentals"
                },
                "filterText": "abs",
                "insertText": "abs",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022abs(const valarray<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4abs",
                "textEdit": {
                    "newText": "abs",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "abs",
                "insertText": "abs",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022abs(const complex<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4abs",
                "textEdit": {
                    "newText": "abs",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "acos",
                "insertText": "acos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022acos(const valarray<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4acos",
                "textEdit": {
                    "newText": "acos",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "acos",
                "insertText": "acos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022acos(const complex<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4acos",
                "textEdit": {
                    "newText": "acos",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "acosh",
                "insertText": "acosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022acosh(const complex<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4acosh",
                "textEdit": {
                    "newText": "acosh",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "arg",
                "insertText": "arg",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022arg(const complex<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4arg",
                "textEdit": {
                    "newText": "arg",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Upgrade_to_double<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "arg",
                "insertText": "arg",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022arg(Ty Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4arg",
                "textEdit": {
                    "newText": "arg",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asin",
                "insertText": "asin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asin(const valarray<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4asin",
                "textEdit": {
                    "newText": "asin",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asin",
                "insertText": "asin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asin(const complex<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4asin",
                "textEdit": {
                    "newText": "asin",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinh",
                "insertText": "asinh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asinh(const complex<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4asinh",
                "textEdit": {
                    "newText": "asinh",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <future>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "future<_Invoke_result_t<decay_t<Fty>, decay_t<ArgTypes>...>>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <future>"
                },
                "filterText": "async",
                "insertText": "async",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022async(launch Policy, Fty &&Fnarg, ArgTypes &&Args...)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4async",
                "textEdit": {
                    "newText": "async",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <future>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "future<_Invoke_result_t<decay_t<Fty>, decay_t<ArgTypes>...>>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <future>"
                },
                "filterText": "async",
                "insertText": "async",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022async(Fty &&Fnarg, ArgTypes &&Args...)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4async",
                "textEdit": {
                    "newText": "async",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "atan",
                "insertText": "atan",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atan(const valarray<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atan",
                "textEdit": {
                    "newText": "atan",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "atan",
                "insertText": "atan",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atan(const complex<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atan",
                "textEdit": {
                    "newText": "atan",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "atan2",
                "insertText": "atan2",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atan2(const valarray<Ty> &Left, const typename valarray<Ty>::value_type &Right)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atan2",
                "textEdit": {
                    "newText": "atan2",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "atan2",
                "insertText": "atan2",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atan2(const valarray<Ty> &Left, const valarray<Ty> &Right)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atan2",
                "textEdit": {
                    "newText": "atan2",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "atan2",
                "insertText": "atan2",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atan2(const typename valarray<Ty>::value_type &Left, const valarray<Ty> &Right)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atan2",
                "textEdit": {
                    "newText": "atan2",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "atanh",
                "insertText": "atanh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atanh(const complex<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atanh",
                "textEdit": {
                    "newText": "atanh",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_exchange",
                "insertText": "atomic_exchange",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_exchange(volatile atomic<Ty> *const Mem, const _Identity_t<Ty> Value)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_exchange",
                "textEdit": {
                    "newText": "atomic_exchange",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_add",
                "insertText": "atomic_fetch_add",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_add(volatile atomic<Ty> *Mem, const typename atomic<Ty>::difference_type Value)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_add",
                "textEdit": {
                    "newText": "atomic_fetch_add",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_add_explicit",
                "insertText": "atomic_fetch_add_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_add_explicit(atomic<Ty> *Mem, const typename atomic<Ty>::difference_type Value, const memory_order Order)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_add_explicit",
                "textEdit": {
                    "newText": "atomic_fetch_add_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_and",
                "insertText": "atomic_fetch_and",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_and(atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_and",
                "textEdit": {
                    "newText": "atomic_fetch_and",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_and_explicit",
                "insertText": "atomic_fetch_and_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_and_explicit(atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value, const memory_order Order)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_and_explicit",
                "textEdit": {
                    "newText": "atomic_fetch_and_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_or",
                "insertText": "atomic_fetch_or",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_or(volatile atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_or",
                "textEdit": {
                    "newText": "atomic_fetch_or",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_or",
                "insertText": "atomic_fetch_or",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_or(atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_or",
                "textEdit": {
                    "newText": "atomic_fetch_or",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_or_explicit",
                "insertText": "atomic_fetch_or_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_or_explicit(atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value, const memory_order Order)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_or_explicit",
                "textEdit": {
                    "newText": "atomic_fetch_or_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_or_explicit",
                "insertText": "atomic_fetch_or_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_or_explicit(volatile atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value, const memory_order Order)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_or_explicit",
                "textEdit": {
                    "newText": "atomic_fetch_or_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_sub",
                "insertText": "atomic_fetch_sub",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_sub(atomic<Ty> *Mem, const typename atomic<Ty>::difference_type Value)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_sub",
                "textEdit": {
                    "newText": "atomic_fetch_sub",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_sub_explicit",
                "insertText": "atomic_fetch_sub_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_sub_explicit(atomic<Ty> *Mem, const typename atomic<Ty>::difference_type Value, const memory_order Order)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_sub_explicit",
                "textEdit": {
                    "newText": "atomic_fetch_sub_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_xor",
                "insertText": "atomic_fetch_xor",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_xor(atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_xor",
                "textEdit": {
                    "newText": "atomic_fetch_xor",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_xor",
                "insertText": "atomic_fetch_xor",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_xor(volatile atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_xor",
                "textEdit": {
                    "newText": "atomic_fetch_xor",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_xor_explicit",
                "insertText": "atomic_fetch_xor_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_xor_explicit(atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value, const memory_order Order)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_xor_explicit",
                "textEdit": {
                    "newText": "atomic_fetch_xor_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_load",
                "insertText": "atomic_load",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_load(const atomic<Ty> *const Mem)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_load",
                "textEdit": {
                    "newText": "atomic_load",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_load_explicit",
                "insertText": "atomic_load_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_load_explicit(const volatile atomic<Ty> *const Mem, const memory_order Order)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_load_explicit",
                "textEdit": {
                    "newText": "atomic_load_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_load_explicit",
                "insertText": "atomic_load_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_load_explicit(const atomic<Ty> *const Mem, const memory_order Order)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_load_explicit",
                "textEdit": {
                    "newText": "atomic_load_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_compare_exchange_strong",
                "insertText": "atomic_compare_exchange_strong",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_compare_exchange_strong(atomic<Ty> *const Mem, _Identity_t<Ty> *const Expected, const _Identity_t<Ty> Desired)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_compare_exchange_strong",
                "textEdit": {
                    "newText": "atomic_compare_exchange_strong",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_compare_exchange_strong",
                "insertText": "atomic_compare_exchange_strong",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_compare_exchange_strong(volatile atomic<Ty> *const Mem, _Identity_t<Ty> *const Expected, const _Identity_t<Ty> Desired)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_compare_exchange_strong",
                "textEdit": {
                    "newText": "atomic_compare_exchange_strong",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_compare_exchange_weak",
                "insertText": "atomic_compare_exchange_weak",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_compare_exchange_weak(atomic<Ty> *const Mem, _Identity_t<Ty> *const Expected, const _Identity_t<Ty> Desired)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_compare_exchange_weak",
                "textEdit": {
                    "newText": "atomic_compare_exchange_weak",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_clear",
                "insertText": "atomic_flag_clear",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_clear(atomic_flag *const Flag)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_flag_clear",
                "textEdit": {
                    "newText": "atomic_flag_clear",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_clear_explicit",
                "insertText": "atomic_flag_clear_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_clear_explicit(atomic_flag *const Flag, const memory_order Order)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_flag_clear_explicit",
                "textEdit": {
                    "newText": "atomic_flag_clear_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_clear_explicit",
                "insertText": "atomic_flag_clear_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_clear_explicit(volatile atomic_flag *const Flag, const memory_order Order)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_flag_clear_explicit",
                "textEdit": {
                    "newText": "atomic_flag_clear_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_test_and_set",
                "insertText": "atomic_flag_test_and_set",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_test_and_set(volatile atomic_flag *const Flag)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_flag_test_and_set",
                "textEdit": {
                    "newText": "atomic_flag_test_and_set",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_test_and_set",
                "insertText": "atomic_flag_test_and_set",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_test_and_set(atomic_flag *const Flag)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_flag_test_and_set",
                "textEdit": {
                    "newText": "atomic_flag_test_and_set",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_test_and_set_explicit",
                "insertText": "atomic_flag_test_and_set_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_test_and_set_explicit(atomic_flag *const Flag, const memory_order Order)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_flag_test_and_set_explicit",
                "textEdit": {
                    "newText": "atomic_flag_test_and_set_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_test_and_set_explicit",
                "insertText": "atomic_flag_test_and_set_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_test_and_set_explicit(volatile atomic_flag *const Flag, const memory_order Order)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_flag_test_and_set_explicit",
                "textEdit": {
                    "newText": "atomic_flag_test_and_set_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_init",
                "insertText": "atomic_init",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_init(atomic<Ty> *const Mem, const typename atomic<Ty>::value_type Value)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_init",
                "textEdit": {
                    "newText": "atomic_init",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_is_lock_free",
                "insertText": "atomic_is_lock_free",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_is_lock_free(const volatile atomic<Ty> *Mem)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_is_lock_free",
                "textEdit": {
                    "newText": "atomic_is_lock_free",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_signal_fence",
                "insertText": "atomic_signal_fence",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_signal_fence(const memory_order Order)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_signal_fence",
                "textEdit": {
                    "newText": "atomic_signal_fence",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_store",
                "insertText": "atomic_store",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_store(atomic<Ty> *const Mem, const _Identity_t<Ty> Value)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_store",
                "textEdit": {
                    "newText": "atomic_store",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_thread_fence",
                "insertText": "atomic_thread_fence",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_thread_fence(const memory_order Order)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_thread_fence",
                "textEdit": {
                    "newText": "atomic_thread_fence",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "const adopt_lock_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "adopt_lock",
                "insertText": "adopt_lock",
                "insertTextFormat": 1,
                "kind": 6,
                "label": "\u2022adopt_lock",
                "score": 0.19701893627643585,
                "sortText": "41b640abadopt_lock",
                "textEdit": {
                    "newText": "adopt_lock",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['alignas', 'auto', 'adopt_lock_t', 'allocator_arg_t', 'atomic_bool', 'atomic_char', 'atomic_char32_t', 'atomic_flag', 'atomic_int', 'atomic_int16_t', 'atomic_int32_t', 'atomic_int64_t', 'atomic_int8_t', 'atomic_int_fast16_t', 'atomic_int_fast32_t', 'atomic_int_fast64_t', 'atomic_int_fast8_t', 'atomic_int_least16_t', 'atomic_int_least32_t', 'atomic_int_least8_t', 'atomic_intmax_t', 'atomic_intptr_t', 'atomic_llong', 'atomic_ptrdiff_t', 'atomic_short', 'atomic_size_t', 'atomic_uchar', 'atomic_uint', 'atomic_uint32_t', 'atomic_uint64_t', 'atomic_uint_fast16_t', 'atomic_uint_fast64_t', 'atomic_uint_fast8_t', 'atomic_uint_least16_t', 'atomic_uint_least32_t', 'atomic_uint_least8_t', 'atomic_uintmax_t', 'atomic_uintptr_t', 'atomic_ulong', 'atomic_ushort', 'atomic_wchar_t', 'ATOMIC_CHAR32_T_LOCK_FREE', 'ATOMIC_CHAR_LOCK_FREE', 'ATOMIC_FLAG_INIT', 'ATOMIC_INT_LOCK_FREE', 'ATOMIC_LLONG_LOCK_FREE', 'ATOMIC_LONG_LOCK_FREE', 'ATOMIC_SHORT_LOCK_FREE', 'ATOMIC_VAR_INIT', 'abs', 'abs', 'acos', 'acos', 'acosh', 'arg', 'arg', 'asin', 'asin', 'asinh', 'async', 'async', 'atan', 'atan', 'atan2', 'atan2', 'atan2', 'atanh', 'atomic_exchange', 'atomic_fetch_add', 'atomic_fetch_add_explicit', 'atomic_fetch_and', 'atomic_fetch_and_explicit', 'atomic_fetch_or', 'atomic_fetch_or', 'atomic_fetch_or_explicit', 'atomic_fetch_or_explicit', 'atomic_fetch_sub', 'atomic_fetch_sub_explicit', 'atomic_fetch_xor', 'atomic_fetch_xor', 'atomic_fetch_xor_explicit', 'atomic_load', 'atomic_load_explicit', 'atomic_load_explicit', 'atomic_compare_exchange_strong', 'atomic_compare_exchange_strong', 'atomic_compare_exchange_weak', 'atomic_flag_clear', 'atomic_flag_clear_explicit', 'atomic_flag_clear_explicit', 'atomic_flag_test_and_set', 'atomic_flag_test_and_set', 'atomic_flag_test_and_set_explicit', 'atomic_flag_test_and_set_explicit', 'atomic_init', 'atomic_is_lock_free', 'atomic_signal_fence', 'atomic_store', 'atomic_thread_fence', 'adopt_lock']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_file_not_found",
                "message": "'bits/stdc++.h' file not found",
                "range": {
                    "end": {
                        "character": 24,
                        "line": 0
                    },
                    "start": {
                        "character": 9,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ext_using_undefined_std",
                "message": "Using directive refers to implicitly-defined namespace 'std'",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 2
                    },
                    "start": {
                        "character": 16,
                        "line": 2
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 4
                    },
                    "start": {
                        "character": 21,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 39,
                        "line": 5
                    },
                    "start": {
                        "character": 25,
                        "line": 5
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 77
                    },
                    "start": {
                        "character": 1,
                        "line": 77
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 78
                    },
                    "start": {
                        "character": 1,
                        "line": 78
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 79
                    },
                    "start": {
                        "character": 1,
                        "line": 79
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 14,
                        "line": 80
                    },
                    "start": {
                        "character": 8,
                        "line": 80
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 81
                    },
                    "start": {
                        "character": 1,
                        "line": 81
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 115
                    },
                    "start": {
                        "character": 21,
                        "line": 115
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 128
                    },
                    "start": {
                        "character": 30,
                        "line": 128
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 27,
                        "line": 152
                    },
                    "start": {
                        "character": 21,
                        "line": 152
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 173
                    },
                    "start": {
                        "character": 1,
                        "line": 173
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 220
                    },
                    "start": {
                        "character": 30,
                        "line": 220
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 220
                    },
                    "start": {
                        "character": 49,
                        "line": 220
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 32,
                        "line": 244
                    },
                    "start": {
                        "character": 26,
                        "line": 244
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 51,
                        "line": 244
                    },
                    "start": {
                        "character": 45,
                        "line": 244
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 284
                    },
                    "start": {
                        "character": 29,
                        "line": 284
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 54,
                        "line": 284
                    },
                    "start": {
                        "character": 48,
                        "line": 284
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 320
                    },
                    "start": {
                        "character": 30,
                        "line": 320
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 320
                    },
                    "start": {
                        "character": 49,
                        "line": 320
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 3
    }
}
Diagnostics received from LSP.
Errors received: [[0, [9, 24]], [4, [21, 35]], [5, [25, 39]], [77, [1, 7]], [78, [1, 7]], [79, [1, 7]], [80, [8, 14]], [81, [1, 7]], [115, [21, 26]], [128, [30, 36]], [152, [21, 27]], [173, [1, 7]], [220, [30, 36]], [220, [49, 55]], [244, [26, 32]], [244, [45, 51]], [284, [29, 35]], [284, [48, 54]], [320, [30, 36]], [320, [49, 55]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>\nType modifiers"
                },
                "filterText": "add_const",
                "insertText": "add_const",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022add_const<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "411c928aadd_const",
                "textEdit": {
                    "newText": "add_const",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_const_t",
                "insertText": "add_const_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022add_const_t<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "411c928aadd_const_t",
                "textEdit": {
                    "newText": "add_const_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_cv",
                "insertText": "add_cv",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022add_cv<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "411c928aadd_cv",
                "textEdit": {
                    "newText": "add_cv",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_cv_t",
                "insertText": "add_cv_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022add_cv_t<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "411c928aadd_cv_t",
                "textEdit": {
                    "newText": "add_cv_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_lvalue_reference",
                "insertText": "add_lvalue_reference",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022add_lvalue_reference<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "411c928aadd_lvalue_reference",
                "textEdit": {
                    "newText": "add_lvalue_reference",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_lvalue_reference_t",
                "insertText": "add_lvalue_reference_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022add_lvalue_reference_t<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "411c928aadd_lvalue_reference_t",
                "textEdit": {
                    "newText": "add_lvalue_reference_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_pointer",
                "insertText": "add_pointer",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022add_pointer<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "411c928aadd_pointer",
                "textEdit": {
                    "newText": "add_pointer",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_pointer_t",
                "insertText": "add_pointer_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022add_pointer_t<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "411c928aadd_pointer_t",
                "textEdit": {
                    "newText": "add_pointer_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_rvalue_reference",
                "insertText": "add_rvalue_reference",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022add_rvalue_reference<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "411c928aadd_rvalue_reference",
                "textEdit": {
                    "newText": "add_rvalue_reference",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_rvalue_reference_t",
                "insertText": "add_rvalue_reference_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022add_rvalue_reference_t<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "411c928aadd_rvalue_reference_t",
                "textEdit": {
                    "newText": "add_rvalue_reference_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_volatile",
                "insertText": "add_volatile",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022add_volatile<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "411c928aadd_volatile",
                "textEdit": {
                    "newText": "add_volatile",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_volatile_t",
                "insertText": "add_volatile_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022add_volatile_t<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "411c928aadd_volatile_t",
                "textEdit": {
                    "newText": "add_volatile_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "adopt_lock_t",
                "insertText": "adopt_lock_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022adopt_lock_t",
                "score": 0.5076508522033691,
                "sortText": "411c928aadopt_lock_t",
                "textEdit": {
                    "newText": "adopt_lock_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Ty *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "addressof",
                "insertText": "addressof",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022addressof(Ty &Val)",
                "score": 0.27917516231536865,
                "sortText": "4185dbebaddressof",
                "textEdit": {
                    "newText": "addressof",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "const Ty *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "addressof",
                "insertText": "addressof",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022addressof(const Ty &&)",
                "score": 0.27917516231536865,
                "sortText": "4185dbebaddressof",
                "textEdit": {
                    "newText": "addressof",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <numeric>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <numeric>"
                },
                "filterText": "adjacent_difference",
                "insertText": "adjacent_difference",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022adjacent_difference(const InIt First, const InIt Last, const OutIt Dest)",
                "score": 0.27917516231536865,
                "sortText": "4185dbebadjacent_difference",
                "textEdit": {
                    "newText": "adjacent_difference",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <numeric>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <numeric>"
                },
                "filterText": "adjacent_difference",
                "insertText": "adjacent_difference",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022adjacent_difference(const InIt First, const InIt Last, OutIt Dest, BinOp Func)",
                "score": 0.27917516231536865,
                "sortText": "4185dbebadjacent_difference",
                "textEdit": {
                    "newText": "adjacent_difference",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "adjacent_find",
                "insertText": "adjacent_find",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022adjacent_find(const FwdIt First, FwdIt Last, Pr Pred)",
                "score": 0.27917516231536865,
                "sortText": "4185dbebadjacent_find",
                "textEdit": {
                    "newText": "adjacent_find",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "adjacent_find",
                "insertText": "adjacent_find",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022adjacent_find(const FwdIt First, const FwdIt Last)",
                "score": 0.27917516231536865,
                "sortText": "4185dbebadjacent_find",
                "textEdit": {
                    "newText": "adjacent_find",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>\nfrom <iterator>"
                },
                "filterText": "advance",
                "insertText": "advance",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022advance(InIt &Where, Diff Off)",
                "score": 0.21539734303951263,
                "sortText": "41bf0105advance",
                "textEdit": {
                    "newText": "advance",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "const adopt_lock_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "adopt_lock",
                "insertText": "adopt_lock",
                "insertTextFormat": 1,
                "kind": 6,
                "label": "\u2022adopt_lock",
                "score": 0.19701893627643585,
                "sortText": "41cf7896adopt_lock",
                "textEdit": {
                    "newText": "adopt_lock",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplinterface.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "T",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplinterface.h>"
                },
                "filterText": "atomic_decrement",
                "insertText": "Concurrency::details::atomic_decrement",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::details::atomic_decrement(::std::atomic<T> &Target)",
                "score": 0.22347019612789154,
                "sortText": "41d45ff9atomic_decrement",
                "textEdit": {
                    "newText": "Concurrency::details::atomic_decrement",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::experimental::filesystem::perms",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "add_perms",
                "insertText": "experimental::filesystem::perms::add_perms",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022experimental::filesystem::perms::add_perms",
                "score": 0.16323184967041016,
                "sortText": "41edbe88add_perms",
                "textEdit": {
                    "newText": "experimental::filesystem::perms::add_perms",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ratio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ratio>"
                },
                "filterText": "ratio_add",
                "insertText": "ratio_add",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022ratio_add<class Rx1, class Rx2>",
                "score": 0.5076508522033691,
                "sortText": "41fe0a98ratio_add",
                "textEdit": {
                    "newText": "ratio_add",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEAFNOSUPPORT"
                },
                "filterText": "address_family_not_supported",
                "insertText": "errc::address_family_not_supported",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::address_family_not_supported",
                "score": 0.13731007277965546,
                "sortText": "4209f0bbaddress_family_not_supported",
                "textEdit": {
                    "newText": "errc::address_family_not_supported",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEADDRINUSE"
                },
                "filterText": "address_in_use",
                "insertText": "errc::address_in_use",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::address_in_use",
                "score": 0.13731007277965546,
                "sortText": "4209f0bbaddress_in_use",
                "textEdit": {
                    "newText": "errc::address_in_use",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEADDRNOTAVAIL"
                },
                "filterText": "address_not_available",
                "insertText": "errc::address_not_available",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::address_not_available",
                "score": 0.13731007277965546,
                "sortText": "4209f0bbaddress_not_available",
                "textEdit": {
                    "newText": "errc::address_not_available",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_const",
                "insertText": "tr1::add_const",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::add_const",
                "score": 0.10541268438100815,
                "sortText": "424319b8add_const",
                "textEdit": {
                    "newText": "tr1::add_const",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_cv",
                "insertText": "tr1::add_cv",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::add_cv",
                "score": 0.10541268438100815,
                "sortText": "424319b8add_cv",
                "textEdit": {
                    "newText": "tr1::add_cv",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_pointer",
                "insertText": "tr1::add_pointer",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::add_pointer",
                "score": 0.10541268438100815,
                "sortText": "424319b8add_pointer",
                "textEdit": {
                    "newText": "tr1::add_pointer",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_volatile",
                "insertText": "tr1::add_volatile",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::add_volatile",
                "score": 0.10541268438100815,
                "sortText": "424319b8add_volatile",
                "textEdit": {
                    "newText": "tr1::add_volatile",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplinterface.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "T",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplinterface.h>"
                },
                "filterText": "atomic_add",
                "insertText": "Concurrency::details::atomic_add",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::details::atomic_add(::std::atomic<T> &Target, T Value)",
                "score": 0.22347019612789154,
                "sortText": "429b2aa1atomic_add",
                "textEdit": {
                    "newText": "Concurrency::details::atomic_add",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEFAULT"
                },
                "filterText": "bad_address",
                "insertText": "errc::bad_address",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::bad_address",
                "score": 0.13731007277965546,
                "sortText": "42f364fdbad_address",
                "textEdit": {
                    "newText": "errc::bad_address",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEDESTADDRREQ"
                },
                "filterText": "destination_address_required",
                "insertText": "errc::destination_address_required",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::destination_address_required",
                "score": 0.13731007277965546,
                "sortText": "42f364fddestination_address_required",
                "textEdit": {
                    "newText": "errc::destination_address_required",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEISDIR"
                },
                "filterText": "is_a_directory",
                "insertText": "errc::is_a_directory",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::is_a_directory",
                "score": 0.13731007277965546,
                "sortText": "437364fdis_a_directory",
                "textEdit": {
                    "newText": "errc::is_a_directory",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nENOTDIR"
                },
                "filterText": "not_a_directory",
                "insertText": "errc::not_a_directory",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::not_a_directory",
                "score": 0.13731007277965546,
                "sortText": "437364fdnot_a_directory",
                "textEdit": {
                    "newText": "errc::not_a_directory",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['add_const', 'add_const_t', 'add_cv', 'add_cv_t', 'add_lvalue_reference', 'add_lvalue_reference_t', 'add_pointer', 'add_pointer_t', 'add_rvalue_reference', 'add_rvalue_reference_t', 'add_volatile', 'add_volatile_t', 'adopt_lock_t', 'addressof', 'addressof', 'adjacent_difference', 'adjacent_difference', 'adjacent_find', 'adjacent_find', 'advance', 'adopt_lock', 'Concurrency::details::atomic_decrement', 'experimental::filesystem::perms::add_perms', 'ratio_add', 'errc::address_family_not_supported', 'errc::address_in_use', 'errc::address_not_available', 'tr1::add_const', 'tr1::add_cv', 'tr1::add_pointer', 'tr1::add_volatile', 'Concurrency::details::atomic_add', 'errc::bad_address', 'errc::destination_address_required', 'errc::is_a_directory', 'errc::not_a_directory']
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <scoped_allocator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <scoped_allocator>"
                },
                "filterText": "scoped_allocator_adaptor",
                "insertText": "scoped_allocator_adaptor",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022scoped_allocator_adaptor<class Outer, class Inner>",
                "score": 0.5076508522033691,
                "sortText": "41d2b8cascoped_allocator_adaptor",
                "textEdit": {
                    "newText": "scoped_allocator_adaptor",
                    "range": {
                        "end": {
                            "character": 13,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['scoped_allocator_adaptor']
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_file_not_found",
                "message": "'bits/stdc++.h' file not found",
                "range": {
                    "end": {
                        "character": 24,
                        "line": 0
                    },
                    "start": {
                        "character": 9,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ext_using_undefined_std",
                "message": "Using directive refers to implicitly-defined namespace 'std'",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 2
                    },
                    "start": {
                        "character": 16,
                        "line": 2
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 4
                    },
                    "start": {
                        "character": 21,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 39,
                        "line": 5
                    },
                    "start": {
                        "character": 25,
                        "line": 5
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'ADAS'",
                "range": {
                    "end": {
                        "character": 14,
                        "line": 10
                    },
                    "start": {
                        "character": 10,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 77
                    },
                    "start": {
                        "character": 1,
                        "line": 77
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 78
                    },
                    "start": {
                        "character": 1,
                        "line": 78
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 79
                    },
                    "start": {
                        "character": 1,
                        "line": 79
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 14,
                        "line": 80
                    },
                    "start": {
                        "character": 8,
                        "line": 80
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 81
                    },
                    "start": {
                        "character": 1,
                        "line": 81
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 115
                    },
                    "start": {
                        "character": 21,
                        "line": 115
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 128
                    },
                    "start": {
                        "character": 30,
                        "line": 128
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 27,
                        "line": 152
                    },
                    "start": {
                        "character": 21,
                        "line": 152
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 173
                    },
                    "start": {
                        "character": 1,
                        "line": 173
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 220
                    },
                    "start": {
                        "character": 30,
                        "line": 220
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 220
                    },
                    "start": {
                        "character": 49,
                        "line": 220
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 32,
                        "line": 244
                    },
                    "start": {
                        "character": 26,
                        "line": 244
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 51,
                        "line": 244
                    },
                    "start": {
                        "character": 45,
                        "line": 244
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 284
                    },
                    "start": {
                        "character": 29,
                        "line": 284
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 54,
                        "line": 284
                    },
                    "start": {
                        "character": 48,
                        "line": 284
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 320
                    },
                    "start": {
                        "character": 30,
                        "line": 320
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 7
    }
}
Diagnostics received from LSP.
Errors received: [[0, [9, 24]], [4, [21, 35]], [5, [25, 39]], [10, [10, 14]], [77, [1, 7]], [78, [1, 7]], [79, [1, 7]], [80, [8, 14]], [81, [1, 7]], [115, [21, 26]], [128, [30, 36]], [152, [21, 27]], [173, [1, 7]], [220, [30, 36]], [220, [49, 55]], [244, [26, 32]], [244, [45, 51]], [284, [29, 35]], [284, [48, 54]], [320, [30, 36]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_file_not_found",
                "message": "'bits/stdc++.h' file not found",
                "range": {
                    "end": {
                        "character": 24,
                        "line": 0
                    },
                    "start": {
                        "character": 9,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ext_using_undefined_std",
                "message": "Using directive refers to implicitly-defined namespace 'std'",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 2
                    },
                    "start": {
                        "character": 16,
                        "line": 2
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 4
                    },
                    "start": {
                        "character": 21,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 39,
                        "line": 5
                    },
                    "start": {
                        "character": 25,
                        "line": 5
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'ADASD'",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 10
                    },
                    "start": {
                        "character": 10,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 77
                    },
                    "start": {
                        "character": 1,
                        "line": 77
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 78
                    },
                    "start": {
                        "character": 1,
                        "line": 78
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 79
                    },
                    "start": {
                        "character": 1,
                        "line": 79
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 14,
                        "line": 80
                    },
                    "start": {
                        "character": 8,
                        "line": 80
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 81
                    },
                    "start": {
                        "character": 1,
                        "line": 81
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 115
                    },
                    "start": {
                        "character": 21,
                        "line": 115
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 128
                    },
                    "start": {
                        "character": 30,
                        "line": 128
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 27,
                        "line": 152
                    },
                    "start": {
                        "character": 21,
                        "line": 152
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 173
                    },
                    "start": {
                        "character": 1,
                        "line": 173
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 220
                    },
                    "start": {
                        "character": 30,
                        "line": 220
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 220
                    },
                    "start": {
                        "character": 49,
                        "line": 220
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 32,
                        "line": 244
                    },
                    "start": {
                        "character": 26,
                        "line": 244
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 51,
                        "line": 244
                    },
                    "start": {
                        "character": 45,
                        "line": 244
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 284
                    },
                    "start": {
                        "character": 29,
                        "line": 284
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 54,
                        "line": 284
                    },
                    "start": {
                        "character": 48,
                        "line": 284
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 320
                    },
                    "start": {
                        "character": 30,
                        "line": 320
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 9
    }
}
Diagnostics received from LSP.
Errors received: [[0, [9, 24]], [4, [21, 35]], [5, [25, 39]], [10, [10, 15]], [77, [1, 7]], [78, [1, 7]], [79, [1, 7]], [80, [8, 14]], [81, [1, 7]], [115, [21, 26]], [128, [30, 36]], [152, [21, 27]], [173, [1, 7]], [220, [30, 36]], [220, [49, 55]], [244, [26, 32]], [244, [45, 51]], [284, [29, 35]], [284, [48, 54]], [320, [30, 36]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <scoped_allocator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <scoped_allocator>"
                },
                "filterText": "scoped_allocator_adaptor",
                "insertText": "scoped_allocator_adaptor",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022scoped_allocator_adaptor<class Outer, class Inner>",
                "score": 0.5076508522033691,
                "sortText": "41d2b8cascoped_allocator_adaptor",
                "textEdit": {
                    "newText": "scoped_allocator_adaptor",
                    "range": {
                        "end": {
                            "character": 13,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['scoped_allocator_adaptor']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_file_not_found",
                "message": "'bits/stdc++.h' file not found",
                "range": {
                    "end": {
                        "character": 24,
                        "line": 0
                    },
                    "start": {
                        "character": 9,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ext_using_undefined_std",
                "message": "Using directive refers to implicitly-defined namespace 'std'",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 2
                    },
                    "start": {
                        "character": 16,
                        "line": 2
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 4
                    },
                    "start": {
                        "character": 21,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 39,
                        "line": 5
                    },
                    "start": {
                        "character": 25,
                        "line": 5
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'ADAS'",
                "range": {
                    "end": {
                        "character": 14,
                        "line": 10
                    },
                    "start": {
                        "character": 10,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 77
                    },
                    "start": {
                        "character": 1,
                        "line": 77
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 78
                    },
                    "start": {
                        "character": 1,
                        "line": 78
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 79
                    },
                    "start": {
                        "character": 1,
                        "line": 79
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 14,
                        "line": 80
                    },
                    "start": {
                        "character": 8,
                        "line": 80
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 81
                    },
                    "start": {
                        "character": 1,
                        "line": 81
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 115
                    },
                    "start": {
                        "character": 21,
                        "line": 115
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 128
                    },
                    "start": {
                        "character": 30,
                        "line": 128
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 27,
                        "line": 152
                    },
                    "start": {
                        "character": 21,
                        "line": 152
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 173
                    },
                    "start": {
                        "character": 1,
                        "line": 173
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 220
                    },
                    "start": {
                        "character": 30,
                        "line": 220
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 220
                    },
                    "start": {
                        "character": 49,
                        "line": 220
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 32,
                        "line": 244
                    },
                    "start": {
                        "character": 26,
                        "line": 244
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 51,
                        "line": 244
                    },
                    "start": {
                        "character": 45,
                        "line": 244
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 284
                    },
                    "start": {
                        "character": 29,
                        "line": 284
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 54,
                        "line": 284
                    },
                    "start": {
                        "character": 48,
                        "line": 284
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 320
                    },
                    "start": {
                        "character": 30,
                        "line": 320
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 11
    }
}
Diagnostics received from LSP.
Errors received: [[0, [9, 24]], [4, [21, 35]], [5, [25, 39]], [10, [10, 14]], [77, [1, 7]], [78, [1, 7]], [79, [1, 7]], [80, [8, 14]], [81, [1, 7]], [115, [21, 26]], [128, [30, 36]], [152, [21, 27]], [173, [1, 7]], [220, [30, 36]], [220, [49, 55]], [244, [26, 32]], [244, [45, 51]], [284, [29, 35]], [284, [48, 54]], [320, [30, 36]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>\nType modifiers"
                },
                "filterText": "add_const",
                "insertText": "add_const",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022add_const<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "411c928aadd_const",
                "textEdit": {
                    "newText": "add_const",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_const_t",
                "insertText": "add_const_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022add_const_t<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "411c928aadd_const_t",
                "textEdit": {
                    "newText": "add_const_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_cv",
                "insertText": "add_cv",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022add_cv<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "411c928aadd_cv",
                "textEdit": {
                    "newText": "add_cv",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_cv_t",
                "insertText": "add_cv_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022add_cv_t<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "411c928aadd_cv_t",
                "textEdit": {
                    "newText": "add_cv_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_lvalue_reference",
                "insertText": "add_lvalue_reference",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022add_lvalue_reference<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "411c928aadd_lvalue_reference",
                "textEdit": {
                    "newText": "add_lvalue_reference",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_lvalue_reference_t",
                "insertText": "add_lvalue_reference_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022add_lvalue_reference_t<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "411c928aadd_lvalue_reference_t",
                "textEdit": {
                    "newText": "add_lvalue_reference_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_pointer",
                "insertText": "add_pointer",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022add_pointer<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "411c928aadd_pointer",
                "textEdit": {
                    "newText": "add_pointer",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_pointer_t",
                "insertText": "add_pointer_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022add_pointer_t<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "411c928aadd_pointer_t",
                "textEdit": {
                    "newText": "add_pointer_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_rvalue_reference",
                "insertText": "add_rvalue_reference",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022add_rvalue_reference<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "411c928aadd_rvalue_reference",
                "textEdit": {
                    "newText": "add_rvalue_reference",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_rvalue_reference_t",
                "insertText": "add_rvalue_reference_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022add_rvalue_reference_t<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "411c928aadd_rvalue_reference_t",
                "textEdit": {
                    "newText": "add_rvalue_reference_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_volatile",
                "insertText": "add_volatile",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022add_volatile<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "411c928aadd_volatile",
                "textEdit": {
                    "newText": "add_volatile",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_volatile_t",
                "insertText": "add_volatile_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022add_volatile_t<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "411c928aadd_volatile_t",
                "textEdit": {
                    "newText": "add_volatile_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "adopt_lock_t",
                "insertText": "adopt_lock_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022adopt_lock_t",
                "score": 0.5076508522033691,
                "sortText": "411c928aadopt_lock_t",
                "textEdit": {
                    "newText": "adopt_lock_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Ty *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "addressof",
                "insertText": "addressof",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022addressof(Ty &Val)",
                "score": 0.27917516231536865,
                "sortText": "4185dbebaddressof",
                "textEdit": {
                    "newText": "addressof",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "const Ty *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "addressof",
                "insertText": "addressof",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022addressof(const Ty &&)",
                "score": 0.27917516231536865,
                "sortText": "4185dbebaddressof",
                "textEdit": {
                    "newText": "addressof",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <numeric>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <numeric>"
                },
                "filterText": "adjacent_difference",
                "insertText": "adjacent_difference",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022adjacent_difference(const InIt First, const InIt Last, const OutIt Dest)",
                "score": 0.27917516231536865,
                "sortText": "4185dbebadjacent_difference",
                "textEdit": {
                    "newText": "adjacent_difference",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <numeric>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <numeric>"
                },
                "filterText": "adjacent_difference",
                "insertText": "adjacent_difference",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022adjacent_difference(const InIt First, const InIt Last, OutIt Dest, BinOp Func)",
                "score": 0.27917516231536865,
                "sortText": "4185dbebadjacent_difference",
                "textEdit": {
                    "newText": "adjacent_difference",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "adjacent_find",
                "insertText": "adjacent_find",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022adjacent_find(const FwdIt First, FwdIt Last, Pr Pred)",
                "score": 0.27917516231536865,
                "sortText": "4185dbebadjacent_find",
                "textEdit": {
                    "newText": "adjacent_find",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "adjacent_find",
                "insertText": "adjacent_find",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022adjacent_find(const FwdIt First, const FwdIt Last)",
                "score": 0.27917516231536865,
                "sortText": "4185dbebadjacent_find",
                "textEdit": {
                    "newText": "adjacent_find",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>\nfrom <iterator>"
                },
                "filterText": "advance",
                "insertText": "advance",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022advance(InIt &Where, Diff Off)",
                "score": 0.21539734303951263,
                "sortText": "41bf0105advance",
                "textEdit": {
                    "newText": "advance",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "const adopt_lock_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "adopt_lock",
                "insertText": "adopt_lock",
                "insertTextFormat": 1,
                "kind": 6,
                "label": "\u2022adopt_lock",
                "score": 0.19701893627643585,
                "sortText": "41cf7896adopt_lock",
                "textEdit": {
                    "newText": "adopt_lock",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplinterface.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "T",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplinterface.h>"
                },
                "filterText": "atomic_decrement",
                "insertText": "Concurrency::details::atomic_decrement",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::details::atomic_decrement(::std::atomic<T> &Target)",
                "score": 0.22347019612789154,
                "sortText": "41d45ff9atomic_decrement",
                "textEdit": {
                    "newText": "Concurrency::details::atomic_decrement",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::experimental::filesystem::perms",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "add_perms",
                "insertText": "experimental::filesystem::perms::add_perms",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022experimental::filesystem::perms::add_perms",
                "score": 0.16323184967041016,
                "sortText": "41edbe88add_perms",
                "textEdit": {
                    "newText": "experimental::filesystem::perms::add_perms",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ratio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ratio>"
                },
                "filterText": "ratio_add",
                "insertText": "ratio_add",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022ratio_add<class Rx1, class Rx2>",
                "score": 0.5076508522033691,
                "sortText": "41fe0a98ratio_add",
                "textEdit": {
                    "newText": "ratio_add",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEAFNOSUPPORT"
                },
                "filterText": "address_family_not_supported",
                "insertText": "errc::address_family_not_supported",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::address_family_not_supported",
                "score": 0.13731007277965546,
                "sortText": "4209f0bbaddress_family_not_supported",
                "textEdit": {
                    "newText": "errc::address_family_not_supported",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEADDRINUSE"
                },
                "filterText": "address_in_use",
                "insertText": "errc::address_in_use",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::address_in_use",
                "score": 0.13731007277965546,
                "sortText": "4209f0bbaddress_in_use",
                "textEdit": {
                    "newText": "errc::address_in_use",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEADDRNOTAVAIL"
                },
                "filterText": "address_not_available",
                "insertText": "errc::address_not_available",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::address_not_available",
                "score": 0.13731007277965546,
                "sortText": "4209f0bbaddress_not_available",
                "textEdit": {
                    "newText": "errc::address_not_available",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_const",
                "insertText": "tr1::add_const",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::add_const",
                "score": 0.10541268438100815,
                "sortText": "424319b8add_const",
                "textEdit": {
                    "newText": "tr1::add_const",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_cv",
                "insertText": "tr1::add_cv",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::add_cv",
                "score": 0.10541268438100815,
                "sortText": "424319b8add_cv",
                "textEdit": {
                    "newText": "tr1::add_cv",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_pointer",
                "insertText": "tr1::add_pointer",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::add_pointer",
                "score": 0.10541268438100815,
                "sortText": "424319b8add_pointer",
                "textEdit": {
                    "newText": "tr1::add_pointer",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_volatile",
                "insertText": "tr1::add_volatile",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::add_volatile",
                "score": 0.10541268438100815,
                "sortText": "424319b8add_volatile",
                "textEdit": {
                    "newText": "tr1::add_volatile",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplinterface.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "T",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplinterface.h>"
                },
                "filterText": "atomic_add",
                "insertText": "Concurrency::details::atomic_add",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::details::atomic_add(::std::atomic<T> &Target, T Value)",
                "score": 0.22347019612789154,
                "sortText": "429b2aa1atomic_add",
                "textEdit": {
                    "newText": "Concurrency::details::atomic_add",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEFAULT"
                },
                "filterText": "bad_address",
                "insertText": "errc::bad_address",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::bad_address",
                "score": 0.13731007277965546,
                "sortText": "42f364fdbad_address",
                "textEdit": {
                    "newText": "errc::bad_address",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEDESTADDRREQ"
                },
                "filterText": "destination_address_required",
                "insertText": "errc::destination_address_required",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::destination_address_required",
                "score": 0.13731007277965546,
                "sortText": "42f364fddestination_address_required",
                "textEdit": {
                    "newText": "errc::destination_address_required",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEISDIR"
                },
                "filterText": "is_a_directory",
                "insertText": "errc::is_a_directory",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::is_a_directory",
                "score": 0.13731007277965546,
                "sortText": "437364fdis_a_directory",
                "textEdit": {
                    "newText": "errc::is_a_directory",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nENOTDIR"
                },
                "filterText": "not_a_directory",
                "insertText": "errc::not_a_directory",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::not_a_directory",
                "score": 0.13731007277965546,
                "sortText": "437364fdnot_a_directory",
                "textEdit": {
                    "newText": "errc::not_a_directory",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['add_const', 'add_const_t', 'add_cv', 'add_cv_t', 'add_lvalue_reference', 'add_lvalue_reference_t', 'add_pointer', 'add_pointer_t', 'add_rvalue_reference', 'add_rvalue_reference_t', 'add_volatile', 'add_volatile_t', 'adopt_lock_t', 'addressof', 'addressof', 'adjacent_difference', 'adjacent_difference', 'adjacent_find', 'adjacent_find', 'advance', 'adopt_lock', 'Concurrency::details::atomic_decrement', 'experimental::filesystem::perms::add_perms', 'ratio_add', 'errc::address_family_not_supported', 'errc::address_in_use', 'errc::address_not_available', 'tr1::add_const', 'tr1::add_cv', 'tr1::add_pointer', 'tr1::add_volatile', 'Concurrency::details::atomic_add', 'errc::bad_address', 'errc::destination_address_required', 'errc::is_a_directory', 'errc::not_a_directory']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_file_not_found",
                "message": "'bits/stdc++.h' file not found",
                "range": {
                    "end": {
                        "character": 24,
                        "line": 0
                    },
                    "start": {
                        "character": 9,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ext_using_undefined_std",
                "message": "Using directive refers to implicitly-defined namespace 'std'",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 2
                    },
                    "start": {
                        "character": 16,
                        "line": 2
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 4
                    },
                    "start": {
                        "character": 21,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 39,
                        "line": 5
                    },
                    "start": {
                        "character": 25,
                        "line": 5
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'ADA'",
                "range": {
                    "end": {
                        "character": 13,
                        "line": 10
                    },
                    "start": {
                        "character": 10,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 77
                    },
                    "start": {
                        "character": 1,
                        "line": 77
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 78
                    },
                    "start": {
                        "character": 1,
                        "line": 78
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 79
                    },
                    "start": {
                        "character": 1,
                        "line": 79
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 14,
                        "line": 80
                    },
                    "start": {
                        "character": 8,
                        "line": 80
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 81
                    },
                    "start": {
                        "character": 1,
                        "line": 81
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 115
                    },
                    "start": {
                        "character": 21,
                        "line": 115
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 128
                    },
                    "start": {
                        "character": 30,
                        "line": 128
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 27,
                        "line": 152
                    },
                    "start": {
                        "character": 21,
                        "line": 152
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 173
                    },
                    "start": {
                        "character": 1,
                        "line": 173
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 220
                    },
                    "start": {
                        "character": 30,
                        "line": 220
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 220
                    },
                    "start": {
                        "character": 49,
                        "line": 220
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 32,
                        "line": 244
                    },
                    "start": {
                        "character": 26,
                        "line": 244
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 51,
                        "line": 244
                    },
                    "start": {
                        "character": 45,
                        "line": 244
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 284
                    },
                    "start": {
                        "character": 29,
                        "line": 284
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 54,
                        "line": 284
                    },
                    "start": {
                        "character": 48,
                        "line": 284
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 320
                    },
                    "start": {
                        "character": 30,
                        "line": 320
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 12
    }
}
Diagnostics received from LSP.
Errors received: [[0, [9, 24]], [4, [21, 35]], [5, [25, 39]], [10, [10, 13]], [77, [1, 7]], [78, [1, 7]], [79, [1, 7]], [80, [8, 14]], [81, [1, 7]], [115, [21, 26]], [128, [30, 36]], [152, [21, 27]], [173, [1, 7]], [220, [30, 36]], [220, [49, 55]], [244, [26, 32]], [244, [45, 51]], [284, [29, 35]], [284, [48, 54]], [320, [30, 36]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "filterText": "alignas",
                "insertText": "alignas",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignas(expression)",
                "score": 0.7694156765937805,
                "sortText": "40bb0793alignas",
                "textEdit": {
                    "newText": "alignas",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.7694156765937805,
                "sortText": "40bb0793auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "adopt_lock_t",
                "insertText": "adopt_lock_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022adopt_lock_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98adopt_lock_t",
                "textEdit": {
                    "newText": "adopt_lock_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator_arg_t",
                "insertText": "allocator_arg_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator_arg_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98allocator_arg_t",
                "textEdit": {
                    "newText": "allocator_arg_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_bool",
                "insertText": "atomic_bool",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_bool",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_bool",
                "textEdit": {
                    "newText": "atomic_bool",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_char",
                "insertText": "atomic_char",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_char",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_char",
                "textEdit": {
                    "newText": "atomic_char",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_char32_t",
                "insertText": "atomic_char32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_char32_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_char32_t",
                "textEdit": {
                    "newText": "atomic_char32_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag",
                "insertText": "atomic_flag",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022atomic_flag",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_flag",
                "textEdit": {
                    "newText": "atomic_flag",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int",
                "insertText": "atomic_int",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int",
                "textEdit": {
                    "newText": "atomic_int",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int16_t",
                "insertText": "atomic_int16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int16_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int16_t",
                "textEdit": {
                    "newText": "atomic_int16_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int32_t",
                "insertText": "atomic_int32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int32_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int32_t",
                "textEdit": {
                    "newText": "atomic_int32_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int64_t",
                "insertText": "atomic_int64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int64_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int64_t",
                "textEdit": {
                    "newText": "atomic_int64_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int8_t",
                "insertText": "atomic_int8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int8_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int8_t",
                "textEdit": {
                    "newText": "atomic_int8_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast16_t",
                "insertText": "atomic_int_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast16_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int_fast16_t",
                "textEdit": {
                    "newText": "atomic_int_fast16_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast32_t",
                "insertText": "atomic_int_fast32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast32_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int_fast32_t",
                "textEdit": {
                    "newText": "atomic_int_fast32_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast64_t",
                "insertText": "atomic_int_fast64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast64_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int_fast64_t",
                "textEdit": {
                    "newText": "atomic_int_fast64_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast8_t",
                "insertText": "atomic_int_fast8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast8_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int_fast8_t",
                "textEdit": {
                    "newText": "atomic_int_fast8_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least16_t",
                "insertText": "atomic_int_least16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least16_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int_least16_t",
                "textEdit": {
                    "newText": "atomic_int_least16_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least32_t",
                "insertText": "atomic_int_least32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least32_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int_least32_t",
                "textEdit": {
                    "newText": "atomic_int_least32_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least8_t",
                "insertText": "atomic_int_least8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least8_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int_least8_t",
                "textEdit": {
                    "newText": "atomic_int_least8_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_intmax_t",
                "insertText": "atomic_intmax_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_intmax_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_intmax_t",
                "textEdit": {
                    "newText": "atomic_intmax_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_intptr_t",
                "insertText": "atomic_intptr_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_intptr_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_intptr_t",
                "textEdit": {
                    "newText": "atomic_intptr_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_llong",
                "insertText": "atomic_llong",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_llong",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_llong",
                "textEdit": {
                    "newText": "atomic_llong",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ptrdiff_t",
                "insertText": "atomic_ptrdiff_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ptrdiff_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_ptrdiff_t",
                "textEdit": {
                    "newText": "atomic_ptrdiff_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_short",
                "insertText": "atomic_short",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_short",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_short",
                "textEdit": {
                    "newText": "atomic_short",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_size_t",
                "insertText": "atomic_size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_size_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_size_t",
                "textEdit": {
                    "newText": "atomic_size_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uchar",
                "insertText": "atomic_uchar",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uchar",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uchar",
                "textEdit": {
                    "newText": "atomic_uchar",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint",
                "insertText": "atomic_uint",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uint",
                "textEdit": {
                    "newText": "atomic_uint",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint32_t",
                "insertText": "atomic_uint32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint32_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uint32_t",
                "textEdit": {
                    "newText": "atomic_uint32_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint64_t",
                "insertText": "atomic_uint64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint64_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uint64_t",
                "textEdit": {
                    "newText": "atomic_uint64_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast16_t",
                "insertText": "atomic_uint_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast16_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uint_fast16_t",
                "textEdit": {
                    "newText": "atomic_uint_fast16_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast64_t",
                "insertText": "atomic_uint_fast64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast64_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uint_fast64_t",
                "textEdit": {
                    "newText": "atomic_uint_fast64_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast8_t",
                "insertText": "atomic_uint_fast8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast8_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uint_fast8_t",
                "textEdit": {
                    "newText": "atomic_uint_fast8_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_least16_t",
                "insertText": "atomic_uint_least16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_least16_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uint_least16_t",
                "textEdit": {
                    "newText": "atomic_uint_least16_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_least32_t",
                "insertText": "atomic_uint_least32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_least32_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uint_least32_t",
                "textEdit": {
                    "newText": "atomic_uint_least32_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_least8_t",
                "insertText": "atomic_uint_least8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_least8_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uint_least8_t",
                "textEdit": {
                    "newText": "atomic_uint_least8_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uintmax_t",
                "insertText": "atomic_uintmax_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uintmax_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uintmax_t",
                "textEdit": {
                    "newText": "atomic_uintmax_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uintptr_t",
                "insertText": "atomic_uintptr_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uintptr_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uintptr_t",
                "textEdit": {
                    "newText": "atomic_uintptr_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ulong",
                "insertText": "atomic_ulong",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ulong",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_ulong",
                "textEdit": {
                    "newText": "atomic_ulong",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ushort",
                "insertText": "atomic_ushort",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ushort",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_ushort",
                "textEdit": {
                    "newText": "atomic_ushort",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_wchar_t",
                "insertText": "atomic_wchar_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_wchar_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_wchar_t",
                "textEdit": {
                    "newText": "atomic_wchar_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR32_T_LOCK_FREE",
                "score": 0.35306480526924133,
                "sortText": "414b3b17ATOMIC_CHAR32_T_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR32_T_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR_LOCK_FREE",
                "insertText": "ATOMIC_CHAR_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR_LOCK_FREE",
                "score": 0.35306480526924133,
                "sortText": "414b3b17ATOMIC_CHAR_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_FLAG_INIT",
                "insertText": "ATOMIC_FLAG_INIT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_FLAG_INIT",
                "score": 0.35306480526924133,
                "sortText": "414b3b17ATOMIC_FLAG_INIT",
                "textEdit": {
                    "newText": "ATOMIC_FLAG_INIT",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_INT_LOCK_FREE",
                "insertText": "ATOMIC_INT_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_INT_LOCK_FREE",
                "score": 0.35306480526924133,
                "sortText": "414b3b17ATOMIC_INT_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_INT_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_LLONG_LOCK_FREE",
                "insertText": "ATOMIC_LLONG_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_LLONG_LOCK_FREE",
                "score": 0.35306480526924133,
                "sortText": "414b3b17ATOMIC_LLONG_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_LLONG_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_LONG_LOCK_FREE",
                "insertText": "ATOMIC_LONG_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_LONG_LOCK_FREE",
                "score": 0.35306480526924133,
                "sortText": "414b3b17ATOMIC_LONG_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_LONG_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_SHORT_LOCK_FREE",
                "insertText": "ATOMIC_SHORT_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_SHORT_LOCK_FREE",
                "score": 0.35306480526924133,
                "sortText": "414b3b17ATOMIC_SHORT_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_SHORT_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_VAR_INIT",
                "insertText": "ATOMIC_VAR_INIT",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ATOMIC_VAR_INIT(_Value)",
                "score": 0.35306480526924133,
                "sortText": "414b3b17ATOMIC_VAR_INIT",
                "textEdit": {
                    "newText": "ATOMIC_VAR_INIT",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>\n[valarray.transcend] Transcendentals"
                },
                "filterText": "abs",
                "insertText": "abs",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022abs(const valarray<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4abs",
                "textEdit": {
                    "newText": "abs",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "abs",
                "insertText": "abs",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022abs(const complex<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4abs",
                "textEdit": {
                    "newText": "abs",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "acos",
                "insertText": "acos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022acos(const valarray<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4acos",
                "textEdit": {
                    "newText": "acos",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "acos",
                "insertText": "acos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022acos(const complex<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4acos",
                "textEdit": {
                    "newText": "acos",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "acosh",
                "insertText": "acosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022acosh(const complex<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4acosh",
                "textEdit": {
                    "newText": "acosh",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "arg",
                "insertText": "arg",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022arg(const complex<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4arg",
                "textEdit": {
                    "newText": "arg",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Upgrade_to_double<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "arg",
                "insertText": "arg",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022arg(Ty Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4arg",
                "textEdit": {
                    "newText": "arg",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asin",
                "insertText": "asin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asin(const valarray<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4asin",
                "textEdit": {
                    "newText": "asin",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asin",
                "insertText": "asin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asin(const complex<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4asin",
                "textEdit": {
                    "newText": "asin",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinh",
                "insertText": "asinh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asinh(const complex<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4asinh",
                "textEdit": {
                    "newText": "asinh",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <future>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "future<_Invoke_result_t<decay_t<Fty>, decay_t<ArgTypes>...>>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <future>"
                },
                "filterText": "async",
                "insertText": "async",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022async(launch Policy, Fty &&Fnarg, ArgTypes &&Args...)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4async",
                "textEdit": {
                    "newText": "async",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <future>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "future<_Invoke_result_t<decay_t<Fty>, decay_t<ArgTypes>...>>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <future>"
                },
                "filterText": "async",
                "insertText": "async",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022async(Fty &&Fnarg, ArgTypes &&Args...)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4async",
                "textEdit": {
                    "newText": "async",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "atan",
                "insertText": "atan",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atan(const valarray<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atan",
                "textEdit": {
                    "newText": "atan",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "atan",
                "insertText": "atan",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atan(const complex<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atan",
                "textEdit": {
                    "newText": "atan",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "atan2",
                "insertText": "atan2",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atan2(const valarray<Ty> &Left, const typename valarray<Ty>::value_type &Right)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atan2",
                "textEdit": {
                    "newText": "atan2",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "atan2",
                "insertText": "atan2",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atan2(const valarray<Ty> &Left, const valarray<Ty> &Right)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atan2",
                "textEdit": {
                    "newText": "atan2",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "atan2",
                "insertText": "atan2",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atan2(const typename valarray<Ty>::value_type &Left, const valarray<Ty> &Right)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atan2",
                "textEdit": {
                    "newText": "atan2",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "atanh",
                "insertText": "atanh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atanh(const complex<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atanh",
                "textEdit": {
                    "newText": "atanh",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_exchange",
                "insertText": "atomic_exchange",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_exchange(volatile atomic<Ty> *const Mem, const _Identity_t<Ty> Value)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_exchange",
                "textEdit": {
                    "newText": "atomic_exchange",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_add",
                "insertText": "atomic_fetch_add",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_add(volatile atomic<Ty> *Mem, const typename atomic<Ty>::difference_type Value)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_add",
                "textEdit": {
                    "newText": "atomic_fetch_add",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_add_explicit",
                "insertText": "atomic_fetch_add_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_add_explicit(atomic<Ty> *Mem, const typename atomic<Ty>::difference_type Value, const memory_order Order)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_add_explicit",
                "textEdit": {
                    "newText": "atomic_fetch_add_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_and",
                "insertText": "atomic_fetch_and",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_and(atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_and",
                "textEdit": {
                    "newText": "atomic_fetch_and",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_and_explicit",
                "insertText": "atomic_fetch_and_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_and_explicit(atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value, const memory_order Order)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_and_explicit",
                "textEdit": {
                    "newText": "atomic_fetch_and_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_or",
                "insertText": "atomic_fetch_or",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_or(volatile atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_or",
                "textEdit": {
                    "newText": "atomic_fetch_or",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_or",
                "insertText": "atomic_fetch_or",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_or(atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_or",
                "textEdit": {
                    "newText": "atomic_fetch_or",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_or_explicit",
                "insertText": "atomic_fetch_or_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_or_explicit(atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value, const memory_order Order)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_or_explicit",
                "textEdit": {
                    "newText": "atomic_fetch_or_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_or_explicit",
                "insertText": "atomic_fetch_or_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_or_explicit(volatile atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value, const memory_order Order)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_or_explicit",
                "textEdit": {
                    "newText": "atomic_fetch_or_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_sub",
                "insertText": "atomic_fetch_sub",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_sub(atomic<Ty> *Mem, const typename atomic<Ty>::difference_type Value)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_sub",
                "textEdit": {
                    "newText": "atomic_fetch_sub",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_sub_explicit",
                "insertText": "atomic_fetch_sub_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_sub_explicit(atomic<Ty> *Mem, const typename atomic<Ty>::difference_type Value, const memory_order Order)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_sub_explicit",
                "textEdit": {
                    "newText": "atomic_fetch_sub_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_xor",
                "insertText": "atomic_fetch_xor",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_xor(atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_xor",
                "textEdit": {
                    "newText": "atomic_fetch_xor",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_xor",
                "insertText": "atomic_fetch_xor",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_xor(volatile atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_xor",
                "textEdit": {
                    "newText": "atomic_fetch_xor",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_xor_explicit",
                "insertText": "atomic_fetch_xor_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_xor_explicit(atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value, const memory_order Order)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_xor_explicit",
                "textEdit": {
                    "newText": "atomic_fetch_xor_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_load",
                "insertText": "atomic_load",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_load(const atomic<Ty> *const Mem)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_load",
                "textEdit": {
                    "newText": "atomic_load",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_load_explicit",
                "insertText": "atomic_load_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_load_explicit(const volatile atomic<Ty> *const Mem, const memory_order Order)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_load_explicit",
                "textEdit": {
                    "newText": "atomic_load_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_load_explicit",
                "insertText": "atomic_load_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_load_explicit(const atomic<Ty> *const Mem, const memory_order Order)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_load_explicit",
                "textEdit": {
                    "newText": "atomic_load_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_compare_exchange_strong",
                "insertText": "atomic_compare_exchange_strong",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_compare_exchange_strong(atomic<Ty> *const Mem, _Identity_t<Ty> *const Expected, const _Identity_t<Ty> Desired)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_compare_exchange_strong",
                "textEdit": {
                    "newText": "atomic_compare_exchange_strong",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_compare_exchange_strong",
                "insertText": "atomic_compare_exchange_strong",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_compare_exchange_strong(volatile atomic<Ty> *const Mem, _Identity_t<Ty> *const Expected, const _Identity_t<Ty> Desired)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_compare_exchange_strong",
                "textEdit": {
                    "newText": "atomic_compare_exchange_strong",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_compare_exchange_weak",
                "insertText": "atomic_compare_exchange_weak",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_compare_exchange_weak(atomic<Ty> *const Mem, _Identity_t<Ty> *const Expected, const _Identity_t<Ty> Desired)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_compare_exchange_weak",
                "textEdit": {
                    "newText": "atomic_compare_exchange_weak",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_clear",
                "insertText": "atomic_flag_clear",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_clear(atomic_flag *const Flag)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_flag_clear",
                "textEdit": {
                    "newText": "atomic_flag_clear",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_clear_explicit",
                "insertText": "atomic_flag_clear_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_clear_explicit(atomic_flag *const Flag, const memory_order Order)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_flag_clear_explicit",
                "textEdit": {
                    "newText": "atomic_flag_clear_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_clear_explicit",
                "insertText": "atomic_flag_clear_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_clear_explicit(volatile atomic_flag *const Flag, const memory_order Order)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_flag_clear_explicit",
                "textEdit": {
                    "newText": "atomic_flag_clear_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_test_and_set",
                "insertText": "atomic_flag_test_and_set",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_test_and_set(volatile atomic_flag *const Flag)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_flag_test_and_set",
                "textEdit": {
                    "newText": "atomic_flag_test_and_set",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_test_and_set",
                "insertText": "atomic_flag_test_and_set",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_test_and_set(atomic_flag *const Flag)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_flag_test_and_set",
                "textEdit": {
                    "newText": "atomic_flag_test_and_set",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_test_and_set_explicit",
                "insertText": "atomic_flag_test_and_set_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_test_and_set_explicit(atomic_flag *const Flag, const memory_order Order)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_flag_test_and_set_explicit",
                "textEdit": {
                    "newText": "atomic_flag_test_and_set_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_test_and_set_explicit",
                "insertText": "atomic_flag_test_and_set_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_test_and_set_explicit(volatile atomic_flag *const Flag, const memory_order Order)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_flag_test_and_set_explicit",
                "textEdit": {
                    "newText": "atomic_flag_test_and_set_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_init",
                "insertText": "atomic_init",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_init(atomic<Ty> *const Mem, const typename atomic<Ty>::value_type Value)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_init",
                "textEdit": {
                    "newText": "atomic_init",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_is_lock_free",
                "insertText": "atomic_is_lock_free",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_is_lock_free(const volatile atomic<Ty> *Mem)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_is_lock_free",
                "textEdit": {
                    "newText": "atomic_is_lock_free",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_signal_fence",
                "insertText": "atomic_signal_fence",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_signal_fence(const memory_order Order)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_signal_fence",
                "textEdit": {
                    "newText": "atomic_signal_fence",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_store",
                "insertText": "atomic_store",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_store(atomic<Ty> *const Mem, const _Identity_t<Ty> Value)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_store",
                "textEdit": {
                    "newText": "atomic_store",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_thread_fence",
                "insertText": "atomic_thread_fence",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_thread_fence(const memory_order Order)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_thread_fence",
                "textEdit": {
                    "newText": "atomic_thread_fence",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "const adopt_lock_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "adopt_lock",
                "insertText": "adopt_lock",
                "insertTextFormat": 1,
                "kind": 6,
                "label": "\u2022adopt_lock",
                "score": 0.19701893627643585,
                "sortText": "41b640abadopt_lock",
                "textEdit": {
                    "newText": "adopt_lock",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['alignas', 'auto', 'adopt_lock_t', 'allocator_arg_t', 'atomic_bool', 'atomic_char', 'atomic_char32_t', 'atomic_flag', 'atomic_int', 'atomic_int16_t', 'atomic_int32_t', 'atomic_int64_t', 'atomic_int8_t', 'atomic_int_fast16_t', 'atomic_int_fast32_t', 'atomic_int_fast64_t', 'atomic_int_fast8_t', 'atomic_int_least16_t', 'atomic_int_least32_t', 'atomic_int_least8_t', 'atomic_intmax_t', 'atomic_intptr_t', 'atomic_llong', 'atomic_ptrdiff_t', 'atomic_short', 'atomic_size_t', 'atomic_uchar', 'atomic_uint', 'atomic_uint32_t', 'atomic_uint64_t', 'atomic_uint_fast16_t', 'atomic_uint_fast64_t', 'atomic_uint_fast8_t', 'atomic_uint_least16_t', 'atomic_uint_least32_t', 'atomic_uint_least8_t', 'atomic_uintmax_t', 'atomic_uintptr_t', 'atomic_ulong', 'atomic_ushort', 'atomic_wchar_t', 'ATOMIC_CHAR32_T_LOCK_FREE', 'ATOMIC_CHAR_LOCK_FREE', 'ATOMIC_FLAG_INIT', 'ATOMIC_INT_LOCK_FREE', 'ATOMIC_LLONG_LOCK_FREE', 'ATOMIC_LONG_LOCK_FREE', 'ATOMIC_SHORT_LOCK_FREE', 'ATOMIC_VAR_INIT', 'abs', 'abs', 'acos', 'acos', 'acosh', 'arg', 'arg', 'asin', 'asin', 'asinh', 'async', 'async', 'atan', 'atan', 'atan2', 'atan2', 'atan2', 'atanh', 'atomic_exchange', 'atomic_fetch_add', 'atomic_fetch_add_explicit', 'atomic_fetch_and', 'atomic_fetch_and_explicit', 'atomic_fetch_or', 'atomic_fetch_or', 'atomic_fetch_or_explicit', 'atomic_fetch_or_explicit', 'atomic_fetch_sub', 'atomic_fetch_sub_explicit', 'atomic_fetch_xor', 'atomic_fetch_xor', 'atomic_fetch_xor_explicit', 'atomic_load', 'atomic_load_explicit', 'atomic_load_explicit', 'atomic_compare_exchange_strong', 'atomic_compare_exchange_strong', 'atomic_compare_exchange_weak', 'atomic_flag_clear', 'atomic_flag_clear_explicit', 'atomic_flag_clear_explicit', 'atomic_flag_test_and_set', 'atomic_flag_test_and_set', 'atomic_flag_test_and_set_explicit', 'atomic_flag_test_and_set_explicit', 'atomic_init', 'atomic_is_lock_free', 'atomic_signal_fence', 'atomic_store', 'atomic_thread_fence', 'adopt_lock']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_file_not_found",
                "message": "'bits/stdc++.h' file not found",
                "range": {
                    "end": {
                        "character": 24,
                        "line": 0
                    },
                    "start": {
                        "character": 9,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ext_using_undefined_std",
                "message": "Using directive refers to implicitly-defined namespace 'std'",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 2
                    },
                    "start": {
                        "character": 16,
                        "line": 2
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 4
                    },
                    "start": {
                        "character": 21,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 39,
                        "line": 5
                    },
                    "start": {
                        "character": 25,
                        "line": 5
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'AD'",
                "range": {
                    "end": {
                        "character": 12,
                        "line": 10
                    },
                    "start": {
                        "character": 10,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 77
                    },
                    "start": {
                        "character": 1,
                        "line": 77
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 78
                    },
                    "start": {
                        "character": 1,
                        "line": 78
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 79
                    },
                    "start": {
                        "character": 1,
                        "line": 79
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 14,
                        "line": 80
                    },
                    "start": {
                        "character": 8,
                        "line": 80
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 81
                    },
                    "start": {
                        "character": 1,
                        "line": 81
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 115
                    },
                    "start": {
                        "character": 21,
                        "line": 115
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 128
                    },
                    "start": {
                        "character": 30,
                        "line": 128
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 27,
                        "line": 152
                    },
                    "start": {
                        "character": 21,
                        "line": 152
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 173
                    },
                    "start": {
                        "character": 1,
                        "line": 173
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 220
                    },
                    "start": {
                        "character": 30,
                        "line": 220
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 220
                    },
                    "start": {
                        "character": 49,
                        "line": 220
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 32,
                        "line": 244
                    },
                    "start": {
                        "character": 26,
                        "line": 244
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 51,
                        "line": 244
                    },
                    "start": {
                        "character": 45,
                        "line": 244
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 284
                    },
                    "start": {
                        "character": 29,
                        "line": 284
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 54,
                        "line": 284
                    },
                    "start": {
                        "character": 48,
                        "line": 284
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 320
                    },
                    "start": {
                        "character": 30,
                        "line": 320
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 13
    }
}
Diagnostics received from LSP.
Errors received: [[0, [9, 24]], [4, [21, 35]], [5, [25, 39]], [10, [10, 12]], [77, [1, 7]], [78, [1, 7]], [79, [1, 7]], [80, [8, 14]], [81, [1, 7]], [115, [21, 26]], [128, [30, 36]], [152, [21, 27]], [173, [1, 7]], [220, [30, 36]], [220, [49, 55]], [244, [26, 32]], [244, [45, 51]], [284, [29, 35]], [284, [48, 54]], [320, [30, 36]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "muchie de la x la y cu costul cost"
                },
                "filterText": "Muchie",
                "insertText": "Muchie",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Muchie",
                "score": 2.66562557220459,
                "sortText": "3fd56664Muchie",
                "textEdit": {
                    "newText": "Muchie",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 1.1117926836013794,
                "sortText": "4071b0c7struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 1.0194766521453857,
                "sortText": "407d81casize_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "type_info",
                "insertText": "type_info",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " type_info",
                "score": 0.816092848777771,
                "sortText": "40af148atype_info",
                "textEdit": {
                    "newText": "type_info",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.7694156765937805,
                "sortText": "40bb0793_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.7694156765937805,
                "sortText": "40bb0793_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.7694156765937805,
                "sortText": "40bb0793_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "alignas",
                "insertText": "alignas",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignas(expression)",
                "score": 0.7694156765937805,
                "sortText": "40bb0793alignas",
                "textEdit": {
                    "newText": "alignas",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.7694156765937805,
                "sortText": "40bb0793auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.7694156765937805,
                "sortText": "40bb0793bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.7694156765937805,
                "sortText": "40bb0793char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.7694156765937805,
                "sortText": "40bb0793char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.7694156765937805,
                "sortText": "40bb0793char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.7694156765937805,
                "sortText": "40bb0793class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.7694156765937805,
                "sortText": "40bb0793const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.7694156765937805,
                "sortText": "40bb0793constexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.7694156765937805,
                "sortText": "40bb0793decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.7694156765937805,
                "sortText": "40bb0793double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.7694156765937805,
                "sortText": "40bb0793enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "explicit",
                "insertText": "explicit",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " explicit",
                "score": 0.7694156765937805,
                "sortText": "40bb0793explicit",
                "textEdit": {
                    "newText": "explicit",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "extern",
                "insertText": "extern",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " extern",
                "score": 0.7694156765937805,
                "sortText": "40bb0793extern",
                "textEdit": {
                    "newText": "extern",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.7694156765937805,
                "sortText": "40bb0793float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "friend",
                "insertText": "friend",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " friend",
                "score": 0.7694156765937805,
                "sortText": "40bb0793friend",
                "textEdit": {
                    "newText": "friend",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "inline",
                "insertText": "inline",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " inline",
                "score": 0.7694156765937805,
                "sortText": "40bb0793inline",
                "textEdit": {
                    "newText": "inline",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.7694156765937805,
                "sortText": "40bb0793int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.7694156765937805,
                "sortText": "40bb0793long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "mutable",
                "insertText": "mutable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " mutable",
                "score": 0.7694156765937805,
                "sortText": "40bb0793mutable",
                "textEdit": {
                    "newText": "mutable",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.7694156765937805,
                "sortText": "40bb0793operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "private",
                "insertText": "private",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " private",
                "score": 0.7694156765937805,
                "sortText": "40bb0793private",
                "textEdit": {
                    "newText": "private",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "protected",
                "insertText": "protected",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " protected",
                "score": 0.7694156765937805,
                "sortText": "40bb0793protected",
                "textEdit": {
                    "newText": "protected",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "public",
                "insertText": "public",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " public",
                "score": 0.7694156765937805,
                "sortText": "40bb0793public",
                "textEdit": {
                    "newText": "public",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.7694156765937805,
                "sortText": "40bb0793short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.7694156765937805,
                "sortText": "40bb0793signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "static",
                "insertText": "static",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " static",
                "score": 0.7694156765937805,
                "sortText": "40bb0793static",
                "textEdit": {
                    "newText": "static",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "static_assert",
                "insertText": "static_assert",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_assert(expression, message);",
                "score": 0.7694156765937805,
                "sortText": "40bb0793static_assert",
                "textEdit": {
                    "newText": "static_assert",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "template",
                "insertText": "template",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " template",
                "score": 0.7694156765937805,
                "sortText": "40bb0793template",
                "textEdit": {
                    "newText": "template",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "thread_local",
                "insertText": "thread_local",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " thread_local",
                "score": 0.7694156765937805,
                "sortText": "40bb0793thread_local",
                "textEdit": {
                    "newText": "thread_local",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "typedef",
                "insertText": "typedef",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typedef type name;",
                "score": 0.7694156765937805,
                "sortText": "40bb0793typedef",
                "textEdit": {
                    "newText": "typedef",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.7694156765937805,
                "sortText": "40bb0793typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.7694156765937805,
                "sortText": "40bb0793union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.7694156765937805,
                "sortText": "40bb0793unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using qualifier::name;",
                "score": 0.7694156765937805,
                "sortText": "40bb0793using",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using name = type;",
                "score": 0.7694156765937805,
                "sortText": "40bb0793using",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "virtual",
                "insertText": "virtual",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " virtual",
                "score": 0.7694156765937805,
                "sortText": "40bb0793virtual",
                "textEdit": {
                    "newText": "virtual",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.7694156765937805,
                "sortText": "40bb0793void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.7694156765937805,
                "sortText": "40bb0793volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.7694156765937805,
                "sortText": "40bb0793wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "concurrency",
                "insertText": "concurrency",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " concurrency",
                "score": 0.7385311722755432,
                "sortText": "40c2ef9fconcurrency",
                "textEdit": {
                    "newText": "concurrency",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "chrono_literals",
                "insertText": "chrono_literals",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " chrono_literals",
                "score": 0.5800500512123108,
                "sortText": "40eb81d7chrono_literals",
                "textEdit": {
                    "newText": "chrono_literals",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "platform",
                "insertText": "Concurrency::details::platform",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " Concurrency::details::platform",
                "score": 0.5557445883750916,
                "sortText": "40f1bab9platform",
                "textEdit": {
                    "newText": "Concurrency::details::platform",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string>"
                },
                "filterText": "char_traits",
                "insertText": "char_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022char_traits<class Elem>",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98char_traits",
                "textEdit": {
                    "newText": "char_traits",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "messages",
                "insertText": "messages",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022messages<class Elem>",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98messages",
                "textEdit": {
                    "newText": "messages",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "messages_base",
                "insertText": "messages_base",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022messages_base",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98messages_base",
                "textEdit": {
                    "newText": "messages_base",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "messages_byname",
                "insertText": "messages_byname",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022messages_byname<class Elem>",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98messages_byname",
                "textEdit": {
                    "newText": "messages_byname",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "once_flag",
                "insertText": "once_flag",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022once_flag",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98once_flag",
                "textEdit": {
                    "newText": "once_flag",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <eh.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <eh.h>"
                },
                "filterText": "_se_translator_function",
                "insertText": "_se_translator_function",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022_se_translator_function",
                "score": 0.3206652104854584,
                "sortText": "415bd1c5_se_translator_function",
                "textEdit": {
                    "newText": "_se_translator_function",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <eh.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <eh.h>"
                },
                "filterText": "unexpected_handler",
                "insertText": "unexpected_handler",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022unexpected_handler",
                "score": 0.3206652104854584,
                "sortText": "415bd1c5unexpected_handler",
                "textEdit": {
                    "newText": "unexpected_handler",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Monobj<Money>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "get_money",
                "insertText": "get_money",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022get_money(Money &Val_arg, bool Intl_arg = false)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4get_money",
                "textEdit": {
                    "newText": "get_money",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Timeobj<Elem, tm *>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "get_time",
                "insertText": "get_time",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022get_time(tm *Tptr_arg, const Elem *Fmt_arg)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4get_time",
                "textEdit": {
                    "newText": "get_time",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_ostream<Elem, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<<(basic_ostream<Elem, Traits> &Ostr, const _Smanip<Arg> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_ostream<Elem2, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<<(basic_ostream<Elem2, Traits> &Ostr, const _Fillobj<Elem> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_ostream<Elem, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<<(basic_ostream<Elem, Traits> &Ostr, const _Quote_in<Elem, Traits, Alloc> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_ostream<Elem, OsTraits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<<(basic_ostream<Elem, OsTraits> &Ostr, const _Quote_out<Elem, Traits, Sizet> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_ostream<Elem, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<<(basic_ostream<Elem, Traits> &Ostr, const _Monobj<Money> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_ostream<Elem2, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<<(basic_ostream<Elem2, Traits> &Ostr, const _Timeobj<Elem, Ptr> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_istream<Elem, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>>(basic_istream<Elem, Traits> &Istr, const _Monobj<Money> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_istream<Elem2, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>>(basic_istream<Elem2, Traits> &Istr, const _Timeobj<Elem, Ptr> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_istream<Elem, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>>(basic_istream<Elem, Traits> &Istr, const _Smanip<Arg> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_istream<Elem, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>>(basic_istream<Elem, Traits> &Istr, const _Quote_in<Elem, Traits, Alloc> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Monobj<const Money>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "put_money",
                "insertText": "put_money",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022put_money(const Money &Val_arg, bool Intl_arg = false)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4put_money",
                "textEdit": {
                    "newText": "put_money",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Timeobj<Elem, const tm *>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "put_time",
                "insertText": "put_time",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022put_time(const tm *Tptr_arg, const Elem *Fmt_arg)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4put_time",
                "textEdit": {
                    "newText": "put_time",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Quote_in<Elem, Traits, Alloc>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "quoted",
                "insertText": "quoted",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022quoted(basic_string<Elem, Traits, Alloc> &Str, Elem Delim = _Elem('\"'), Elem Escape = _Elem('\\\\'))",
                "score": 0.27917516231536865,
                "sortText": "41710ff4quoted",
                "textEdit": {
                    "newText": "quoted",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Quote_out<Elem, Traits, typename basic_string<Elem, Traits, Alloc>::size_type>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "quoted",
                "insertText": "quoted",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022quoted(const basic_string<Elem, Traits, Alloc> &Str, Elem Delim = _Elem('\"'), Elem Escape = _Elem('\\\\'))",
                "score": 0.27917516231536865,
                "sortText": "41710ff4quoted",
                "textEdit": {
                    "newText": "quoted",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Quote_out<Elem, void, size_t>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "quoted",
                "insertText": "quoted",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022quoted(const Elem *Ptr, Elem Delim = _Elem('\"'), Elem Escape = _Elem('\\\\'))",
                "score": 0.27917516231536865,
                "sortText": "41710ff4quoted",
                "textEdit": {
                    "newText": "quoted",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Fillobj<Elem>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "setfill",
                "insertText": "setfill",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022setfill(Elem Ch)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4setfill",
                "textEdit": {
                    "newText": "setfill",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <chrono>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <chrono>"
                },
                "filterText": "high_resolution_clock",
                "insertText": "chrono::high_resolution_clock",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022chrono::high_resolution_clock",
                "score": 0.2609104514122009,
                "sortText": "417a69f2high_resolution_clock",
                "textEdit": {
                    "newText": "chrono::high_resolution_clock",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <chrono>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <chrono>"
                },
                "filterText": "system_clock",
                "insertText": "chrono::system_clock",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022chrono::system_clock",
                "score": 0.2609104514122009,
                "sortText": "417a69f2system_clock",
                "textEdit": {
                    "newText": "chrono::system_clock",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "_Pragma",
                "insertText": "_Pragma",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " _Pragma",
                "score": 0.22312210500240326,
                "sortText": "419b85e1_Pragma",
                "textEdit": {
                    "newText": "_Pragma",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__BASE_FILE__",
                "insertText": "__BASE_FILE__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __BASE_FILE__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__BASE_FILE__",
                "textEdit": {
                    "newText": "__BASE_FILE__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__COUNTER__",
                "insertText": "__COUNTER__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __COUNTER__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__COUNTER__",
                "textEdit": {
                    "newText": "__COUNTER__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__DATE__",
                "insertText": "__DATE__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __DATE__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__DATE__",
                "textEdit": {
                    "newText": "__DATE__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__FILE_NAME__",
                "insertText": "__FILE_NAME__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __FILE_NAME__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__FILE_NAME__",
                "textEdit": {
                    "newText": "__FILE_NAME__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__FILE__",
                "insertText": "__FILE__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __FILE__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__FILE__",
                "textEdit": {
                    "newText": "__FILE__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__FLT_EVAL_METHOD__",
                "insertText": "__FLT_EVAL_METHOD__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __FLT_EVAL_METHOD__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__FLT_EVAL_METHOD__",
                "textEdit": {
                    "newText": "__FLT_EVAL_METHOD__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__INCLUDE_LEVEL__",
                "insertText": "__INCLUDE_LEVEL__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __INCLUDE_LEVEL__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__INCLUDE_LEVEL__",
                "textEdit": {
                    "newText": "__INCLUDE_LEVEL__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__LINE__",
                "insertText": "__LINE__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __LINE__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__LINE__",
                "textEdit": {
                    "newText": "__LINE__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__TIMESTAMP__",
                "insertText": "__TIMESTAMP__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __TIMESTAMP__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__TIMESTAMP__",
                "textEdit": {
                    "newText": "__TIMESTAMP__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__TIME__",
                "insertText": "__TIME__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __TIME__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__TIME__",
                "textEdit": {
                    "newText": "__TIME__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__building_module",
                "insertText": "__building_module",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __building_module",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__building_module",
                "textEdit": {
                    "newText": "__building_module",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_attribute",
                "insertText": "__has_attribute",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_attribute",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_attribute",
                "textEdit": {
                    "newText": "__has_attribute",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_builtin",
                "insertText": "__has_builtin",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_builtin",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_builtin",
                "textEdit": {
                    "newText": "__has_builtin",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_constexpr_builtin",
                "insertText": "__has_constexpr_builtin",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_constexpr_builtin",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_constexpr_builtin",
                "textEdit": {
                    "newText": "__has_constexpr_builtin",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_cpp_attribute",
                "insertText": "__has_cpp_attribute",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_cpp_attribute",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_cpp_attribute",
                "textEdit": {
                    "newText": "__has_cpp_attribute",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_declspec_attribute",
                "insertText": "__has_declspec_attribute",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_declspec_attribute",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_declspec_attribute",
                "textEdit": {
                    "newText": "__has_declspec_attribute",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_embed",
                "insertText": "__has_embed",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_embed",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_embed",
                "textEdit": {
                    "newText": "__has_embed",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_extension",
                "insertText": "__has_extension",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_extension",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_extension",
                "textEdit": {
                    "newText": "__has_extension",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_feature",
                "insertText": "__has_feature",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_feature",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_feature",
                "textEdit": {
                    "newText": "__has_feature",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_include",
                "insertText": "__has_include",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_include",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_include",
                "textEdit": {
                    "newText": "__has_include",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_include_next",
                "insertText": "__has_include_next",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_include_next",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_include_next",
                "textEdit": {
                    "newText": "__has_include_next",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_warning",
                "insertText": "__has_warning",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_warning",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_warning",
                "textEdit": {
                    "newText": "__has_warning",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['Muchie', 'struct', 'size_t', 'type_info', '_Nonnull', '_Null_unspecified', '_Nullable', 'alignas', 'auto', 'bool', 'char', 'char16_t', 'char32_t', 'class', 'const', 'constexpr', 'decltype', 'double', 'enum', 'explicit', 'extern', 'float', 'friend', 'inline', 'int', 'long', 'mutable', 'operator', 'private', 'protected', 'public', 'short', 'signed', 'static', 'static_assert', 'template', 'thread_local', 'typedef', 'typename', 'union', 'unsigned', 'using', 'using', 'virtual', 'void', 'volatile', 'wchar_t', 'concurrency', 'chrono_literals', 'Concurrency::details::platform', 'char_traits', 'messages', 'messages_base', 'messages_byname', 'once_flag', '_se_translator_function', 'unexpected_handler', 'get_money', 'get_time', 'operator<<', 'operator<<', 'operator<<', 'operator<<', 'operator<<', 'operator<<', 'operator>>', 'operator>>', 'operator>>', 'operator>>', 'put_money', 'put_time', 'quoted', 'quoted', 'quoted', 'setfill', 'chrono::high_resolution_clock', 'chrono::system_clock', '_Pragma', '__BASE_FILE__', '__COUNTER__', '__DATE__', '__FILE_NAME__', '__FILE__', '__FLT_EVAL_METHOD__', '__INCLUDE_LEVEL__', '__LINE__', '__TIMESTAMP__', '__TIME__', '__building_module', '__has_attribute', '__has_builtin', '__has_constexpr_builtin', '__has_cpp_attribute', '__has_declspec_attribute', '__has_embed', '__has_extension', '__has_feature', '__has_include', '__has_include_next', '__has_warning']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_file_not_found",
                "message": "'bits/stdc++.h' file not found",
                "range": {
                    "end": {
                        "character": 24,
                        "line": 0
                    },
                    "start": {
                        "character": 9,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ext_using_undefined_std",
                "message": "Using directive refers to implicitly-defined namespace 'std'",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 2
                    },
                    "start": {
                        "character": 16,
                        "line": 2
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 4
                    },
                    "start": {
                        "character": 21,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 39,
                        "line": 5
                    },
                    "start": {
                        "character": 25,
                        "line": 5
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'A'",
                "range": {
                    "end": {
                        "character": 11,
                        "line": 10
                    },
                    "start": {
                        "character": 10,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 77
                    },
                    "start": {
                        "character": 1,
                        "line": 77
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 78
                    },
                    "start": {
                        "character": 1,
                        "line": 78
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 79
                    },
                    "start": {
                        "character": 1,
                        "line": 79
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 14,
                        "line": 80
                    },
                    "start": {
                        "character": 8,
                        "line": 80
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 81
                    },
                    "start": {
                        "character": 1,
                        "line": 81
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 115
                    },
                    "start": {
                        "character": 21,
                        "line": 115
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 128
                    },
                    "start": {
                        "character": 30,
                        "line": 128
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 27,
                        "line": 152
                    },
                    "start": {
                        "character": 21,
                        "line": 152
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 173
                    },
                    "start": {
                        "character": 1,
                        "line": 173
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 220
                    },
                    "start": {
                        "character": 30,
                        "line": 220
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 220
                    },
                    "start": {
                        "character": 49,
                        "line": 220
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 32,
                        "line": 244
                    },
                    "start": {
                        "character": 26,
                        "line": 244
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 51,
                        "line": 244
                    },
                    "start": {
                        "character": 45,
                        "line": 244
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 284
                    },
                    "start": {
                        "character": 29,
                        "line": 284
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 54,
                        "line": 284
                    },
                    "start": {
                        "character": 48,
                        "line": 284
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 320
                    },
                    "start": {
                        "character": 30,
                        "line": 320
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 14
    }
}
Diagnostics received from LSP.
Errors received: [[0, [9, 24]], [4, [21, 35]], [5, [25, 39]], [10, [10, 11]], [77, [1, 7]], [78, [1, 7]], [79, [1, 7]], [80, [8, 14]], [81, [1, 7]], [115, [21, 26]], [128, [30, 36]], [152, [21, 27]], [173, [1, 7]], [220, [30, 36]], [220, [49, 55]], [244, [26, 32]], [244, [45, 51]], [284, [29, 35]], [284, [48, 54]], [320, [30, 36]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_file_not_found",
                "message": "'bits/stdc++.h' file not found",
                "range": {
                    "end": {
                        "character": 24,
                        "line": 0
                    },
                    "start": {
                        "character": 9,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ext_using_undefined_std",
                "message": "Using directive refers to implicitly-defined namespace 'std'",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 2
                    },
                    "start": {
                        "character": 16,
                        "line": 2
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 4
                    },
                    "start": {
                        "character": 21,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 39,
                        "line": 5
                    },
                    "start": {
                        "character": 25,
                        "line": 5
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 77
                    },
                    "start": {
                        "character": 1,
                        "line": 77
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 78
                    },
                    "start": {
                        "character": 1,
                        "line": 78
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 79
                    },
                    "start": {
                        "character": 1,
                        "line": 79
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 14,
                        "line": 80
                    },
                    "start": {
                        "character": 8,
                        "line": 80
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 81
                    },
                    "start": {
                        "character": 1,
                        "line": 81
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 115
                    },
                    "start": {
                        "character": 21,
                        "line": 115
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 128
                    },
                    "start": {
                        "character": 30,
                        "line": 128
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 27,
                        "line": 152
                    },
                    "start": {
                        "character": 21,
                        "line": 152
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 173
                    },
                    "start": {
                        "character": 1,
                        "line": 173
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 220
                    },
                    "start": {
                        "character": 30,
                        "line": 220
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 220
                    },
                    "start": {
                        "character": 49,
                        "line": 220
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 32,
                        "line": 244
                    },
                    "start": {
                        "character": 26,
                        "line": 244
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 51,
                        "line": 244
                    },
                    "start": {
                        "character": 45,
                        "line": 244
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 284
                    },
                    "start": {
                        "character": 29,
                        "line": 284
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 54,
                        "line": 284
                    },
                    "start": {
                        "character": 48,
                        "line": 284
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 320
                    },
                    "start": {
                        "character": 30,
                        "line": 320
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 320
                    },
                    "start": {
                        "character": 49,
                        "line": 320
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 15
    }
}
Diagnostics received from LSP.
Errors received: [[0, [9, 24]], [4, [21, 35]], [5, [25, 39]], [77, [1, 7]], [78, [1, 7]], [79, [1, 7]], [80, [8, 14]], [81, [1, 7]], [115, [21, 26]], [128, [30, 36]], [152, [21, 27]], [173, [1, 7]], [220, [30, 36]], [220, [49, 55]], [244, [26, 32]], [244, [45, 51]], [284, [29, 35]], [284, [48, 54]], [320, [30, 36]], [320, [49, 55]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "muchie de la x la y cu costul cost"
                },
                "filterText": "Muchie",
                "insertText": "Muchie",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Muchie",
                "score": 2.66562557220459,
                "sortText": "3fd56664Muchie",
                "textEdit": {
                    "newText": "Muchie",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 1.1117926836013794,
                "sortText": "4071b0c7struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 1.0194766521453857,
                "sortText": "407d81casize_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "type_info",
                "insertText": "type_info",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " type_info",
                "score": 0.816092848777771,
                "sortText": "40af148atype_info",
                "textEdit": {
                    "newText": "type_info",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.7694156765937805,
                "sortText": "40bb0793_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.7694156765937805,
                "sortText": "40bb0793_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.7694156765937805,
                "sortText": "40bb0793_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "alignas",
                "insertText": "alignas",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignas(expression)",
                "score": 0.7694156765937805,
                "sortText": "40bb0793alignas",
                "textEdit": {
                    "newText": "alignas",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.7694156765937805,
                "sortText": "40bb0793auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.7694156765937805,
                "sortText": "40bb0793bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.7694156765937805,
                "sortText": "40bb0793char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.7694156765937805,
                "sortText": "40bb0793char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.7694156765937805,
                "sortText": "40bb0793char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.7694156765937805,
                "sortText": "40bb0793class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.7694156765937805,
                "sortText": "40bb0793const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.7694156765937805,
                "sortText": "40bb0793constexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.7694156765937805,
                "sortText": "40bb0793decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.7694156765937805,
                "sortText": "40bb0793double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.7694156765937805,
                "sortText": "40bb0793enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "explicit",
                "insertText": "explicit",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " explicit",
                "score": 0.7694156765937805,
                "sortText": "40bb0793explicit",
                "textEdit": {
                    "newText": "explicit",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "extern",
                "insertText": "extern",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " extern",
                "score": 0.7694156765937805,
                "sortText": "40bb0793extern",
                "textEdit": {
                    "newText": "extern",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.7694156765937805,
                "sortText": "40bb0793float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "friend",
                "insertText": "friend",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " friend",
                "score": 0.7694156765937805,
                "sortText": "40bb0793friend",
                "textEdit": {
                    "newText": "friend",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "inline",
                "insertText": "inline",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " inline",
                "score": 0.7694156765937805,
                "sortText": "40bb0793inline",
                "textEdit": {
                    "newText": "inline",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.7694156765937805,
                "sortText": "40bb0793int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.7694156765937805,
                "sortText": "40bb0793long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "mutable",
                "insertText": "mutable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " mutable",
                "score": 0.7694156765937805,
                "sortText": "40bb0793mutable",
                "textEdit": {
                    "newText": "mutable",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.7694156765937805,
                "sortText": "40bb0793operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "private",
                "insertText": "private",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " private",
                "score": 0.7694156765937805,
                "sortText": "40bb0793private",
                "textEdit": {
                    "newText": "private",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "protected",
                "insertText": "protected",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " protected",
                "score": 0.7694156765937805,
                "sortText": "40bb0793protected",
                "textEdit": {
                    "newText": "protected",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "public",
                "insertText": "public",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " public",
                "score": 0.7694156765937805,
                "sortText": "40bb0793public",
                "textEdit": {
                    "newText": "public",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.7694156765937805,
                "sortText": "40bb0793short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.7694156765937805,
                "sortText": "40bb0793signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "static",
                "insertText": "static",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " static",
                "score": 0.7694156765937805,
                "sortText": "40bb0793static",
                "textEdit": {
                    "newText": "static",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "static_assert",
                "insertText": "static_assert",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_assert(expression, message);",
                "score": 0.7694156765937805,
                "sortText": "40bb0793static_assert",
                "textEdit": {
                    "newText": "static_assert",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "template",
                "insertText": "template",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " template",
                "score": 0.7694156765937805,
                "sortText": "40bb0793template",
                "textEdit": {
                    "newText": "template",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "thread_local",
                "insertText": "thread_local",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " thread_local",
                "score": 0.7694156765937805,
                "sortText": "40bb0793thread_local",
                "textEdit": {
                    "newText": "thread_local",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "typedef",
                "insertText": "typedef",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typedef type name;",
                "score": 0.7694156765937805,
                "sortText": "40bb0793typedef",
                "textEdit": {
                    "newText": "typedef",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.7694156765937805,
                "sortText": "40bb0793typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.7694156765937805,
                "sortText": "40bb0793union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.7694156765937805,
                "sortText": "40bb0793unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using qualifier::name;",
                "score": 0.7694156765937805,
                "sortText": "40bb0793using",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using name = type;",
                "score": 0.7694156765937805,
                "sortText": "40bb0793using",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "virtual",
                "insertText": "virtual",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " virtual",
                "score": 0.7694156765937805,
                "sortText": "40bb0793virtual",
                "textEdit": {
                    "newText": "virtual",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.7694156765937805,
                "sortText": "40bb0793void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.7694156765937805,
                "sortText": "40bb0793volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.7694156765937805,
                "sortText": "40bb0793wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "concurrency",
                "insertText": "concurrency",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " concurrency",
                "score": 0.7385311722755432,
                "sortText": "40c2ef9fconcurrency",
                "textEdit": {
                    "newText": "concurrency",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "chrono_literals",
                "insertText": "chrono_literals",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " chrono_literals",
                "score": 0.5800500512123108,
                "sortText": "40eb81d7chrono_literals",
                "textEdit": {
                    "newText": "chrono_literals",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "platform",
                "insertText": "Concurrency::details::platform",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " Concurrency::details::platform",
                "score": 0.5557445883750916,
                "sortText": "40f1bab9platform",
                "textEdit": {
                    "newText": "Concurrency::details::platform",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string>"
                },
                "filterText": "char_traits",
                "insertText": "char_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022char_traits<class Elem>",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98char_traits",
                "textEdit": {
                    "newText": "char_traits",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "messages",
                "insertText": "messages",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022messages<class Elem>",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98messages",
                "textEdit": {
                    "newText": "messages",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "messages_base",
                "insertText": "messages_base",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022messages_base",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98messages_base",
                "textEdit": {
                    "newText": "messages_base",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "messages_byname",
                "insertText": "messages_byname",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022messages_byname<class Elem>",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98messages_byname",
                "textEdit": {
                    "newText": "messages_byname",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "once_flag",
                "insertText": "once_flag",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022once_flag",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98once_flag",
                "textEdit": {
                    "newText": "once_flag",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <eh.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <eh.h>"
                },
                "filterText": "_se_translator_function",
                "insertText": "_se_translator_function",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022_se_translator_function",
                "score": 0.3206652104854584,
                "sortText": "415bd1c5_se_translator_function",
                "textEdit": {
                    "newText": "_se_translator_function",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <eh.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <eh.h>"
                },
                "filterText": "unexpected_handler",
                "insertText": "unexpected_handler",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022unexpected_handler",
                "score": 0.3206652104854584,
                "sortText": "415bd1c5unexpected_handler",
                "textEdit": {
                    "newText": "unexpected_handler",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Monobj<Money>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "get_money",
                "insertText": "get_money",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022get_money(Money &Val_arg, bool Intl_arg = false)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4get_money",
                "textEdit": {
                    "newText": "get_money",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Timeobj<Elem, tm *>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "get_time",
                "insertText": "get_time",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022get_time(tm *Tptr_arg, const Elem *Fmt_arg)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4get_time",
                "textEdit": {
                    "newText": "get_time",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_ostream<Elem, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<<(basic_ostream<Elem, Traits> &Ostr, const _Smanip<Arg> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_ostream<Elem2, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<<(basic_ostream<Elem2, Traits> &Ostr, const _Fillobj<Elem> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_ostream<Elem, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<<(basic_ostream<Elem, Traits> &Ostr, const _Quote_in<Elem, Traits, Alloc> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_ostream<Elem, OsTraits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<<(basic_ostream<Elem, OsTraits> &Ostr, const _Quote_out<Elem, Traits, Sizet> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_ostream<Elem, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<<(basic_ostream<Elem, Traits> &Ostr, const _Monobj<Money> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_ostream<Elem2, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<<(basic_ostream<Elem2, Traits> &Ostr, const _Timeobj<Elem, Ptr> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_istream<Elem, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>>(basic_istream<Elem, Traits> &Istr, const _Monobj<Money> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_istream<Elem2, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>>(basic_istream<Elem2, Traits> &Istr, const _Timeobj<Elem, Ptr> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_istream<Elem, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>>(basic_istream<Elem, Traits> &Istr, const _Smanip<Arg> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_istream<Elem, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>>(basic_istream<Elem, Traits> &Istr, const _Quote_in<Elem, Traits, Alloc> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Monobj<const Money>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "put_money",
                "insertText": "put_money",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022put_money(const Money &Val_arg, bool Intl_arg = false)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4put_money",
                "textEdit": {
                    "newText": "put_money",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Timeobj<Elem, const tm *>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "put_time",
                "insertText": "put_time",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022put_time(const tm *Tptr_arg, const Elem *Fmt_arg)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4put_time",
                "textEdit": {
                    "newText": "put_time",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Quote_in<Elem, Traits, Alloc>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "quoted",
                "insertText": "quoted",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022quoted(basic_string<Elem, Traits, Alloc> &Str, Elem Delim = _Elem('\"'), Elem Escape = _Elem('\\\\'))",
                "score": 0.27917516231536865,
                "sortText": "41710ff4quoted",
                "textEdit": {
                    "newText": "quoted",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Quote_out<Elem, Traits, typename basic_string<Elem, Traits, Alloc>::size_type>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "quoted",
                "insertText": "quoted",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022quoted(const basic_string<Elem, Traits, Alloc> &Str, Elem Delim = _Elem('\"'), Elem Escape = _Elem('\\\\'))",
                "score": 0.27917516231536865,
                "sortText": "41710ff4quoted",
                "textEdit": {
                    "newText": "quoted",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Quote_out<Elem, void, size_t>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "quoted",
                "insertText": "quoted",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022quoted(const Elem *Ptr, Elem Delim = _Elem('\"'), Elem Escape = _Elem('\\\\'))",
                "score": 0.27917516231536865,
                "sortText": "41710ff4quoted",
                "textEdit": {
                    "newText": "quoted",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Fillobj<Elem>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "setfill",
                "insertText": "setfill",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022setfill(Elem Ch)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4setfill",
                "textEdit": {
                    "newText": "setfill",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <chrono>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <chrono>"
                },
                "filterText": "high_resolution_clock",
                "insertText": "chrono::high_resolution_clock",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022chrono::high_resolution_clock",
                "score": 0.2609104514122009,
                "sortText": "417a69f2high_resolution_clock",
                "textEdit": {
                    "newText": "chrono::high_resolution_clock",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <chrono>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <chrono>"
                },
                "filterText": "system_clock",
                "insertText": "chrono::system_clock",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022chrono::system_clock",
                "score": 0.2609104514122009,
                "sortText": "417a69f2system_clock",
                "textEdit": {
                    "newText": "chrono::system_clock",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "_Pragma",
                "insertText": "_Pragma",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " _Pragma",
                "score": 0.22312210500240326,
                "sortText": "419b85e1_Pragma",
                "textEdit": {
                    "newText": "_Pragma",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__BASE_FILE__",
                "insertText": "__BASE_FILE__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __BASE_FILE__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__BASE_FILE__",
                "textEdit": {
                    "newText": "__BASE_FILE__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__COUNTER__",
                "insertText": "__COUNTER__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __COUNTER__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__COUNTER__",
                "textEdit": {
                    "newText": "__COUNTER__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__DATE__",
                "insertText": "__DATE__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __DATE__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__DATE__",
                "textEdit": {
                    "newText": "__DATE__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__FILE_NAME__",
                "insertText": "__FILE_NAME__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __FILE_NAME__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__FILE_NAME__",
                "textEdit": {
                    "newText": "__FILE_NAME__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__FILE__",
                "insertText": "__FILE__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __FILE__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__FILE__",
                "textEdit": {
                    "newText": "__FILE__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__FLT_EVAL_METHOD__",
                "insertText": "__FLT_EVAL_METHOD__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __FLT_EVAL_METHOD__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__FLT_EVAL_METHOD__",
                "textEdit": {
                    "newText": "__FLT_EVAL_METHOD__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__INCLUDE_LEVEL__",
                "insertText": "__INCLUDE_LEVEL__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __INCLUDE_LEVEL__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__INCLUDE_LEVEL__",
                "textEdit": {
                    "newText": "__INCLUDE_LEVEL__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__LINE__",
                "insertText": "__LINE__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __LINE__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__LINE__",
                "textEdit": {
                    "newText": "__LINE__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__TIMESTAMP__",
                "insertText": "__TIMESTAMP__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __TIMESTAMP__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__TIMESTAMP__",
                "textEdit": {
                    "newText": "__TIMESTAMP__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__TIME__",
                "insertText": "__TIME__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __TIME__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__TIME__",
                "textEdit": {
                    "newText": "__TIME__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__building_module",
                "insertText": "__building_module",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __building_module",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__building_module",
                "textEdit": {
                    "newText": "__building_module",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_attribute",
                "insertText": "__has_attribute",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_attribute",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_attribute",
                "textEdit": {
                    "newText": "__has_attribute",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_builtin",
                "insertText": "__has_builtin",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_builtin",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_builtin",
                "textEdit": {
                    "newText": "__has_builtin",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_constexpr_builtin",
                "insertText": "__has_constexpr_builtin",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_constexpr_builtin",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_constexpr_builtin",
                "textEdit": {
                    "newText": "__has_constexpr_builtin",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_cpp_attribute",
                "insertText": "__has_cpp_attribute",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_cpp_attribute",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_cpp_attribute",
                "textEdit": {
                    "newText": "__has_cpp_attribute",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_declspec_attribute",
                "insertText": "__has_declspec_attribute",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_declspec_attribute",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_declspec_attribute",
                "textEdit": {
                    "newText": "__has_declspec_attribute",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_embed",
                "insertText": "__has_embed",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_embed",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_embed",
                "textEdit": {
                    "newText": "__has_embed",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_extension",
                "insertText": "__has_extension",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_extension",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_extension",
                "textEdit": {
                    "newText": "__has_extension",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_feature",
                "insertText": "__has_feature",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_feature",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_feature",
                "textEdit": {
                    "newText": "__has_feature",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_include",
                "insertText": "__has_include",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_include",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_include",
                "textEdit": {
                    "newText": "__has_include",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_include_next",
                "insertText": "__has_include_next",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_include_next",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_include_next",
                "textEdit": {
                    "newText": "__has_include_next",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_warning",
                "insertText": "__has_warning",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_warning",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_warning",
                "textEdit": {
                    "newText": "__has_warning",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['Muchie', 'struct', 'size_t', 'type_info', '_Nonnull', '_Null_unspecified', '_Nullable', 'alignas', 'auto', 'bool', 'char', 'char16_t', 'char32_t', 'class', 'const', 'constexpr', 'decltype', 'double', 'enum', 'explicit', 'extern', 'float', 'friend', 'inline', 'int', 'long', 'mutable', 'operator', 'private', 'protected', 'public', 'short', 'signed', 'static', 'static_assert', 'template', 'thread_local', 'typedef', 'typename', 'union', 'unsigned', 'using', 'using', 'virtual', 'void', 'volatile', 'wchar_t', 'concurrency', 'chrono_literals', 'Concurrency::details::platform', 'char_traits', 'messages', 'messages_base', 'messages_byname', 'once_flag', '_se_translator_function', 'unexpected_handler', 'get_money', 'get_time', 'operator<<', 'operator<<', 'operator<<', 'operator<<', 'operator<<', 'operator<<', 'operator>>', 'operator>>', 'operator>>', 'operator>>', 'put_money', 'put_time', 'quoted', 'quoted', 'quoted', 'setfill', 'chrono::high_resolution_clock', 'chrono::system_clock', '_Pragma', '__BASE_FILE__', '__COUNTER__', '__DATE__', '__FILE_NAME__', '__FILE__', '__FLT_EVAL_METHOD__', '__INCLUDE_LEVEL__', '__LINE__', '__TIMESTAMP__', '__TIME__', '__building_module', '__has_attribute', '__has_builtin', '__has_constexpr_builtin', '__has_cpp_attribute', '__has_declspec_attribute', '__has_embed', '__has_extension', '__has_feature', '__has_include', '__has_include_next', '__has_warning']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_file_not_found",
                "message": "'bits/stdc++.h' file not found",
                "range": {
                    "end": {
                        "character": 24,
                        "line": 0
                    },
                    "start": {
                        "character": 9,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ext_using_undefined_std",
                "message": "Using directive refers to implicitly-defined namespace 'std'",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 2
                    },
                    "start": {
                        "character": 16,
                        "line": 2
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 4
                    },
                    "start": {
                        "character": 21,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 39,
                        "line": 5
                    },
                    "start": {
                        "character": 25,
                        "line": 5
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 78
                    },
                    "start": {
                        "character": 1,
                        "line": 78
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 79
                    },
                    "start": {
                        "character": 1,
                        "line": 79
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 80
                    },
                    "start": {
                        "character": 1,
                        "line": 80
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 14,
                        "line": 81
                    },
                    "start": {
                        "character": 8,
                        "line": 81
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 82
                    },
                    "start": {
                        "character": 1,
                        "line": 82
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 116
                    },
                    "start": {
                        "character": 21,
                        "line": 116
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 129
                    },
                    "start": {
                        "character": 30,
                        "line": 129
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 27,
                        "line": 153
                    },
                    "start": {
                        "character": 21,
                        "line": 153
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 174
                    },
                    "start": {
                        "character": 1,
                        "line": 174
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 221
                    },
                    "start": {
                        "character": 30,
                        "line": 221
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 221
                    },
                    "start": {
                        "character": 49,
                        "line": 221
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 32,
                        "line": 245
                    },
                    "start": {
                        "character": 26,
                        "line": 245
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 51,
                        "line": 245
                    },
                    "start": {
                        "character": 45,
                        "line": 245
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 285
                    },
                    "start": {
                        "character": 29,
                        "line": 285
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 54,
                        "line": 285
                    },
                    "start": {
                        "character": 48,
                        "line": 285
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 321
                    },
                    "start": {
                        "character": 30,
                        "line": 321
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 321
                    },
                    "start": {
                        "character": 49,
                        "line": 321
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 16
    }
}
Diagnostics received from LSP.
Errors received: [[0, [9, 24]], [4, [21, 35]], [5, [25, 39]], [78, [1, 7]], [79, [1, 7]], [80, [1, 7]], [81, [8, 14]], [82, [1, 7]], [116, [21, 26]], [129, [30, 36]], [153, [21, 27]], [174, [1, 7]], [221, [30, 36]], [221, [49, 55]], [245, [26, 32]], [245, [45, 51]], [285, [29, 35]], [285, [48, 54]], [321, [30, 36]], [321, [49, 55]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "muchie de la x la y cu costul cost"
                },
                "filterText": "Muchie",
                "insertText": "Muchie",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Muchie",
                "score": 2.66562557220459,
                "sortText": "3fd56664Muchie",
                "textEdit": {
                    "newText": "Muchie",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 1.1117926836013794,
                "sortText": "4071b0c7struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 1.0194766521453857,
                "sortText": "407d81casize_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "type_info",
                "insertText": "type_info",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " type_info",
                "score": 0.816092848777771,
                "sortText": "40af148atype_info",
                "textEdit": {
                    "newText": "type_info",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.7694156765937805,
                "sortText": "40bb0793_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.7694156765937805,
                "sortText": "40bb0793_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.7694156765937805,
                "sortText": "40bb0793_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "alignas",
                "insertText": "alignas",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignas(expression)",
                "score": 0.7694156765937805,
                "sortText": "40bb0793alignas",
                "textEdit": {
                    "newText": "alignas",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.7694156765937805,
                "sortText": "40bb0793auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.7694156765937805,
                "sortText": "40bb0793bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.7694156765937805,
                "sortText": "40bb0793char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.7694156765937805,
                "sortText": "40bb0793char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.7694156765937805,
                "sortText": "40bb0793char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.7694156765937805,
                "sortText": "40bb0793class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.7694156765937805,
                "sortText": "40bb0793const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.7694156765937805,
                "sortText": "40bb0793constexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.7694156765937805,
                "sortText": "40bb0793decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.7694156765937805,
                "sortText": "40bb0793double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.7694156765937805,
                "sortText": "40bb0793enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "explicit",
                "insertText": "explicit",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " explicit",
                "score": 0.7694156765937805,
                "sortText": "40bb0793explicit",
                "textEdit": {
                    "newText": "explicit",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "extern",
                "insertText": "extern",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " extern",
                "score": 0.7694156765937805,
                "sortText": "40bb0793extern",
                "textEdit": {
                    "newText": "extern",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.7694156765937805,
                "sortText": "40bb0793float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "friend",
                "insertText": "friend",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " friend",
                "score": 0.7694156765937805,
                "sortText": "40bb0793friend",
                "textEdit": {
                    "newText": "friend",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "inline",
                "insertText": "inline",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " inline",
                "score": 0.7694156765937805,
                "sortText": "40bb0793inline",
                "textEdit": {
                    "newText": "inline",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.7694156765937805,
                "sortText": "40bb0793int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.7694156765937805,
                "sortText": "40bb0793long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "mutable",
                "insertText": "mutable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " mutable",
                "score": 0.7694156765937805,
                "sortText": "40bb0793mutable",
                "textEdit": {
                    "newText": "mutable",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.7694156765937805,
                "sortText": "40bb0793operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "private",
                "insertText": "private",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " private",
                "score": 0.7694156765937805,
                "sortText": "40bb0793private",
                "textEdit": {
                    "newText": "private",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "protected",
                "insertText": "protected",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " protected",
                "score": 0.7694156765937805,
                "sortText": "40bb0793protected",
                "textEdit": {
                    "newText": "protected",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "public",
                "insertText": "public",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " public",
                "score": 0.7694156765937805,
                "sortText": "40bb0793public",
                "textEdit": {
                    "newText": "public",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.7694156765937805,
                "sortText": "40bb0793short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.7694156765937805,
                "sortText": "40bb0793signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "static",
                "insertText": "static",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " static",
                "score": 0.7694156765937805,
                "sortText": "40bb0793static",
                "textEdit": {
                    "newText": "static",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "static_assert",
                "insertText": "static_assert",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_assert(expression, message);",
                "score": 0.7694156765937805,
                "sortText": "40bb0793static_assert",
                "textEdit": {
                    "newText": "static_assert",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "template",
                "insertText": "template",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " template",
                "score": 0.7694156765937805,
                "sortText": "40bb0793template",
                "textEdit": {
                    "newText": "template",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "thread_local",
                "insertText": "thread_local",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " thread_local",
                "score": 0.7694156765937805,
                "sortText": "40bb0793thread_local",
                "textEdit": {
                    "newText": "thread_local",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "typedef",
                "insertText": "typedef",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typedef type name;",
                "score": 0.7694156765937805,
                "sortText": "40bb0793typedef",
                "textEdit": {
                    "newText": "typedef",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.7694156765937805,
                "sortText": "40bb0793typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.7694156765937805,
                "sortText": "40bb0793union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.7694156765937805,
                "sortText": "40bb0793unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using qualifier::name;",
                "score": 0.7694156765937805,
                "sortText": "40bb0793using",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using name = type;",
                "score": 0.7694156765937805,
                "sortText": "40bb0793using",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "virtual",
                "insertText": "virtual",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " virtual",
                "score": 0.7694156765937805,
                "sortText": "40bb0793virtual",
                "textEdit": {
                    "newText": "virtual",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.7694156765937805,
                "sortText": "40bb0793void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.7694156765937805,
                "sortText": "40bb0793volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.7694156765937805,
                "sortText": "40bb0793wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "concurrency",
                "insertText": "concurrency",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " concurrency",
                "score": 0.7385311722755432,
                "sortText": "40c2ef9fconcurrency",
                "textEdit": {
                    "newText": "concurrency",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "chrono_literals",
                "insertText": "chrono_literals",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " chrono_literals",
                "score": 0.5800500512123108,
                "sortText": "40eb81d7chrono_literals",
                "textEdit": {
                    "newText": "chrono_literals",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "platform",
                "insertText": "Concurrency::details::platform",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " Concurrency::details::platform",
                "score": 0.5557445883750916,
                "sortText": "40f1bab9platform",
                "textEdit": {
                    "newText": "Concurrency::details::platform",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string>"
                },
                "filterText": "char_traits",
                "insertText": "char_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022char_traits<class Elem>",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98char_traits",
                "textEdit": {
                    "newText": "char_traits",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "messages",
                "insertText": "messages",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022messages<class Elem>",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98messages",
                "textEdit": {
                    "newText": "messages",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "messages_base",
                "insertText": "messages_base",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022messages_base",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98messages_base",
                "textEdit": {
                    "newText": "messages_base",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "messages_byname",
                "insertText": "messages_byname",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022messages_byname<class Elem>",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98messages_byname",
                "textEdit": {
                    "newText": "messages_byname",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "once_flag",
                "insertText": "once_flag",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022once_flag",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98once_flag",
                "textEdit": {
                    "newText": "once_flag",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <eh.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <eh.h>"
                },
                "filterText": "_se_translator_function",
                "insertText": "_se_translator_function",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022_se_translator_function",
                "score": 0.3206652104854584,
                "sortText": "415bd1c5_se_translator_function",
                "textEdit": {
                    "newText": "_se_translator_function",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <eh.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <eh.h>"
                },
                "filterText": "unexpected_handler",
                "insertText": "unexpected_handler",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022unexpected_handler",
                "score": 0.3206652104854584,
                "sortText": "415bd1c5unexpected_handler",
                "textEdit": {
                    "newText": "unexpected_handler",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Monobj<Money>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "get_money",
                "insertText": "get_money",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022get_money(Money &Val_arg, bool Intl_arg = false)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4get_money",
                "textEdit": {
                    "newText": "get_money",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Timeobj<Elem, tm *>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "get_time",
                "insertText": "get_time",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022get_time(tm *Tptr_arg, const Elem *Fmt_arg)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4get_time",
                "textEdit": {
                    "newText": "get_time",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_ostream<Elem, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<<(basic_ostream<Elem, Traits> &Ostr, const _Smanip<Arg> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_ostream<Elem2, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<<(basic_ostream<Elem2, Traits> &Ostr, const _Fillobj<Elem> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_ostream<Elem, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<<(basic_ostream<Elem, Traits> &Ostr, const _Quote_in<Elem, Traits, Alloc> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_ostream<Elem, OsTraits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<<(basic_ostream<Elem, OsTraits> &Ostr, const _Quote_out<Elem, Traits, Sizet> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_ostream<Elem, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<<(basic_ostream<Elem, Traits> &Ostr, const _Monobj<Money> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_ostream<Elem2, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<<(basic_ostream<Elem2, Traits> &Ostr, const _Timeobj<Elem, Ptr> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_istream<Elem, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>>(basic_istream<Elem, Traits> &Istr, const _Monobj<Money> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_istream<Elem2, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>>(basic_istream<Elem2, Traits> &Istr, const _Timeobj<Elem, Ptr> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_istream<Elem, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>>(basic_istream<Elem, Traits> &Istr, const _Smanip<Arg> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_istream<Elem, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>>(basic_istream<Elem, Traits> &Istr, const _Quote_in<Elem, Traits, Alloc> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Monobj<const Money>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "put_money",
                "insertText": "put_money",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022put_money(const Money &Val_arg, bool Intl_arg = false)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4put_money",
                "textEdit": {
                    "newText": "put_money",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Timeobj<Elem, const tm *>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "put_time",
                "insertText": "put_time",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022put_time(const tm *Tptr_arg, const Elem *Fmt_arg)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4put_time",
                "textEdit": {
                    "newText": "put_time",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Quote_in<Elem, Traits, Alloc>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "quoted",
                "insertText": "quoted",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022quoted(basic_string<Elem, Traits, Alloc> &Str, Elem Delim = _Elem('\"'), Elem Escape = _Elem('\\\\'))",
                "score": 0.27917516231536865,
                "sortText": "41710ff4quoted",
                "textEdit": {
                    "newText": "quoted",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Quote_out<Elem, Traits, typename basic_string<Elem, Traits, Alloc>::size_type>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "quoted",
                "insertText": "quoted",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022quoted(const basic_string<Elem, Traits, Alloc> &Str, Elem Delim = _Elem('\"'), Elem Escape = _Elem('\\\\'))",
                "score": 0.27917516231536865,
                "sortText": "41710ff4quoted",
                "textEdit": {
                    "newText": "quoted",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Quote_out<Elem, void, size_t>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "quoted",
                "insertText": "quoted",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022quoted(const Elem *Ptr, Elem Delim = _Elem('\"'), Elem Escape = _Elem('\\\\'))",
                "score": 0.27917516231536865,
                "sortText": "41710ff4quoted",
                "textEdit": {
                    "newText": "quoted",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Fillobj<Elem>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "setfill",
                "insertText": "setfill",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022setfill(Elem Ch)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4setfill",
                "textEdit": {
                    "newText": "setfill",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <chrono>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <chrono>"
                },
                "filterText": "high_resolution_clock",
                "insertText": "chrono::high_resolution_clock",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022chrono::high_resolution_clock",
                "score": 0.2609104514122009,
                "sortText": "417a69f2high_resolution_clock",
                "textEdit": {
                    "newText": "chrono::high_resolution_clock",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <chrono>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <chrono>"
                },
                "filterText": "system_clock",
                "insertText": "chrono::system_clock",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022chrono::system_clock",
                "score": 0.2609104514122009,
                "sortText": "417a69f2system_clock",
                "textEdit": {
                    "newText": "chrono::system_clock",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "_Pragma",
                "insertText": "_Pragma",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " _Pragma",
                "score": 0.22312210500240326,
                "sortText": "419b85e1_Pragma",
                "textEdit": {
                    "newText": "_Pragma",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__BASE_FILE__",
                "insertText": "__BASE_FILE__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __BASE_FILE__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__BASE_FILE__",
                "textEdit": {
                    "newText": "__BASE_FILE__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__COUNTER__",
                "insertText": "__COUNTER__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __COUNTER__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__COUNTER__",
                "textEdit": {
                    "newText": "__COUNTER__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__DATE__",
                "insertText": "__DATE__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __DATE__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__DATE__",
                "textEdit": {
                    "newText": "__DATE__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__FILE_NAME__",
                "insertText": "__FILE_NAME__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __FILE_NAME__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__FILE_NAME__",
                "textEdit": {
                    "newText": "__FILE_NAME__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__FILE__",
                "insertText": "__FILE__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __FILE__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__FILE__",
                "textEdit": {
                    "newText": "__FILE__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__FLT_EVAL_METHOD__",
                "insertText": "__FLT_EVAL_METHOD__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __FLT_EVAL_METHOD__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__FLT_EVAL_METHOD__",
                "textEdit": {
                    "newText": "__FLT_EVAL_METHOD__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__INCLUDE_LEVEL__",
                "insertText": "__INCLUDE_LEVEL__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __INCLUDE_LEVEL__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__INCLUDE_LEVEL__",
                "textEdit": {
                    "newText": "__INCLUDE_LEVEL__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__LINE__",
                "insertText": "__LINE__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __LINE__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__LINE__",
                "textEdit": {
                    "newText": "__LINE__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__TIMESTAMP__",
                "insertText": "__TIMESTAMP__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __TIMESTAMP__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__TIMESTAMP__",
                "textEdit": {
                    "newText": "__TIMESTAMP__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__TIME__",
                "insertText": "__TIME__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __TIME__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__TIME__",
                "textEdit": {
                    "newText": "__TIME__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__building_module",
                "insertText": "__building_module",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __building_module",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__building_module",
                "textEdit": {
                    "newText": "__building_module",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_attribute",
                "insertText": "__has_attribute",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_attribute",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_attribute",
                "textEdit": {
                    "newText": "__has_attribute",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_builtin",
                "insertText": "__has_builtin",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_builtin",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_builtin",
                "textEdit": {
                    "newText": "__has_builtin",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_constexpr_builtin",
                "insertText": "__has_constexpr_builtin",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_constexpr_builtin",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_constexpr_builtin",
                "textEdit": {
                    "newText": "__has_constexpr_builtin",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_cpp_attribute",
                "insertText": "__has_cpp_attribute",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_cpp_attribute",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_cpp_attribute",
                "textEdit": {
                    "newText": "__has_cpp_attribute",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_declspec_attribute",
                "insertText": "__has_declspec_attribute",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_declspec_attribute",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_declspec_attribute",
                "textEdit": {
                    "newText": "__has_declspec_attribute",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_embed",
                "insertText": "__has_embed",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_embed",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_embed",
                "textEdit": {
                    "newText": "__has_embed",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_extension",
                "insertText": "__has_extension",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_extension",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_extension",
                "textEdit": {
                    "newText": "__has_extension",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_feature",
                "insertText": "__has_feature",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_feature",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_feature",
                "textEdit": {
                    "newText": "__has_feature",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_include",
                "insertText": "__has_include",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_include",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_include",
                "textEdit": {
                    "newText": "__has_include",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_include_next",
                "insertText": "__has_include_next",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_include_next",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_include_next",
                "textEdit": {
                    "newText": "__has_include_next",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_warning",
                "insertText": "__has_warning",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_warning",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_warning",
                "textEdit": {
                    "newText": "__has_warning",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['Muchie', 'struct', 'size_t', 'type_info', '_Nonnull', '_Null_unspecified', '_Nullable', 'alignas', 'auto', 'bool', 'char', 'char16_t', 'char32_t', 'class', 'const', 'constexpr', 'decltype', 'double', 'enum', 'explicit', 'extern', 'float', 'friend', 'inline', 'int', 'long', 'mutable', 'operator', 'private', 'protected', 'public', 'short', 'signed', 'static', 'static_assert', 'template', 'thread_local', 'typedef', 'typename', 'union', 'unsigned', 'using', 'using', 'virtual', 'void', 'volatile', 'wchar_t', 'concurrency', 'chrono_literals', 'Concurrency::details::platform', 'char_traits', 'messages', 'messages_base', 'messages_byname', 'once_flag', '_se_translator_function', 'unexpected_handler', 'get_money', 'get_time', 'operator<<', 'operator<<', 'operator<<', 'operator<<', 'operator<<', 'operator<<', 'operator>>', 'operator>>', 'operator>>', 'operator>>', 'put_money', 'put_time', 'quoted', 'quoted', 'quoted', 'setfill', 'chrono::high_resolution_clock', 'chrono::system_clock', '_Pragma', '__BASE_FILE__', '__COUNTER__', '__DATE__', '__FILE_NAME__', '__FILE__', '__FLT_EVAL_METHOD__', '__INCLUDE_LEVEL__', '__LINE__', '__TIMESTAMP__', '__TIME__', '__building_module', '__has_attribute', '__has_builtin', '__has_constexpr_builtin', '__has_cpp_attribute', '__has_declspec_attribute', '__has_embed', '__has_extension', '__has_feature', '__has_include', '__has_include_next', '__has_warning']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_file_not_found",
                "message": "'bits/stdc++.h' file not found",
                "range": {
                    "end": {
                        "character": 24,
                        "line": 0
                    },
                    "start": {
                        "character": 9,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ext_using_undefined_std",
                "message": "Using directive refers to implicitly-defined namespace 'std'",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 2
                    },
                    "start": {
                        "character": 16,
                        "line": 2
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 4
                    },
                    "start": {
                        "character": 21,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 39,
                        "line": 5
                    },
                    "start": {
                        "character": 25,
                        "line": 5
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 77
                    },
                    "start": {
                        "character": 1,
                        "line": 77
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 78
                    },
                    "start": {
                        "character": 1,
                        "line": 78
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 79
                    },
                    "start": {
                        "character": 1,
                        "line": 79
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 14,
                        "line": 80
                    },
                    "start": {
                        "character": 8,
                        "line": 80
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 81
                    },
                    "start": {
                        "character": 1,
                        "line": 81
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 115
                    },
                    "start": {
                        "character": 21,
                        "line": 115
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 128
                    },
                    "start": {
                        "character": 30,
                        "line": 128
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 27,
                        "line": 152
                    },
                    "start": {
                        "character": 21,
                        "line": 152
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 173
                    },
                    "start": {
                        "character": 1,
                        "line": 173
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 220
                    },
                    "start": {
                        "character": 30,
                        "line": 220
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 220
                    },
                    "start": {
                        "character": 49,
                        "line": 220
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 32,
                        "line": 244
                    },
                    "start": {
                        "character": 26,
                        "line": 244
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 51,
                        "line": 244
                    },
                    "start": {
                        "character": 45,
                        "line": 244
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 284
                    },
                    "start": {
                        "character": 29,
                        "line": 284
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 54,
                        "line": 284
                    },
                    "start": {
                        "character": 48,
                        "line": 284
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 320
                    },
                    "start": {
                        "character": 30,
                        "line": 320
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 320
                    },
                    "start": {
                        "character": 49,
                        "line": 320
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 17
    }
}
Diagnostics received from LSP.
Errors received: [[0, [9, 24]], [4, [21, 35]], [5, [25, 39]], [77, [1, 7]], [78, [1, 7]], [79, [1, 7]], [80, [8, 14]], [81, [1, 7]], [115, [21, 26]], [128, [30, 36]], [152, [21, 27]], [173, [1, 7]], [220, [30, 36]], [220, [49, 55]], [244, [26, 32]], [244, [45, 51]], [284, [29, 35]], [284, [48, 54]], [320, [30, 36]], [320, [49, 55]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>\nType modifiers"
                },
                "filterText": "add_const",
                "insertText": "add_const",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022add_const<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98add_const",
                "textEdit": {
                    "newText": "add_const",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_const_t",
                "insertText": "add_const_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022add_const_t<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98add_const_t",
                "textEdit": {
                    "newText": "add_const_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_cv",
                "insertText": "add_cv",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022add_cv<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98add_cv",
                "textEdit": {
                    "newText": "add_cv",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_cv_t",
                "insertText": "add_cv_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022add_cv_t<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98add_cv_t",
                "textEdit": {
                    "newText": "add_cv_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_lvalue_reference",
                "insertText": "add_lvalue_reference",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022add_lvalue_reference<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98add_lvalue_reference",
                "textEdit": {
                    "newText": "add_lvalue_reference",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_lvalue_reference_t",
                "insertText": "add_lvalue_reference_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022add_lvalue_reference_t<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98add_lvalue_reference_t",
                "textEdit": {
                    "newText": "add_lvalue_reference_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_pointer",
                "insertText": "add_pointer",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022add_pointer<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98add_pointer",
                "textEdit": {
                    "newText": "add_pointer",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_pointer_t",
                "insertText": "add_pointer_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022add_pointer_t<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98add_pointer_t",
                "textEdit": {
                    "newText": "add_pointer_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_rvalue_reference",
                "insertText": "add_rvalue_reference",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022add_rvalue_reference<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98add_rvalue_reference",
                "textEdit": {
                    "newText": "add_rvalue_reference",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_rvalue_reference_t",
                "insertText": "add_rvalue_reference_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022add_rvalue_reference_t<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98add_rvalue_reference_t",
                "textEdit": {
                    "newText": "add_rvalue_reference_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_volatile",
                "insertText": "add_volatile",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022add_volatile<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98add_volatile",
                "textEdit": {
                    "newText": "add_volatile",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_volatile_t",
                "insertText": "add_volatile_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022add_volatile_t<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98add_volatile_t",
                "textEdit": {
                    "newText": "add_volatile_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "adopt_lock_t",
                "insertText": "adopt_lock_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022adopt_lock_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98adopt_lock_t",
                "textEdit": {
                    "newText": "adopt_lock_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Ty *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "addressof",
                "insertText": "addressof",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022addressof(Ty &Val)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4addressof",
                "textEdit": {
                    "newText": "addressof",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "const Ty *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "addressof",
                "insertText": "addressof",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022addressof(const Ty &&)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4addressof",
                "textEdit": {
                    "newText": "addressof",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <numeric>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <numeric>"
                },
                "filterText": "adjacent_difference",
                "insertText": "adjacent_difference",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022adjacent_difference(const InIt First, const InIt Last, const OutIt Dest)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4adjacent_difference",
                "textEdit": {
                    "newText": "adjacent_difference",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <numeric>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <numeric>"
                },
                "filterText": "adjacent_difference",
                "insertText": "adjacent_difference",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022adjacent_difference(const InIt First, const InIt Last, OutIt Dest, BinOp Func)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4adjacent_difference",
                "textEdit": {
                    "newText": "adjacent_difference",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "adjacent_find",
                "insertText": "adjacent_find",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022adjacent_find(const FwdIt First, FwdIt Last, Pr Pred)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4adjacent_find",
                "textEdit": {
                    "newText": "adjacent_find",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "adjacent_find",
                "insertText": "adjacent_find",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022adjacent_find(const FwdIt First, const FwdIt Last)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4adjacent_find",
                "textEdit": {
                    "newText": "adjacent_find",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>\nfrom <iterator>"
                },
                "filterText": "advance",
                "insertText": "advance",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022advance(InIt &Where, Diff Off)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1advance",
                "textEdit": {
                    "newText": "advance",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "const adopt_lock_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "adopt_lock",
                "insertText": "adopt_lock",
                "insertTextFormat": 1,
                "kind": 6,
                "label": "\u2022adopt_lock",
                "score": 0.19701893627643585,
                "sortText": "41b640abadopt_lock",
                "textEdit": {
                    "newText": "adopt_lock",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ratio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ratio>"
                },
                "filterText": "ratio_add",
                "insertText": "ratio_add",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022ratio_add<class Rx1, class Rx2>",
                "score": 0.5076508522033691,
                "sortText": "41bd0fe4ratio_add",
                "textEdit": {
                    "newText": "ratio_add",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplinterface.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "T",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplinterface.h>"
                },
                "filterText": "atomic_decrement",
                "insertText": "Concurrency::details::atomic_decrement",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::details::atomic_decrement(::std::atomic<T> &Target)",
                "score": 0.22347019612789154,
                "sortText": "41d45ff9atomic_decrement",
                "textEdit": {
                    "newText": "Concurrency::details::atomic_decrement",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::experimental::filesystem::perms",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "add_perms",
                "insertText": "experimental::filesystem::perms::add_perms",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022experimental::filesystem::perms::add_perms",
                "score": 0.16323184967041016,
                "sortText": "41d8d9c0add_perms",
                "textEdit": {
                    "newText": "experimental::filesystem::perms::add_perms",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEAFNOSUPPORT"
                },
                "filterText": "address_family_not_supported",
                "insertText": "errc::address_family_not_supported",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::address_family_not_supported",
                "score": 0.13731007277965546,
                "sortText": "41f364fdaddress_family_not_supported",
                "textEdit": {
                    "newText": "errc::address_family_not_supported",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEADDRINUSE"
                },
                "filterText": "address_in_use",
                "insertText": "errc::address_in_use",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::address_in_use",
                "score": 0.13731007277965546,
                "sortText": "41f364fdaddress_in_use",
                "textEdit": {
                    "newText": "errc::address_in_use",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEADDRNOTAVAIL"
                },
                "filterText": "address_not_available",
                "insertText": "errc::address_not_available",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::address_not_available",
                "score": 0.13731007277965546,
                "sortText": "41f364fdaddress_not_available",
                "textEdit": {
                    "newText": "errc::address_not_available",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_const",
                "insertText": "tr1::add_const",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::add_const",
                "score": 0.10541268438100815,
                "sortText": "42281d65add_const",
                "textEdit": {
                    "newText": "tr1::add_const",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_cv",
                "insertText": "tr1::add_cv",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::add_cv",
                "score": 0.10541268438100815,
                "sortText": "42281d65add_cv",
                "textEdit": {
                    "newText": "tr1::add_cv",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_pointer",
                "insertText": "tr1::add_pointer",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::add_pointer",
                "score": 0.10541268438100815,
                "sortText": "42281d65add_pointer",
                "textEdit": {
                    "newText": "tr1::add_pointer",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_volatile",
                "insertText": "tr1::add_volatile",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::add_volatile",
                "score": 0.10541268438100815,
                "sortText": "42281d65add_volatile",
                "textEdit": {
                    "newText": "tr1::add_volatile",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplinterface.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "T",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplinterface.h>"
                },
                "filterText": "atomic_add",
                "insertText": "Concurrency::details::atomic_add",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::details::atomic_add(::std::atomic<T> &Target, T Value)",
                "score": 0.22347019612789154,
                "sortText": "42545ff9atomic_add",
                "textEdit": {
                    "newText": "Concurrency::details::atomic_add",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEFAULT"
                },
                "filterText": "bad_address",
                "insertText": "errc::bad_address",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::bad_address",
                "score": 0.13731007277965546,
                "sortText": "42ad177cbad_address",
                "textEdit": {
                    "newText": "errc::bad_address",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEDESTADDRREQ"
                },
                "filterText": "destination_address_required",
                "insertText": "errc::destination_address_required",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::destination_address_required",
                "score": 0.13731007277965546,
                "sortText": "42ad177cdestination_address_required",
                "textEdit": {
                    "newText": "errc::destination_address_required",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEISDIR"
                },
                "filterText": "is_a_directory",
                "insertText": "errc::is_a_directory",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::is_a_directory",
                "score": 0.13731007277965546,
                "sortText": "437364fdis_a_directory",
                "textEdit": {
                    "newText": "errc::is_a_directory",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nENOTDIR"
                },
                "filterText": "not_a_directory",
                "insertText": "errc::not_a_directory",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::not_a_directory",
                "score": 0.13731007277965546,
                "sortText": "437364fdnot_a_directory",
                "textEdit": {
                    "newText": "errc::not_a_directory",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['add_const', 'add_const_t', 'add_cv', 'add_cv_t', 'add_lvalue_reference', 'add_lvalue_reference_t', 'add_pointer', 'add_pointer_t', 'add_rvalue_reference', 'add_rvalue_reference_t', 'add_volatile', 'add_volatile_t', 'adopt_lock_t', 'addressof', 'addressof', 'adjacent_difference', 'adjacent_difference', 'adjacent_find', 'adjacent_find', 'advance', 'adopt_lock', 'ratio_add', 'Concurrency::details::atomic_decrement', 'experimental::filesystem::perms::add_perms', 'errc::address_family_not_supported', 'errc::address_in_use', 'errc::address_not_available', 'tr1::add_const', 'tr1::add_cv', 'tr1::add_pointer', 'tr1::add_volatile', 'Concurrency::details::atomic_add', 'errc::bad_address', 'errc::destination_address_required', 'errc::is_a_directory', 'errc::not_a_directory']
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "filterText": "alignas",
                "insertText": "alignas",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignas(expression)",
                "score": 0.7694156765937805,
                "sortText": "40bb0793alignas",
                "textEdit": {
                    "newText": "alignas",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.7694156765937805,
                "sortText": "40bb0793auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "adopt_lock_t",
                "insertText": "adopt_lock_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022adopt_lock_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98adopt_lock_t",
                "textEdit": {
                    "newText": "adopt_lock_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator_arg_t",
                "insertText": "allocator_arg_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator_arg_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98allocator_arg_t",
                "textEdit": {
                    "newText": "allocator_arg_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_bool",
                "insertText": "atomic_bool",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_bool",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_bool",
                "textEdit": {
                    "newText": "atomic_bool",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_char",
                "insertText": "atomic_char",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_char",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_char",
                "textEdit": {
                    "newText": "atomic_char",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_char32_t",
                "insertText": "atomic_char32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_char32_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_char32_t",
                "textEdit": {
                    "newText": "atomic_char32_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag",
                "insertText": "atomic_flag",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022atomic_flag",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_flag",
                "textEdit": {
                    "newText": "atomic_flag",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int",
                "insertText": "atomic_int",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int",
                "textEdit": {
                    "newText": "atomic_int",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int16_t",
                "insertText": "atomic_int16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int16_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int16_t",
                "textEdit": {
                    "newText": "atomic_int16_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int32_t",
                "insertText": "atomic_int32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int32_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int32_t",
                "textEdit": {
                    "newText": "atomic_int32_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int64_t",
                "insertText": "atomic_int64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int64_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int64_t",
                "textEdit": {
                    "newText": "atomic_int64_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int8_t",
                "insertText": "atomic_int8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int8_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int8_t",
                "textEdit": {
                    "newText": "atomic_int8_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast16_t",
                "insertText": "atomic_int_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast16_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int_fast16_t",
                "textEdit": {
                    "newText": "atomic_int_fast16_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast32_t",
                "insertText": "atomic_int_fast32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast32_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int_fast32_t",
                "textEdit": {
                    "newText": "atomic_int_fast32_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast64_t",
                "insertText": "atomic_int_fast64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast64_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int_fast64_t",
                "textEdit": {
                    "newText": "atomic_int_fast64_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast8_t",
                "insertText": "atomic_int_fast8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast8_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int_fast8_t",
                "textEdit": {
                    "newText": "atomic_int_fast8_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least16_t",
                "insertText": "atomic_int_least16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least16_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int_least16_t",
                "textEdit": {
                    "newText": "atomic_int_least16_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least32_t",
                "insertText": "atomic_int_least32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least32_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int_least32_t",
                "textEdit": {
                    "newText": "atomic_int_least32_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least8_t",
                "insertText": "atomic_int_least8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least8_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int_least8_t",
                "textEdit": {
                    "newText": "atomic_int_least8_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_intmax_t",
                "insertText": "atomic_intmax_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_intmax_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_intmax_t",
                "textEdit": {
                    "newText": "atomic_intmax_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_intptr_t",
                "insertText": "atomic_intptr_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_intptr_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_intptr_t",
                "textEdit": {
                    "newText": "atomic_intptr_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_llong",
                "insertText": "atomic_llong",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_llong",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_llong",
                "textEdit": {
                    "newText": "atomic_llong",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ptrdiff_t",
                "insertText": "atomic_ptrdiff_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ptrdiff_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_ptrdiff_t",
                "textEdit": {
                    "newText": "atomic_ptrdiff_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_short",
                "insertText": "atomic_short",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_short",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_short",
                "textEdit": {
                    "newText": "atomic_short",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_size_t",
                "insertText": "atomic_size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_size_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_size_t",
                "textEdit": {
                    "newText": "atomic_size_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uchar",
                "insertText": "atomic_uchar",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uchar",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uchar",
                "textEdit": {
                    "newText": "atomic_uchar",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint",
                "insertText": "atomic_uint",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uint",
                "textEdit": {
                    "newText": "atomic_uint",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint32_t",
                "insertText": "atomic_uint32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint32_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uint32_t",
                "textEdit": {
                    "newText": "atomic_uint32_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint64_t",
                "insertText": "atomic_uint64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint64_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uint64_t",
                "textEdit": {
                    "newText": "atomic_uint64_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast16_t",
                "insertText": "atomic_uint_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast16_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uint_fast16_t",
                "textEdit": {
                    "newText": "atomic_uint_fast16_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast64_t",
                "insertText": "atomic_uint_fast64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast64_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uint_fast64_t",
                "textEdit": {
                    "newText": "atomic_uint_fast64_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast8_t",
                "insertText": "atomic_uint_fast8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast8_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uint_fast8_t",
                "textEdit": {
                    "newText": "atomic_uint_fast8_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_least16_t",
                "insertText": "atomic_uint_least16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_least16_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uint_least16_t",
                "textEdit": {
                    "newText": "atomic_uint_least16_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_least32_t",
                "insertText": "atomic_uint_least32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_least32_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uint_least32_t",
                "textEdit": {
                    "newText": "atomic_uint_least32_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_least8_t",
                "insertText": "atomic_uint_least8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_least8_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uint_least8_t",
                "textEdit": {
                    "newText": "atomic_uint_least8_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uintmax_t",
                "insertText": "atomic_uintmax_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uintmax_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uintmax_t",
                "textEdit": {
                    "newText": "atomic_uintmax_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uintptr_t",
                "insertText": "atomic_uintptr_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uintptr_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uintptr_t",
                "textEdit": {
                    "newText": "atomic_uintptr_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ulong",
                "insertText": "atomic_ulong",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ulong",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_ulong",
                "textEdit": {
                    "newText": "atomic_ulong",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ushort",
                "insertText": "atomic_ushort",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ushort",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_ushort",
                "textEdit": {
                    "newText": "atomic_ushort",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_wchar_t",
                "insertText": "atomic_wchar_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_wchar_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_wchar_t",
                "textEdit": {
                    "newText": "atomic_wchar_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR32_T_LOCK_FREE",
                "score": 0.35306480526924133,
                "sortText": "414b3b17ATOMIC_CHAR32_T_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR32_T_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR_LOCK_FREE",
                "insertText": "ATOMIC_CHAR_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR_LOCK_FREE",
                "score": 0.35306480526924133,
                "sortText": "414b3b17ATOMIC_CHAR_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_FLAG_INIT",
                "insertText": "ATOMIC_FLAG_INIT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_FLAG_INIT",
                "score": 0.35306480526924133,
                "sortText": "414b3b17ATOMIC_FLAG_INIT",
                "textEdit": {
                    "newText": "ATOMIC_FLAG_INIT",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_INT_LOCK_FREE",
                "insertText": "ATOMIC_INT_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_INT_LOCK_FREE",
                "score": 0.35306480526924133,
                "sortText": "414b3b17ATOMIC_INT_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_INT_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_LLONG_LOCK_FREE",
                "insertText": "ATOMIC_LLONG_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_LLONG_LOCK_FREE",
                "score": 0.35306480526924133,
                "sortText": "414b3b17ATOMIC_LLONG_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_LLONG_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_LONG_LOCK_FREE",
                "insertText": "ATOMIC_LONG_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_LONG_LOCK_FREE",
                "score": 0.35306480526924133,
                "sortText": "414b3b17ATOMIC_LONG_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_LONG_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_SHORT_LOCK_FREE",
                "insertText": "ATOMIC_SHORT_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_SHORT_LOCK_FREE",
                "score": 0.35306480526924133,
                "sortText": "414b3b17ATOMIC_SHORT_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_SHORT_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_VAR_INIT",
                "insertText": "ATOMIC_VAR_INIT",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ATOMIC_VAR_INIT(_Value)",
                "score": 0.35306480526924133,
                "sortText": "414b3b17ATOMIC_VAR_INIT",
                "textEdit": {
                    "newText": "ATOMIC_VAR_INIT",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>\n[valarray.transcend] Transcendentals"
                },
                "filterText": "abs",
                "insertText": "abs",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022abs(const valarray<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4abs",
                "textEdit": {
                    "newText": "abs",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "abs",
                "insertText": "abs",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022abs(const complex<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4abs",
                "textEdit": {
                    "newText": "abs",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "acos",
                "insertText": "acos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022acos(const valarray<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4acos",
                "textEdit": {
                    "newText": "acos",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "acos",
                "insertText": "acos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022acos(const complex<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4acos",
                "textEdit": {
                    "newText": "acos",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "acosh",
                "insertText": "acosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022acosh(const complex<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4acosh",
                "textEdit": {
                    "newText": "acosh",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "arg",
                "insertText": "arg",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022arg(const complex<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4arg",
                "textEdit": {
                    "newText": "arg",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Upgrade_to_double<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "arg",
                "insertText": "arg",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022arg(Ty Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4arg",
                "textEdit": {
                    "newText": "arg",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asin",
                "insertText": "asin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asin(const valarray<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4asin",
                "textEdit": {
                    "newText": "asin",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asin",
                "insertText": "asin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asin(const complex<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4asin",
                "textEdit": {
                    "newText": "asin",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinh",
                "insertText": "asinh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asinh(const complex<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4asinh",
                "textEdit": {
                    "newText": "asinh",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <future>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "future<_Invoke_result_t<decay_t<Fty>, decay_t<ArgTypes>...>>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <future>"
                },
                "filterText": "async",
                "insertText": "async",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022async(launch Policy, Fty &&Fnarg, ArgTypes &&Args...)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4async",
                "textEdit": {
                    "newText": "async",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <future>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "future<_Invoke_result_t<decay_t<Fty>, decay_t<ArgTypes>...>>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <future>"
                },
                "filterText": "async",
                "insertText": "async",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022async(Fty &&Fnarg, ArgTypes &&Args...)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4async",
                "textEdit": {
                    "newText": "async",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "atan",
                "insertText": "atan",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atan(const valarray<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atan",
                "textEdit": {
                    "newText": "atan",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "atan",
                "insertText": "atan",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atan(const complex<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atan",
                "textEdit": {
                    "newText": "atan",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "atan2",
                "insertText": "atan2",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atan2(const valarray<Ty> &Left, const typename valarray<Ty>::value_type &Right)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atan2",
                "textEdit": {
                    "newText": "atan2",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "atan2",
                "insertText": "atan2",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atan2(const valarray<Ty> &Left, const valarray<Ty> &Right)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atan2",
                "textEdit": {
                    "newText": "atan2",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "atan2",
                "insertText": "atan2",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atan2(const typename valarray<Ty>::value_type &Left, const valarray<Ty> &Right)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atan2",
                "textEdit": {
                    "newText": "atan2",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "atanh",
                "insertText": "atanh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atanh(const complex<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atanh",
                "textEdit": {
                    "newText": "atanh",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_exchange",
                "insertText": "atomic_exchange",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_exchange(volatile atomic<Ty> *const Mem, const _Identity_t<Ty> Value)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_exchange",
                "textEdit": {
                    "newText": "atomic_exchange",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_add",
                "insertText": "atomic_fetch_add",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_add(volatile atomic<Ty> *Mem, const typename atomic<Ty>::difference_type Value)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_add",
                "textEdit": {
                    "newText": "atomic_fetch_add",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_add_explicit",
                "insertText": "atomic_fetch_add_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_add_explicit(atomic<Ty> *Mem, const typename atomic<Ty>::difference_type Value, const memory_order Order)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_add_explicit",
                "textEdit": {
                    "newText": "atomic_fetch_add_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_and",
                "insertText": "atomic_fetch_and",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_and(atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_and",
                "textEdit": {
                    "newText": "atomic_fetch_and",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_and_explicit",
                "insertText": "atomic_fetch_and_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_and_explicit(atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value, const memory_order Order)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_and_explicit",
                "textEdit": {
                    "newText": "atomic_fetch_and_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_or",
                "insertText": "atomic_fetch_or",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_or(volatile atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_or",
                "textEdit": {
                    "newText": "atomic_fetch_or",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_or",
                "insertText": "atomic_fetch_or",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_or(atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_or",
                "textEdit": {
                    "newText": "atomic_fetch_or",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_or_explicit",
                "insertText": "atomic_fetch_or_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_or_explicit(atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value, const memory_order Order)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_or_explicit",
                "textEdit": {
                    "newText": "atomic_fetch_or_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_or_explicit",
                "insertText": "atomic_fetch_or_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_or_explicit(volatile atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value, const memory_order Order)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_or_explicit",
                "textEdit": {
                    "newText": "atomic_fetch_or_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_sub",
                "insertText": "atomic_fetch_sub",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_sub(atomic<Ty> *Mem, const typename atomic<Ty>::difference_type Value)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_sub",
                "textEdit": {
                    "newText": "atomic_fetch_sub",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_sub_explicit",
                "insertText": "atomic_fetch_sub_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_sub_explicit(atomic<Ty> *Mem, const typename atomic<Ty>::difference_type Value, const memory_order Order)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_sub_explicit",
                "textEdit": {
                    "newText": "atomic_fetch_sub_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_xor",
                "insertText": "atomic_fetch_xor",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_xor(atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_xor",
                "textEdit": {
                    "newText": "atomic_fetch_xor",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_xor",
                "insertText": "atomic_fetch_xor",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_xor(volatile atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_xor",
                "textEdit": {
                    "newText": "atomic_fetch_xor",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_xor_explicit",
                "insertText": "atomic_fetch_xor_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_xor_explicit(atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value, const memory_order Order)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_xor_explicit",
                "textEdit": {
                    "newText": "atomic_fetch_xor_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_load",
                "insertText": "atomic_load",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_load(const atomic<Ty> *const Mem)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_load",
                "textEdit": {
                    "newText": "atomic_load",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_load_explicit",
                "insertText": "atomic_load_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_load_explicit(const volatile atomic<Ty> *const Mem, const memory_order Order)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_load_explicit",
                "textEdit": {
                    "newText": "atomic_load_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_load_explicit",
                "insertText": "atomic_load_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_load_explicit(const atomic<Ty> *const Mem, const memory_order Order)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_load_explicit",
                "textEdit": {
                    "newText": "atomic_load_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_compare_exchange_strong",
                "insertText": "atomic_compare_exchange_strong",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_compare_exchange_strong(atomic<Ty> *const Mem, _Identity_t<Ty> *const Expected, const _Identity_t<Ty> Desired)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_compare_exchange_strong",
                "textEdit": {
                    "newText": "atomic_compare_exchange_strong",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_compare_exchange_strong",
                "insertText": "atomic_compare_exchange_strong",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_compare_exchange_strong(volatile atomic<Ty> *const Mem, _Identity_t<Ty> *const Expected, const _Identity_t<Ty> Desired)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_compare_exchange_strong",
                "textEdit": {
                    "newText": "atomic_compare_exchange_strong",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_compare_exchange_weak",
                "insertText": "atomic_compare_exchange_weak",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_compare_exchange_weak(atomic<Ty> *const Mem, _Identity_t<Ty> *const Expected, const _Identity_t<Ty> Desired)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_compare_exchange_weak",
                "textEdit": {
                    "newText": "atomic_compare_exchange_weak",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_clear",
                "insertText": "atomic_flag_clear",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_clear(atomic_flag *const Flag)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_flag_clear",
                "textEdit": {
                    "newText": "atomic_flag_clear",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_clear_explicit",
                "insertText": "atomic_flag_clear_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_clear_explicit(atomic_flag *const Flag, const memory_order Order)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_flag_clear_explicit",
                "textEdit": {
                    "newText": "atomic_flag_clear_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_clear_explicit",
                "insertText": "atomic_flag_clear_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_clear_explicit(volatile atomic_flag *const Flag, const memory_order Order)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_flag_clear_explicit",
                "textEdit": {
                    "newText": "atomic_flag_clear_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_test_and_set",
                "insertText": "atomic_flag_test_and_set",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_test_and_set(volatile atomic_flag *const Flag)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_flag_test_and_set",
                "textEdit": {
                    "newText": "atomic_flag_test_and_set",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_test_and_set",
                "insertText": "atomic_flag_test_and_set",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_test_and_set(atomic_flag *const Flag)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_flag_test_and_set",
                "textEdit": {
                    "newText": "atomic_flag_test_and_set",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_test_and_set_explicit",
                "insertText": "atomic_flag_test_and_set_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_test_and_set_explicit(atomic_flag *const Flag, const memory_order Order)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_flag_test_and_set_explicit",
                "textEdit": {
                    "newText": "atomic_flag_test_and_set_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_test_and_set_explicit",
                "insertText": "atomic_flag_test_and_set_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_test_and_set_explicit(volatile atomic_flag *const Flag, const memory_order Order)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_flag_test_and_set_explicit",
                "textEdit": {
                    "newText": "atomic_flag_test_and_set_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_init",
                "insertText": "atomic_init",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_init(atomic<Ty> *const Mem, const typename atomic<Ty>::value_type Value)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_init",
                "textEdit": {
                    "newText": "atomic_init",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_is_lock_free",
                "insertText": "atomic_is_lock_free",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_is_lock_free(const volatile atomic<Ty> *Mem)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_is_lock_free",
                "textEdit": {
                    "newText": "atomic_is_lock_free",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_signal_fence",
                "insertText": "atomic_signal_fence",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_signal_fence(const memory_order Order)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_signal_fence",
                "textEdit": {
                    "newText": "atomic_signal_fence",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_store",
                "insertText": "atomic_store",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_store(atomic<Ty> *const Mem, const _Identity_t<Ty> Value)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_store",
                "textEdit": {
                    "newText": "atomic_store",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_thread_fence",
                "insertText": "atomic_thread_fence",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_thread_fence(const memory_order Order)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_thread_fence",
                "textEdit": {
                    "newText": "atomic_thread_fence",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "const adopt_lock_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "adopt_lock",
                "insertText": "adopt_lock",
                "insertTextFormat": 1,
                "kind": 6,
                "label": "\u2022adopt_lock",
                "score": 0.19701893627643585,
                "sortText": "41b640abadopt_lock",
                "textEdit": {
                    "newText": "adopt_lock",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['alignas', 'auto', 'adopt_lock_t', 'allocator_arg_t', 'atomic_bool', 'atomic_char', 'atomic_char32_t', 'atomic_flag', 'atomic_int', 'atomic_int16_t', 'atomic_int32_t', 'atomic_int64_t', 'atomic_int8_t', 'atomic_int_fast16_t', 'atomic_int_fast32_t', 'atomic_int_fast64_t', 'atomic_int_fast8_t', 'atomic_int_least16_t', 'atomic_int_least32_t', 'atomic_int_least8_t', 'atomic_intmax_t', 'atomic_intptr_t', 'atomic_llong', 'atomic_ptrdiff_t', 'atomic_short', 'atomic_size_t', 'atomic_uchar', 'atomic_uint', 'atomic_uint32_t', 'atomic_uint64_t', 'atomic_uint_fast16_t', 'atomic_uint_fast64_t', 'atomic_uint_fast8_t', 'atomic_uint_least16_t', 'atomic_uint_least32_t', 'atomic_uint_least8_t', 'atomic_uintmax_t', 'atomic_uintptr_t', 'atomic_ulong', 'atomic_ushort', 'atomic_wchar_t', 'ATOMIC_CHAR32_T_LOCK_FREE', 'ATOMIC_CHAR_LOCK_FREE', 'ATOMIC_FLAG_INIT', 'ATOMIC_INT_LOCK_FREE', 'ATOMIC_LLONG_LOCK_FREE', 'ATOMIC_LONG_LOCK_FREE', 'ATOMIC_SHORT_LOCK_FREE', 'ATOMIC_VAR_INIT', 'abs', 'abs', 'acos', 'acos', 'acosh', 'arg', 'arg', 'asin', 'asin', 'asinh', 'async', 'async', 'atan', 'atan', 'atan2', 'atan2', 'atan2', 'atanh', 'atomic_exchange', 'atomic_fetch_add', 'atomic_fetch_add_explicit', 'atomic_fetch_and', 'atomic_fetch_and_explicit', 'atomic_fetch_or', 'atomic_fetch_or', 'atomic_fetch_or_explicit', 'atomic_fetch_or_explicit', 'atomic_fetch_sub', 'atomic_fetch_sub_explicit', 'atomic_fetch_xor', 'atomic_fetch_xor', 'atomic_fetch_xor_explicit', 'atomic_load', 'atomic_load_explicit', 'atomic_load_explicit', 'atomic_compare_exchange_strong', 'atomic_compare_exchange_strong', 'atomic_compare_exchange_weak', 'atomic_flag_clear', 'atomic_flag_clear_explicit', 'atomic_flag_clear_explicit', 'atomic_flag_test_and_set', 'atomic_flag_test_and_set', 'atomic_flag_test_and_set_explicit', 'atomic_flag_test_and_set_explicit', 'atomic_init', 'atomic_is_lock_free', 'atomic_signal_fence', 'atomic_store', 'atomic_thread_fence', 'adopt_lock']
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_file_not_found",
                "message": "'bits/stdc++.h' file not found",
                "range": {
                    "end": {
                        "character": 24,
                        "line": 0
                    },
                    "start": {
                        "character": 9,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ext_using_undefined_std",
                "message": "Using directive refers to implicitly-defined namespace 'std'",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 2
                    },
                    "start": {
                        "character": 16,
                        "line": 2
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 4
                    },
                    "start": {
                        "character": 21,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 39,
                        "line": 5
                    },
                    "start": {
                        "character": 25,
                        "line": 5
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'ad'",
                "range": {
                    "end": {
                        "character": 12,
                        "line": 10
                    },
                    "start": {
                        "character": 10,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 77
                    },
                    "start": {
                        "character": 1,
                        "line": 77
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 78
                    },
                    "start": {
                        "character": 1,
                        "line": 78
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 79
                    },
                    "start": {
                        "character": 1,
                        "line": 79
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 14,
                        "line": 80
                    },
                    "start": {
                        "character": 8,
                        "line": 80
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 81
                    },
                    "start": {
                        "character": 1,
                        "line": 81
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 115
                    },
                    "start": {
                        "character": 21,
                        "line": 115
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 128
                    },
                    "start": {
                        "character": 30,
                        "line": 128
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 27,
                        "line": 152
                    },
                    "start": {
                        "character": 21,
                        "line": 152
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 173
                    },
                    "start": {
                        "character": 1,
                        "line": 173
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 220
                    },
                    "start": {
                        "character": 30,
                        "line": 220
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 220
                    },
                    "start": {
                        "character": 49,
                        "line": 220
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 32,
                        "line": 244
                    },
                    "start": {
                        "character": 26,
                        "line": 244
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 51,
                        "line": 244
                    },
                    "start": {
                        "character": 45,
                        "line": 244
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 284
                    },
                    "start": {
                        "character": 29,
                        "line": 284
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 54,
                        "line": 284
                    },
                    "start": {
                        "character": 48,
                        "line": 284
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 320
                    },
                    "start": {
                        "character": 30,
                        "line": 320
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 19
    }
}
Diagnostics received from LSP.
Errors received: [[0, [9, 24]], [4, [21, 35]], [5, [25, 39]], [10, [10, 12]], [77, [1, 7]], [78, [1, 7]], [79, [1, 7]], [80, [8, 14]], [81, [1, 7]], [115, [21, 26]], [128, [30, 36]], [152, [21, 27]], [173, [1, 7]], [220, [30, 36]], [220, [49, 55]], [244, [26, 32]], [244, [45, 51]], [284, [29, 35]], [284, [48, 54]], [320, [30, 36]], [0, [0, 0]]]
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "adjacent_find",
                "insertText": "adjacent_find",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022adjacent_find(const FwdIt First, const FwdIt Last)",
                "score": 0.27917516231536865,
                "sortText": "4191c541adjacent_find",
                "textEdit": {
                    "newText": "adjacent_find",
                    "range": {
                        "end": {
                            "character": 13,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "adjacent_find",
                "insertText": "adjacent_find",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022adjacent_find(const FwdIt First, FwdIt Last, Pr Pred)",
                "score": 0.27917516231536865,
                "sortText": "4191c541adjacent_find",
                "textEdit": {
                    "newText": "adjacent_find",
                    "range": {
                        "end": {
                            "character": 13,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEAFNOSUPPORT"
                },
                "filterText": "address_family_not_supported",
                "insertText": "errc::address_family_not_supported",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::address_family_not_supported",
                "score": 0.13731007277965546,
                "sortText": "4215a850address_family_not_supported",
                "textEdit": {
                    "newText": "errc::address_family_not_supported",
                    "range": {
                        "end": {
                            "character": 13,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['adjacent_find', 'adjacent_find', 'errc::address_family_not_supported']
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_file_not_found",
                "message": "'bits/stdc++.h' file not found",
                "range": {
                    "end": {
                        "character": 24,
                        "line": 0
                    },
                    "start": {
                        "character": 9,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ext_using_undefined_std",
                "message": "Using directive refers to implicitly-defined namespace 'std'",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 2
                    },
                    "start": {
                        "character": 16,
                        "line": 2
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 4
                    },
                    "start": {
                        "character": 21,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 39,
                        "line": 5
                    },
                    "start": {
                        "character": 25,
                        "line": 5
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'adfsa'",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 10
                    },
                    "start": {
                        "character": 10,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 77
                    },
                    "start": {
                        "character": 1,
                        "line": 77
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 78
                    },
                    "start": {
                        "character": 1,
                        "line": 78
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 79
                    },
                    "start": {
                        "character": 1,
                        "line": 79
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 14,
                        "line": 80
                    },
                    "start": {
                        "character": 8,
                        "line": 80
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 81
                    },
                    "start": {
                        "character": 1,
                        "line": 81
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 115
                    },
                    "start": {
                        "character": 21,
                        "line": 115
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 128
                    },
                    "start": {
                        "character": 30,
                        "line": 128
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 27,
                        "line": 152
                    },
                    "start": {
                        "character": 21,
                        "line": 152
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 173
                    },
                    "start": {
                        "character": 1,
                        "line": 173
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 220
                    },
                    "start": {
                        "character": 30,
                        "line": 220
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 220
                    },
                    "start": {
                        "character": 49,
                        "line": 220
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 32,
                        "line": 244
                    },
                    "start": {
                        "character": 26,
                        "line": 244
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 51,
                        "line": 244
                    },
                    "start": {
                        "character": 45,
                        "line": 244
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 284
                    },
                    "start": {
                        "character": 29,
                        "line": 284
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 54,
                        "line": 284
                    },
                    "start": {
                        "character": 48,
                        "line": 284
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 320
                    },
                    "start": {
                        "character": 30,
                        "line": 320
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 22
    }
}
Diagnostics received from LSP.
Errors received: [[0, [9, 24]], [4, [21, 35]], [5, [25, 39]], [10, [10, 15]], [77, [1, 7]], [78, [1, 7]], [79, [1, 7]], [80, [8, 14]], [81, [1, 7]], [115, [21, 26]], [128, [30, 36]], [152, [21, 27]], [173, [1, 7]], [220, [30, 36]], [220, [49, 55]], [244, [26, 32]], [244, [45, 51]], [284, [29, 35]], [284, [48, 54]], [320, [30, 36]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_file_not_found",
                "message": "'bits/stdc++.h' file not found",
                "range": {
                    "end": {
                        "character": 24,
                        "line": 0
                    },
                    "start": {
                        "character": 9,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ext_using_undefined_std",
                "message": "Using directive refers to implicitly-defined namespace 'std'",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 2
                    },
                    "start": {
                        "character": 16,
                        "line": 2
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 4
                    },
                    "start": {
                        "character": 21,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 39,
                        "line": 5
                    },
                    "start": {
                        "character": 25,
                        "line": 5
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'adfsad'",
                "range": {
                    "end": {
                        "character": 16,
                        "line": 10
                    },
                    "start": {
                        "character": 10,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 77
                    },
                    "start": {
                        "character": 1,
                        "line": 77
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 78
                    },
                    "start": {
                        "character": 1,
                        "line": 78
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 79
                    },
                    "start": {
                        "character": 1,
                        "line": 79
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 14,
                        "line": 80
                    },
                    "start": {
                        "character": 8,
                        "line": 80
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 81
                    },
                    "start": {
                        "character": 1,
                        "line": 81
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 115
                    },
                    "start": {
                        "character": 21,
                        "line": 115
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 128
                    },
                    "start": {
                        "character": 30,
                        "line": 128
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 27,
                        "line": 152
                    },
                    "start": {
                        "character": 21,
                        "line": 152
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 173
                    },
                    "start": {
                        "character": 1,
                        "line": 173
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 220
                    },
                    "start": {
                        "character": 30,
                        "line": 220
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 220
                    },
                    "start": {
                        "character": 49,
                        "line": 220
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 32,
                        "line": 244
                    },
                    "start": {
                        "character": 26,
                        "line": 244
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 51,
                        "line": 244
                    },
                    "start": {
                        "character": 45,
                        "line": 244
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 284
                    },
                    "start": {
                        "character": 29,
                        "line": 284
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 54,
                        "line": 284
                    },
                    "start": {
                        "character": 48,
                        "line": 284
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 320
                    },
                    "start": {
                        "character": 30,
                        "line": 320
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 24
    }
}
Diagnostics received from LSP.
Errors received: [[0, [9, 24]], [4, [21, 35]], [5, [25, 39]], [10, [10, 16]], [77, [1, 7]], [78, [1, 7]], [79, [1, 7]], [80, [8, 14]], [81, [1, 7]], [115, [21, 26]], [128, [30, 36]], [152, [21, 27]], [173, [1, 7]], [220, [30, 36]], [220, [49, 55]], [244, [26, 32]], [244, [45, 51]], [284, [29, 35]], [284, [48, 54]], [320, [30, 36]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_file_not_found",
                "message": "'bits/stdc++.h' file not found",
                "range": {
                    "end": {
                        "character": 24,
                        "line": 0
                    },
                    "start": {
                        "character": 9,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ext_using_undefined_std",
                "message": "Using directive refers to implicitly-defined namespace 'std'",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 2
                    },
                    "start": {
                        "character": 16,
                        "line": 2
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 4
                    },
                    "start": {
                        "character": 21,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 39,
                        "line": 5
                    },
                    "start": {
                        "character": 25,
                        "line": 5
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'adfsa'",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 10
                    },
                    "start": {
                        "character": 10,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 77
                    },
                    "start": {
                        "character": 1,
                        "line": 77
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 78
                    },
                    "start": {
                        "character": 1,
                        "line": 78
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 79
                    },
                    "start": {
                        "character": 1,
                        "line": 79
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 14,
                        "line": 80
                    },
                    "start": {
                        "character": 8,
                        "line": 80
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 81
                    },
                    "start": {
                        "character": 1,
                        "line": 81
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 115
                    },
                    "start": {
                        "character": 21,
                        "line": 115
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 128
                    },
                    "start": {
                        "character": 30,
                        "line": 128
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 27,
                        "line": 152
                    },
                    "start": {
                        "character": 21,
                        "line": 152
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 173
                    },
                    "start": {
                        "character": 1,
                        "line": 173
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 220
                    },
                    "start": {
                        "character": 30,
                        "line": 220
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 220
                    },
                    "start": {
                        "character": 49,
                        "line": 220
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 32,
                        "line": 244
                    },
                    "start": {
                        "character": 26,
                        "line": 244
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 51,
                        "line": 244
                    },
                    "start": {
                        "character": 45,
                        "line": 244
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 284
                    },
                    "start": {
                        "character": 29,
                        "line": 284
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 54,
                        "line": 284
                    },
                    "start": {
                        "character": 48,
                        "line": 284
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 320
                    },
                    "start": {
                        "character": 30,
                        "line": 320
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 28
    }
}
Diagnostics received from LSP.
Errors received: [[0, [9, 24]], [4, [21, 35]], [5, [25, 39]], [10, [10, 15]], [77, [1, 7]], [78, [1, 7]], [79, [1, 7]], [80, [8, 14]], [81, [1, 7]], [115, [21, 26]], [128, [30, 36]], [152, [21, 27]], [173, [1, 7]], [220, [30, 36]], [220, [49, 55]], [244, [26, 32]], [244, [45, 51]], [284, [29, 35]], [284, [48, 54]], [320, [30, 36]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "adjacent_find",
                "insertText": "adjacent_find",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022adjacent_find(const FwdIt First, const FwdIt Last)",
                "score": 0.27917516231536865,
                "sortText": "4191c541adjacent_find",
                "textEdit": {
                    "newText": "adjacent_find",
                    "range": {
                        "end": {
                            "character": 13,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "adjacent_find",
                "insertText": "adjacent_find",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022adjacent_find(const FwdIt First, FwdIt Last, Pr Pred)",
                "score": 0.27917516231536865,
                "sortText": "4191c541adjacent_find",
                "textEdit": {
                    "newText": "adjacent_find",
                    "range": {
                        "end": {
                            "character": 13,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEAFNOSUPPORT"
                },
                "filterText": "address_family_not_supported",
                "insertText": "errc::address_family_not_supported",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::address_family_not_supported",
                "score": 0.13731007277965546,
                "sortText": "4215a850address_family_not_supported",
                "textEdit": {
                    "newText": "errc::address_family_not_supported",
                    "range": {
                        "end": {
                            "character": 13,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['adjacent_find', 'adjacent_find', 'errc::address_family_not_supported']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_file_not_found",
                "message": "'bits/stdc++.h' file not found",
                "range": {
                    "end": {
                        "character": 24,
                        "line": 0
                    },
                    "start": {
                        "character": 9,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ext_using_undefined_std",
                "message": "Using directive refers to implicitly-defined namespace 'std'",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 2
                    },
                    "start": {
                        "character": 16,
                        "line": 2
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 4
                    },
                    "start": {
                        "character": 21,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 39,
                        "line": 5
                    },
                    "start": {
                        "character": 25,
                        "line": 5
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'adfs'",
                "range": {
                    "end": {
                        "character": 14,
                        "line": 10
                    },
                    "start": {
                        "character": 10,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 77
                    },
                    "start": {
                        "character": 1,
                        "line": 77
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 78
                    },
                    "start": {
                        "character": 1,
                        "line": 78
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 79
                    },
                    "start": {
                        "character": 1,
                        "line": 79
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 14,
                        "line": 80
                    },
                    "start": {
                        "character": 8,
                        "line": 80
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 81
                    },
                    "start": {
                        "character": 1,
                        "line": 81
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 115
                    },
                    "start": {
                        "character": 21,
                        "line": 115
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 128
                    },
                    "start": {
                        "character": 30,
                        "line": 128
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 27,
                        "line": 152
                    },
                    "start": {
                        "character": 21,
                        "line": 152
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 173
                    },
                    "start": {
                        "character": 1,
                        "line": 173
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 220
                    },
                    "start": {
                        "character": 30,
                        "line": 220
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 220
                    },
                    "start": {
                        "character": 49,
                        "line": 220
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 32,
                        "line": 244
                    },
                    "start": {
                        "character": 26,
                        "line": 244
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 51,
                        "line": 244
                    },
                    "start": {
                        "character": 45,
                        "line": 244
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 284
                    },
                    "start": {
                        "character": 29,
                        "line": 284
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 54,
                        "line": 284
                    },
                    "start": {
                        "character": 48,
                        "line": 284
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 320
                    },
                    "start": {
                        "character": 30,
                        "line": 320
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 29
    }
}
Diagnostics received from LSP.
Errors received: [[0, [9, 24]], [4, [21, 35]], [5, [25, 39]], [10, [10, 14]], [77, [1, 7]], [78, [1, 7]], [79, [1, 7]], [80, [8, 14]], [81, [1, 7]], [115, [21, 26]], [128, [30, 36]], [152, [21, 27]], [173, [1, 7]], [220, [30, 36]], [220, [49, 55]], [244, [26, 32]], [244, [45, 51]], [284, [29, 35]], [284, [48, 54]], [320, [30, 36]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>\nType modifiers"
                },
                "filterText": "add_const",
                "insertText": "add_const",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022add_const<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98add_const",
                "textEdit": {
                    "newText": "add_const",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_const_t",
                "insertText": "add_const_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022add_const_t<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98add_const_t",
                "textEdit": {
                    "newText": "add_const_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_cv",
                "insertText": "add_cv",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022add_cv<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98add_cv",
                "textEdit": {
                    "newText": "add_cv",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_cv_t",
                "insertText": "add_cv_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022add_cv_t<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98add_cv_t",
                "textEdit": {
                    "newText": "add_cv_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_lvalue_reference",
                "insertText": "add_lvalue_reference",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022add_lvalue_reference<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98add_lvalue_reference",
                "textEdit": {
                    "newText": "add_lvalue_reference",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_lvalue_reference_t",
                "insertText": "add_lvalue_reference_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022add_lvalue_reference_t<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98add_lvalue_reference_t",
                "textEdit": {
                    "newText": "add_lvalue_reference_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_pointer",
                "insertText": "add_pointer",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022add_pointer<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98add_pointer",
                "textEdit": {
                    "newText": "add_pointer",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_pointer_t",
                "insertText": "add_pointer_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022add_pointer_t<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98add_pointer_t",
                "textEdit": {
                    "newText": "add_pointer_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_rvalue_reference",
                "insertText": "add_rvalue_reference",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022add_rvalue_reference<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98add_rvalue_reference",
                "textEdit": {
                    "newText": "add_rvalue_reference",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_rvalue_reference_t",
                "insertText": "add_rvalue_reference_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022add_rvalue_reference_t<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98add_rvalue_reference_t",
                "textEdit": {
                    "newText": "add_rvalue_reference_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_volatile",
                "insertText": "add_volatile",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022add_volatile<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98add_volatile",
                "textEdit": {
                    "newText": "add_volatile",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_volatile_t",
                "insertText": "add_volatile_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022add_volatile_t<class Ty>",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98add_volatile_t",
                "textEdit": {
                    "newText": "add_volatile_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "adopt_lock_t",
                "insertText": "adopt_lock_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022adopt_lock_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98adopt_lock_t",
                "textEdit": {
                    "newText": "adopt_lock_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Ty *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "addressof",
                "insertText": "addressof",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022addressof(Ty &Val)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4addressof",
                "textEdit": {
                    "newText": "addressof",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "const Ty *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "addressof",
                "insertText": "addressof",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022addressof(const Ty &&)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4addressof",
                "textEdit": {
                    "newText": "addressof",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <numeric>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <numeric>"
                },
                "filterText": "adjacent_difference",
                "insertText": "adjacent_difference",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022adjacent_difference(const InIt First, const InIt Last, const OutIt Dest)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4adjacent_difference",
                "textEdit": {
                    "newText": "adjacent_difference",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <numeric>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "OutIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <numeric>"
                },
                "filterText": "adjacent_difference",
                "insertText": "adjacent_difference",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022adjacent_difference(const InIt First, const InIt Last, OutIt Dest, BinOp Func)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4adjacent_difference",
                "textEdit": {
                    "newText": "adjacent_difference",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "adjacent_find",
                "insertText": "adjacent_find",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022adjacent_find(const FwdIt First, FwdIt Last, Pr Pred)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4adjacent_find",
                "textEdit": {
                    "newText": "adjacent_find",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <algorithm>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "FwdIt",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <algorithm>"
                },
                "filterText": "adjacent_find",
                "insertText": "adjacent_find",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022adjacent_find(const FwdIt First, const FwdIt Last)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4adjacent_find",
                "textEdit": {
                    "newText": "adjacent_find",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>\nfrom <iterator>"
                },
                "filterText": "advance",
                "insertText": "advance",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022advance(InIt &Where, Diff Off)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1advance",
                "textEdit": {
                    "newText": "advance",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "const adopt_lock_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "adopt_lock",
                "insertText": "adopt_lock",
                "insertTextFormat": 1,
                "kind": 6,
                "label": "\u2022adopt_lock",
                "score": 0.19701893627643585,
                "sortText": "41b640abadopt_lock",
                "textEdit": {
                    "newText": "adopt_lock",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ratio>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ratio>"
                },
                "filterText": "ratio_add",
                "insertText": "ratio_add",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022ratio_add<class Rx1, class Rx2>",
                "score": 0.5076508522033691,
                "sortText": "41bd0fe4ratio_add",
                "textEdit": {
                    "newText": "ratio_add",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplinterface.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "T",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplinterface.h>"
                },
                "filterText": "atomic_decrement",
                "insertText": "Concurrency::details::atomic_decrement",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::details::atomic_decrement(::std::atomic<T> &Target)",
                "score": 0.22347019612789154,
                "sortText": "41d45ff9atomic_decrement",
                "textEdit": {
                    "newText": "Concurrency::details::atomic_decrement",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <experimental/filesystem>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::experimental::filesystem::perms",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <experimental/filesystem>"
                },
                "filterText": "add_perms",
                "insertText": "experimental::filesystem::perms::add_perms",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022experimental::filesystem::perms::add_perms",
                "score": 0.16323184967041016,
                "sortText": "41d8d9c0add_perms",
                "textEdit": {
                    "newText": "experimental::filesystem::perms::add_perms",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEAFNOSUPPORT"
                },
                "filterText": "address_family_not_supported",
                "insertText": "errc::address_family_not_supported",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::address_family_not_supported",
                "score": 0.13731007277965546,
                "sortText": "41f364fdaddress_family_not_supported",
                "textEdit": {
                    "newText": "errc::address_family_not_supported",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEADDRINUSE"
                },
                "filterText": "address_in_use",
                "insertText": "errc::address_in_use",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::address_in_use",
                "score": 0.13731007277965546,
                "sortText": "41f364fdaddress_in_use",
                "textEdit": {
                    "newText": "errc::address_in_use",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEADDRNOTAVAIL"
                },
                "filterText": "address_not_available",
                "insertText": "errc::address_not_available",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::address_not_available",
                "score": 0.13731007277965546,
                "sortText": "41f364fdaddress_not_available",
                "textEdit": {
                    "newText": "errc::address_not_available",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_const",
                "insertText": "tr1::add_const",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::add_const",
                "score": 0.10541268438100815,
                "sortText": "42281d65add_const",
                "textEdit": {
                    "newText": "tr1::add_const",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_cv",
                "insertText": "tr1::add_cv",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::add_cv",
                "score": 0.10541268438100815,
                "sortText": "42281d65add_cv",
                "textEdit": {
                    "newText": "tr1::add_cv",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_pointer",
                "insertText": "tr1::add_pointer",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::add_pointer",
                "score": 0.10541268438100815,
                "sortText": "42281d65add_pointer",
                "textEdit": {
                    "newText": "tr1::add_pointer",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "add_volatile",
                "insertText": "tr1::add_volatile",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::add_volatile",
                "score": 0.10541268438100815,
                "sortText": "42281d65add_volatile",
                "textEdit": {
                    "newText": "tr1::add_volatile",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplinterface.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "T",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplinterface.h>"
                },
                "filterText": "atomic_add",
                "insertText": "Concurrency::details::atomic_add",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::details::atomic_add(::std::atomic<T> &Target, T Value)",
                "score": 0.22347019612789154,
                "sortText": "42545ff9atomic_add",
                "textEdit": {
                    "newText": "Concurrency::details::atomic_add",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEFAULT"
                },
                "filterText": "bad_address",
                "insertText": "errc::bad_address",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::bad_address",
                "score": 0.13731007277965546,
                "sortText": "42ad177cbad_address",
                "textEdit": {
                    "newText": "errc::bad_address",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEDESTADDRREQ"
                },
                "filterText": "destination_address_required",
                "insertText": "errc::destination_address_required",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::destination_address_required",
                "score": 0.13731007277965546,
                "sortText": "42ad177cdestination_address_required",
                "textEdit": {
                    "newText": "errc::destination_address_required",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nEISDIR"
                },
                "filterText": "is_a_directory",
                "insertText": "errc::is_a_directory",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::is_a_directory",
                "score": 0.13731007277965546,
                "sortText": "437364fdis_a_directory",
                "textEdit": {
                    "newText": "errc::is_a_directory",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nENOTDIR"
                },
                "filterText": "not_a_directory",
                "insertText": "errc::not_a_directory",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::not_a_directory",
                "score": 0.13731007277965546,
                "sortText": "437364fdnot_a_directory",
                "textEdit": {
                    "newText": "errc::not_a_directory",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['add_const', 'add_const_t', 'add_cv', 'add_cv_t', 'add_lvalue_reference', 'add_lvalue_reference_t', 'add_pointer', 'add_pointer_t', 'add_rvalue_reference', 'add_rvalue_reference_t', 'add_volatile', 'add_volatile_t', 'adopt_lock_t', 'addressof', 'addressof', 'adjacent_difference', 'adjacent_difference', 'adjacent_find', 'adjacent_find', 'advance', 'adopt_lock', 'ratio_add', 'Concurrency::details::atomic_decrement', 'experimental::filesystem::perms::add_perms', 'errc::address_family_not_supported', 'errc::address_in_use', 'errc::address_not_available', 'tr1::add_const', 'tr1::add_cv', 'tr1::add_pointer', 'tr1::add_volatile', 'Concurrency::details::atomic_add', 'errc::bad_address', 'errc::destination_address_required', 'errc::is_a_directory', 'errc::not_a_directory']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_file_not_found",
                "message": "'bits/stdc++.h' file not found",
                "range": {
                    "end": {
                        "character": 24,
                        "line": 0
                    },
                    "start": {
                        "character": 9,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ext_using_undefined_std",
                "message": "Using directive refers to implicitly-defined namespace 'std'",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 2
                    },
                    "start": {
                        "character": 16,
                        "line": 2
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 4
                    },
                    "start": {
                        "character": 21,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 39,
                        "line": 5
                    },
                    "start": {
                        "character": 25,
                        "line": 5
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'adf'",
                "range": {
                    "end": {
                        "character": 13,
                        "line": 10
                    },
                    "start": {
                        "character": 10,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 77
                    },
                    "start": {
                        "character": 1,
                        "line": 77
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 78
                    },
                    "start": {
                        "character": 1,
                        "line": 78
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 79
                    },
                    "start": {
                        "character": 1,
                        "line": 79
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 14,
                        "line": 80
                    },
                    "start": {
                        "character": 8,
                        "line": 80
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 81
                    },
                    "start": {
                        "character": 1,
                        "line": 81
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 115
                    },
                    "start": {
                        "character": 21,
                        "line": 115
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 128
                    },
                    "start": {
                        "character": 30,
                        "line": 128
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 27,
                        "line": 152
                    },
                    "start": {
                        "character": 21,
                        "line": 152
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 173
                    },
                    "start": {
                        "character": 1,
                        "line": 173
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 220
                    },
                    "start": {
                        "character": 30,
                        "line": 220
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 220
                    },
                    "start": {
                        "character": 49,
                        "line": 220
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 32,
                        "line": 244
                    },
                    "start": {
                        "character": 26,
                        "line": 244
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 51,
                        "line": 244
                    },
                    "start": {
                        "character": 45,
                        "line": 244
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 284
                    },
                    "start": {
                        "character": 29,
                        "line": 284
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 54,
                        "line": 284
                    },
                    "start": {
                        "character": 48,
                        "line": 284
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 320
                    },
                    "start": {
                        "character": 30,
                        "line": 320
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 30
    }
}
Diagnostics received from LSP.
Errors received: [[0, [9, 24]], [4, [21, 35]], [5, [25, 39]], [10, [10, 13]], [77, [1, 7]], [78, [1, 7]], [79, [1, 7]], [80, [8, 14]], [81, [1, 7]], [115, [21, 26]], [128, [30, 36]], [152, [21, 27]], [173, [1, 7]], [220, [30, 36]], [220, [49, 55]], [244, [26, 32]], [244, [45, 51]], [284, [29, 35]], [284, [48, 54]], [320, [30, 36]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "filterText": "alignas",
                "insertText": "alignas",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignas(expression)",
                "score": 0.7694156765937805,
                "sortText": "40bb0793alignas",
                "textEdit": {
                    "newText": "alignas",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.7694156765937805,
                "sortText": "40bb0793auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "adopt_lock_t",
                "insertText": "adopt_lock_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022adopt_lock_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98adopt_lock_t",
                "textEdit": {
                    "newText": "adopt_lock_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator_arg_t",
                "insertText": "allocator_arg_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator_arg_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98allocator_arg_t",
                "textEdit": {
                    "newText": "allocator_arg_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_bool",
                "insertText": "atomic_bool",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_bool",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_bool",
                "textEdit": {
                    "newText": "atomic_bool",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_char",
                "insertText": "atomic_char",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_char",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_char",
                "textEdit": {
                    "newText": "atomic_char",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_char32_t",
                "insertText": "atomic_char32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_char32_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_char32_t",
                "textEdit": {
                    "newText": "atomic_char32_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag",
                "insertText": "atomic_flag",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022atomic_flag",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_flag",
                "textEdit": {
                    "newText": "atomic_flag",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int",
                "insertText": "atomic_int",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int",
                "textEdit": {
                    "newText": "atomic_int",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int16_t",
                "insertText": "atomic_int16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int16_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int16_t",
                "textEdit": {
                    "newText": "atomic_int16_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int32_t",
                "insertText": "atomic_int32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int32_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int32_t",
                "textEdit": {
                    "newText": "atomic_int32_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int64_t",
                "insertText": "atomic_int64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int64_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int64_t",
                "textEdit": {
                    "newText": "atomic_int64_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int8_t",
                "insertText": "atomic_int8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int8_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int8_t",
                "textEdit": {
                    "newText": "atomic_int8_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast16_t",
                "insertText": "atomic_int_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast16_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int_fast16_t",
                "textEdit": {
                    "newText": "atomic_int_fast16_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast32_t",
                "insertText": "atomic_int_fast32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast32_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int_fast32_t",
                "textEdit": {
                    "newText": "atomic_int_fast32_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast64_t",
                "insertText": "atomic_int_fast64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast64_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int_fast64_t",
                "textEdit": {
                    "newText": "atomic_int_fast64_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast8_t",
                "insertText": "atomic_int_fast8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast8_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int_fast8_t",
                "textEdit": {
                    "newText": "atomic_int_fast8_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least16_t",
                "insertText": "atomic_int_least16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least16_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int_least16_t",
                "textEdit": {
                    "newText": "atomic_int_least16_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least32_t",
                "insertText": "atomic_int_least32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least32_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int_least32_t",
                "textEdit": {
                    "newText": "atomic_int_least32_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least8_t",
                "insertText": "atomic_int_least8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least8_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_int_least8_t",
                "textEdit": {
                    "newText": "atomic_int_least8_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_intmax_t",
                "insertText": "atomic_intmax_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_intmax_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_intmax_t",
                "textEdit": {
                    "newText": "atomic_intmax_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_intptr_t",
                "insertText": "atomic_intptr_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_intptr_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_intptr_t",
                "textEdit": {
                    "newText": "atomic_intptr_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_llong",
                "insertText": "atomic_llong",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_llong",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_llong",
                "textEdit": {
                    "newText": "atomic_llong",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ptrdiff_t",
                "insertText": "atomic_ptrdiff_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ptrdiff_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_ptrdiff_t",
                "textEdit": {
                    "newText": "atomic_ptrdiff_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_short",
                "insertText": "atomic_short",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_short",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_short",
                "textEdit": {
                    "newText": "atomic_short",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_size_t",
                "insertText": "atomic_size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_size_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_size_t",
                "textEdit": {
                    "newText": "atomic_size_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uchar",
                "insertText": "atomic_uchar",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uchar",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uchar",
                "textEdit": {
                    "newText": "atomic_uchar",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint",
                "insertText": "atomic_uint",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uint",
                "textEdit": {
                    "newText": "atomic_uint",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint32_t",
                "insertText": "atomic_uint32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint32_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uint32_t",
                "textEdit": {
                    "newText": "atomic_uint32_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint64_t",
                "insertText": "atomic_uint64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint64_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uint64_t",
                "textEdit": {
                    "newText": "atomic_uint64_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast16_t",
                "insertText": "atomic_uint_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast16_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uint_fast16_t",
                "textEdit": {
                    "newText": "atomic_uint_fast16_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast64_t",
                "insertText": "atomic_uint_fast64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast64_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uint_fast64_t",
                "textEdit": {
                    "newText": "atomic_uint_fast64_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast8_t",
                "insertText": "atomic_uint_fast8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast8_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uint_fast8_t",
                "textEdit": {
                    "newText": "atomic_uint_fast8_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_least16_t",
                "insertText": "atomic_uint_least16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_least16_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uint_least16_t",
                "textEdit": {
                    "newText": "atomic_uint_least16_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_least32_t",
                "insertText": "atomic_uint_least32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_least32_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uint_least32_t",
                "textEdit": {
                    "newText": "atomic_uint_least32_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_least8_t",
                "insertText": "atomic_uint_least8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_least8_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uint_least8_t",
                "textEdit": {
                    "newText": "atomic_uint_least8_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uintmax_t",
                "insertText": "atomic_uintmax_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uintmax_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uintmax_t",
                "textEdit": {
                    "newText": "atomic_uintmax_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uintptr_t",
                "insertText": "atomic_uintptr_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uintptr_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_uintptr_t",
                "textEdit": {
                    "newText": "atomic_uintptr_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ulong",
                "insertText": "atomic_ulong",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ulong",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_ulong",
                "textEdit": {
                    "newText": "atomic_ulong",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ushort",
                "insertText": "atomic_ushort",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ushort",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_ushort",
                "textEdit": {
                    "newText": "atomic_ushort",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_wchar_t",
                "insertText": "atomic_wchar_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_wchar_t",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98atomic_wchar_t",
                "textEdit": {
                    "newText": "atomic_wchar_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR32_T_LOCK_FREE",
                "score": 0.35306480526924133,
                "sortText": "414b3b17ATOMIC_CHAR32_T_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR32_T_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR_LOCK_FREE",
                "insertText": "ATOMIC_CHAR_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR_LOCK_FREE",
                "score": 0.35306480526924133,
                "sortText": "414b3b17ATOMIC_CHAR_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_FLAG_INIT",
                "insertText": "ATOMIC_FLAG_INIT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_FLAG_INIT",
                "score": 0.35306480526924133,
                "sortText": "414b3b17ATOMIC_FLAG_INIT",
                "textEdit": {
                    "newText": "ATOMIC_FLAG_INIT",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_INT_LOCK_FREE",
                "insertText": "ATOMIC_INT_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_INT_LOCK_FREE",
                "score": 0.35306480526924133,
                "sortText": "414b3b17ATOMIC_INT_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_INT_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_LLONG_LOCK_FREE",
                "insertText": "ATOMIC_LLONG_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_LLONG_LOCK_FREE",
                "score": 0.35306480526924133,
                "sortText": "414b3b17ATOMIC_LLONG_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_LLONG_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_LONG_LOCK_FREE",
                "insertText": "ATOMIC_LONG_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_LONG_LOCK_FREE",
                "score": 0.35306480526924133,
                "sortText": "414b3b17ATOMIC_LONG_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_LONG_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_SHORT_LOCK_FREE",
                "insertText": "ATOMIC_SHORT_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_SHORT_LOCK_FREE",
                "score": 0.35306480526924133,
                "sortText": "414b3b17ATOMIC_SHORT_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_SHORT_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_VAR_INIT",
                "insertText": "ATOMIC_VAR_INIT",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ATOMIC_VAR_INIT(_Value)",
                "score": 0.35306480526924133,
                "sortText": "414b3b17ATOMIC_VAR_INIT",
                "textEdit": {
                    "newText": "ATOMIC_VAR_INIT",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>\n[valarray.transcend] Transcendentals"
                },
                "filterText": "abs",
                "insertText": "abs",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022abs(const valarray<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4abs",
                "textEdit": {
                    "newText": "abs",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "abs",
                "insertText": "abs",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022abs(const complex<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4abs",
                "textEdit": {
                    "newText": "abs",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "acos",
                "insertText": "acos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022acos(const valarray<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4acos",
                "textEdit": {
                    "newText": "acos",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "acos",
                "insertText": "acos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022acos(const complex<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4acos",
                "textEdit": {
                    "newText": "acos",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "acosh",
                "insertText": "acosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022acosh(const complex<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4acosh",
                "textEdit": {
                    "newText": "acosh",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "arg",
                "insertText": "arg",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022arg(const complex<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4arg",
                "textEdit": {
                    "newText": "arg",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Upgrade_to_double<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "arg",
                "insertText": "arg",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022arg(Ty Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4arg",
                "textEdit": {
                    "newText": "arg",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asin",
                "insertText": "asin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asin(const valarray<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4asin",
                "textEdit": {
                    "newText": "asin",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asin",
                "insertText": "asin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asin(const complex<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4asin",
                "textEdit": {
                    "newText": "asin",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinh",
                "insertText": "asinh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asinh(const complex<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4asinh",
                "textEdit": {
                    "newText": "asinh",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <future>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "future<_Invoke_result_t<decay_t<Fty>, decay_t<ArgTypes>...>>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <future>"
                },
                "filterText": "async",
                "insertText": "async",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022async(launch Policy, Fty &&Fnarg, ArgTypes &&Args...)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4async",
                "textEdit": {
                    "newText": "async",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <future>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "future<_Invoke_result_t<decay_t<Fty>, decay_t<ArgTypes>...>>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <future>"
                },
                "filterText": "async",
                "insertText": "async",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022async(Fty &&Fnarg, ArgTypes &&Args...)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4async",
                "textEdit": {
                    "newText": "async",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "atan",
                "insertText": "atan",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atan(const valarray<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atan",
                "textEdit": {
                    "newText": "atan",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "atan",
                "insertText": "atan",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atan(const complex<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atan",
                "textEdit": {
                    "newText": "atan",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "atan2",
                "insertText": "atan2",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atan2(const valarray<Ty> &Left, const typename valarray<Ty>::value_type &Right)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atan2",
                "textEdit": {
                    "newText": "atan2",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "atan2",
                "insertText": "atan2",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atan2(const valarray<Ty> &Left, const valarray<Ty> &Right)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atan2",
                "textEdit": {
                    "newText": "atan2",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "atan2",
                "insertText": "atan2",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atan2(const typename valarray<Ty>::value_type &Left, const valarray<Ty> &Right)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atan2",
                "textEdit": {
                    "newText": "atan2",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "atanh",
                "insertText": "atanh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atanh(const complex<Ty> &Left)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atanh",
                "textEdit": {
                    "newText": "atanh",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_exchange",
                "insertText": "atomic_exchange",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_exchange(volatile atomic<Ty> *const Mem, const _Identity_t<Ty> Value)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_exchange",
                "textEdit": {
                    "newText": "atomic_exchange",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_add",
                "insertText": "atomic_fetch_add",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_add(volatile atomic<Ty> *Mem, const typename atomic<Ty>::difference_type Value)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_add",
                "textEdit": {
                    "newText": "atomic_fetch_add",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_add_explicit",
                "insertText": "atomic_fetch_add_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_add_explicit(atomic<Ty> *Mem, const typename atomic<Ty>::difference_type Value, const memory_order Order)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_add_explicit",
                "textEdit": {
                    "newText": "atomic_fetch_add_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_and",
                "insertText": "atomic_fetch_and",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_and(atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_and",
                "textEdit": {
                    "newText": "atomic_fetch_and",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_and_explicit",
                "insertText": "atomic_fetch_and_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_and_explicit(atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value, const memory_order Order)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_and_explicit",
                "textEdit": {
                    "newText": "atomic_fetch_and_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_or",
                "insertText": "atomic_fetch_or",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_or(volatile atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_or",
                "textEdit": {
                    "newText": "atomic_fetch_or",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_or",
                "insertText": "atomic_fetch_or",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_or(atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_or",
                "textEdit": {
                    "newText": "atomic_fetch_or",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_or_explicit",
                "insertText": "atomic_fetch_or_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_or_explicit(atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value, const memory_order Order)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_or_explicit",
                "textEdit": {
                    "newText": "atomic_fetch_or_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_or_explicit",
                "insertText": "atomic_fetch_or_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_or_explicit(volatile atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value, const memory_order Order)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_or_explicit",
                "textEdit": {
                    "newText": "atomic_fetch_or_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_sub",
                "insertText": "atomic_fetch_sub",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_sub(atomic<Ty> *Mem, const typename atomic<Ty>::difference_type Value)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_sub",
                "textEdit": {
                    "newText": "atomic_fetch_sub",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_sub_explicit",
                "insertText": "atomic_fetch_sub_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_sub_explicit(atomic<Ty> *Mem, const typename atomic<Ty>::difference_type Value, const memory_order Order)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_sub_explicit",
                "textEdit": {
                    "newText": "atomic_fetch_sub_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_xor",
                "insertText": "atomic_fetch_xor",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_xor(atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_xor",
                "textEdit": {
                    "newText": "atomic_fetch_xor",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_xor",
                "insertText": "atomic_fetch_xor",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_xor(volatile atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_xor",
                "textEdit": {
                    "newText": "atomic_fetch_xor",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_xor_explicit",
                "insertText": "atomic_fetch_xor_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_xor_explicit(atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value, const memory_order Order)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_fetch_xor_explicit",
                "textEdit": {
                    "newText": "atomic_fetch_xor_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_load",
                "insertText": "atomic_load",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_load(const atomic<Ty> *const Mem)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_load",
                "textEdit": {
                    "newText": "atomic_load",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_load_explicit",
                "insertText": "atomic_load_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_load_explicit(const volatile atomic<Ty> *const Mem, const memory_order Order)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_load_explicit",
                "textEdit": {
                    "newText": "atomic_load_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_load_explicit",
                "insertText": "atomic_load_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_load_explicit(const atomic<Ty> *const Mem, const memory_order Order)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4atomic_load_explicit",
                "textEdit": {
                    "newText": "atomic_load_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_compare_exchange_strong",
                "insertText": "atomic_compare_exchange_strong",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_compare_exchange_strong(atomic<Ty> *const Mem, _Identity_t<Ty> *const Expected, const _Identity_t<Ty> Desired)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_compare_exchange_strong",
                "textEdit": {
                    "newText": "atomic_compare_exchange_strong",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_compare_exchange_strong",
                "insertText": "atomic_compare_exchange_strong",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_compare_exchange_strong(volatile atomic<Ty> *const Mem, _Identity_t<Ty> *const Expected, const _Identity_t<Ty> Desired)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_compare_exchange_strong",
                "textEdit": {
                    "newText": "atomic_compare_exchange_strong",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_compare_exchange_weak",
                "insertText": "atomic_compare_exchange_weak",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_compare_exchange_weak(atomic<Ty> *const Mem, _Identity_t<Ty> *const Expected, const _Identity_t<Ty> Desired)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_compare_exchange_weak",
                "textEdit": {
                    "newText": "atomic_compare_exchange_weak",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_clear",
                "insertText": "atomic_flag_clear",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_clear(atomic_flag *const Flag)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_flag_clear",
                "textEdit": {
                    "newText": "atomic_flag_clear",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_clear_explicit",
                "insertText": "atomic_flag_clear_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_clear_explicit(atomic_flag *const Flag, const memory_order Order)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_flag_clear_explicit",
                "textEdit": {
                    "newText": "atomic_flag_clear_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_clear_explicit",
                "insertText": "atomic_flag_clear_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_clear_explicit(volatile atomic_flag *const Flag, const memory_order Order)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_flag_clear_explicit",
                "textEdit": {
                    "newText": "atomic_flag_clear_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_test_and_set",
                "insertText": "atomic_flag_test_and_set",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_test_and_set(volatile atomic_flag *const Flag)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_flag_test_and_set",
                "textEdit": {
                    "newText": "atomic_flag_test_and_set",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_test_and_set",
                "insertText": "atomic_flag_test_and_set",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_test_and_set(atomic_flag *const Flag)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_flag_test_and_set",
                "textEdit": {
                    "newText": "atomic_flag_test_and_set",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_test_and_set_explicit",
                "insertText": "atomic_flag_test_and_set_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_test_and_set_explicit(atomic_flag *const Flag, const memory_order Order)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_flag_test_and_set_explicit",
                "textEdit": {
                    "newText": "atomic_flag_test_and_set_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_test_and_set_explicit",
                "insertText": "atomic_flag_test_and_set_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_test_and_set_explicit(volatile atomic_flag *const Flag, const memory_order Order)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_flag_test_and_set_explicit",
                "textEdit": {
                    "newText": "atomic_flag_test_and_set_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_init",
                "insertText": "atomic_init",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_init(atomic<Ty> *const Mem, const typename atomic<Ty>::value_type Value)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_init",
                "textEdit": {
                    "newText": "atomic_init",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_is_lock_free",
                "insertText": "atomic_is_lock_free",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_is_lock_free(const volatile atomic<Ty> *Mem)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_is_lock_free",
                "textEdit": {
                    "newText": "atomic_is_lock_free",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_signal_fence",
                "insertText": "atomic_signal_fence",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_signal_fence(const memory_order Order)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_signal_fence",
                "textEdit": {
                    "newText": "atomic_signal_fence",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_store",
                "insertText": "atomic_store",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_store(atomic<Ty> *const Mem, const _Identity_t<Ty> Value)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_store",
                "textEdit": {
                    "newText": "atomic_store",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_thread_fence",
                "insertText": "atomic_thread_fence",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_thread_fence(const memory_order Order)",
                "score": 0.21539734303951263,
                "sortText": "41a36ee1atomic_thread_fence",
                "textEdit": {
                    "newText": "atomic_thread_fence",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "const adopt_lock_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "adopt_lock",
                "insertText": "adopt_lock",
                "insertTextFormat": 1,
                "kind": 6,
                "label": "\u2022adopt_lock",
                "score": 0.19701893627643585,
                "sortText": "41b640abadopt_lock",
                "textEdit": {
                    "newText": "adopt_lock",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['alignas', 'auto', 'adopt_lock_t', 'allocator_arg_t', 'atomic_bool', 'atomic_char', 'atomic_char32_t', 'atomic_flag', 'atomic_int', 'atomic_int16_t', 'atomic_int32_t', 'atomic_int64_t', 'atomic_int8_t', 'atomic_int_fast16_t', 'atomic_int_fast32_t', 'atomic_int_fast64_t', 'atomic_int_fast8_t', 'atomic_int_least16_t', 'atomic_int_least32_t', 'atomic_int_least8_t', 'atomic_intmax_t', 'atomic_intptr_t', 'atomic_llong', 'atomic_ptrdiff_t', 'atomic_short', 'atomic_size_t', 'atomic_uchar', 'atomic_uint', 'atomic_uint32_t', 'atomic_uint64_t', 'atomic_uint_fast16_t', 'atomic_uint_fast64_t', 'atomic_uint_fast8_t', 'atomic_uint_least16_t', 'atomic_uint_least32_t', 'atomic_uint_least8_t', 'atomic_uintmax_t', 'atomic_uintptr_t', 'atomic_ulong', 'atomic_ushort', 'atomic_wchar_t', 'ATOMIC_CHAR32_T_LOCK_FREE', 'ATOMIC_CHAR_LOCK_FREE', 'ATOMIC_FLAG_INIT', 'ATOMIC_INT_LOCK_FREE', 'ATOMIC_LLONG_LOCK_FREE', 'ATOMIC_LONG_LOCK_FREE', 'ATOMIC_SHORT_LOCK_FREE', 'ATOMIC_VAR_INIT', 'abs', 'abs', 'acos', 'acos', 'acosh', 'arg', 'arg', 'asin', 'asin', 'asinh', 'async', 'async', 'atan', 'atan', 'atan2', 'atan2', 'atan2', 'atanh', 'atomic_exchange', 'atomic_fetch_add', 'atomic_fetch_add_explicit', 'atomic_fetch_and', 'atomic_fetch_and_explicit', 'atomic_fetch_or', 'atomic_fetch_or', 'atomic_fetch_or_explicit', 'atomic_fetch_or_explicit', 'atomic_fetch_sub', 'atomic_fetch_sub_explicit', 'atomic_fetch_xor', 'atomic_fetch_xor', 'atomic_fetch_xor_explicit', 'atomic_load', 'atomic_load_explicit', 'atomic_load_explicit', 'atomic_compare_exchange_strong', 'atomic_compare_exchange_strong', 'atomic_compare_exchange_weak', 'atomic_flag_clear', 'atomic_flag_clear_explicit', 'atomic_flag_clear_explicit', 'atomic_flag_test_and_set', 'atomic_flag_test_and_set', 'atomic_flag_test_and_set_explicit', 'atomic_flag_test_and_set_explicit', 'atomic_init', 'atomic_is_lock_free', 'atomic_signal_fence', 'atomic_store', 'atomic_thread_fence', 'adopt_lock']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_file_not_found",
                "message": "'bits/stdc++.h' file not found",
                "range": {
                    "end": {
                        "character": 24,
                        "line": 0
                    },
                    "start": {
                        "character": 9,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ext_using_undefined_std",
                "message": "Using directive refers to implicitly-defined namespace 'std'",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 2
                    },
                    "start": {
                        "character": 16,
                        "line": 2
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 4
                    },
                    "start": {
                        "character": 21,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 39,
                        "line": 5
                    },
                    "start": {
                        "character": 25,
                        "line": 5
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'ad'",
                "range": {
                    "end": {
                        "character": 12,
                        "line": 10
                    },
                    "start": {
                        "character": 10,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 77
                    },
                    "start": {
                        "character": 1,
                        "line": 77
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 78
                    },
                    "start": {
                        "character": 1,
                        "line": 78
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 79
                    },
                    "start": {
                        "character": 1,
                        "line": 79
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 14,
                        "line": 80
                    },
                    "start": {
                        "character": 8,
                        "line": 80
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 81
                    },
                    "start": {
                        "character": 1,
                        "line": 81
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 115
                    },
                    "start": {
                        "character": 21,
                        "line": 115
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 128
                    },
                    "start": {
                        "character": 30,
                        "line": 128
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 27,
                        "line": 152
                    },
                    "start": {
                        "character": 21,
                        "line": 152
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 173
                    },
                    "start": {
                        "character": 1,
                        "line": 173
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 220
                    },
                    "start": {
                        "character": 30,
                        "line": 220
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 220
                    },
                    "start": {
                        "character": 49,
                        "line": 220
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 32,
                        "line": 244
                    },
                    "start": {
                        "character": 26,
                        "line": 244
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 51,
                        "line": 244
                    },
                    "start": {
                        "character": 45,
                        "line": 244
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 284
                    },
                    "start": {
                        "character": 29,
                        "line": 284
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 54,
                        "line": 284
                    },
                    "start": {
                        "character": 48,
                        "line": 284
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 320
                    },
                    "start": {
                        "character": 30,
                        "line": 320
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 31
    }
}
Diagnostics received from LSP.
Errors received: [[0, [9, 24]], [4, [21, 35]], [5, [25, 39]], [10, [10, 12]], [77, [1, 7]], [78, [1, 7]], [79, [1, 7]], [80, [8, 14]], [81, [1, 7]], [115, [21, 26]], [128, [30, 36]], [152, [21, 27]], [173, [1, 7]], [220, [30, 36]], [220, [49, 55]], [244, [26, 32]], [244, [45, 51]], [284, [29, 35]], [284, [48, 54]], [320, [30, 36]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "muchie de la x la y cu costul cost"
                },
                "filterText": "Muchie",
                "insertText": "Muchie",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Muchie",
                "score": 2.66562557220459,
                "sortText": "3fd56664Muchie",
                "textEdit": {
                    "newText": "Muchie",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 1.1117926836013794,
                "sortText": "4071b0c7struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 1.0194766521453857,
                "sortText": "407d81casize_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "type_info",
                "insertText": "type_info",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " type_info",
                "score": 0.816092848777771,
                "sortText": "40af148atype_info",
                "textEdit": {
                    "newText": "type_info",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.7694156765937805,
                "sortText": "40bb0793_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.7694156765937805,
                "sortText": "40bb0793_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.7694156765937805,
                "sortText": "40bb0793_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "alignas",
                "insertText": "alignas",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignas(expression)",
                "score": 0.7694156765937805,
                "sortText": "40bb0793alignas",
                "textEdit": {
                    "newText": "alignas",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.7694156765937805,
                "sortText": "40bb0793auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.7694156765937805,
                "sortText": "40bb0793bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.7694156765937805,
                "sortText": "40bb0793char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.7694156765937805,
                "sortText": "40bb0793char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.7694156765937805,
                "sortText": "40bb0793char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.7694156765937805,
                "sortText": "40bb0793class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.7694156765937805,
                "sortText": "40bb0793const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.7694156765937805,
                "sortText": "40bb0793constexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.7694156765937805,
                "sortText": "40bb0793decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.7694156765937805,
                "sortText": "40bb0793double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.7694156765937805,
                "sortText": "40bb0793enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "explicit",
                "insertText": "explicit",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " explicit",
                "score": 0.7694156765937805,
                "sortText": "40bb0793explicit",
                "textEdit": {
                    "newText": "explicit",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "extern",
                "insertText": "extern",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " extern",
                "score": 0.7694156765937805,
                "sortText": "40bb0793extern",
                "textEdit": {
                    "newText": "extern",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.7694156765937805,
                "sortText": "40bb0793float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "friend",
                "insertText": "friend",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " friend",
                "score": 0.7694156765937805,
                "sortText": "40bb0793friend",
                "textEdit": {
                    "newText": "friend",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "inline",
                "insertText": "inline",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " inline",
                "score": 0.7694156765937805,
                "sortText": "40bb0793inline",
                "textEdit": {
                    "newText": "inline",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.7694156765937805,
                "sortText": "40bb0793int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.7694156765937805,
                "sortText": "40bb0793long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "mutable",
                "insertText": "mutable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " mutable",
                "score": 0.7694156765937805,
                "sortText": "40bb0793mutable",
                "textEdit": {
                    "newText": "mutable",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.7694156765937805,
                "sortText": "40bb0793operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "private",
                "insertText": "private",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " private",
                "score": 0.7694156765937805,
                "sortText": "40bb0793private",
                "textEdit": {
                    "newText": "private",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "protected",
                "insertText": "protected",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " protected",
                "score": 0.7694156765937805,
                "sortText": "40bb0793protected",
                "textEdit": {
                    "newText": "protected",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "public",
                "insertText": "public",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " public",
                "score": 0.7694156765937805,
                "sortText": "40bb0793public",
                "textEdit": {
                    "newText": "public",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.7694156765937805,
                "sortText": "40bb0793short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.7694156765937805,
                "sortText": "40bb0793signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "static",
                "insertText": "static",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " static",
                "score": 0.7694156765937805,
                "sortText": "40bb0793static",
                "textEdit": {
                    "newText": "static",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "static_assert",
                "insertText": "static_assert",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_assert(expression, message);",
                "score": 0.7694156765937805,
                "sortText": "40bb0793static_assert",
                "textEdit": {
                    "newText": "static_assert",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "template",
                "insertText": "template",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " template",
                "score": 0.7694156765937805,
                "sortText": "40bb0793template",
                "textEdit": {
                    "newText": "template",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "thread_local",
                "insertText": "thread_local",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " thread_local",
                "score": 0.7694156765937805,
                "sortText": "40bb0793thread_local",
                "textEdit": {
                    "newText": "thread_local",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "typedef",
                "insertText": "typedef",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typedef type name;",
                "score": 0.7694156765937805,
                "sortText": "40bb0793typedef",
                "textEdit": {
                    "newText": "typedef",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.7694156765937805,
                "sortText": "40bb0793typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.7694156765937805,
                "sortText": "40bb0793union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.7694156765937805,
                "sortText": "40bb0793unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using qualifier::name;",
                "score": 0.7694156765937805,
                "sortText": "40bb0793using",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using name = type;",
                "score": 0.7694156765937805,
                "sortText": "40bb0793using",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "virtual",
                "insertText": "virtual",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " virtual",
                "score": 0.7694156765937805,
                "sortText": "40bb0793virtual",
                "textEdit": {
                    "newText": "virtual",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.7694156765937805,
                "sortText": "40bb0793void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.7694156765937805,
                "sortText": "40bb0793volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.7694156765937805,
                "sortText": "40bb0793wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "concurrency",
                "insertText": "concurrency",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " concurrency",
                "score": 0.7385311722755432,
                "sortText": "40c2ef9fconcurrency",
                "textEdit": {
                    "newText": "concurrency",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "chrono_literals",
                "insertText": "chrono_literals",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " chrono_literals",
                "score": 0.5800500512123108,
                "sortText": "40eb81d7chrono_literals",
                "textEdit": {
                    "newText": "chrono_literals",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "platform",
                "insertText": "Concurrency::details::platform",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " Concurrency::details::platform",
                "score": 0.5557445883750916,
                "sortText": "40f1bab9platform",
                "textEdit": {
                    "newText": "Concurrency::details::platform",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <string>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <string>"
                },
                "filterText": "char_traits",
                "insertText": "char_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022char_traits<class Elem>",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98char_traits",
                "textEdit": {
                    "newText": "char_traits",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "messages",
                "insertText": "messages",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022messages<class Elem>",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98messages",
                "textEdit": {
                    "newText": "messages",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "messages_base",
                "insertText": "messages_base",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022messages_base",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98messages_base",
                "textEdit": {
                    "newText": "messages_base",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "messages_byname",
                "insertText": "messages_byname",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022messages_byname<class Elem>",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98messages_byname",
                "textEdit": {
                    "newText": "messages_byname",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "once_flag",
                "insertText": "once_flag",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022once_flag",
                "score": 0.5076508522033691,
                "sortText": "40fe0a98once_flag",
                "textEdit": {
                    "newText": "once_flag",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <eh.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <eh.h>"
                },
                "filterText": "_se_translator_function",
                "insertText": "_se_translator_function",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022_se_translator_function",
                "score": 0.3206652104854584,
                "sortText": "415bd1c5_se_translator_function",
                "textEdit": {
                    "newText": "_se_translator_function",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <eh.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <eh.h>"
                },
                "filterText": "unexpected_handler",
                "insertText": "unexpected_handler",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022unexpected_handler",
                "score": 0.3206652104854584,
                "sortText": "415bd1c5unexpected_handler",
                "textEdit": {
                    "newText": "unexpected_handler",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Monobj<Money>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "get_money",
                "insertText": "get_money",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022get_money(Money &Val_arg, bool Intl_arg = false)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4get_money",
                "textEdit": {
                    "newText": "get_money",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Timeobj<Elem, tm *>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "get_time",
                "insertText": "get_time",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022get_time(tm *Tptr_arg, const Elem *Fmt_arg)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4get_time",
                "textEdit": {
                    "newText": "get_time",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_ostream<Elem2, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<<(basic_ostream<Elem2, Traits> &Ostr, const _Timeobj<Elem, Ptr> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_ostream<Elem, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<<(basic_ostream<Elem, Traits> &Ostr, const _Smanip<Arg> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_ostream<Elem2, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<<(basic_ostream<Elem2, Traits> &Ostr, const _Fillobj<Elem> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_ostream<Elem, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<<(basic_ostream<Elem, Traits> &Ostr, const _Quote_in<Elem, Traits, Alloc> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_ostream<Elem, OsTraits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<<(basic_ostream<Elem, OsTraits> &Ostr, const _Quote_out<Elem, Traits, Sizet> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_ostream<Elem, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator<<",
                "insertText": "operator<<",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator<<(basic_ostream<Elem, Traits> &Ostr, const _Monobj<Money> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator<<",
                "textEdit": {
                    "newText": "operator<<",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_istream<Elem, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>>(basic_istream<Elem, Traits> &Istr, const _Monobj<Money> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_istream<Elem2, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>>(basic_istream<Elem2, Traits> &Istr, const _Timeobj<Elem, Ptr> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_istream<Elem, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>>(basic_istream<Elem, Traits> &Istr, const _Smanip<Arg> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "basic_istream<Elem, Traits> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "operator>>",
                "insertText": "operator>>",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022operator>>(basic_istream<Elem, Traits> &Istr, const _Quote_in<Elem, Traits, Alloc> &Manip)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4operator>>",
                "textEdit": {
                    "newText": "operator>>",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Monobj<const Money>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "put_money",
                "insertText": "put_money",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022put_money(const Money &Val_arg, bool Intl_arg = false)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4put_money",
                "textEdit": {
                    "newText": "put_money",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Timeobj<Elem, const tm *>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "put_time",
                "insertText": "put_time",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022put_time(const tm *Tptr_arg, const Elem *Fmt_arg)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4put_time",
                "textEdit": {
                    "newText": "put_time",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Quote_in<Elem, Traits, Alloc>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "quoted",
                "insertText": "quoted",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022quoted(basic_string<Elem, Traits, Alloc> &Str, Elem Delim = _Elem('\"'), Elem Escape = _Elem('\\\\'))",
                "score": 0.27917516231536865,
                "sortText": "41710ff4quoted",
                "textEdit": {
                    "newText": "quoted",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Quote_out<Elem, Traits, typename basic_string<Elem, Traits, Alloc>::size_type>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "quoted",
                "insertText": "quoted",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022quoted(const basic_string<Elem, Traits, Alloc> &Str, Elem Delim = _Elem('\"'), Elem Escape = _Elem('\\\\'))",
                "score": 0.27917516231536865,
                "sortText": "41710ff4quoted",
                "textEdit": {
                    "newText": "quoted",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Quote_out<Elem, void, size_t>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "quoted",
                "insertText": "quoted",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022quoted(const Elem *Ptr, Elem Delim = _Elem('\"'), Elem Escape = _Elem('\\\\'))",
                "score": 0.27917516231536865,
                "sortText": "41710ff4quoted",
                "textEdit": {
                    "newText": "quoted",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iomanip>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "detail": "_Fillobj<Elem>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iomanip>"
                },
                "filterText": "setfill",
                "insertText": "setfill",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022setfill(Elem Ch)",
                "score": 0.27917516231536865,
                "sortText": "41710ff4setfill",
                "textEdit": {
                    "newText": "setfill",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <chrono>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <chrono>"
                },
                "filterText": "high_resolution_clock",
                "insertText": "chrono::high_resolution_clock",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022chrono::high_resolution_clock",
                "score": 0.2609104514122009,
                "sortText": "417a69f2high_resolution_clock",
                "textEdit": {
                    "newText": "chrono::high_resolution_clock",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <chrono>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 1
                            },
                            "start": {
                                "character": 0,
                                "line": 1
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <chrono>"
                },
                "filterText": "system_clock",
                "insertText": "chrono::system_clock",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022chrono::system_clock",
                "score": 0.2609104514122009,
                "sortText": "417a69f2system_clock",
                "textEdit": {
                    "newText": "chrono::system_clock",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "_Pragma",
                "insertText": "_Pragma",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " _Pragma",
                "score": 0.22312210500240326,
                "sortText": "419b85e1_Pragma",
                "textEdit": {
                    "newText": "_Pragma",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__BASE_FILE__",
                "insertText": "__BASE_FILE__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __BASE_FILE__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__BASE_FILE__",
                "textEdit": {
                    "newText": "__BASE_FILE__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__COUNTER__",
                "insertText": "__COUNTER__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __COUNTER__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__COUNTER__",
                "textEdit": {
                    "newText": "__COUNTER__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__DATE__",
                "insertText": "__DATE__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __DATE__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__DATE__",
                "textEdit": {
                    "newText": "__DATE__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__FILE_NAME__",
                "insertText": "__FILE_NAME__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __FILE_NAME__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__FILE_NAME__",
                "textEdit": {
                    "newText": "__FILE_NAME__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__FILE__",
                "insertText": "__FILE__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __FILE__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__FILE__",
                "textEdit": {
                    "newText": "__FILE__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__FLT_EVAL_METHOD__",
                "insertText": "__FLT_EVAL_METHOD__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __FLT_EVAL_METHOD__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__FLT_EVAL_METHOD__",
                "textEdit": {
                    "newText": "__FLT_EVAL_METHOD__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__INCLUDE_LEVEL__",
                "insertText": "__INCLUDE_LEVEL__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __INCLUDE_LEVEL__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__INCLUDE_LEVEL__",
                "textEdit": {
                    "newText": "__INCLUDE_LEVEL__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__LINE__",
                "insertText": "__LINE__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __LINE__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__LINE__",
                "textEdit": {
                    "newText": "__LINE__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__TIMESTAMP__",
                "insertText": "__TIMESTAMP__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __TIMESTAMP__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__TIMESTAMP__",
                "textEdit": {
                    "newText": "__TIMESTAMP__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__TIME__",
                "insertText": "__TIME__",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __TIME__",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__TIME__",
                "textEdit": {
                    "newText": "__TIME__",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__building_module",
                "insertText": "__building_module",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __building_module",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__building_module",
                "textEdit": {
                    "newText": "__building_module",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_attribute",
                "insertText": "__has_attribute",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_attribute",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_attribute",
                "textEdit": {
                    "newText": "__has_attribute",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_builtin",
                "insertText": "__has_builtin",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_builtin",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_builtin",
                "textEdit": {
                    "newText": "__has_builtin",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_constexpr_builtin",
                "insertText": "__has_constexpr_builtin",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_constexpr_builtin",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_constexpr_builtin",
                "textEdit": {
                    "newText": "__has_constexpr_builtin",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_cpp_attribute",
                "insertText": "__has_cpp_attribute",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_cpp_attribute",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_cpp_attribute",
                "textEdit": {
                    "newText": "__has_cpp_attribute",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_declspec_attribute",
                "insertText": "__has_declspec_attribute",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_declspec_attribute",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_declspec_attribute",
                "textEdit": {
                    "newText": "__has_declspec_attribute",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_embed",
                "insertText": "__has_embed",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_embed",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_embed",
                "textEdit": {
                    "newText": "__has_embed",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_extension",
                "insertText": "__has_extension",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_extension",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_extension",
                "textEdit": {
                    "newText": "__has_extension",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_feature",
                "insertText": "__has_feature",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_feature",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_feature",
                "textEdit": {
                    "newText": "__has_feature",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_include",
                "insertText": "__has_include",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_include",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_include",
                "textEdit": {
                    "newText": "__has_include",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_include_next",
                "insertText": "__has_include_next",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_include_next",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_include_next",
                "textEdit": {
                    "newText": "__has_include_next",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "__has_warning",
                "insertText": "__has_warning",
                "insertTextFormat": 1,
                "kind": 1,
                "label": " __has_warning",
                "score": 0.22312210500240326,
                "sortText": "419b85e1__has_warning",
                "textEdit": {
                    "newText": "__has_warning",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['Muchie', 'struct', 'size_t', 'type_info', '_Nonnull', '_Null_unspecified', '_Nullable', 'alignas', 'auto', 'bool', 'char', 'char16_t', 'char32_t', 'class', 'const', 'constexpr', 'decltype', 'double', 'enum', 'explicit', 'extern', 'float', 'friend', 'inline', 'int', 'long', 'mutable', 'operator', 'private', 'protected', 'public', 'short', 'signed', 'static', 'static_assert', 'template', 'thread_local', 'typedef', 'typename', 'union', 'unsigned', 'using', 'using', 'virtual', 'void', 'volatile', 'wchar_t', 'concurrency', 'chrono_literals', 'Concurrency::details::platform', 'char_traits', 'messages', 'messages_base', 'messages_byname', 'once_flag', '_se_translator_function', 'unexpected_handler', 'get_money', 'get_time', 'operator<<', 'operator<<', 'operator<<', 'operator<<', 'operator<<', 'operator<<', 'operator>>', 'operator>>', 'operator>>', 'operator>>', 'put_money', 'put_time', 'quoted', 'quoted', 'quoted', 'setfill', 'chrono::high_resolution_clock', 'chrono::system_clock', '_Pragma', '__BASE_FILE__', '__COUNTER__', '__DATE__', '__FILE_NAME__', '__FILE__', '__FLT_EVAL_METHOD__', '__INCLUDE_LEVEL__', '__LINE__', '__TIMESTAMP__', '__TIME__', '__building_module', '__has_attribute', '__has_builtin', '__has_constexpr_builtin', '__has_cpp_attribute', '__has_declspec_attribute', '__has_embed', '__has_extension', '__has_feature', '__has_include', '__has_include_next', '__has_warning']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_file_not_found",
                "message": "'bits/stdc++.h' file not found",
                "range": {
                    "end": {
                        "character": 24,
                        "line": 0
                    },
                    "start": {
                        "character": 9,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ext_using_undefined_std",
                "message": "Using directive refers to implicitly-defined namespace 'std'",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 2
                    },
                    "start": {
                        "character": 16,
                        "line": 2
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 4
                    },
                    "start": {
                        "character": 21,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 39,
                        "line": 5
                    },
                    "start": {
                        "character": 25,
                        "line": 5
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'a'",
                "range": {
                    "end": {
                        "character": 11,
                        "line": 10
                    },
                    "start": {
                        "character": 10,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 77
                    },
                    "start": {
                        "character": 1,
                        "line": 77
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 78
                    },
                    "start": {
                        "character": 1,
                        "line": 78
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 79
                    },
                    "start": {
                        "character": 1,
                        "line": 79
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 14,
                        "line": 80
                    },
                    "start": {
                        "character": 8,
                        "line": 80
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 81
                    },
                    "start": {
                        "character": 1,
                        "line": 81
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 115
                    },
                    "start": {
                        "character": 21,
                        "line": 115
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 128
                    },
                    "start": {
                        "character": 30,
                        "line": 128
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 27,
                        "line": 152
                    },
                    "start": {
                        "character": 21,
                        "line": 152
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 173
                    },
                    "start": {
                        "character": 1,
                        "line": 173
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 220
                    },
                    "start": {
                        "character": 30,
                        "line": 220
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 220
                    },
                    "start": {
                        "character": 49,
                        "line": 220
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 32,
                        "line": 244
                    },
                    "start": {
                        "character": 26,
                        "line": 244
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 51,
                        "line": 244
                    },
                    "start": {
                        "character": 45,
                        "line": 244
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 284
                    },
                    "start": {
                        "character": 29,
                        "line": 284
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 54,
                        "line": 284
                    },
                    "start": {
                        "character": 48,
                        "line": 284
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 320
                    },
                    "start": {
                        "character": 30,
                        "line": 320
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 32
    }
}
Diagnostics received from LSP.
Errors received: [[0, [9, 24]], [4, [21, 35]], [5, [25, 39]], [10, [10, 11]], [77, [1, 7]], [78, [1, 7]], [79, [1, 7]], [80, [8, 14]], [81, [1, 7]], [115, [21, 26]], [128, [30, 36]], [152, [21, 27]], [173, [1, 7]], [220, [30, 36]], [220, [49, 55]], [244, [26, 32]], [244, [45, 51]], [284, [29, 35]], [284, [48, 54]], [320, [30, 36]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_file_not_found",
                "message": "'bits/stdc++.h' file not found",
                "range": {
                    "end": {
                        "character": 24,
                        "line": 0
                    },
                    "start": {
                        "character": 9,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ext_using_undefined_std",
                "message": "Using directive refers to implicitly-defined namespace 'std'",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 2
                    },
                    "start": {
                        "character": 16,
                        "line": 2
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 4
                    },
                    "start": {
                        "character": 21,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 39,
                        "line": 5
                    },
                    "start": {
                        "character": 25,
                        "line": 5
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 77
                    },
                    "start": {
                        "character": 1,
                        "line": 77
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 78
                    },
                    "start": {
                        "character": 1,
                        "line": 78
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 79
                    },
                    "start": {
                        "character": 1,
                        "line": 79
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 14,
                        "line": 80
                    },
                    "start": {
                        "character": 8,
                        "line": 80
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 81
                    },
                    "start": {
                        "character": 1,
                        "line": 81
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 115
                    },
                    "start": {
                        "character": 21,
                        "line": 115
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 128
                    },
                    "start": {
                        "character": 30,
                        "line": 128
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 27,
                        "line": 152
                    },
                    "start": {
                        "character": 21,
                        "line": 152
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 173
                    },
                    "start": {
                        "character": 1,
                        "line": 173
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 220
                    },
                    "start": {
                        "character": 30,
                        "line": 220
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 220
                    },
                    "start": {
                        "character": 49,
                        "line": 220
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 32,
                        "line": 244
                    },
                    "start": {
                        "character": 26,
                        "line": 244
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 51,
                        "line": 244
                    },
                    "start": {
                        "character": 45,
                        "line": 244
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 284
                    },
                    "start": {
                        "character": 29,
                        "line": 284
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 54,
                        "line": 284
                    },
                    "start": {
                        "character": 48,
                        "line": 284
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 320
                    },
                    "start": {
                        "character": 30,
                        "line": 320
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 320
                    },
                    "start": {
                        "character": 49,
                        "line": 320
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 33
    }
}
Diagnostics received from LSP.
Errors received: [[0, [9, 24]], [4, [21, 35]], [5, [25, 39]], [77, [1, 7]], [78, [1, 7]], [79, [1, 7]], [80, [8, 14]], [81, [1, 7]], [115, [21, 26]], [128, [30, 36]], [152, [21, 27]], [173, [1, 7]], [220, [30, 36]], [220, [49, 55]], [244, [26, 32]], [244, [45, 51]], [284, [29, 35]], [284, [48, 54]], [320, [30, 36]], [320, [49, 55]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_file_not_found",
                "message": "'bits/stdc++.h' file not found",
                "range": {
                    "end": {
                        "character": 24,
                        "line": 0
                    },
                    "start": {
                        "character": 9,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ext_using_undefined_std",
                "message": "Using directive refers to implicitly-defined namespace 'std'",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 2
                    },
                    "start": {
                        "character": 16,
                        "line": 2
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 4
                    },
                    "start": {
                        "character": 21,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 39,
                        "line": 5
                    },
                    "start": {
                        "character": 25,
                        "line": 5
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 78
                    },
                    "start": {
                        "character": 1,
                        "line": 78
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 79
                    },
                    "start": {
                        "character": 1,
                        "line": 79
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 80
                    },
                    "start": {
                        "character": 1,
                        "line": 80
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 14,
                        "line": 81
                    },
                    "start": {
                        "character": 8,
                        "line": 81
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 82
                    },
                    "start": {
                        "character": 1,
                        "line": 82
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 116
                    },
                    "start": {
                        "character": 21,
                        "line": 116
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 129
                    },
                    "start": {
                        "character": 30,
                        "line": 129
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 27,
                        "line": 153
                    },
                    "start": {
                        "character": 21,
                        "line": 153
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 174
                    },
                    "start": {
                        "character": 1,
                        "line": 174
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 221
                    },
                    "start": {
                        "character": 30,
                        "line": 221
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 221
                    },
                    "start": {
                        "character": 49,
                        "line": 221
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 32,
                        "line": 245
                    },
                    "start": {
                        "character": 26,
                        "line": 245
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 51,
                        "line": 245
                    },
                    "start": {
                        "character": 45,
                        "line": 245
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 285
                    },
                    "start": {
                        "character": 29,
                        "line": 285
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 54,
                        "line": 285
                    },
                    "start": {
                        "character": 48,
                        "line": 285
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 321
                    },
                    "start": {
                        "character": 30,
                        "line": 321
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 321
                    },
                    "start": {
                        "character": 49,
                        "line": 321
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 35
    }
}
Diagnostics received from LSP.
Errors received: [[0, [9, 24]], [4, [21, 35]], [5, [25, 39]], [78, [1, 7]], [79, [1, 7]], [80, [1, 7]], [81, [8, 14]], [82, [1, 7]], [116, [21, 26]], [129, [30, 36]], [153, [21, 27]], [174, [1, 7]], [221, [30, 36]], [221, [49, 55]], [245, [26, 32]], [245, [45, 51]], [285, [29, 35]], [285, [48, 54]], [321, [30, 36]], [321, [49, 55]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": [
            {
                "filterText": "BiDiSpl.h>",
                "insertText": "BiDiSpl.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " BiDiSpl.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681BiDiSpl.h>",
                "textEdit": {
                    "newText": "BiDiSpl.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "Bits.h>",
                "insertText": "Bits.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " Bits.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681Bits.h>",
                "textEdit": {
                    "newText": "Bits.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "Bits3_0.h>",
                "insertText": "Bits3_0.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " Bits3_0.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681Bits3_0.h>",
                "textEdit": {
                    "newText": "Bits3_0.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "BitsMsg.h>",
                "insertText": "BitsMsg.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " BitsMsg.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681BitsMsg.h>",
                "textEdit": {
                    "newText": "BitsMsg.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "barrier>",
                "insertText": "barrier>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " barrier>",
                "score": 0.787254273891449,
                "sortText": "40b67681barrier>",
                "textEdit": {
                    "newText": "barrier>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "baseaudioprocessingobject.h>",
                "insertText": "baseaudioprocessingobject.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " baseaudioprocessingobject.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681baseaudioprocessingobject.h>",
                "textEdit": {
                    "newText": "baseaudioprocessingobject.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "basetsd.h>",
                "insertText": "basetsd.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " basetsd.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681basetsd.h>",
                "textEdit": {
                    "newText": "basetsd.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "basetyps.h>",
                "insertText": "basetyps.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " basetyps.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681basetyps.h>",
                "textEdit": {
                    "newText": "basetyps.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "batclass.h>",
                "insertText": "batclass.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " batclass.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681batclass.h>",
                "textEdit": {
                    "newText": "batclass.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "bcp47mrm.h>",
                "insertText": "bcp47mrm.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " bcp47mrm.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681bcp47mrm.h>",
                "textEdit": {
                    "newText": "bcp47mrm.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "bcrypt.h>",
                "insertText": "bcrypt.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " bcrypt.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681bcrypt.h>",
                "textEdit": {
                    "newText": "bcrypt.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "bdaiface.h>",
                "insertText": "bdaiface.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " bdaiface.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681bdaiface.h>",
                "textEdit": {
                    "newText": "bdaiface.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "bdaiface_enums.h>",
                "insertText": "bdaiface_enums.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " bdaiface_enums.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681bdaiface_enums.h>",
                "textEdit": {
                    "newText": "bdaiface_enums.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "bdamedia.h>",
                "insertText": "bdamedia.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " bdamedia.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681bdamedia.h>",
                "textEdit": {
                    "newText": "bdamedia.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "bdatif.h>",
                "insertText": "bdatif.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " bdatif.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681bdatif.h>",
                "textEdit": {
                    "newText": "bdatif.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "bdatypes.h>",
                "insertText": "bdatypes.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " bdatypes.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681bdatypes.h>",
                "textEdit": {
                    "newText": "bdatypes.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "bit>",
                "insertText": "bit>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " bit>",
                "score": 0.787254273891449,
                "sortText": "40b67681bit>",
                "textEdit": {
                    "newText": "bit>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "bits10_1.h>",
                "insertText": "bits10_1.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " bits10_1.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681bits10_1.h>",
                "textEdit": {
                    "newText": "bits10_1.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "bits10_2.h>",
                "insertText": "bits10_2.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " bits10_2.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681bits10_2.h>",
                "textEdit": {
                    "newText": "bits10_2.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "bits10_3.h>",
                "insertText": "bits10_3.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " bits10_3.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681bits10_3.h>",
                "textEdit": {
                    "newText": "bits10_3.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "bits1_5.h>",
                "insertText": "bits1_5.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " bits1_5.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681bits1_5.h>",
                "textEdit": {
                    "newText": "bits1_5.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "bits2_0.h>",
                "insertText": "bits2_0.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " bits2_0.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681bits2_0.h>",
                "textEdit": {
                    "newText": "bits2_0.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "bits2_5.h>",
                "insertText": "bits2_5.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " bits2_5.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681bits2_5.h>",
                "textEdit": {
                    "newText": "bits2_5.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "bits4_0.h>",
                "insertText": "bits4_0.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " bits4_0.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681bits4_0.h>",
                "textEdit": {
                    "newText": "bits4_0.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "bits5_0.h>",
                "insertText": "bits5_0.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " bits5_0.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681bits5_0.h>",
                "textEdit": {
                    "newText": "bits5_0.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "bitscfg.h>",
                "insertText": "bitscfg.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " bitscfg.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681bitscfg.h>",
                "textEdit": {
                    "newText": "bitscfg.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "bitset>",
                "insertText": "bitset>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " bitset>",
                "score": 0.787254273891449,
                "sortText": "40b67681bitset>",
                "textEdit": {
                    "newText": "bitset>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "bluetoothapis.h>",
                "insertText": "bluetoothapis.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " bluetoothapis.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681bluetoothapis.h>",
                "textEdit": {
                    "newText": "bluetoothapis.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "bluetoothleapis.h>",
                "insertText": "bluetoothleapis.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " bluetoothleapis.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681bluetoothleapis.h>",
                "textEdit": {
                    "newText": "bluetoothleapis.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "bmi2intrin.h>",
                "insertText": "bmi2intrin.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " bmi2intrin.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681bmi2intrin.h>",
                "textEdit": {
                    "newText": "bmi2intrin.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "bmiintrin.h>",
                "insertText": "bmiintrin.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " bmiintrin.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681bmiintrin.h>",
                "textEdit": {
                    "newText": "bmiintrin.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "bridgedeviceservice.h>",
                "insertText": "bridgedeviceservice.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " bridgedeviceservice.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681bridgedeviceservice.h>",
                "textEdit": {
                    "newText": "bridgedeviceservice.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "bthdef.h>",
                "insertText": "bthdef.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " bthdef.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681bthdef.h>",
                "textEdit": {
                    "newText": "bthdef.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "bthioctl.h>",
                "insertText": "bthioctl.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " bthioctl.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681bthioctl.h>",
                "textEdit": {
                    "newText": "bthioctl.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "bthledef.h>",
                "insertText": "bthledef.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " bthledef.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681bthledef.h>",
                "textEdit": {
                    "newText": "bthledef.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "bthsdpdef.h>",
                "insertText": "bthsdpdef.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " bthsdpdef.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681bthsdpdef.h>",
                "textEdit": {
                    "newText": "bthsdpdef.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "bugcodes.h>",
                "insertText": "bugcodes.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " bugcodes.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681bugcodes.h>",
                "textEdit": {
                    "newText": "bugcodes.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "builtins.h>",
                "insertText": "builtins.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " builtins.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681builtins.h>",
                "textEdit": {
                    "newText": "builtins.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "CertBCli.h>",
                "insertText": "CertBCli.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " CertBCli.h>",
                "score": 0.787254273891449,
                "sortText": "80000000CertBCli.h>",
                "textEdit": {
                    "newText": "CertBCli.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "CertBase.h>",
                "insertText": "CertBase.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " CertBase.h>",
                "score": 0.787254273891449,
                "sortText": "80000000CertBase.h>",
                "textEdit": {
                    "newText": "CertBase.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "DefaultBrowserSyncSettings.h>",
                "insertText": "DefaultBrowserSyncSettings.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " DefaultBrowserSyncSettings.h>",
                "score": 0.787254273891449,
                "sortText": "80000000DefaultBrowserSyncSettings.h>",
                "textEdit": {
                    "newText": "DefaultBrowserSyncSettings.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "DeleteBrowsingHistory.h>",
                "insertText": "DeleteBrowsingHistory.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " DeleteBrowsingHistory.h>",
                "score": 0.787254273891449,
                "sortText": "80000000DeleteBrowsingHistory.h>",
                "textEdit": {
                    "newText": "DeleteBrowsingHistory.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "GPIOButtonTypes.h>",
                "insertText": "GPIOButtonTypes.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " GPIOButtonTypes.h>",
                "score": 0.787254273891449,
                "sortText": "80000000GPIOButtonTypes.h>",
                "textEdit": {
                    "newText": "GPIOButtonTypes.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "MemoryBuffer.h>",
                "insertText": "MemoryBuffer.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " MemoryBuffer.h>",
                "score": 0.787254273891449,
                "sortText": "80000000MemoryBuffer.h>",
                "textEdit": {
                    "newText": "MemoryBuffer.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "Mpeg2Bits.h>",
                "insertText": "Mpeg2Bits.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " Mpeg2Bits.h>",
                "score": 0.787254273891449,
                "sortText": "80000000Mpeg2Bits.h>",
                "textEdit": {
                    "newText": "Mpeg2Bits.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "NtDsBMsg.h>",
                "insertText": "NtDsBMsg.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " NtDsBMsg.h>",
                "score": 0.787254273891449,
                "sortText": "80000000NtDsBMsg.h>",
                "textEdit": {
                    "newText": "NtDsBMsg.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "PropIdlBase.h>",
                "insertText": "PropIdlBase.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " PropIdlBase.h>",
                "score": 0.787254273891449,
                "sortText": "80000000PropIdlBase.h>",
                "textEdit": {
                    "newText": "PropIdlBase.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "SipBase.h>",
                "insertText": "SipBase.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " SipBase.h>",
                "score": 0.787254273891449,
                "sortText": "80000000SipBase.h>",
                "textEdit": {
                    "newText": "SipBase.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "ThrdBase.h>",
                "insertText": "ThrdBase.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " ThrdBase.h>",
                "score": 0.787254273891449,
                "sortText": "80000000ThrdBase.h>",
                "textEdit": {
                    "newText": "ThrdBase.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "WdsBp.h>",
                "insertText": "WdsBp.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " WdsBp.h>",
                "score": 0.787254273891449,
                "sortText": "80000000WdsBp.h>",
                "textEdit": {
                    "newText": "WdsBp.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "WinBase.h>",
                "insertText": "WinBase.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " WinBase.h>",
                "score": 0.787254273891449,
                "sortText": "80000000WinBase.h>",
                "textEdit": {
                    "newText": "WinBase.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "WinBer.h>",
                "insertText": "WinBer.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " WinBer.h>",
                "score": 0.787254273891449,
                "sortText": "80000000WinBer.h>",
                "textEdit": {
                    "newText": "WinBer.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "WinBio.h>",
                "insertText": "WinBio.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " WinBio.h>",
                "score": 0.787254273891449,
                "sortText": "80000000WinBio.h>",
                "textEdit": {
                    "newText": "WinBio.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "WinRTBase.h>",
                "insertText": "WinRTBase.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " WinRTBase.h>",
                "score": 0.787254273891449,
                "sortText": "80000000WinRTBase.h>",
                "textEdit": {
                    "newText": "WinRTBase.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "__clang_cuda_builtin_vars.h>",
                "insertText": "__clang_cuda_builtin_vars.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " __clang_cuda_builtin_vars.h>",
                "score": 0.787254273891449,
                "sortText": "80000000__clang_cuda_builtin_vars.h>",
                "textEdit": {
                    "newText": "__clang_cuda_builtin_vars.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "__clang_cuda_complex_builtins.h>",
                "insertText": "__clang_cuda_complex_builtins.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " __clang_cuda_complex_builtins.h>",
                "score": 0.787254273891449,
                "sortText": "80000000__clang_cuda_complex_builtins.h>",
                "textEdit": {
                    "newText": "__clang_cuda_complex_builtins.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "__msvc_bit_utils.hpp>",
                "insertText": "__msvc_bit_utils.hpp>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " __msvc_bit_utils.hpp>",
                "score": 0.787254273891449,
                "sortText": "80000000__msvc_bit_utils.hpp>",
                "textEdit": {
                    "newText": "__msvc_bit_utils.hpp>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "adogpool_Backcompat.h>",
                "insertText": "adogpool_Backcompat.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " adogpool_Backcompat.h>",
                "score": 0.787254273891449,
                "sortText": "80000000adogpool_Backcompat.h>",
                "textEdit": {
                    "newText": "adogpool_Backcompat.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "adoint_Backcompat.h>",
                "insertText": "adoint_Backcompat.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " adoint_Backcompat.h>",
                "score": 0.787254273891449,
                "sortText": "80000000adoint_Backcompat.h>",
                "textEdit": {
                    "newText": "adoint_Backcompat.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "arm_bf16.h>",
                "insertText": "arm_bf16.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " arm_bf16.h>",
                "score": 0.787254273891449,
                "sortText": "80000000arm_bf16.h>",
                "textEdit": {
                    "newText": "arm_bf16.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "arm_neon_sve_bridge.h>",
                "insertText": "arm_neon_sve_bridge.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " arm_neon_sve_bridge.h>",
                "score": 0.787254273891449,
                "sortText": "80000000arm_neon_sve_bridge.h>",
                "textEdit": {
                    "newText": "arm_neon_sve_bridge.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "hexagon_circ_brev_intrinsics.h>",
                "insertText": "hexagon_circ_brev_intrinsics.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " hexagon_circ_brev_intrinsics.h>",
                "score": 0.787254273891449,
                "sortText": "80000000hexagon_circ_brev_intrinsics.h>",
                "textEdit": {
                    "newText": "hexagon_circ_brev_intrinsics.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "msado15_Backcompat.h>",
                "insertText": "msado15_Backcompat.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " msado15_Backcompat.h>",
                "score": 0.787254273891449,
                "sortText": "80000000msado15_Backcompat.h>",
                "textEdit": {
                    "newText": "msado15_Backcompat.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "opencl-c-base.h>",
                "insertText": "opencl-c-base.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " opencl-c-base.h>",
                "score": 0.787254273891449,
                "sortText": "80000000opencl-c-base.h>",
                "textEdit": {
                    "newText": "opencl-c-base.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "riscv_bitmanip.h>",
                "insertText": "riscv_bitmanip.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " riscv_bitmanip.h>",
                "score": 0.787254273891449,
                "sortText": "80000000riscv_bitmanip.h>",
                "textEdit": {
                    "newText": "riscv_bitmanip.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "windows.applicationmodel.background.h>",
                "insertText": "windows.applicationmodel.background.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " windows.applicationmodel.background.h>",
                "score": 0.787254273891449,
                "sortText": "80000000windows.applicationmodel.background.h>",
                "textEdit": {
                    "newText": "windows.applicationmodel.background.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "windows.applicationmodel.calls.background.h>",
                "insertText": "windows.applicationmodel.calls.background.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " windows.applicationmodel.calls.background.h>",
                "score": 0.787254273891449,
                "sortText": "80000000windows.applicationmodel.calls.background.h>",
                "textEdit": {
                    "newText": "windows.applicationmodel.calls.background.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "windows.devices.background.h>",
                "insertText": "windows.devices.background.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " windows.devices.background.h>",
                "score": 0.787254273891449,
                "sortText": "80000000windows.devices.background.h>",
                "textEdit": {
                    "newText": "windows.devices.background.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "windows.devices.bluetooth.advertisement.h>",
                "insertText": "windows.devices.bluetooth.advertisement.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " windows.devices.bluetooth.advertisement.h>",
                "score": 0.787254273891449,
                "sortText": "80000000windows.devices.bluetooth.advertisement.h>",
                "textEdit": {
                    "newText": "windows.devices.bluetooth.advertisement.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "windows.devices.bluetooth.background.h>",
                "insertText": "windows.devices.bluetooth.background.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " windows.devices.bluetooth.background.h>",
                "score": 0.787254273891449,
                "sortText": "80000000windows.devices.bluetooth.background.h>",
                "textEdit": {
                    "newText": "windows.devices.bluetooth.background.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "windows.devices.bluetooth.genericattributeprofile.h>",
                "insertText": "windows.devices.bluetooth.genericattributeprofile.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " windows.devices.bluetooth.genericattributeprofile.h>",
                "score": 0.787254273891449,
                "sortText": "80000000windows.devices.bluetooth.genericattributeprofile.h>",
                "textEdit": {
                    "newText": "windows.devices.bluetooth.genericattributeprofile.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "windows.devices.bluetooth.h>",
                "insertText": "windows.devices.bluetooth.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " windows.devices.bluetooth.h>",
                "score": 0.787254273891449,
                "sortText": "80000000windows.devices.bluetooth.h>",
                "textEdit": {
                    "newText": "windows.devices.bluetooth.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "windows.devices.bluetooth.rfcomm.h>",
                "insertText": "windows.devices.bluetooth.rfcomm.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " windows.devices.bluetooth.rfcomm.h>",
                "score": 0.787254273891449,
                "sortText": "80000000windows.devices.bluetooth.rfcomm.h>",
                "textEdit": {
                    "newText": "windows.devices.bluetooth.rfcomm.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "windows.networking.backgroundtransfer.h>",
                "insertText": "windows.networking.backgroundtransfer.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " windows.networking.backgroundtransfer.h>",
                "score": 0.787254273891449,
                "sortText": "80000000windows.networking.backgroundtransfer.h>",
                "textEdit": {
                    "newText": "windows.networking.backgroundtransfer.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "windows.storage.bulkaccess.h>",
                "insertText": "windows.storage.bulkaccess.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " windows.storage.bulkaccess.h>",
                "score": 0.787254273891449,
                "sortText": "80000000windows.storage.bulkaccess.h>",
                "textEdit": {
                    "newText": "windows.storage.bulkaccess.h>",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['BiDiSpl.h>', 'Bits.h>', 'Bits3_0.h>', 'BitsMsg.h>', 'barrier>', 'baseaudioprocessingobject.h>', 'basetsd.h>', 'basetyps.h>', 'batclass.h>', 'bcp47mrm.h>', 'bcrypt.h>', 'bdaiface.h>', 'bdaiface_enums.h>', 'bdamedia.h>', 'bdatif.h>', 'bdatypes.h>', 'bit>', 'bits10_1.h>', 'bits10_2.h>', 'bits10_3.h>', 'bits1_5.h>', 'bits2_0.h>', 'bits2_5.h>', 'bits4_0.h>', 'bits5_0.h>', 'bitscfg.h>', 'bitset>', 'bluetoothapis.h>', 'bluetoothleapis.h>', 'bmi2intrin.h>', 'bmiintrin.h>', 'bridgedeviceservice.h>', 'bthdef.h>', 'bthioctl.h>', 'bthledef.h>', 'bthsdpdef.h>', 'bugcodes.h>', 'builtins.h>', 'CertBCli.h>', 'CertBase.h>', 'DefaultBrowserSyncSettings.h>', 'DeleteBrowsingHistory.h>', 'GPIOButtonTypes.h>', 'MemoryBuffer.h>', 'Mpeg2Bits.h>', 'NtDsBMsg.h>', 'PropIdlBase.h>', 'SipBase.h>', 'ThrdBase.h>', 'WdsBp.h>', 'WinBase.h>', 'WinBer.h>', 'WinBio.h>', 'WinRTBase.h>', '__clang_cuda_builtin_vars.h>', '__clang_cuda_complex_builtins.h>', '__msvc_bit_utils.hpp>', 'adogpool_Backcompat.h>', 'adoint_Backcompat.h>', 'arm_bf16.h>', 'arm_neon_sve_bridge.h>', 'hexagon_circ_brev_intrinsics.h>', 'msado15_Backcompat.h>', 'opencl-c-base.h>', 'riscv_bitmanip.h>', 'windows.applicationmodel.background.h>', 'windows.applicationmodel.calls.background.h>', 'windows.devices.background.h>', 'windows.devices.bluetooth.advertisement.h>', 'windows.devices.bluetooth.background.h>', 'windows.devices.bluetooth.genericattributeprofile.h>', 'windows.devices.bluetooth.h>', 'windows.devices.bluetooth.rfcomm.h>', 'windows.networking.backgroundtransfer.h>', 'windows.storage.bulkaccess.h>']
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": [
            {
                "filterText": "VDDSVC.H>",
                "insertText": "VDDSVC.H>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " VDDSVC.H>",
                "score": 0.787254273891449,
                "sortText": "40b67681VDDSVC.H>",
                "textEdit": {
                    "newText": "VDDSVC.H>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "VdmDbg.h>",
                "insertText": "VdmDbg.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " VdmDbg.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681VdmDbg.h>",
                "textEdit": {
                    "newText": "VdmDbg.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "VersionHelpers.h>",
                "insertText": "VersionHelpers.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " VersionHelpers.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681VersionHelpers.h>",
                "textEdit": {
                    "newText": "VersionHelpers.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "Vfw.h>",
                "insertText": "Vfw.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " Vfw.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681Vfw.h>",
                "textEdit": {
                    "newText": "Vfw.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vadefs.h>",
                "insertText": "vadefs.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vadefs.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vadefs.h>",
                "textEdit": {
                    "newText": "vadefs.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vaesintrin.h>",
                "insertText": "vaesintrin.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vaesintrin.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vaesintrin.h>",
                "textEdit": {
                    "newText": "vaesintrin.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "valarray>",
                "insertText": "valarray>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " valarray>",
                "score": 0.787254273891449,
                "sortText": "40b67681valarray>",
                "textEdit": {
                    "newText": "valarray>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "varargs.h>",
                "insertText": "varargs.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " varargs.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681varargs.h>",
                "textEdit": {
                    "newText": "varargs.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "variant>",
                "insertText": "variant>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " variant>",
                "score": 0.787254273891449,
                "sortText": "40b67681variant>",
                "textEdit": {
                    "newText": "variant>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vbinterf.h>",
                "insertText": "vbinterf.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vbinterf.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vbinterf.h>",
                "textEdit": {
                    "newText": "vbinterf.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vcclr.h>",
                "insertText": "vcclr.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vcclr.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vcclr.h>",
                "textEdit": {
                    "newText": "vcclr.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vccorlib.h>",
                "insertText": "vccorlib.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vccorlib.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vccorlib.h>",
                "textEdit": {
                    "newText": "vccorlib.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vcruntime.h>",
                "insertText": "vcruntime.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vcruntime.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vcruntime.h>",
                "textEdit": {
                    "newText": "vcruntime.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vcruntime_c11_atomic_support.h>",
                "insertText": "vcruntime_c11_atomic_support.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vcruntime_c11_atomic_support.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vcruntime_c11_atomic_support.h>",
                "textEdit": {
                    "newText": "vcruntime_c11_atomic_support.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vcruntime_c11_stdatomic.h>",
                "insertText": "vcruntime_c11_stdatomic.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vcruntime_c11_stdatomic.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vcruntime_c11_stdatomic.h>",
                "textEdit": {
                    "newText": "vcruntime_c11_stdatomic.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vcruntime_exception.h>",
                "insertText": "vcruntime_exception.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vcruntime_exception.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vcruntime_exception.h>",
                "textEdit": {
                    "newText": "vcruntime_exception.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vcruntime_new.h>",
                "insertText": "vcruntime_new.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vcruntime_new.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vcruntime_new.h>",
                "textEdit": {
                    "newText": "vcruntime_new.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vcruntime_new_debug.h>",
                "insertText": "vcruntime_new_debug.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vcruntime_new_debug.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vcruntime_new_debug.h>",
                "textEdit": {
                    "newText": "vcruntime_new_debug.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vcruntime_startup.h>",
                "insertText": "vcruntime_startup.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vcruntime_startup.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vcruntime_startup.h>",
                "textEdit": {
                    "newText": "vcruntime_startup.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vcruntime_string.h>",
                "insertText": "vcruntime_string.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vcruntime_string.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vcruntime_string.h>",
                "textEdit": {
                    "newText": "vcruntime_string.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vcruntime_typeinfo.h>",
                "insertText": "vcruntime_typeinfo.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vcruntime_typeinfo.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vcruntime_typeinfo.h>",
                "textEdit": {
                    "newText": "vcruntime_typeinfo.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vdmctxt.h>",
                "insertText": "vdmctxt.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vdmctxt.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vdmctxt.h>",
                "textEdit": {
                    "newText": "vdmctxt.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vds.h>",
                "insertText": "vds.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vds.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vds.h>",
                "textEdit": {
                    "newText": "vds.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vdserr.h>",
                "insertText": "vdserr.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vdserr.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vdserr.h>",
                "textEdit": {
                    "newText": "vdserr.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vdshwprv.h>",
                "insertText": "vdshwprv.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vdshwprv.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vdshwprv.h>",
                "textEdit": {
                    "newText": "vdshwprv.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vdslun.h>",
                "insertText": "vdslun.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vdslun.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vdslun.h>",
                "textEdit": {
                    "newText": "vdslun.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vdssys.h>",
                "insertText": "vdssys.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vdssys.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vdssys.h>",
                "textEdit": {
                    "newText": "vdssys.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vecintrin.h>",
                "insertText": "vecintrin.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vecintrin.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vecintrin.h>",
                "textEdit": {
                    "newText": "vecintrin.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vector>",
                "insertText": "vector>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vector>",
                "score": 0.787254273891449,
                "sortText": "40b67681vector>",
                "textEdit": {
                    "newText": "vector>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "velintrin.h>",
                "insertText": "velintrin.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " velintrin.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681velintrin.h>",
                "textEdit": {
                    "newText": "velintrin.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "velintrin_approx.h>",
                "insertText": "velintrin_approx.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " velintrin_approx.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681velintrin_approx.h>",
                "textEdit": {
                    "newText": "velintrin_approx.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "velintrin_gen.h>",
                "insertText": "velintrin_gen.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " velintrin_gen.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681velintrin_gen.h>",
                "textEdit": {
                    "newText": "velintrin_gen.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "verrsrc.h>",
                "insertText": "verrsrc.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " verrsrc.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681verrsrc.h>",
                "textEdit": {
                    "newText": "verrsrc.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "version>",
                "insertText": "version>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " version>",
                "score": 0.787254273891449,
                "sortText": "40b67681version>",
                "textEdit": {
                    "newText": "version>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vfwext.h>",
                "insertText": "vfwext.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vfwext.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vfwext.h>",
                "textEdit": {
                    "newText": "vfwext.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vfwmsgs.h>",
                "insertText": "vfwmsgs.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vfwmsgs.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vfwmsgs.h>",
                "textEdit": {
                    "newText": "vfwmsgs.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vhf.h>",
                "insertText": "vhf.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vhf.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vhf.h>",
                "textEdit": {
                    "newText": "vhf.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vidcap.h>",
                "insertText": "vidcap.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vidcap.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vidcap.h>",
                "textEdit": {
                    "newText": "vidcap.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "videoacc.h>",
                "insertText": "videoacc.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " videoacc.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681videoacc.h>",
                "textEdit": {
                    "newText": "videoacc.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "virtdisk.h>",
                "insertText": "virtdisk.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " virtdisk.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681virtdisk.h>",
                "textEdit": {
                    "newText": "virtdisk.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vmgenerationcounter.h>",
                "insertText": "vmgenerationcounter.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vmgenerationcounter.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vmgenerationcounter.h>",
                "textEdit": {
                    "newText": "vmgenerationcounter.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vmr9.h>",
                "insertText": "vmr9.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vmr9.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vmr9.h>",
                "textEdit": {
                    "newText": "vmr9.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vmsavedstatedump.h>",
                "insertText": "vmsavedstatedump.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vmsavedstatedump.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vmsavedstatedump.h>",
                "textEdit": {
                    "newText": "vmsavedstatedump.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vmsavedstatedumpdefs.h>",
                "insertText": "vmsavedstatedumpdefs.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vmsavedstatedumpdefs.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vmsavedstatedumpdefs.h>",
                "textEdit": {
                    "newText": "vmsavedstatedumpdefs.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vpclmulqdqintrin.h>",
                "insertText": "vpclmulqdqintrin.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vpclmulqdqintrin.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vpclmulqdqintrin.h>",
                "textEdit": {
                    "newText": "vpclmulqdqintrin.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vpconfig.h>",
                "insertText": "vpconfig.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vpconfig.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vpconfig.h>",
                "textEdit": {
                    "newText": "vpconfig.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vpnotify.h>",
                "insertText": "vpnotify.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vpnotify.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vpnotify.h>",
                "textEdit": {
                    "newText": "vpnotify.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vptype.h>",
                "insertText": "vptype.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vptype.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vptype.h>",
                "textEdit": {
                    "newText": "vptype.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vsadmin.h>",
                "insertText": "vsadmin.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vsadmin.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vsadmin.h>",
                "textEdit": {
                    "newText": "vsadmin.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vsanimation.h>",
                "insertText": "vsanimation.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vsanimation.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vsanimation.h>",
                "textEdit": {
                    "newText": "vsanimation.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vsbackup.h>",
                "insertText": "vsbackup.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vsbackup.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vsbackup.h>",
                "textEdit": {
                    "newText": "vsbackup.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vsmgmt.h>",
                "insertText": "vsmgmt.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vsmgmt.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vsmgmt.h>",
                "textEdit": {
                    "newText": "vsmgmt.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vsprov.h>",
                "insertText": "vsprov.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vsprov.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vsprov.h>",
                "textEdit": {
                    "newText": "vsprov.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vss.h>",
                "insertText": "vss.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vss.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vss.h>",
                "textEdit": {
                    "newText": "vss.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vsserror.h>",
                "insertText": "vsserror.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vsserror.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vsserror.h>",
                "textEdit": {
                    "newText": "vsserror.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vsstyle.h>",
                "insertText": "vsstyle.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vsstyle.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vsstyle.h>",
                "textEdit": {
                    "newText": "vsstyle.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vssym32.h>",
                "insertText": "vssym32.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vssym32.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vssym32.h>",
                "textEdit": {
                    "newText": "vssym32.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vswriter.h>",
                "insertText": "vswriter.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vswriter.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vswriter.h>",
                "textEdit": {
                    "newText": "vswriter.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "CertView.h>",
                "insertText": "CertView.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " CertView.h>",
                "score": 0.787254273891449,
                "sortText": "80000000CertView.h>",
                "textEdit": {
                    "newText": "CertView.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "DirectXPackedVector.h>",
                "insertText": "DirectXPackedVector.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " DirectXPackedVector.h>",
                "score": 0.787254273891449,
                "sortText": "80000000DirectXPackedVector.h>",
                "textEdit": {
                    "newText": "DirectXPackedVector.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "EmptyVC.h>",
                "insertText": "EmptyVC.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " EmptyVC.h>",
                "score": 0.787254273891449,
                "sortText": "80000000EmptyVC.h>",
                "textEdit": {
                    "newText": "EmptyVC.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "ExtensionValidation.h>",
                "insertText": "ExtensionValidation.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " ExtensionValidation.h>",
                "score": 0.787254273891449,
                "sortText": "80000000ExtensionValidation.h>",
                "textEdit": {
                    "newText": "ExtensionValidation.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "Ole2Ver.h>",
                "insertText": "Ole2Ver.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " Ole2Ver.h>",
                "score": 0.787254273891449,
                "sortText": "80000000Ole2Ver.h>",
                "textEdit": {
                    "newText": "Ole2Ver.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "RtmV2.h>",
                "insertText": "RtmV2.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " RtmV2.h>",
                "score": 0.787254273891449,
                "sortText": "80000000RtmV2.h>",
                "textEdit": {
                    "newText": "RtmV2.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "UIViewSettingsInterop.h>",
                "insertText": "UIViewSettingsInterop.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " UIViewSettingsInterop.h>",
                "score": 0.787254273891449,
                "sortText": "80000000UIViewSettingsInterop.h>",
                "textEdit": {
                    "newText": "UIViewSettingsInterop.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "UserConsentVerifierInterop.h>",
                "insertText": "UserConsentVerifierInterop.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " UserConsentVerifierInterop.h>",
                "score": 0.787254273891449,
                "sortText": "80000000UserConsentVerifierInterop.h>",
                "textEdit": {
                    "newText": "UserConsentVerifierInterop.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "WiaVideo.h>",
                "insertText": "WiaVideo.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " WiaVideo.h>",
                "score": 0.787254273891449,
                "sortText": "80000000WiaVideo.h>",
                "textEdit": {
                    "newText": "WiaVideo.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "__clang_cuda_builtin_vars.h>",
                "insertText": "__clang_cuda_builtin_vars.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " __clang_cuda_builtin_vars.h>",
                "score": 0.787254273891449,
                "sortText": "80000000__clang_cuda_builtin_vars.h>",
                "textEdit": {
                    "newText": "__clang_cuda_builtin_vars.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "__msvc_string_view.hpp>",
                "insertText": "__msvc_string_view.hpp>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " __msvc_string_view.hpp>",
                "score": 0.787254273891449,
                "sortText": "80000000__msvc_string_view.hpp>",
                "textEdit": {
                    "newText": "__msvc_string_view.hpp>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "__stdarg___gnuc_va_list.h>",
                "insertText": "__stdarg___gnuc_va_list.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " __stdarg___gnuc_va_list.h>",
                "score": 0.787254273891449,
                "sortText": "80000000__stdarg___gnuc_va_list.h>",
                "textEdit": {
                    "newText": "__stdarg___gnuc_va_list.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "__stdarg___va_copy.h>",
                "insertText": "__stdarg___va_copy.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " __stdarg___va_copy.h>",
                "score": 0.787254273891449,
                "sortText": "80000000__stdarg___va_copy.h>",
                "textEdit": {
                    "newText": "__stdarg___va_copy.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "__stdarg_va_arg.h>",
                "insertText": "__stdarg_va_arg.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " __stdarg_va_arg.h>",
                "score": 0.787254273891449,
                "sortText": "80000000__stdarg_va_arg.h>",
                "textEdit": {
                    "newText": "__stdarg_va_arg.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "__stdarg_va_copy.h>",
                "insertText": "__stdarg_va_copy.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " __stdarg_va_copy.h>",
                "score": 0.787254273891449,
                "sortText": "80000000__stdarg_va_copy.h>",
                "textEdit": {
                    "newText": "__stdarg_va_copy.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "__stdarg_va_list.h>",
                "insertText": "__stdarg_va_list.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " __stdarg_va_list.h>",
                "score": 0.787254273891449,
                "sortText": "80000000__stdarg_va_list.h>",
                "textEdit": {
                    "newText": "__stdarg_va_list.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "amp_short_vectors.h>",
                "insertText": "amp_short_vectors.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " amp_short_vectors.h>",
                "score": 0.787254273891449,
                "sortText": "80000000amp_short_vectors.h>",
                "textEdit": {
                    "newText": "amp_short_vectors.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "arm_vector_types.h>",
                "insertText": "arm_vector_types.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " arm_vector_types.h>",
                "score": 0.787254273891449,
                "sortText": "80000000arm_vector_types.h>",
                "textEdit": {
                    "newText": "arm_vector_types.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "concurrent_vector.h>",
                "insertText": "concurrent_vector.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " concurrent_vector.h>",
                "score": 0.787254273891449,
                "sortText": "80000000concurrent_vector.h>",
                "textEdit": {
                    "newText": "concurrent_vector.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "condition_variable>",
                "insertText": "condition_variable>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " condition_variable>",
                "score": 0.787254273891449,
                "sortText": "80000000condition_variable>",
                "textEdit": {
                    "newText": "condition_variable>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "ehdata_values.h>",
                "insertText": "ehdata_values.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " ehdata_values.h>",
                "score": 0.787254273891449,
                "sortText": "80000000ehdata_values.h>",
                "textEdit": {
                    "newText": "ehdata_values.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "nt_vdd.h>",
                "insertText": "nt_vdd.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " nt_vdd.h>",
                "score": 0.787254273891449,
                "sortText": "80000000nt_vdd.h>",
                "textEdit": {
                    "newText": "nt_vdd.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "riscv_vector.h>",
                "insertText": "riscv_vector.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " riscv_vector.h>",
                "score": 0.787254273891449,
                "sortText": "80000000riscv_vector.h>",
                "textEdit": {
                    "newText": "riscv_vector.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "sifive_vector.h>",
                "insertText": "sifive_vector.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " sifive_vector.h>",
                "score": 0.787254273891449,
                "sortText": "80000000sifive_vector.h>",
                "textEdit": {
                    "newText": "sifive_vector.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "string_view>",
                "insertText": "string_view>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " string_view>",
                "score": 0.787254273891449,
                "sortText": "80000000string_view>",
                "textEdit": {
                    "newText": "string_view>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "windows.applicationmodel.voicecommands.h>",
                "insertText": "windows.applicationmodel.voicecommands.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " windows.applicationmodel.voicecommands.h>",
                "score": 0.787254273891449,
                "sortText": "80000000windows.applicationmodel.voicecommands.h>",
                "textEdit": {
                    "newText": "windows.applicationmodel.voicecommands.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "windows.networking.vpn.h>",
                "insertText": "windows.networking.vpn.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " windows.networking.vpn.h>",
                "score": 0.787254273891449,
                "sortText": "80000000windows.networking.vpn.h>",
                "textEdit": {
                    "newText": "windows.networking.vpn.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "windows.phone.networking.voip.h>",
                "insertText": "windows.phone.networking.voip.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " windows.phone.networking.voip.h>",
                "score": 0.787254273891449,
                "sortText": "80000000windows.phone.networking.voip.h>",
                "textEdit": {
                    "newText": "windows.phone.networking.voip.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "windows.ui.viewmanagement.core.coreframeworkinputviewinterop.h>",
                "insertText": "windows.ui.viewmanagement.core.coreframeworkinputviewinterop.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " windows.ui.viewmanagement.core.coreframeworkinputviewinterop.h>",
                "score": 0.787254273891449,
                "sortText": "80000000windows.ui.viewmanagement.core.coreframeworkinputviewinterop.h>",
                "textEdit": {
                    "newText": "windows.ui.viewmanagement.core.coreframeworkinputviewinterop.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "windows.ui.viewmanagement.core.h>",
                "insertText": "windows.ui.viewmanagement.core.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " windows.ui.viewmanagement.core.h>",
                "score": 0.787254273891449,
                "sortText": "80000000windows.ui.viewmanagement.core.h>",
                "textEdit": {
                    "newText": "windows.ui.viewmanagement.core.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "windows.ui.viewmanagement.h>",
                "insertText": "windows.ui.viewmanagement.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " windows.ui.viewmanagement.h>",
                "score": 0.787254273891449,
                "sortText": "80000000windows.ui.viewmanagement.h>",
                "textEdit": {
                    "newText": "windows.ui.viewmanagement.h>",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['VDDSVC.H>', 'VdmDbg.h>', 'VersionHelpers.h>', 'Vfw.h>', 'vadefs.h>', 'vaesintrin.h>', 'valarray>', 'varargs.h>', 'variant>', 'vbinterf.h>', 'vcclr.h>', 'vccorlib.h>', 'vcruntime.h>', 'vcruntime_c11_atomic_support.h>', 'vcruntime_c11_stdatomic.h>', 'vcruntime_exception.h>', 'vcruntime_new.h>', 'vcruntime_new_debug.h>', 'vcruntime_startup.h>', 'vcruntime_string.h>', 'vcruntime_typeinfo.h>', 'vdmctxt.h>', 'vds.h>', 'vdserr.h>', 'vdshwprv.h>', 'vdslun.h>', 'vdssys.h>', 'vecintrin.h>', 'vector>', 'velintrin.h>', 'velintrin_approx.h>', 'velintrin_gen.h>', 'verrsrc.h>', 'version>', 'vfwext.h>', 'vfwmsgs.h>', 'vhf.h>', 'vidcap.h>', 'videoacc.h>', 'virtdisk.h>', 'vmgenerationcounter.h>', 'vmr9.h>', 'vmsavedstatedump.h>', 'vmsavedstatedumpdefs.h>', 'vpclmulqdqintrin.h>', 'vpconfig.h>', 'vpnotify.h>', 'vptype.h>', 'vsadmin.h>', 'vsanimation.h>', 'vsbackup.h>', 'vsmgmt.h>', 'vsprov.h>', 'vss.h>', 'vsserror.h>', 'vsstyle.h>', 'vssym32.h>', 'vswriter.h>', 'CertView.h>', 'DirectXPackedVector.h>', 'EmptyVC.h>', 'ExtensionValidation.h>', 'Ole2Ver.h>', 'RtmV2.h>', 'UIViewSettingsInterop.h>', 'UserConsentVerifierInterop.h>', 'WiaVideo.h>', '__clang_cuda_builtin_vars.h>', '__msvc_string_view.hpp>', '__stdarg___gnuc_va_list.h>', '__stdarg___va_copy.h>', '__stdarg_va_arg.h>', '__stdarg_va_copy.h>', '__stdarg_va_list.h>', 'amp_short_vectors.h>', 'arm_vector_types.h>', 'concurrent_vector.h>', 'condition_variable>', 'ehdata_values.h>', 'nt_vdd.h>', 'riscv_vector.h>', 'sifive_vector.h>', 'string_view>', 'windows.applicationmodel.voicecommands.h>', 'windows.networking.vpn.h>', 'windows.phone.networking.voip.h>', 'windows.ui.viewmanagement.core.coreframeworkinputviewinterop.h>', 'windows.ui.viewmanagement.core.h>', 'windows.ui.viewmanagement.h>']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "pp_file_not_found",
                "message": "'bits/stdc++.h' file not found",
                "range": {
                    "end": {
                        "character": 24,
                        "line": 0
                    },
                    "start": {
                        "character": 9,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ext_using_undefined_std",
                "message": "Using directive refers to implicitly-defined namespace 'std'",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 2
                    },
                    "start": {
                        "character": 16,
                        "line": 2
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 4
                    },
                    "start": {
                        "character": 21,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 39,
                        "line": 5
                    },
                    "start": {
                        "character": 25,
                        "line": 5
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 78
                    },
                    "start": {
                        "character": 1,
                        "line": 78
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 79
                    },
                    "start": {
                        "character": 1,
                        "line": 79
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 80
                    },
                    "start": {
                        "character": 1,
                        "line": 80
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 14,
                        "line": 81
                    },
                    "start": {
                        "character": 8,
                        "line": 81
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 82
                    },
                    "start": {
                        "character": 1,
                        "line": 82
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 116
                    },
                    "start": {
                        "character": 21,
                        "line": 116
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 129
                    },
                    "start": {
                        "character": 30,
                        "line": 129
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 27,
                        "line": 153
                    },
                    "start": {
                        "character": 21,
                        "line": 153
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 174
                    },
                    "start": {
                        "character": 1,
                        "line": 174
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 221
                    },
                    "start": {
                        "character": 30,
                        "line": 221
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 221
                    },
                    "start": {
                        "character": 49,
                        "line": 221
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 32,
                        "line": 245
                    },
                    "start": {
                        "character": 26,
                        "line": 245
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 51,
                        "line": 245
                    },
                    "start": {
                        "character": 45,
                        "line": 245
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 285
                    },
                    "start": {
                        "character": 29,
                        "line": 285
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 54,
                        "line": 285
                    },
                    "start": {
                        "character": 48,
                        "line": 285
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 321
                    },
                    "start": {
                        "character": 30,
                        "line": 321
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 321
                    },
                    "start": {
                        "character": 49,
                        "line": 321
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 37
    }
}
Diagnostics received from LSP.
Errors received: [[0, [9, 24]], [4, [21, 35]], [5, [25, 39]], [78, [1, 7]], [79, [1, 7]], [80, [1, 7]], [81, [8, 14]], [82, [1, 7]], [116, [21, 26]], [129, [30, 36]], [153, [21, 27]], [174, [1, 7]], [221, [30, 36]], [221, [49, 55]], [245, [26, 32]], [245, [45, 51]], [285, [29, 35]], [285, [48, 54]], [321, [30, 36]], [321, [49, 55]], [0, [0, 0]]]
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "ext_using_undefined_std",
                "message": "Using directive refers to implicitly-defined namespace 'std'",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 2
                    },
                    "start": {
                        "character": 16,
                        "line": 2
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 4
                    },
                    "start": {
                        "character": 21,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 39,
                        "line": 5
                    },
                    "start": {
                        "character": 25,
                        "line": 5
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 78
                    },
                    "start": {
                        "character": 1,
                        "line": 78
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 79
                    },
                    "start": {
                        "character": 1,
                        "line": 79
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 80
                    },
                    "start": {
                        "character": 1,
                        "line": 80
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 14,
                        "line": 81
                    },
                    "start": {
                        "character": 8,
                        "line": 81
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 82
                    },
                    "start": {
                        "character": 1,
                        "line": 82
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 116
                    },
                    "start": {
                        "character": 21,
                        "line": 116
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 129
                    },
                    "start": {
                        "character": 30,
                        "line": 129
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 27,
                        "line": 153
                    },
                    "start": {
                        "character": 21,
                        "line": 153
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 174
                    },
                    "start": {
                        "character": 1,
                        "line": 174
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 221
                    },
                    "start": {
                        "character": 30,
                        "line": 221
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 221
                    },
                    "start": {
                        "character": 49,
                        "line": 221
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 32,
                        "line": 245
                    },
                    "start": {
                        "character": 26,
                        "line": 245
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 51,
                        "line": 245
                    },
                    "start": {
                        "character": 45,
                        "line": 245
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 285
                    },
                    "start": {
                        "character": 29,
                        "line": 285
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 54,
                        "line": 285
                    },
                    "start": {
                        "character": 48,
                        "line": 285
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 321
                    },
                    "start": {
                        "character": 30,
                        "line": 321
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 321
                    },
                    "start": {
                        "character": 49,
                        "line": 321
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 38
    }
}
Diagnostics received from LSP.
Errors received: [[4, [21, 35]], [5, [25, 39]], [78, [1, 7]], [79, [1, 7]], [80, [1, 7]], [81, [8, 14]], [82, [1, 7]], [116, [21, 26]], [129, [30, 36]], [153, [21, 27]], [174, [1, 7]], [221, [30, 36]], [221, [49, 55]], [245, [26, 32]], [245, [45, 51]], [285, [29, 35]], [285, [48, 54]], [321, [30, 36]], [321, [49, 55]], [0, [0, 0]]]
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected",
                "message": "Expected '>'\n\ntmpzj63bvvq.cpp:1:10: note: to match this '<'",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 2
                    },
                    "start": {
                        "character": 0,
                        "line": 2
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "message": "To match this '<'\n\ntmpzj63bvvq.cpp:3:1: error: expected '>'",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 0
                    },
                    "start": {
                        "character": 9,
                        "line": 0
                    }
                },
                "severity": 3
            },
            {
                "code": "ext_using_undefined_std",
                "message": "Using directive refers to implicitly-defined namespace 'std'",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 2
                    },
                    "start": {
                        "character": 16,
                        "line": 2
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 4
                    },
                    "start": {
                        "character": 21,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 39,
                        "line": 5
                    },
                    "start": {
                        "character": 25,
                        "line": 5
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 78
                    },
                    "start": {
                        "character": 1,
                        "line": 78
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 79
                    },
                    "start": {
                        "character": 1,
                        "line": 79
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 80
                    },
                    "start": {
                        "character": 1,
                        "line": 80
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 14,
                        "line": 81
                    },
                    "start": {
                        "character": 8,
                        "line": 81
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 82
                    },
                    "start": {
                        "character": 1,
                        "line": 82
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 116
                    },
                    "start": {
                        "character": 21,
                        "line": 116
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 129
                    },
                    "start": {
                        "character": 30,
                        "line": 129
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 27,
                        "line": 153
                    },
                    "start": {
                        "character": 21,
                        "line": 153
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 174
                    },
                    "start": {
                        "character": 1,
                        "line": 174
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 221
                    },
                    "start": {
                        "character": 30,
                        "line": 221
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 221
                    },
                    "start": {
                        "character": 49,
                        "line": 221
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 32,
                        "line": 245
                    },
                    "start": {
                        "character": 26,
                        "line": 245
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 51,
                        "line": 245
                    },
                    "start": {
                        "character": 45,
                        "line": 245
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 285
                    },
                    "start": {
                        "character": 29,
                        "line": 285
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 54,
                        "line": 285
                    },
                    "start": {
                        "character": 48,
                        "line": 285
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 321
                    },
                    "start": {
                        "character": 30,
                        "line": 321
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 321
                    },
                    "start": {
                        "character": 49,
                        "line": 321
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 38
    }
}
Diagnostics received from LSP.
Errors received: [[2, [0, 0]], [4, [21, 35]], [5, [25, 39]], [78, [1, 7]], [79, [1, 7]], [80, [1, 7]], [81, [8, 14]], [82, [1, 7]], [116, [21, 26]], [129, [30, 36]], [153, [21, 27]], [174, [1, 7]], [221, [30, 36]], [221, [49, 55]], [245, [26, 32]], [245, [45, 51]], [285, [29, 35]], [285, [48, 54]], [321, [30, 36]], [321, [49, 55]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": [
            {
                "filterText": "VersionHelpers.h>",
                "insertText": "VersionHelpers.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " VersionHelpers.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681VersionHelpers.h>",
                "textEdit": {
                    "newText": "VersionHelpers.h>",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vecintrin.h>",
                "insertText": "vecintrin.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vecintrin.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681vecintrin.h>",
                "textEdit": {
                    "newText": "vecintrin.h>",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vector>",
                "insertText": "vector>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vector>",
                "score": 0.787254273891449,
                "sortText": "40b67681vector>",
                "textEdit": {
                    "newText": "vector>",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "velintrin.h>",
                "insertText": "velintrin.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " velintrin.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681velintrin.h>",
                "textEdit": {
                    "newText": "velintrin.h>",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "velintrin_approx.h>",
                "insertText": "velintrin_approx.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " velintrin_approx.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681velintrin_approx.h>",
                "textEdit": {
                    "newText": "velintrin_approx.h>",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "velintrin_gen.h>",
                "insertText": "velintrin_gen.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " velintrin_gen.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681velintrin_gen.h>",
                "textEdit": {
                    "newText": "velintrin_gen.h>",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "verrsrc.h>",
                "insertText": "verrsrc.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " verrsrc.h>",
                "score": 0.787254273891449,
                "sortText": "40b67681verrsrc.h>",
                "textEdit": {
                    "newText": "verrsrc.h>",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "version>",
                "insertText": "version>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " version>",
                "score": 0.787254273891449,
                "sortText": "40b67681version>",
                "textEdit": {
                    "newText": "version>",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "vcruntime_exception.h>",
                "insertText": "vcruntime_exception.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " vcruntime_exception.h>",
                "score": 0.787254273891449,
                "sortText": "40e8d8e1vcruntime_exception.h>",
                "textEdit": {
                    "newText": "vcruntime_exception.h>",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "Ole2Ver.h>",
                "insertText": "Ole2Ver.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " Ole2Ver.h>",
                "score": 0.787254273891449,
                "sortText": "4168d8e1Ole2Ver.h>",
                "textEdit": {
                    "newText": "Ole2Ver.h>",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "arm_vector_types.h>",
                "insertText": "arm_vector_types.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " arm_vector_types.h>",
                "score": 0.787254273891449,
                "sortText": "4168d8e1arm_vector_types.h>",
                "textEdit": {
                    "newText": "arm_vector_types.h>",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "concurrent_vector.h>",
                "insertText": "concurrent_vector.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " concurrent_vector.h>",
                "score": 0.787254273891449,
                "sortText": "4168d8e1concurrent_vector.h>",
                "textEdit": {
                    "newText": "concurrent_vector.h>",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "riscv_vector.h>",
                "insertText": "riscv_vector.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " riscv_vector.h>",
                "score": 0.787254273891449,
                "sortText": "4168d8e1riscv_vector.h>",
                "textEdit": {
                    "newText": "riscv_vector.h>",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "sifive_vector.h>",
                "insertText": "sifive_vector.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " sifive_vector.h>",
                "score": 0.787254273891449,
                "sortText": "4168d8e1sifive_vector.h>",
                "textEdit": {
                    "newText": "sifive_vector.h>",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "UserConsentVerifierInterop.h>",
                "insertText": "UserConsentVerifierInterop.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " UserConsentVerifierInterop.h>",
                "score": 0.787254273891449,
                "sortText": "41b67681UserConsentVerifierInterop.h>",
                "textEdit": {
                    "newText": "UserConsentVerifierInterop.h>",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "amp_short_vectors.h>",
                "insertText": "amp_short_vectors.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " amp_short_vectors.h>",
                "score": 0.787254273891449,
                "sortText": "41b67681amp_short_vectors.h>",
                "textEdit": {
                    "newText": "amp_short_vectors.h>",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            },
            {
                "filterText": "DirectXPackedVector.h>",
                "insertText": "DirectXPackedVector.h>",
                "insertTextFormat": 1,
                "kind": 17,
                "label": " DirectXPackedVector.h>",
                "score": 0.787254273891449,
                "sortText": "42367681DirectXPackedVector.h>",
                "textEdit": {
                    "newText": "DirectXPackedVector.h>",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 0
                        },
                        "start": {
                            "character": 10,
                            "line": 0
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['VersionHelpers.h>', 'vecintrin.h>', 'vector>', 'velintrin.h>', 'velintrin_approx.h>', 'velintrin_gen.h>', 'verrsrc.h>', 'version>', 'vcruntime_exception.h>', 'Ole2Ver.h>', 'arm_vector_types.h>', 'concurrent_vector.h>', 'riscv_vector.h>', 'sifive_vector.h>', 'UserConsentVerifierInterop.h>', 'amp_short_vectors.h>', 'DirectXPackedVector.h>']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected",
                "message": "Expected '>'\n\ntmpzj63bvvq.cpp:1:10: note: to match this '<'",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 2
                    },
                    "start": {
                        "character": 0,
                        "line": 2
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "message": "To match this '<'\n\ntmpzj63bvvq.cpp:3:1: error: expected '>'",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 0
                    },
                    "start": {
                        "character": 9,
                        "line": 0
                    }
                },
                "severity": 3
            },
            {
                "code": "ext_using_undefined_std",
                "message": "Using directive refers to implicitly-defined namespace 'std'",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 2
                    },
                    "start": {
                        "character": 16,
                        "line": 2
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 4
                    },
                    "start": {
                        "character": 21,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 39,
                        "line": 5
                    },
                    "start": {
                        "character": 25,
                        "line": 5
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 78
                    },
                    "start": {
                        "character": 1,
                        "line": 78
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 79
                    },
                    "start": {
                        "character": 1,
                        "line": 79
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 80
                    },
                    "start": {
                        "character": 1,
                        "line": 80
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 14,
                        "line": 81
                    },
                    "start": {
                        "character": 8,
                        "line": 81
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 82
                    },
                    "start": {
                        "character": 1,
                        "line": 82
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 116
                    },
                    "start": {
                        "character": 21,
                        "line": 116
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 129
                    },
                    "start": {
                        "character": 30,
                        "line": 129
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 27,
                        "line": 153
                    },
                    "start": {
                        "character": 21,
                        "line": 153
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 174
                    },
                    "start": {
                        "character": 1,
                        "line": 174
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 221
                    },
                    "start": {
                        "character": 30,
                        "line": 221
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 221
                    },
                    "start": {
                        "character": 49,
                        "line": 221
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 32,
                        "line": 245
                    },
                    "start": {
                        "character": 26,
                        "line": 245
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 51,
                        "line": 245
                    },
                    "start": {
                        "character": 45,
                        "line": 245
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 285
                    },
                    "start": {
                        "character": 29,
                        "line": 285
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 54,
                        "line": 285
                    },
                    "start": {
                        "character": 48,
                        "line": 285
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 321
                    },
                    "start": {
                        "character": 30,
                        "line": 321
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 321
                    },
                    "start": {
                        "character": 49,
                        "line": 321
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 39
    }
}
Diagnostics received from LSP.
Errors received: [[2, [0, 0]], [4, [21, 35]], [5, [25, 39]], [78, [1, 7]], [79, [1, 7]], [80, [1, 7]], [81, [8, 14]], [82, [1, 7]], [116, [21, 26]], [129, [30, 36]], [153, [21, 27]], [174, [1, 7]], [221, [30, 36]], [221, [49, 55]], [245, [26, 32]], [245, [45, 51]], [285, [29, 35]], [285, [48, 54]], [321, [30, 36]], [321, [49, 55]], [0, [0, 0]]]
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected",
                "message": "Expected '>'\n\ntmpzj63bvvq.cpp:1:10: note: to match this '<'",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 2
                    },
                    "start": {
                        "character": 0,
                        "line": 2
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "message": "To match this '<'\n\ntmpzj63bvvq.cpp:3:1: error: expected '>'",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 0
                    },
                    "start": {
                        "character": 9,
                        "line": 0
                    }
                },
                "severity": 3
            },
            {
                "code": "ext_using_undefined_std",
                "message": "Using directive refers to implicitly-defined namespace 'std'",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 2
                    },
                    "start": {
                        "character": 16,
                        "line": 2
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 4
                    },
                    "start": {
                        "character": 21,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 39,
                        "line": 5
                    },
                    "start": {
                        "character": 25,
                        "line": 5
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 78
                    },
                    "start": {
                        "character": 1,
                        "line": 78
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 79
                    },
                    "start": {
                        "character": 1,
                        "line": 79
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 80
                    },
                    "start": {
                        "character": 1,
                        "line": 80
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 14,
                        "line": 81
                    },
                    "start": {
                        "character": 8,
                        "line": 81
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 82
                    },
                    "start": {
                        "character": 1,
                        "line": 82
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 116
                    },
                    "start": {
                        "character": 21,
                        "line": 116
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 129
                    },
                    "start": {
                        "character": 30,
                        "line": 129
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 27,
                        "line": 153
                    },
                    "start": {
                        "character": 21,
                        "line": 153
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 174
                    },
                    "start": {
                        "character": 1,
                        "line": 174
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 221
                    },
                    "start": {
                        "character": 30,
                        "line": 221
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 221
                    },
                    "start": {
                        "character": 49,
                        "line": 221
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 32,
                        "line": 245
                    },
                    "start": {
                        "character": 26,
                        "line": 245
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 51,
                        "line": 245
                    },
                    "start": {
                        "character": 45,
                        "line": 245
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 285
                    },
                    "start": {
                        "character": 29,
                        "line": 285
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 54,
                        "line": 285
                    },
                    "start": {
                        "character": 48,
                        "line": 285
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 321
                    },
                    "start": {
                        "character": 30,
                        "line": 321
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 321
                    },
                    "start": {
                        "character": 49,
                        "line": 321
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 39
    }
}
Diagnostics received from LSP.
Errors received: [[2, [0, 0]], [4, [21, 35]], [5, [25, 39]], [78, [1, 7]], [79, [1, 7]], [80, [1, 7]], [81, [8, 14]], [82, [1, 7]], [116, [21, 26]], [129, [30, 36]], [153, [21, 27]], [174, [1, 7]], [221, [30, 36]], [221, [49, 55]], [245, [26, 32]], [245, [45, 51]], [285, [29, 35]], [285, [48, 54]], [321, [30, 36]], [321, [49, 55]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected",
                "message": "Expected '>'\n\ntmpzj63bvvq.cpp:1:10: note: to match this '<'",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 2
                    },
                    "start": {
                        "character": 0,
                        "line": 2
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "message": "To match this '<'\n\ntmpzj63bvvq.cpp:3:1: error: expected '>'",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 0
                    },
                    "start": {
                        "character": 9,
                        "line": 0
                    }
                },
                "severity": 3
            },
            {
                "code": "ext_using_undefined_std",
                "message": "Using directive refers to implicitly-defined namespace 'std'",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 2
                    },
                    "start": {
                        "character": 16,
                        "line": 2
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 4
                    },
                    "start": {
                        "character": 21,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 39,
                        "line": 5
                    },
                    "start": {
                        "character": 25,
                        "line": 5
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 78
                    },
                    "start": {
                        "character": 1,
                        "line": 78
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 79
                    },
                    "start": {
                        "character": 1,
                        "line": 79
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 80
                    },
                    "start": {
                        "character": 1,
                        "line": 80
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 14,
                        "line": 81
                    },
                    "start": {
                        "character": 8,
                        "line": 81
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 82
                    },
                    "start": {
                        "character": 1,
                        "line": 82
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 116
                    },
                    "start": {
                        "character": 21,
                        "line": 116
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 129
                    },
                    "start": {
                        "character": 30,
                        "line": 129
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 27,
                        "line": 153
                    },
                    "start": {
                        "character": 21,
                        "line": 153
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 174
                    },
                    "start": {
                        "character": 1,
                        "line": 174
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 221
                    },
                    "start": {
                        "character": 30,
                        "line": 221
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 221
                    },
                    "start": {
                        "character": 49,
                        "line": 221
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 32,
                        "line": 245
                    },
                    "start": {
                        "character": 26,
                        "line": 245
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 51,
                        "line": 245
                    },
                    "start": {
                        "character": 45,
                        "line": 245
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 285
                    },
                    "start": {
                        "character": 29,
                        "line": 285
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 54,
                        "line": 285
                    },
                    "start": {
                        "character": 48,
                        "line": 285
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 321
                    },
                    "start": {
                        "character": 30,
                        "line": 321
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 321
                    },
                    "start": {
                        "character": 49,
                        "line": 321
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 40
    }
}
Diagnostics received from LSP.
Errors received: [[2, [0, 0]], [4, [21, 35]], [5, [25, 39]], [78, [1, 7]], [79, [1, 7]], [80, [1, 7]], [81, [8, 14]], [82, [1, 7]], [116, [21, 26]], [129, [30, 36]], [153, [21, 27]], [174, [1, 7]], [221, [30, 36]], [221, [49, 55]], [245, [26, 32]], [245, [45, 51]], [285, [29, 35]], [285, [48, 54]], [321, [30, 36]], [321, [49, 55]], [0, [0, 0]]]
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected",
                "message": "Expected '>'\n\ntmpzj63bvvq.cpp:1:10: note: to match this '<'",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 2
                    },
                    "start": {
                        "character": 0,
                        "line": 2
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "message": "To match this '<'\n\ntmpzj63bvvq.cpp:3:1: error: expected '>'",
                "range": {
                    "end": {
                        "character": 10,
                        "line": 0
                    },
                    "start": {
                        "character": 9,
                        "line": 0
                    }
                },
                "severity": 3
            },
            {
                "code": "ext_using_undefined_std",
                "message": "Using directive refers to implicitly-defined namespace 'std'",
                "range": {
                    "end": {
                        "character": 19,
                        "line": 2
                    },
                    "start": {
                        "character": 16,
                        "line": 2
                    }
                },
                "severity": 2,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 4
                    },
                    "start": {
                        "character": 21,
                        "line": 4
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'numeric_limits' (fix available)",
                "range": {
                    "end": {
                        "character": 39,
                        "line": 5
                    },
                    "start": {
                        "character": 25,
                        "line": 5
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 78
                    },
                    "start": {
                        "character": 1,
                        "line": 78
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 79
                    },
                    "start": {
                        "character": 1,
                        "line": 79
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 80
                    },
                    "start": {
                        "character": 1,
                        "line": 80
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 14,
                        "line": 81
                    },
                    "start": {
                        "character": 8,
                        "line": 81
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 82
                    },
                    "start": {
                        "character": 1,
                        "line": 82
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 116
                    },
                    "start": {
                        "character": 21,
                        "line": 116
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 129
                    },
                    "start": {
                        "character": 30,
                        "line": 129
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 27,
                        "line": 153
                    },
                    "start": {
                        "character": 21,
                        "line": 153
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 174
                    },
                    "start": {
                        "character": 1,
                        "line": 174
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 221
                    },
                    "start": {
                        "character": 30,
                        "line": 221
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 221
                    },
                    "start": {
                        "character": 49,
                        "line": 221
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 32,
                        "line": 245
                    },
                    "start": {
                        "character": 26,
                        "line": 245
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 51,
                        "line": 245
                    },
                    "start": {
                        "character": 45,
                        "line": 245
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 35,
                        "line": 285
                    },
                    "start": {
                        "character": 29,
                        "line": 285
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 54,
                        "line": 285
                    },
                    "start": {
                        "character": 48,
                        "line": 285
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 36,
                        "line": 321
                    },
                    "start": {
                        "character": 30,
                        "line": 321
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'vector' (fix available)",
                "range": {
                    "end": {
                        "character": 55,
                        "line": 321
                    },
                    "start": {
                        "character": 49,
                        "line": 321
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 40
    }
}
Diagnostics received from LSP.
Errors received: [[2, [0, 0]], [4, [21, 35]], [5, [25, 39]], [78, [1, 7]], [79, [1, 7]], [80, [1, 7]], [81, [8, 14]], [82, [1, 7]], [116, [21, 26]], [129, [30, 36]], [153, [21, 27]], [174, [1, 7]], [221, [30, 36]], [221, [49, 55]], [245, [26, 32]], [245, [45, 51]], [285, [29, 35]], [285, [48, 54]], [321, [30, 36]], [321, [49, 55]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected",
                "message": "Expected '>'",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 1
                    },
                    "start": {
                        "character": 0,
                        "line": 1
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 116
                    },
                    "start": {
                        "character": 21,
                        "line": 116
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 73,
                        "line": 625
                    },
                    "start": {
                        "character": 68,
                        "line": 625
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 133
                    },
                    "start": {
                        "character": 2,
                        "line": 133
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'queue' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 155
                    },
                    "start": {
                        "character": 2,
                        "line": 155
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 177
                    },
                    "start": {
                        "character": 2,
                        "line": 177
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 208
                    },
                    "start": {
                        "character": 3,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 208
                    },
                    "start": {
                        "character": 11,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 101,
                        "line": 216
                    },
                    "start": {
                        "character": 97,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 52,
                        "line": 260
                    },
                    "start": {
                        "character": 50,
                        "line": 260
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'priority_queue' (fix available)",
                "range": {
                    "end": {
                        "character": 16,
                        "line": 260
                    },
                    "start": {
                        "character": 2,
                        "line": 260
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'pq'",
                "range": {
                    "end": {
                        "character": 52,
                        "line": 260
                    },
                    "start": {
                        "character": 50,
                        "line": 260
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 42
    }
}
Diagnostics received from LSP.
Errors received: [[1, [0, 0]], [116, [21, 26]], [625, [68, 73]], [133, [2, 7]], [143, [4, 8]], [143, [4, 8]], [155, [2, 7]], [177, [2, 7]], [205, [3, 7]], [205, [3, 7]], [207, [4, 8]], [207, [4, 8]], [208, [3, 7]], [208, [11, 15]], [216, [3, 7]], [216, [3, 7]], [216, [97, 101]], [260, [50, 52]], [260, [2, 16]], [260, [50, 52]], [0, [0, 0]]]
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 116
                    },
                    "start": {
                        "character": 21,
                        "line": 116
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 73,
                        "line": 625
                    },
                    "start": {
                        "character": 68,
                        "line": 625
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 133
                    },
                    "start": {
                        "character": 2,
                        "line": 133
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'queue' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 155
                    },
                    "start": {
                        "character": 2,
                        "line": 155
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 177
                    },
                    "start": {
                        "character": 2,
                        "line": 177
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 208
                    },
                    "start": {
                        "character": 3,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 208
                    },
                    "start": {
                        "character": 11,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 101,
                        "line": 216
                    },
                    "start": {
                        "character": 97,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 52,
                        "line": 260
                    },
                    "start": {
                        "character": 50,
                        "line": 260
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'priority_queue' (fix available)",
                "range": {
                    "end": {
                        "character": 16,
                        "line": 260
                    },
                    "start": {
                        "character": 2,
                        "line": 260
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'pq'",
                "range": {
                    "end": {
                        "character": 52,
                        "line": 260
                    },
                    "start": {
                        "character": 50,
                        "line": 260
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 42
    }
}
Diagnostics received from LSP.
Errors received: [[116, [21, 26]], [625, [68, 73]], [133, [2, 7]], [143, [4, 8]], [143, [4, 8]], [155, [2, 7]], [177, [2, 7]], [205, [3, 7]], [205, [3, 7]], [207, [4, 8]], [207, [4, 8]], [208, [3, 7]], [208, [11, 15]], [216, [3, 7]], [216, [3, 7]], [216, [97, 101]], [260, [50, 52]], [260, [2, 16]], [260, [50, 52]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <thread>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <thread>"
                },
                "filterText": "yield",
                "insertText": "this_thread::yield",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022this_thread::yield()",
                "score": 0.3358764946460724,
                "sortText": "415407ffyield",
                "textEdit": {
                    "newText": "this_thread::yield",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "time_base::dateorder",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "ydm",
                "insertText": "time_base::ydm",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022time_base::ydm",
                "score": 0.2888787090778351,
                "sortText": "416c1817ydm",
                "textEdit": {
                    "newText": "time_base::ydm",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <locale>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "time_base::dateorder",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <locale>"
                },
                "filterText": "ymd",
                "insertText": "time_base::ymd",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022time_base::ymd",
                "score": 0.2888787090778351,
                "sortText": "416c1817ymd",
                "textEdit": {
                    "newText": "time_base::ymd",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_math.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_math.h>"
                },
                "filterText": "y0",
                "insertText": "y0",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022y0(double X)",
                "score": 0.23694516718387604,
                "sortText": "418d5e3fy0",
                "textEdit": {
                    "newText": "y0",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_math.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_math.h>"
                },
                "filterText": "y1",
                "insertText": "y1",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022y1(double X)",
                "score": 0.23694516718387604,
                "sortText": "418d5e3fy1",
                "textEdit": {
                    "newText": "y1",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_math.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_math.h>"
                },
                "filterText": "yn",
                "insertText": "yn",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022yn(int X, double Y)",
                "score": 0.23694516718387604,
                "sortText": "418d5e3fyn",
                "textEdit": {
                    "newText": "yn",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_math.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_math.h>"
                },
                "filterText": "_y0",
                "insertText": "_y0",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_y0(double X)",
                "score": 0.2786673903465271,
                "sortText": "80000000_y0",
                "textEdit": {
                    "newText": "_y0",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_math.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_math.h>"
                },
                "filterText": "_y1",
                "insertText": "_y1",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_y1(double X)",
                "score": 0.2786673903465271,
                "sortText": "80000000_y1",
                "textEdit": {
                    "newText": "_y1",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_math.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_math.h>"
                },
                "filterText": "_yn",
                "insertText": "_yn",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_yn(int X, double Y)",
                "score": 0.2786673903465271,
                "sortText": "80000000_yn",
                "textEdit": {
                    "newText": "_yn",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['this_thread::yield', 'time_base::ydm', 'time_base::ymd', 'y0', 'y1', 'yn', '_y0', '_y1', '_yn']
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <future>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "future<_Invoke_result_t<decay_t<Fty>, decay_t<ArgTypes>...>>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <future>"
                },
                "filterText": "async",
                "insertText": "async",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022async(launch Policy, Fty &&Fnarg, ArgTypes &&Args...)",
                "score": 0.4689558446407318,
                "sortText": "410fe505async",
                "textEdit": {
                    "newText": "async",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <future>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "future<_Invoke_result_t<decay_t<Fty>, decay_t<ArgTypes>...>>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <future>"
                },
                "filterText": "async",
                "insertText": "async",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022async(Fty &&Fnarg, ArgTypes &&Args...)",
                "score": 0.4689558446407318,
                "sortText": "410fe505async",
                "textEdit": {
                    "newText": "async",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <future>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "std::launch",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <future>"
                },
                "filterText": "async",
                "insertText": "launch::async",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022launch::async",
                "score": 0.2888787090778351,
                "sortText": "416c1817async",
                "textEdit": {
                    "newText": "launch::async",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplwin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "unsigned int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplwin.h>"
                },
                "filterText": "GetNextAsyncId",
                "insertText": "Concurrency::details::platform::GetNextAsyncId",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::details::platform::GetNextAsyncId()",
                "score": 0.3183371126651764,
                "sortText": "41dd02ebGetNextAsyncId",
                "textEdit": {
                    "newText": "Concurrency::details::platform::GetNextAsyncId",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['async', 'async', 'launch::async', 'Concurrency::details::platform::GetNextAsyncId']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "no_member",
                "message": "No member named 'y' in 'Muchie'",
                "range": {
                    "end": {
                        "character": 9,
                        "line": 21
                    },
                    "start": {
                        "character": 8,
                        "line": 21
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_member",
                "message": "No member named 'y' in 'Muchie'",
                "range": {
                    "end": {
                        "character": 9,
                        "line": 28
                    },
                    "start": {
                        "character": 8,
                        "line": 28
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_member",
                "message": "No member named 'y' in 'Muchie'",
                "range": {
                    "end": {
                        "character": 9,
                        "line": 34
                    },
                    "start": {
                        "character": 8,
                        "line": 34
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 116
                    },
                    "start": {
                        "character": 21,
                        "line": 116
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 73,
                        "line": 625
                    },
                    "start": {
                        "character": 68,
                        "line": 625
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 133
                    },
                    "start": {
                        "character": 2,
                        "line": 133
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'queue' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 155
                    },
                    "start": {
                        "character": 2,
                        "line": 155
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 177
                    },
                    "start": {
                        "character": 2,
                        "line": 177
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 208
                    },
                    "start": {
                        "character": 3,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 208
                    },
                    "start": {
                        "character": 11,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 101,
                        "line": 216
                    },
                    "start": {
                        "character": 97,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 44
    }
}
Diagnostics received from LSP.
Errors received: [[21, [8, 9]], [28, [8, 9]], [34, [8, 9]], [116, [21, 26]], [625, [68, 73]], [133, [2, 7]], [143, [4, 8]], [143, [4, 8]], [155, [2, 7]], [177, [2, 7]], [205, [3, 7]], [205, [3, 7]], [207, [4, 8]], [207, [4, 8]], [208, [3, 7]], [208, [11, 15]], [216, [3, 7]], [216, [3, 7]], [216, [97, 101]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "no_member",
                "message": "No member named 'y' in 'Muchie'",
                "range": {
                    "end": {
                        "character": 9,
                        "line": 21
                    },
                    "start": {
                        "character": 8,
                        "line": 21
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_member",
                "message": "No member named 'y' in 'Muchie'",
                "range": {
                    "end": {
                        "character": 9,
                        "line": 28
                    },
                    "start": {
                        "character": 8,
                        "line": 28
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_member",
                "message": "No member named 'y' in 'Muchie'",
                "range": {
                    "end": {
                        "character": 9,
                        "line": 34
                    },
                    "start": {
                        "character": 8,
                        "line": 34
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 116
                    },
                    "start": {
                        "character": 21,
                        "line": 116
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 73,
                        "line": 625
                    },
                    "start": {
                        "character": 68,
                        "line": 625
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 133
                    },
                    "start": {
                        "character": 2,
                        "line": 133
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'queue' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 155
                    },
                    "start": {
                        "character": 2,
                        "line": 155
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 177
                    },
                    "start": {
                        "character": 2,
                        "line": 177
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 208
                    },
                    "start": {
                        "character": 3,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 208
                    },
                    "start": {
                        "character": 11,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 101,
                        "line": 216
                    },
                    "start": {
                        "character": 97,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 45
    }
}
Diagnostics received from LSP.
Errors received: [[21, [8, 9]], [28, [8, 9]], [34, [8, 9]], [116, [21, 26]], [625, [68, 73]], [133, [2, 7]], [143, [4, 8]], [143, [4, 8]], [155, [2, 7]], [177, [2, 7]], [205, [3, 7]], [205, [3, 7]], [207, [4, 8]], [207, [4, 8]], [208, [3, 7]], [208, [11, 15]], [216, [3, 7]], [216, [3, 7]], [216, [97, 101]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "no_member",
                "message": "No member named 'y' in 'Muchie'",
                "range": {
                    "end": {
                        "character": 9,
                        "line": 21
                    },
                    "start": {
                        "character": 8,
                        "line": 21
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_member",
                "message": "No member named 'y' in 'Muchie'",
                "range": {
                    "end": {
                        "character": 9,
                        "line": 28
                    },
                    "start": {
                        "character": 8,
                        "line": 28
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_member",
                "message": "No member named 'y' in 'Muchie'",
                "range": {
                    "end": {
                        "character": 9,
                        "line": 34
                    },
                    "start": {
                        "character": 8,
                        "line": 34
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 116
                    },
                    "start": {
                        "character": 21,
                        "line": 116
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 73,
                        "line": 625
                    },
                    "start": {
                        "character": 68,
                        "line": 625
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 133
                    },
                    "start": {
                        "character": 2,
                        "line": 133
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'queue' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 155
                    },
                    "start": {
                        "character": 2,
                        "line": 155
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 177
                    },
                    "start": {
                        "character": 2,
                        "line": 177
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 208
                    },
                    "start": {
                        "character": 3,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 208
                    },
                    "start": {
                        "character": 11,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 101,
                        "line": 216
                    },
                    "start": {
                        "character": 97,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 47
    }
}
Diagnostics received from LSP.
Errors received: [[21, [8, 9]], [28, [8, 9]], [34, [8, 9]], [116, [21, 26]], [625, [68, 73]], [133, [2, 7]], [143, [4, 8]], [143, [4, 8]], [155, [2, 7]], [177, [2, 7]], [205, [3, 7]], [205, [3, 7]], [207, [4, 8]], [207, [4, 8]], [208, [3, 7]], [208, [11, 15]], [216, [3, 7]], [216, [3, 7]], [216, [97, 101]], [0, [0, 0]]]
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "no_member",
                "message": "No member named 'y' in 'Muchie'",
                "range": {
                    "end": {
                        "character": 9,
                        "line": 21
                    },
                    "start": {
                        "character": 8,
                        "line": 21
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_member",
                "message": "No member named 'y' in 'Muchie'",
                "range": {
                    "end": {
                        "character": 9,
                        "line": 28
                    },
                    "start": {
                        "character": 8,
                        "line": 28
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_member",
                "message": "No member named 'y' in 'Muchie'",
                "range": {
                    "end": {
                        "character": 9,
                        "line": 34
                    },
                    "start": {
                        "character": 8,
                        "line": 34
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 116
                    },
                    "start": {
                        "character": 21,
                        "line": 116
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 73,
                        "line": 625
                    },
                    "start": {
                        "character": 68,
                        "line": 625
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 133
                    },
                    "start": {
                        "character": 2,
                        "line": 133
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'queue' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 155
                    },
                    "start": {
                        "character": 2,
                        "line": 155
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 177
                    },
                    "start": {
                        "character": 2,
                        "line": 177
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 208
                    },
                    "start": {
                        "character": 3,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 208
                    },
                    "start": {
                        "character": 11,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 101,
                        "line": 216
                    },
                    "start": {
                        "character": 97,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 48
    }
}
Diagnostics received from LSP.
Errors received: [[21, [8, 9]], [28, [8, 9]], [34, [8, 9]], [116, [21, 26]], [625, [68, 73]], [133, [2, 7]], [143, [4, 8]], [143, [4, 8]], [155, [2, 7]], [177, [2, 7]], [205, [3, 7]], [205, [3, 7]], [207, [4, 8]], [207, [4, 8]], [208, [3, 7]], [208, [11, 15]], [216, [3, 7]], [216, [3, 7]], [216, [97, 101]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "no_member",
                "message": "No member named 'y' in 'Muchie'",
                "range": {
                    "end": {
                        "character": 9,
                        "line": 21
                    },
                    "start": {
                        "character": 8,
                        "line": 21
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_member",
                "message": "No member named 'y' in 'Muchie'",
                "range": {
                    "end": {
                        "character": 9,
                        "line": 28
                    },
                    "start": {
                        "character": 8,
                        "line": 28
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_member",
                "message": "No member named 'y' in 'Muchie'",
                "range": {
                    "end": {
                        "character": 9,
                        "line": 34
                    },
                    "start": {
                        "character": 8,
                        "line": 34
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 116
                    },
                    "start": {
                        "character": 21,
                        "line": 116
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 73,
                        "line": 625
                    },
                    "start": {
                        "character": 68,
                        "line": 625
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 133
                    },
                    "start": {
                        "character": 2,
                        "line": 133
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'queue' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 155
                    },
                    "start": {
                        "character": 2,
                        "line": 155
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 177
                    },
                    "start": {
                        "character": 2,
                        "line": 177
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 208
                    },
                    "start": {
                        "character": 3,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 208
                    },
                    "start": {
                        "character": 11,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 101,
                        "line": 216
                    },
                    "start": {
                        "character": 97,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 49
    }
}
Diagnostics received from LSP.
Errors received: [[21, [8, 9]], [28, [8, 9]], [34, [8, 9]], [116, [21, 26]], [625, [68, 73]], [133, [2, 7]], [143, [4, 8]], [143, [4, 8]], [155, [2, 7]], [177, [2, 7]], [205, [3, 7]], [205, [3, 7]], [207, [4, 8]], [207, [4, 8]], [208, [3, 7]], [208, [11, 15]], [216, [3, 7]], [216, [3, 7]], [216, [97, 101]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "no_member",
                "message": "No member named 'y' in 'Muchie'",
                "range": {
                    "end": {
                        "character": 9,
                        "line": 21
                    },
                    "start": {
                        "character": 8,
                        "line": 21
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_member",
                "message": "No member named 'y' in 'Muchie'",
                "range": {
                    "end": {
                        "character": 9,
                        "line": 28
                    },
                    "start": {
                        "character": 8,
                        "line": 28
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_member",
                "message": "No member named 'y' in 'Muchie'",
                "range": {
                    "end": {
                        "character": 9,
                        "line": 34
                    },
                    "start": {
                        "character": 8,
                        "line": 34
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 116
                    },
                    "start": {
                        "character": 21,
                        "line": 116
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 73,
                        "line": 625
                    },
                    "start": {
                        "character": 68,
                        "line": 625
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 133
                    },
                    "start": {
                        "character": 2,
                        "line": 133
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'queue' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 155
                    },
                    "start": {
                        "character": 2,
                        "line": 155
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 177
                    },
                    "start": {
                        "character": 2,
                        "line": 177
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 208
                    },
                    "start": {
                        "character": 3,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 208
                    },
                    "start": {
                        "character": 11,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 101,
                        "line": 216
                    },
                    "start": {
                        "character": 97,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 50
    }
}
Diagnostics received from LSP.
Errors received: [[21, [8, 9]], [28, [8, 9]], [34, [8, 9]], [116, [21, 26]], [625, [68, 73]], [133, [2, 7]], [143, [4, 8]], [143, [4, 8]], [155, [2, 7]], [177, [2, 7]], [205, [3, 7]], [205, [3, 7]], [207, [4, 8]], [207, [4, 8]], [208, [3, 7]], [208, [11, 15]], [216, [3, 7]], [216, [3, 7]], [216, [97, 101]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "no_member",
                "message": "No member named 'y' in 'Muchie'",
                "range": {
                    "end": {
                        "character": 9,
                        "line": 21
                    },
                    "start": {
                        "character": 8,
                        "line": 21
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_member",
                "message": "No member named 'y' in 'Muchie'",
                "range": {
                    "end": {
                        "character": 9,
                        "line": 28
                    },
                    "start": {
                        "character": 8,
                        "line": 28
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_member",
                "message": "No member named 'y' in 'Muchie'",
                "range": {
                    "end": {
                        "character": 9,
                        "line": 34
                    },
                    "start": {
                        "character": 8,
                        "line": 34
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 116
                    },
                    "start": {
                        "character": 21,
                        "line": 116
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 73,
                        "line": 625
                    },
                    "start": {
                        "character": 68,
                        "line": 625
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 133
                    },
                    "start": {
                        "character": 2,
                        "line": 133
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'queue' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 155
                    },
                    "start": {
                        "character": 2,
                        "line": 155
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 177
                    },
                    "start": {
                        "character": 2,
                        "line": 177
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 208
                    },
                    "start": {
                        "character": 3,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 208
                    },
                    "start": {
                        "character": 11,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 101,
                        "line": 216
                    },
                    "start": {
                        "character": 97,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 51
    }
}
Diagnostics received from LSP.
Errors received: [[21, [8, 9]], [28, [8, 9]], [34, [8, 9]], [116, [21, 26]], [625, [68, 73]], [133, [2, 7]], [143, [4, 8]], [143, [4, 8]], [155, [2, 7]], [177, [2, 7]], [205, [3, 7]], [205, [3, 7]], [207, [4, 8]], [207, [4, 8]], [208, [3, 7]], [208, [11, 15]], [216, [3, 7]], [216, [3, 7]], [216, [97, 101]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "aligned_storage",
                "insertText": "aligned_storage",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022aligned_storage<size_t Len, size_t Align>",
                "score": 0.8582055568695068,
                "sortText": "40db397baligned_storage",
                "textEdit": {
                    "newText": "aligned_storage",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "aligned_storage_t",
                "insertText": "aligned_storage_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022aligned_storage_t<size_t Len, size_t Align>",
                "score": 0.8582055568695068,
                "sortText": "40db397baligned_storage_t",
                "textEdit": {
                    "newText": "aligned_storage_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_schar",
                "insertText": "atomic_schar",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_schar",
                "score": 0.8582055568695068,
                "sortText": "40db397batomic_schar",
                "textEdit": {
                    "newText": "atomic_schar",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_short",
                "insertText": "atomic_short",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_short",
                "score": 0.8582055568695068,
                "sortText": "40db397batomic_short",
                "textEdit": {
                    "newText": "atomic_short",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_size_t",
                "insertText": "atomic_size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_size_t",
                "score": 0.8582055568695068,
                "sortText": "40db397batomic_size_t",
                "textEdit": {
                    "newText": "atomic_size_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cassert>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cassert>"
                },
                "filterText": "assert",
                "insertText": "assert",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022assert(expression)",
                "score": 0.603100061416626,
                "sortText": "40e59b3cassert",
                "textEdit": {
                    "newText": "assert",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplinterface.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplinterface.h>"
                },
                "filterText": "atomic_size_t",
                "insertText": "Concurrency::details::atomic_size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022Concurrency::details::atomic_size_t",
                "score": 0.6444072127342224,
                "sortText": "41088c32atomic_size_t",
                "textEdit": {
                    "newText": "Concurrency::details::atomic_size_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "add_const_t<Ty> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "as_const",
                "insertText": "as_const",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022as_const(Ty &Val)",
                "score": 0.4689558446407318,
                "sortText": "410fe505as_const",
                "textEdit": {
                    "newText": "as_const",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asin",
                "insertText": "asin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asin(const valarray<Ty> &Left)",
                "score": 0.4689558446407318,
                "sortText": "410fe505asin",
                "textEdit": {
                    "newText": "asin",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asin",
                "insertText": "asin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asin(const complex<Ty> &Left)",
                "score": 0.4689558446407318,
                "sortText": "410fe505asin",
                "textEdit": {
                    "newText": "asin",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinh",
                "insertText": "asinh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asinh(const complex<Ty> &Left)",
                "score": 0.4689558446407318,
                "sortText": "410fe505asinh",
                "textEdit": {
                    "newText": "asinh",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <future>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "future<_Invoke_result_t<decay_t<Fty>, decay_t<ArgTypes>...>>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <future>"
                },
                "filterText": "async",
                "insertText": "async",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022async(Fty &&Fnarg, ArgTypes &&Args...)",
                "score": 0.4689558446407318,
                "sortText": "410fe505async",
                "textEdit": {
                    "newText": "async",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <future>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "future<_Invoke_result_t<decay_t<Fty>, decay_t<ArgTypes>...>>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <future>"
                },
                "filterText": "async",
                "insertText": "async",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022async(launch Policy, Fty &&Fnarg, ArgTypes &&Args...)",
                "score": 0.4689558446407318,
                "sortText": "410fe505async",
                "textEdit": {
                    "newText": "async",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_schar",
                "insertText": "atomic_schar",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_schar",
                "score": 0.5871009826660156,
                "sortText": "411e8da0atomic_schar",
                "textEdit": {
                    "newText": "atomic_schar",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_short",
                "insertText": "atomic_short",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_short",
                "score": 0.5871009826660156,
                "sortText": "411e8da0atomic_short",
                "textEdit": {
                    "newText": "atomic_short",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_size_t",
                "insertText": "atomic_size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_size_t",
                "score": 0.5871009826660156,
                "sortText": "411e8da0atomic_size_t",
                "textEdit": {
                    "newText": "atomic_size_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "as_const",
                "insertText": "as_const",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022as_const(const Ty &&)",
                "score": 0.3672971725463867,
                "sortText": "4143f1a0as_const",
                "textEdit": {
                    "newText": "as_const",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocate_shared",
                "insertText": "allocate_shared",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022allocate_shared<class Ty>(const Alloc &Al, Types &&Args...)",
                "score": 0.4689558446407318,
                "sortText": "414bebc4allocate_shared",
                "textEdit": {
                    "newText": "allocate_shared",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nThe following order matches N4950 [cmath.syn]."
                },
                "filterText": "asin",
                "insertText": "asin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asin(Ty Left)",
                "score": 0.32746627926826477,
                "sortText": "41585657asin",
                "textEdit": {
                    "newText": "asin",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asin",
                "insertText": "asin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asin(long double Xx)",
                "score": 0.32746627926826477,
                "sortText": "41585657asin",
                "textEdit": {
                    "newText": "asin",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asin",
                "insertText": "asin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asin(float Xx)",
                "score": 0.32746627926826477,
                "sortText": "41585657asin",
                "textEdit": {
                    "newText": "asin",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nThe following order matches N4950 [cmath.syn]."
                },
                "filterText": "asinh",
                "insertText": "asinh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asinh(Ty Left)",
                "score": 0.32746627926826477,
                "sortText": "41585657asinh",
                "textEdit": {
                    "newText": "asinh",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinh",
                "insertText": "asinh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asinh(long double Xx)",
                "score": 0.32746627926826477,
                "sortText": "41585657asinh",
                "textEdit": {
                    "newText": "asinh",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinh",
                "insertText": "asinh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asinh(float Xx)",
                "score": 0.32746627926826477,
                "sortText": "41585657asinh",
                "textEdit": {
                    "newText": "asinh",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "is_assignable",
                "insertText": "is_assignable",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022is_assignable<class To, class From>",
                "score": 0.8582055568695068,
                "sortText": "415b397bis_assignable",
                "textEdit": {
                    "newText": "is_assignable",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <future>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "std::launch",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <future>"
                },
                "filterText": "async",
                "insertText": "launch::async",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022launch::async",
                "score": 0.2888787090778351,
                "sortText": "416c1817async",
                "textEdit": {
                    "newText": "launch::async",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "static_assert",
                "insertText": "static_assert",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_assert(expression, message);",
                "score": 0.7694156765937805,
                "sortText": "416c45aestatic_assert",
                "textEdit": {
                    "newText": "static_assert",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <time.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <time.h>"
                },
                "filterText": "asctime_s",
                "insertText": "asctime_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asctime_s(char *Buffer, size_t SizeInBytes, const struct tm *Tm)",
                "score": 0.2786673903465271,
                "sortText": "41715282asctime_s",
                "textEdit": {
                    "newText": "asctime_s",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <time.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <time.h>"
                },
                "filterText": "asctime_s",
                "insertText": "asctime_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asctime_s(char (&Buffer)[Size], const struct tm *Time)",
                "score": 0.2786673903465271,
                "sortText": "41715282asctime_s",
                "textEdit": {
                    "newText": "asctime_s",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asin",
                "insertText": "asin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asin(double X)",
                "score": 0.2786673903465271,
                "sortText": "41715282asin",
                "textEdit": {
                    "newText": "asin",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinf",
                "insertText": "asinf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asinf(float X)",
                "score": 0.2786673903465271,
                "sortText": "41715282asinf",
                "textEdit": {
                    "newText": "asinf",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinh",
                "insertText": "asinh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asinh(double X)",
                "score": 0.2786673903465271,
                "sortText": "41715282asinh",
                "textEdit": {
                    "newText": "asinh",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinhf",
                "insertText": "asinhf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asinhf(float X)",
                "score": 0.2786673903465271,
                "sortText": "41715282asinhf",
                "textEdit": {
                    "newText": "asinhf",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinhl",
                "insertText": "asinhl",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asinhl(long double X)",
                "score": 0.2786673903465271,
                "sortText": "41715282asinhl",
                "textEdit": {
                    "newText": "asinhl",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinl",
                "insertText": "asinl",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asinl(long double X)",
                "score": 0.2786673903465271,
                "sortText": "41715282asinl",
                "textEdit": {
                    "newText": "asinl",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_signal_fence",
                "insertText": "atomic_signal_fence",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_signal_fence(const memory_order Order)",
                "score": 0.3672971725463867,
                "sortText": "4172f538atomic_signal_fence",
                "textEdit": {
                    "newText": "atomic_signal_fence",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_store",
                "insertText": "atomic_store",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_store(shared_ptr<Ty> *Ptr, shared_ptr<Ty> Other)",
                "score": 0.3672971725463867,
                "sortText": "4172f538atomic_store",
                "textEdit": {
                    "newText": "atomic_store",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_store",
                "insertText": "atomic_store",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_store(volatile atomic<Ty> *const Mem, const _Identity_t<Ty> Value)",
                "score": 0.3672971725463867,
                "sortText": "4172f538atomic_store",
                "textEdit": {
                    "newText": "atomic_store",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_store",
                "insertText": "atomic_store",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_store(atomic<Ty> *const Mem, const _Identity_t<Ty> Value)",
                "score": 0.3672971725463867,
                "sortText": "4172f538atomic_store",
                "textEdit": {
                    "newText": "atomic_store",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_store_explicit",
                "insertText": "atomic_store_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_store_explicit(shared_ptr<Ty> *Ptr, shared_ptr<Ty> Other, memory_order)",
                "score": 0.3672971725463867,
                "sortText": "4172f538atomic_store_explicit",
                "textEdit": {
                    "newText": "atomic_store_explicit",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_store_explicit",
                "insertText": "atomic_store_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_store_explicit(atomic<Ty> *const Mem, const _Identity_t<Ty> Value, const memory_order Order)",
                "score": 0.3672971725463867,
                "sortText": "4172f538atomic_store_explicit",
                "textEdit": {
                    "newText": "atomic_store_explicit",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_store_explicit",
                "insertText": "atomic_store_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_store_explicit(volatile atomic<Ty> *const Mem, const _Identity_t<Ty> Value, const memory_order Order)",
                "score": 0.3672971725463867,
                "sortText": "4172f538atomic_store_explicit",
                "textEdit": {
                    "newText": "atomic_store_explicit",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <chrono>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <chrono>"
                },
                "filterText": "treat_as_floating_point",
                "insertText": "chrono::treat_as_floating_point",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022chrono::treat_as_floating_point<class Rep>",
                "score": 0.6996012926101685,
                "sortText": "4179ad32treat_as_floating_point",
                "textEdit": {
                    "newText": "chrono::treat_as_floating_point",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\nAppCRT Time Functions\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
                },
                "filterText": "asctime",
                "insertText": "asctime",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asctime(const struct tm *Tm)",
                "score": 0.23694516718387604,
                "sortText": "418d5e3fasctime",
                "textEdit": {
                    "newText": "asctime",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "asctime",
                "insertText": "asctime",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022asctime",
                "score": 0.23272034525871277,
                "sortText": "4191b1c2asctime",
                "textEdit": {
                    "newText": "asctime",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asin",
                "insertText": "asin",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022asin",
                "score": 0.23272034525871277,
                "sortText": "4191b1c2asin",
                "textEdit": {
                    "newText": "asin",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinf",
                "insertText": "asinf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022asinf",
                "score": 0.23272034525871277,
                "sortText": "4191b1c2asinf",
                "textEdit": {
                    "newText": "asinf",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinh",
                "insertText": "asinh",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022asinh",
                "score": 0.23272034525871277,
                "sortText": "4191b1c2asinh",
                "textEdit": {
                    "newText": "asinh",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinhf",
                "insertText": "asinhf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022asinhf",
                "score": 0.23272034525871277,
                "sortText": "4191b1c2asinhf",
                "textEdit": {
                    "newText": "asinhf",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinhl",
                "insertText": "asinhl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022asinhl",
                "score": 0.23272034525871277,
                "sortText": "4191b1c2asinhl",
                "textEdit": {
                    "newText": "asinhl",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinl",
                "insertText": "asinl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022asinl",
                "score": 0.23272034525871277,
                "sortText": "4191b1c2asinl",
                "textEdit": {
                    "newText": "asinl",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdatomic.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdatomic.h>"
                },
                "filterText": "atomic_signal_fence",
                "insertText": "atomic_signal_fence",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_signal_fence(memory_order)",
                "score": 0.2795443534851074,
                "sortText": "41a94f58atomic_signal_fence",
                "textEdit": {
                    "newText": "atomic_signal_fence",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "aligned_storage",
                "insertText": "tr1::aligned_storage",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::aligned_storage",
                "score": 0.24704135954380035,
                "sortText": "41c245b1aligned_storage",
                "textEdit": {
                    "newText": "tr1::aligned_storage",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocate_shared",
                "insertText": "tr1::allocate_shared",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::allocate_shared",
                "score": 0.24704135954380035,
                "sortText": "41c245b1allocate_shared",
                "textEdit": {
                    "newText": "tr1::allocate_shared",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <tuple>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "tuple<Types &&...>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <tuple>"
                },
                "filterText": "forward_as_tuple",
                "insertText": "forward_as_tuple",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022forward_as_tuple(Types &&Args...)",
                "score": 0.4689558446407318,
                "sortText": "41cbebc4forward_as_tuple",
                "textEdit": {
                    "newText": "forward_as_tuple",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "is_assignable_v",
                "insertText": "is_assignable_v",
                "insertTextFormat": 1,
                "kind": 6,
                "label": "\u2022is_assignable_v<class To, class From>",
                "score": 0.32943084836006165,
                "sortText": "4202ff42is_assignable_v",
                "textEdit": {
                    "newText": "is_assignable_v",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <chrono>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <chrono>"
                },
                "filterText": "treat_as_floating_point_v",
                "insertText": "chrono::treat_as_floating_point_v",
                "insertTextFormat": 1,
                "kind": 6,
                "label": "\u2022chrono::treat_as_floating_point_v<class Rep>",
                "score": 0.2888787090778351,
                "sortText": "42222422treat_as_floating_point_v",
                "textEdit": {
                    "newText": "chrono::treat_as_floating_point_v",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplwin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "const ::std::shared_ptr<scheduler_interface> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplwin.h>"
                },
                "filterText": "get_ambient_scheduler",
                "insertText": "Concurrency::get_ambient_scheduler",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::get_ambient_scheduler()",
                "score": 0.3183371126651764,
                "sortText": "42dd02ebget_ambient_scheduler",
                "textEdit": {
                    "newText": "Concurrency::get_ambient_scheduler",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplwin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplwin.h>"
                },
                "filterText": "set_ambient_scheduler",
                "insertText": "Concurrency::set_ambient_scheduler",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::set_ambient_scheduler(const ::std::shared_ptr<scheduler_interface> &Scheduler)",
                "score": 0.3183371126651764,
                "sortText": "42dd02ebset_ambient_scheduler",
                "textEdit": {
                    "newText": "Concurrency::set_ambient_scheduler",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nENOTSOCK"
                },
                "filterText": "not_a_socket",
                "insertText": "errc::not_a_socket",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::not_a_socket",
                "score": 0.2888787090778351,
                "sortText": "42ec1817not_a_socket",
                "textEdit": {
                    "newText": "errc::not_a_socket",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nENOSTR"
                },
                "filterText": "not_a_stream",
                "insertText": "errc::not_a_stream",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::not_a_stream",
                "score": 0.2888787090778351,
                "sortText": "42ec1817not_a_stream",
                "textEdit": {
                    "newText": "errc::not_a_stream",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['aligned_storage', 'aligned_storage_t', 'atomic_schar', 'atomic_short', 'atomic_size_t', 'assert', 'Concurrency::details::atomic_size_t', 'as_const', 'asin', 'asin', 'asinh', 'async', 'async', 'atomic_schar', 'atomic_short', 'atomic_size_t', 'as_const', 'allocate_shared', 'asin', 'asin', 'asin', 'asinh', 'asinh', 'asinh', 'is_assignable', 'launch::async', 'static_assert', 'asctime_s', 'asctime_s', 'asin', 'asinf', 'asinh', 'asinhf', 'asinhl', 'asinl', 'atomic_signal_fence', 'atomic_store', 'atomic_store', 'atomic_store', 'atomic_store_explicit', 'atomic_store_explicit', 'atomic_store_explicit', 'chrono::treat_as_floating_point', 'asctime', 'asctime', 'asin', 'asinf', 'asinh', 'asinhf', 'asinhl', 'asinl', 'atomic_signal_fence', 'tr1::aligned_storage', 'tr1::allocate_shared', 'forward_as_tuple', 'is_assignable_v', 'chrono::treat_as_floating_point_v', 'Concurrency::get_ambient_scheduler', 'Concurrency::set_ambient_scheduler', 'errc::not_a_socket', 'errc::not_a_stream']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "no_member",
                "message": "No member named 'y' in 'Muchie'",
                "range": {
                    "end": {
                        "character": 9,
                        "line": 21
                    },
                    "start": {
                        "character": 8,
                        "line": 21
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_member",
                "message": "No member named 'y' in 'Muchie'",
                "range": {
                    "end": {
                        "character": 9,
                        "line": 28
                    },
                    "start": {
                        "character": 8,
                        "line": 28
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_member",
                "message": "No member named 'y' in 'Muchie'",
                "range": {
                    "end": {
                        "character": 9,
                        "line": 34
                    },
                    "start": {
                        "character": 8,
                        "line": 34
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 116
                    },
                    "start": {
                        "character": 21,
                        "line": 116
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 73,
                        "line": 625
                    },
                    "start": {
                        "character": 68,
                        "line": 625
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 133
                    },
                    "start": {
                        "character": 2,
                        "line": 133
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'queue' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 155
                    },
                    "start": {
                        "character": 2,
                        "line": 155
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 177
                    },
                    "start": {
                        "character": 2,
                        "line": 177
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 208
                    },
                    "start": {
                        "character": 3,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 208
                    },
                    "start": {
                        "character": 11,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 101,
                        "line": 216
                    },
                    "start": {
                        "character": 97,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 52
    }
}
Diagnostics received from LSP.
Errors received: [[21, [8, 9]], [28, [8, 9]], [34, [8, 9]], [116, [21, 26]], [625, [68, 73]], [133, [2, 7]], [143, [4, 8]], [143, [4, 8]], [155, [2, 7]], [177, [2, 7]], [205, [3, 7]], [205, [3, 7]], [207, [4, 8]], [207, [4, 8]], [208, [3, 7]], [208, [11, 15]], [216, [3, 7]], [216, [3, 7]], [216, [97, 101]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "adopt_lock_t",
                "insertText": "adopt_lock_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022adopt_lock_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4adopt_lock_t",
                "textEdit": {
                    "newText": "adopt_lock_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_bool",
                "insertText": "atomic_bool",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_bool",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_bool",
                "textEdit": {
                    "newText": "atomic_bool",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_char",
                "insertText": "atomic_char",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_char",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_char",
                "textEdit": {
                    "newText": "atomic_char",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_char32_t",
                "insertText": "atomic_char32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_char32_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_char32_t",
                "textEdit": {
                    "newText": "atomic_char32_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag",
                "insertText": "atomic_flag",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022atomic_flag",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_flag",
                "textEdit": {
                    "newText": "atomic_flag",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int16_t",
                "insertText": "atomic_int16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int16_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_int16_t",
                "textEdit": {
                    "newText": "atomic_int16_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int32_t",
                "insertText": "atomic_int32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int32_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_int32_t",
                "textEdit": {
                    "newText": "atomic_int32_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int64_t",
                "insertText": "atomic_int64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int64_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_int64_t",
                "textEdit": {
                    "newText": "atomic_int64_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int8_t",
                "insertText": "atomic_int8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int8_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_int8_t",
                "textEdit": {
                    "newText": "atomic_int8_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast16_t",
                "insertText": "atomic_int_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast16_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_int_fast16_t",
                "textEdit": {
                    "newText": "atomic_int_fast16_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast64_t",
                "insertText": "atomic_int_fast64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast64_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_int_fast64_t",
                "textEdit": {
                    "newText": "atomic_int_fast64_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast8_t",
                "insertText": "atomic_int_fast8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast8_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_int_fast8_t",
                "textEdit": {
                    "newText": "atomic_int_fast8_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least16_t",
                "insertText": "atomic_int_least16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least16_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_int_least16_t",
                "textEdit": {
                    "newText": "atomic_int_least16_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least32_t",
                "insertText": "atomic_int_least32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least32_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_int_least32_t",
                "textEdit": {
                    "newText": "atomic_int_least32_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least8_t",
                "insertText": "atomic_int_least8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least8_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_int_least8_t",
                "textEdit": {
                    "newText": "atomic_int_least8_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_intmax_t",
                "insertText": "atomic_intmax_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_intmax_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_intmax_t",
                "textEdit": {
                    "newText": "atomic_intmax_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_intptr_t",
                "insertText": "atomic_intptr_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_intptr_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_intptr_t",
                "textEdit": {
                    "newText": "atomic_intptr_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_llong",
                "insertText": "atomic_llong",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_llong",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_llong",
                "textEdit": {
                    "newText": "atomic_llong",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ptrdiff_t",
                "insertText": "atomic_ptrdiff_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ptrdiff_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_ptrdiff_t",
                "textEdit": {
                    "newText": "atomic_ptrdiff_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_short",
                "insertText": "atomic_short",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_short",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_short",
                "textEdit": {
                    "newText": "atomic_short",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint",
                "insertText": "atomic_uint",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_uint",
                "textEdit": {
                    "newText": "atomic_uint",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint32_t",
                "insertText": "atomic_uint32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint32_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_uint32_t",
                "textEdit": {
                    "newText": "atomic_uint32_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint64_t",
                "insertText": "atomic_uint64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint64_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_uint64_t",
                "textEdit": {
                    "newText": "atomic_uint64_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast16_t",
                "insertText": "atomic_uint_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast16_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_uint_fast16_t",
                "textEdit": {
                    "newText": "atomic_uint_fast16_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast64_t",
                "insertText": "atomic_uint_fast64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast64_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_uint_fast64_t",
                "textEdit": {
                    "newText": "atomic_uint_fast64_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_least8_t",
                "insertText": "atomic_uint_least8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_least8_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_uint_least8_t",
                "textEdit": {
                    "newText": "atomic_uint_least8_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uintmax_t",
                "insertText": "atomic_uintmax_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uintmax_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_uintmax_t",
                "textEdit": {
                    "newText": "atomic_uintmax_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uintptr_t",
                "insertText": "atomic_uintptr_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uintptr_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_uintptr_t",
                "textEdit": {
                    "newText": "atomic_uintptr_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ulong",
                "insertText": "atomic_ulong",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ulong",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_ulong",
                "textEdit": {
                    "newText": "atomic_ulong",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ushort",
                "insertText": "atomic_ushort",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ushort",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_ushort",
                "textEdit": {
                    "newText": "atomic_ushort",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_wchar_t",
                "insertText": "atomic_wchar_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_wchar_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_wchar_t",
                "textEdit": {
                    "newText": "atomic_wchar_t",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator",
                "insertText": "allocator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator<class Ty>",
                "score": 0.8575049638748169,
                "sortText": "40a47a8eallocator",
                "textEdit": {
                    "newText": "allocator",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator_traits",
                "insertText": "allocator_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator_traits<class Alloc>",
                "score": 0.8575049638748169,
                "sortText": "40a47a8eallocator_traits",
                "textEdit": {
                    "newText": "allocator_traits",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "alignas",
                "insertText": "alignas",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignas(expression)",
                "score": 0.7694156765937805,
                "sortText": "40bb0793alignas",
                "textEdit": {
                    "newText": "alignas",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.7694156765937805,
                "sortText": "40bb0793auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR32_T_LOCK_FREE",
                "score": 0.6651737093925476,
                "sortText": "40d5b72dATOMIC_CHAR32_T_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR32_T_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR_LOCK_FREE",
                "insertText": "ATOMIC_CHAR_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR_LOCK_FREE",
                "score": 0.6651737093925476,
                "sortText": "40d5b72dATOMIC_CHAR_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_LONG_LOCK_FREE",
                "insertText": "ATOMIC_LONG_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_LONG_LOCK_FREE",
                "score": 0.6651737093925476,
                "sortText": "40d5b72dATOMIC_LONG_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_LONG_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_VAR_INIT",
                "insertText": "ATOMIC_VAR_INIT",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ATOMIC_VAR_INIT(_Value)",
                "score": 0.6651737093925476,
                "sortText": "40d5b72dATOMIC_VAR_INIT",
                "textEdit": {
                    "newText": "ATOMIC_VAR_INIT",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "abs",
                "insertText": "abs",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022abs(const complex<Ty> &Left)",
                "score": 0.4689558446407318,
                "sortText": "410fe505abs",
                "textEdit": {
                    "newText": "abs",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>\n[valarray.transcend] Transcendentals"
                },
                "filterText": "abs",
                "insertText": "abs",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022abs(const valarray<Ty> &Left)",
                "score": 0.4689558446407318,
                "sortText": "410fe505abs",
                "textEdit": {
                    "newText": "abs",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "acos",
                "insertText": "acos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022acos(const valarray<Ty> &Left)",
                "score": 0.4689558446407318,
                "sortText": "410fe505acos",
                "textEdit": {
                    "newText": "acos",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "acos",
                "insertText": "acos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022acos(const complex<Ty> &Left)",
                "score": 0.4689558446407318,
                "sortText": "410fe505acos",
                "textEdit": {
                    "newText": "acos",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "acosh",
                "insertText": "acosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022acosh(const complex<Ty> &Left)",
                "score": 0.4689558446407318,
                "sortText": "410fe505acosh",
                "textEdit": {
                    "newText": "acosh",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "arg",
                "insertText": "arg",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022arg(const complex<Ty> &Left)",
                "score": 0.4689558446407318,
                "sortText": "410fe505arg",
                "textEdit": {
                    "newText": "arg",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Upgrade_to_double<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "arg",
                "insertText": "arg",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022arg(Ty Left)",
                "score": 0.4689558446407318,
                "sortText": "410fe505arg",
                "textEdit": {
                    "newText": "arg",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "add_const_t<Ty> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "as_const",
                "insertText": "as_const",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022as_const(Ty &Val)",
                "score": 0.4689558446407318,
                "sortText": "410fe505as_const",
                "textEdit": {
                    "newText": "as_const",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asin",
                "insertText": "asin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asin(const complex<Ty> &Left)",
                "score": 0.4689558446407318,
                "sortText": "410fe505asin",
                "textEdit": {
                    "newText": "asin",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asin",
                "insertText": "asin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asin(const valarray<Ty> &Left)",
                "score": 0.4689558446407318,
                "sortText": "410fe505asin",
                "textEdit": {
                    "newText": "asin",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinh",
                "insertText": "asinh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asinh(const complex<Ty> &Left)",
                "score": 0.4689558446407318,
                "sortText": "410fe505asinh",
                "textEdit": {
                    "newText": "asinh",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <future>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "future<_Invoke_result_t<decay_t<Fty>, decay_t<ArgTypes>...>>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <future>"
                },
                "filterText": "async",
                "insertText": "async",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022async(launch Policy, Fty &&Fnarg, ArgTypes &&Args...)",
                "score": 0.4689558446407318,
                "sortText": "410fe505async",
                "textEdit": {
                    "newText": "async",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <future>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "future<_Invoke_result_t<decay_t<Fty>, decay_t<ArgTypes>...>>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <future>"
                },
                "filterText": "async",
                "insertText": "async",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022async(Fty &&Fnarg, ArgTypes &&Args...)",
                "score": 0.4689558446407318,
                "sortText": "410fe505async",
                "textEdit": {
                    "newText": "async",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "atan",
                "insertText": "atan",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atan(const complex<Ty> &Left)",
                "score": 0.4689558446407318,
                "sortText": "410fe505atan",
                "textEdit": {
                    "newText": "atan",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "atan",
                "insertText": "atan",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atan(const valarray<Ty> &Left)",
                "score": 0.4689558446407318,
                "sortText": "410fe505atan",
                "textEdit": {
                    "newText": "atan",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "atan2",
                "insertText": "atan2",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atan2(const valarray<Ty> &Left, const typename valarray<Ty>::value_type &Right)",
                "score": 0.4689558446407318,
                "sortText": "410fe505atan2",
                "textEdit": {
                    "newText": "atan2",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "atan2",
                "insertText": "atan2",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atan2(const typename valarray<Ty>::value_type &Left, const valarray<Ty> &Right)",
                "score": 0.4689558446407318,
                "sortText": "410fe505atan2",
                "textEdit": {
                    "newText": "atan2",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "atan2",
                "insertText": "atan2",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atan2(const valarray<Ty> &Left, const valarray<Ty> &Right)",
                "score": 0.4689558446407318,
                "sortText": "410fe505atan2",
                "textEdit": {
                    "newText": "atan2",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "atanh",
                "insertText": "atanh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atanh(const complex<Ty> &Left)",
                "score": 0.4689558446407318,
                "sortText": "410fe505atanh",
                "textEdit": {
                    "newText": "atanh",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_exchange",
                "insertText": "atomic_exchange",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_exchange(volatile atomic<Ty> *const Mem, const _Identity_t<Ty> Value)",
                "score": 0.4689558446407318,
                "sortText": "410fe505atomic_exchange",
                "textEdit": {
                    "newText": "atomic_exchange",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_add",
                "insertText": "atomic_fetch_add",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_add(volatile atomic<Ty> *Mem, const typename atomic<Ty>::difference_type Value)",
                "score": 0.4689558446407318,
                "sortText": "410fe505atomic_fetch_add",
                "textEdit": {
                    "newText": "atomic_fetch_add",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_add_explicit",
                "insertText": "atomic_fetch_add_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_add_explicit(atomic<Ty> *Mem, const typename atomic<Ty>::difference_type Value, const memory_order Order)",
                "score": 0.4689558446407318,
                "sortText": "410fe505atomic_fetch_add_explicit",
                "textEdit": {
                    "newText": "atomic_fetch_add_explicit",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_and_explicit",
                "insertText": "atomic_fetch_and_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_and_explicit(atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value, const memory_order Order)",
                "score": 0.4689558446407318,
                "sortText": "410fe505atomic_fetch_and_explicit",
                "textEdit": {
                    "newText": "atomic_fetch_and_explicit",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_or",
                "insertText": "atomic_fetch_or",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_or(volatile atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value)",
                "score": 0.4689558446407318,
                "sortText": "410fe505atomic_fetch_or",
                "textEdit": {
                    "newText": "atomic_fetch_or",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_or_explicit",
                "insertText": "atomic_fetch_or_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_or_explicit(volatile atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value, const memory_order Order)",
                "score": 0.4689558446407318,
                "sortText": "410fe505atomic_fetch_or_explicit",
                "textEdit": {
                    "newText": "atomic_fetch_or_explicit",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_or_explicit",
                "insertText": "atomic_fetch_or_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_or_explicit(atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value, const memory_order Order)",
                "score": 0.4689558446407318,
                "sortText": "410fe505atomic_fetch_or_explicit",
                "textEdit": {
                    "newText": "atomic_fetch_or_explicit",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_sub",
                "insertText": "atomic_fetch_sub",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_sub(atomic<Ty> *Mem, const typename atomic<Ty>::difference_type Value)",
                "score": 0.4689558446407318,
                "sortText": "410fe505atomic_fetch_sub",
                "textEdit": {
                    "newText": "atomic_fetch_sub",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_xor",
                "insertText": "atomic_fetch_xor",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_xor(atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value)",
                "score": 0.4689558446407318,
                "sortText": "410fe505atomic_fetch_xor",
                "textEdit": {
                    "newText": "atomic_fetch_xor",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_load_explicit",
                "insertText": "atomic_load_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_load_explicit(const atomic<Ty> *const Mem, const memory_order Order)",
                "score": 0.4689558446407318,
                "sortText": "410fe505atomic_load_explicit",
                "textEdit": {
                    "newText": "atomic_load_explicit",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "align",
                "insertText": "align",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022align(size_t Bound, size_t Size, void *&Ptr, size_t &Space)",
                "score": 0.3782293498516083,
                "sortText": "413e58b9align",
                "textEdit": {
                    "newText": "align",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>\nfrom <iterator>"
                },
                "filterText": "advance",
                "insertText": "advance",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022advance(InIt &Where, Diff Off)",
                "score": 0.3672971725463867,
                "sortText": "4143f1a0advance",
                "textEdit": {
                    "newText": "advance",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "as_const",
                "insertText": "as_const",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022as_const(const Ty &&)",
                "score": 0.3672971725463867,
                "sortText": "4143f1a0as_const",
                "textEdit": {
                    "newText": "as_const",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_compare_exchange_strong",
                "insertText": "atomic_compare_exchange_strong",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_compare_exchange_strong(volatile atomic<Ty> *const Mem, _Identity_t<Ty> *const Expected, const _Identity_t<Ty> Desired)",
                "score": 0.3672971725463867,
                "sortText": "4143f1a0atomic_compare_exchange_strong",
                "textEdit": {
                    "newText": "atomic_compare_exchange_strong",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_clear_explicit",
                "insertText": "atomic_flag_clear_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_clear_explicit(atomic_flag *const Flag, const memory_order Order)",
                "score": 0.3672971725463867,
                "sortText": "4143f1a0atomic_flag_clear_explicit",
                "textEdit": {
                    "newText": "atomic_flag_clear_explicit",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_clear_explicit",
                "insertText": "atomic_flag_clear_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_clear_explicit(volatile atomic_flag *const Flag, const memory_order Order)",
                "score": 0.3672971725463867,
                "sortText": "4143f1a0atomic_flag_clear_explicit",
                "textEdit": {
                    "newText": "atomic_flag_clear_explicit",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_test_and_set",
                "insertText": "atomic_flag_test_and_set",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_test_and_set(volatile atomic_flag *const Flag)",
                "score": 0.3672971725463867,
                "sortText": "4143f1a0atomic_flag_test_and_set",
                "textEdit": {
                    "newText": "atomic_flag_test_and_set",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_test_and_set",
                "insertText": "atomic_flag_test_and_set",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_test_and_set(atomic_flag *const Flag)",
                "score": 0.3672971725463867,
                "sortText": "4143f1a0atomic_flag_test_and_set",
                "textEdit": {
                    "newText": "atomic_flag_test_and_set",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_test_and_set_explicit",
                "insertText": "atomic_flag_test_and_set_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_test_and_set_explicit(volatile atomic_flag *const Flag, const memory_order Order)",
                "score": 0.3672971725463867,
                "sortText": "4143f1a0atomic_flag_test_and_set_explicit",
                "textEdit": {
                    "newText": "atomic_flag_test_and_set_explicit",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_init",
                "insertText": "atomic_init",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_init(atomic<Ty> *const Mem, const typename atomic<Ty>::value_type Value)",
                "score": 0.3672971725463867,
                "sortText": "4143f1a0atomic_init",
                "textEdit": {
                    "newText": "atomic_init",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_signal_fence",
                "insertText": "atomic_signal_fence",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_signal_fence(const memory_order Order)",
                "score": 0.3672971725463867,
                "sortText": "4143f1a0atomic_signal_fence",
                "textEdit": {
                    "newText": "atomic_signal_fence",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_store",
                "insertText": "atomic_store",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_store(atomic<Ty> *const Mem, const _Identity_t<Ty> Value)",
                "score": 0.3672971725463867,
                "sortText": "4143f1a0atomic_store",
                "textEdit": {
                    "newText": "atomic_store",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_thread_fence",
                "insertText": "atomic_thread_fence",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_thread_fence(const memory_order Order)",
                "score": 0.3672971725463867,
                "sortText": "4143f1a0atomic_thread_fence",
                "textEdit": {
                    "newText": "atomic_thread_fence",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "const adopt_lock_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "adopt_lock",
                "insertText": "adopt_lock",
                "insertTextFormat": 1,
                "kind": 6,
                "label": "\u2022adopt_lock",
                "score": 0.32943084836006165,
                "sortText": "415754d7adopt_lock",
                "textEdit": {
                    "newText": "adopt_lock",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>\n<stdlib.h> has abs(long) and abs(long long)"
                },
                "filterText": "abs",
                "insertText": "abs",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022abs(double Xx)",
                "score": 0.32746627926826477,
                "sortText": "41585657abs",
                "textEdit": {
                    "newText": "abs",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "abs",
                "insertText": "abs",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022abs(long double Xx)",
                "score": 0.32746627926826477,
                "sortText": "41585657abs",
                "textEdit": {
                    "newText": "abs",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "abs",
                "insertText": "abs",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022abs(float Xx)",
                "score": 0.32746627926826477,
                "sortText": "41585657abs",
                "textEdit": {
                    "newText": "abs",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <future>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "std::launch",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <future>"
                },
                "filterText": "async",
                "insertText": "launch::async",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022launch::async",
                "score": 0.2888787090778351,
                "sortText": "416c1817async",
                "textEdit": {
                    "newText": "launch::async",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_terminate.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_terminate.h>"
                },
                "filterText": "abort",
                "insertText": "abort",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022abort()",
                "score": 0.2786673903465271,
                "sortText": "41715282abort",
                "textEdit": {
                    "newText": "abort",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "abs",
                "insertText": "abs",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022abs(const long X)",
                "score": 0.2786673903465271,
                "sortText": "41715282abs",
                "textEdit": {
                    "newText": "abs",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "abs",
                "insertText": "abs",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022abs(const long long X)",
                "score": 0.2786673903465271,
                "sortText": "41715282abs",
                "textEdit": {
                    "newText": "abs",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "at_quick_exit",
                "insertText": "at_quick_exit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022at_quick_exit(void (*)() __attribute__((cdecl)))",
                "score": 0.2786673903465271,
                "sortText": "41715282at_quick_exit",
                "textEdit": {
                    "newText": "at_quick_exit",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "atexit",
                "insertText": "atexit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atexit(void (*)() __attribute__((cdecl)))",
                "score": 0.2786673903465271,
                "sortText": "41715282atexit",
                "textEdit": {
                    "newText": "atexit",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "atoi",
                "insertText": "atoi",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atoi(const char *String)",
                "score": 0.2786673903465271,
                "sortText": "41715282atoi",
                "textEdit": {
                    "newText": "atoi",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "atol",
                "insertText": "atol",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atol(const char *String)",
                "score": 0.2786673903465271,
                "sortText": "41715282atol",
                "textEdit": {
                    "newText": "atol",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "atoll",
                "insertText": "atoll",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atoll(const char *String)",
                "score": 0.2786673903465271,
                "sortText": "41715282atoll",
                "textEdit": {
                    "newText": "atoll",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "abort",
                "insertText": "abort",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022abort",
                "score": 0.23272034525871277,
                "sortText": "4191b1c2abort",
                "textEdit": {
                    "newText": "abort",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "abs",
                "insertText": "abs",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022abs",
                "score": 0.23272034525871277,
                "sortText": "4191b1c2abs",
                "textEdit": {
                    "newText": "abs",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "at_quick_exit",
                "insertText": "at_quick_exit",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022at_quick_exit",
                "score": 0.23272034525871277,
                "sortText": "4191b1c2at_quick_exit",
                "textEdit": {
                    "newText": "at_quick_exit",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "atexit",
                "insertText": "atexit",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022atexit",
                "score": 0.23272034525871277,
                "sortText": "4191b1c2atexit",
                "textEdit": {
                    "newText": "atexit",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "atof",
                "insertText": "atof",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022atof",
                "score": 0.23272034525871277,
                "sortText": "4191b1c2atof",
                "textEdit": {
                    "newText": "atof",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "atoi",
                "insertText": "atoi",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022atoi",
                "score": 0.23272034525871277,
                "sortText": "4191b1c2atoi",
                "textEdit": {
                    "newText": "atoi",
                    "range": {
                        "end": {
                            "character": 9,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['adopt_lock_t', 'atomic_bool', 'atomic_char', 'atomic_char32_t', 'atomic_flag', 'atomic_int16_t', 'atomic_int32_t', 'atomic_int64_t', 'atomic_int8_t', 'atomic_int_fast16_t', 'atomic_int_fast64_t', 'atomic_int_fast8_t', 'atomic_int_least16_t', 'atomic_int_least32_t', 'atomic_int_least8_t', 'atomic_intmax_t', 'atomic_intptr_t', 'atomic_llong', 'atomic_ptrdiff_t', 'atomic_short', 'atomic_uint', 'atomic_uint32_t', 'atomic_uint64_t', 'atomic_uint_fast16_t', 'atomic_uint_fast64_t', 'atomic_uint_least8_t', 'atomic_uintmax_t', 'atomic_uintptr_t', 'atomic_ulong', 'atomic_ushort', 'atomic_wchar_t', 'allocator', 'allocator_traits', 'alignas', 'auto', 'ATOMIC_CHAR32_T_LOCK_FREE', 'ATOMIC_CHAR_LOCK_FREE', 'ATOMIC_LONG_LOCK_FREE', 'ATOMIC_VAR_INIT', 'abs', 'abs', 'acos', 'acos', 'acosh', 'arg', 'arg', 'as_const', 'asin', 'asin', 'asinh', 'async', 'async', 'atan', 'atan', 'atan2', 'atan2', 'atan2', 'atanh', 'atomic_exchange', 'atomic_fetch_add', 'atomic_fetch_add_explicit', 'atomic_fetch_and_explicit', 'atomic_fetch_or', 'atomic_fetch_or_explicit', 'atomic_fetch_or_explicit', 'atomic_fetch_sub', 'atomic_fetch_xor', 'atomic_load_explicit', 'align', 'advance', 'as_const', 'atomic_compare_exchange_strong', 'atomic_flag_clear_explicit', 'atomic_flag_clear_explicit', 'atomic_flag_test_and_set', 'atomic_flag_test_and_set', 'atomic_flag_test_and_set_explicit', 'atomic_init', 'atomic_signal_fence', 'atomic_store', 'atomic_thread_fence', 'adopt_lock', 'abs', 'abs', 'abs', 'launch::async', 'abort', 'abs', 'abs', 'at_quick_exit', 'atexit', 'atoi', 'atol', 'atoll', 'abort', 'abs', 'at_quick_exit', 'atexit', 'atof', 'atoi']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "no_member",
                "message": "No member named 'y' in 'Muchie'",
                "range": {
                    "end": {
                        "character": 9,
                        "line": 21
                    },
                    "start": {
                        "character": 8,
                        "line": 21
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_member",
                "message": "No member named 'y' in 'Muchie'",
                "range": {
                    "end": {
                        "character": 9,
                        "line": 28
                    },
                    "start": {
                        "character": 8,
                        "line": 28
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_member",
                "message": "No member named 'y' in 'Muchie'",
                "range": {
                    "end": {
                        "character": 9,
                        "line": 34
                    },
                    "start": {
                        "character": 8,
                        "line": 34
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 116
                    },
                    "start": {
                        "character": 21,
                        "line": 116
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 73,
                        "line": 625
                    },
                    "start": {
                        "character": 68,
                        "line": 625
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 133
                    },
                    "start": {
                        "character": 2,
                        "line": 133
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'queue' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 155
                    },
                    "start": {
                        "character": 2,
                        "line": 155
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 177
                    },
                    "start": {
                        "character": 2,
                        "line": 177
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 208
                    },
                    "start": {
                        "character": 3,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 208
                    },
                    "start": {
                        "character": 11,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 101,
                        "line": 216
                    },
                    "start": {
                        "character": 97,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 53
    }
}
Diagnostics received from LSP.
Errors received: [[21, [8, 9]], [28, [8, 9]], [34, [8, 9]], [116, [21, 26]], [625, [68, 73]], [133, [2, 7]], [143, [4, 8]], [143, [4, 8]], [155, [2, 7]], [177, [2, 7]], [205, [3, 7]], [205, [3, 7]], [207, [4, 8]], [207, [4, 8]], [208, [3, 7]], [208, [11, 15]], [216, [3, 7]], [216, [3, 7]], [216, [97, 101]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "muchie de la x la y cu costul cost"
                },
                "filterText": "Muchie",
                "insertText": "Muchie",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Muchie",
                "score": 2.66562557220459,
                "sortText": "3fd56664Muchie",
                "textEdit": {
                    "newText": "Muchie",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.885870337486267,
                "sortText": "400e9bcdstd",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 1.1117926836013794,
                "sortText": "4071b0c7struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 1.0194766521453857,
                "sortText": "407d81casize_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "_iobuf",
                "insertText": "_iobuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " _iobuf",
                "score": 0.816092848777771,
                "sortText": "40af148a_iobuf",
                "textEdit": {
                    "newText": "_iobuf",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "numeric_limits",
                "insertText": "numeric_limits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " numeric_limits<class Ty>",
                "score": 0.816092848777771,
                "sortText": "40af148anumeric_limits",
                "textEdit": {
                    "newText": "numeric_limits",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "type_info",
                "insertText": "type_info",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " type_info",
                "score": 0.816092848777771,
                "sortText": "40af148atype_info",
                "textEdit": {
                    "newText": "type_info",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.7694156765937805,
                "sortText": "40bb0793_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.7694156765937805,
                "sortText": "40bb0793_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.7694156765937805,
                "sortText": "40bb0793_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "alignas",
                "insertText": "alignas",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignas(expression)",
                "score": 0.7694156765937805,
                "sortText": "40bb0793alignas",
                "textEdit": {
                    "newText": "alignas",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.7694156765937805,
                "sortText": "40bb0793auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.7694156765937805,
                "sortText": "40bb0793bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.7694156765937805,
                "sortText": "40bb0793char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.7694156765937805,
                "sortText": "40bb0793char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.7694156765937805,
                "sortText": "40bb0793char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.7694156765937805,
                "sortText": "40bb0793class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.7694156765937805,
                "sortText": "40bb0793const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.7694156765937805,
                "sortText": "40bb0793constexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.7694156765937805,
                "sortText": "40bb0793decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.7694156765937805,
                "sortText": "40bb0793double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.7694156765937805,
                "sortText": "40bb0793enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "explicit",
                "insertText": "explicit",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " explicit",
                "score": 0.7694156765937805,
                "sortText": "40bb0793explicit",
                "textEdit": {
                    "newText": "explicit",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "extern",
                "insertText": "extern",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " extern",
                "score": 0.7694156765937805,
                "sortText": "40bb0793extern",
                "textEdit": {
                    "newText": "extern",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.7694156765937805,
                "sortText": "40bb0793float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "friend",
                "insertText": "friend",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " friend",
                "score": 0.7694156765937805,
                "sortText": "40bb0793friend",
                "textEdit": {
                    "newText": "friend",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "inline",
                "insertText": "inline",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " inline",
                "score": 0.7694156765937805,
                "sortText": "40bb0793inline",
                "textEdit": {
                    "newText": "inline",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.7694156765937805,
                "sortText": "40bb0793int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.7694156765937805,
                "sortText": "40bb0793long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "mutable",
                "insertText": "mutable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " mutable",
                "score": 0.7694156765937805,
                "sortText": "40bb0793mutable",
                "textEdit": {
                    "newText": "mutable",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.7694156765937805,
                "sortText": "40bb0793operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "private",
                "insertText": "private",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " private",
                "score": 0.7694156765937805,
                "sortText": "40bb0793private",
                "textEdit": {
                    "newText": "private",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "protected",
                "insertText": "protected",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " protected",
                "score": 0.7694156765937805,
                "sortText": "40bb0793protected",
                "textEdit": {
                    "newText": "protected",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "public",
                "insertText": "public",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " public",
                "score": 0.7694156765937805,
                "sortText": "40bb0793public",
                "textEdit": {
                    "newText": "public",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.7694156765937805,
                "sortText": "40bb0793short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.7694156765937805,
                "sortText": "40bb0793signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "static",
                "insertText": "static",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " static",
                "score": 0.7694156765937805,
                "sortText": "40bb0793static",
                "textEdit": {
                    "newText": "static",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "static_assert",
                "insertText": "static_assert",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_assert(expression, message);",
                "score": 0.7694156765937805,
                "sortText": "40bb0793static_assert",
                "textEdit": {
                    "newText": "static_assert",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "template",
                "insertText": "template",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " template",
                "score": 0.7694156765937805,
                "sortText": "40bb0793template",
                "textEdit": {
                    "newText": "template",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "thread_local",
                "insertText": "thread_local",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " thread_local",
                "score": 0.7694156765937805,
                "sortText": "40bb0793thread_local",
                "textEdit": {
                    "newText": "thread_local",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "typedef",
                "insertText": "typedef",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typedef type name;",
                "score": 0.7694156765937805,
                "sortText": "40bb0793typedef",
                "textEdit": {
                    "newText": "typedef",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.7694156765937805,
                "sortText": "40bb0793typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.7694156765937805,
                "sortText": "40bb0793union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.7694156765937805,
                "sortText": "40bb0793unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using qualifier::name;",
                "score": 0.7694156765937805,
                "sortText": "40bb0793using",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using name = type;",
                "score": 0.7694156765937805,
                "sortText": "40bb0793using",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "virtual",
                "insertText": "virtual",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " virtual",
                "score": 0.7694156765937805,
                "sortText": "40bb0793virtual",
                "textEdit": {
                    "newText": "virtual",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.7694156765937805,
                "sortText": "40bb0793void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.7694156765937805,
                "sortText": "40bb0793volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.7694156765937805,
                "sortText": "40bb0793wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "EXIT_SUCCESS",
                "insertText": "EXIT_SUCCESS",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022EXIT_SUCCESS",
                "score": 0.603100061416626,
                "sortText": "40e59b3cEXIT_SUCCESS",
                "textEdit": {
                    "newText": "EXIT_SUCCESS",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "MB_CUR_MAX",
                "insertText": "MB_CUR_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022MB_CUR_MAX",
                "score": 0.603100061416626,
                "sortText": "40e59b3cMB_CUR_MAX",
                "textEdit": {
                    "newText": "MB_CUR_MAX",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_countof",
                "insertText": "_countof",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_countof",
                "score": 0.603100061416626,
                "sortText": "40e59b3c_countof",
                "textEdit": {
                    "newText": "_countof",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_environ",
                "insertText": "_environ",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_environ",
                "score": 0.603100061416626,
                "sortText": "40e59b3c_environ",
                "textEdit": {
                    "newText": "_environ",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_sys_errlist",
                "insertText": "_sys_errlist",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_sys_errlist",
                "score": 0.603100061416626,
                "sortText": "40e59b3c_sys_errlist",
                "textEdit": {
                    "newText": "_sys_errlist",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_wenviron",
                "insertText": "_wenviron",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_wenviron",
                "score": 0.603100061416626,
                "sortText": "40e59b3c_wenviron",
                "textEdit": {
                    "newText": "_wenviron",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_wpgmptr",
                "insertText": "_wpgmptr",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_wpgmptr",
                "score": 0.603100061416626,
                "sortText": "40e59b3c_wpgmptr",
                "textEdit": {
                    "newText": "_wpgmptr",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "sys_nerr",
                "insertText": "sys_nerr",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022sys_nerr",
                "score": 0.603100061416626,
                "sortText": "40e59b3csys_nerr",
                "textEdit": {
                    "newText": "sys_nerr",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\nMath\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
                },
                "filterText": "_div_t",
                "insertText": "_div_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022_div_t",
                "score": 0.585259199142456,
                "sortText": "40ea2c74_div_t",
                "textEdit": {
                    "newText": "_div_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_ldiv_t",
                "insertText": "_ldiv_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022_ldiv_t",
                "score": 0.585259199142456,
                "sortText": "40ea2c74_ldiv_t",
                "textEdit": {
                    "newText": "_ldiv_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_lldiv_t",
                "insertText": "_lldiv_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022_lldiv_t",
                "score": 0.585259199142456,
                "sortText": "40ea2c74_lldiv_t",
                "textEdit": {
                    "newText": "_lldiv_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_onexit_t",
                "insertText": "_onexit_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022_onexit_t",
                "score": 0.585259199142456,
                "sortText": "40ea2c74_onexit_t",
                "textEdit": {
                    "newText": "_onexit_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>\na purecall handler procedure. Never returns normally"
                },
                "filterText": "_purecall_handler",
                "insertText": "_purecall_handler",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022_purecall_handler",
                "score": 0.585259199142456,
                "sortText": "40ea2c74_purecall_handler",
                "textEdit": {
                    "newText": "_purecall_handler",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\nMath\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
                },
                "filterText": "div_t",
                "insertText": "div_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022div_t",
                "score": 0.585259199142456,
                "sortText": "40ea2c74div_t",
                "textEdit": {
                    "newText": "div_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "ldiv_t",
                "insertText": "ldiv_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022ldiv_t",
                "score": 0.585259199142456,
                "sortText": "40ea2c74ldiv_t",
                "textEdit": {
                    "newText": "ldiv_t",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_CALL_REPORTFAULT",
                "insertText": "_CALL_REPORTFAULT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CALL_REPORTFAULT",
                "score": 0.3610164225101471,
                "sortText": "414728db_CALL_REPORTFAULT",
                "textEdit": {
                    "newText": "_CALL_REPORTFAULT",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_CVTBUFSIZE",
                "insertText": "_CVTBUFSIZE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CVTBUFSIZE",
                "score": 0.3610164225101471,
                "sortText": "414728db_CVTBUFSIZE",
                "textEdit": {
                    "newText": "_CVTBUFSIZE",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_INC_STDLIB",
                "insertText": "_INC_STDLIB",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_INC_STDLIB",
                "score": 0.3610164225101471,
                "sortText": "414728db_INC_STDLIB",
                "textEdit": {
                    "newText": "_INC_STDLIB",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_MAX_DRIVE",
                "insertText": "_MAX_DRIVE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_MAX_DRIVE",
                "score": 0.3610164225101471,
                "sortText": "414728db_MAX_DRIVE",
                "textEdit": {
                    "newText": "_MAX_DRIVE",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_MAX_EXT",
                "insertText": "_MAX_EXT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_MAX_EXT",
                "score": 0.3610164225101471,
                "sortText": "414728db_MAX_EXT",
                "textEdit": {
                    "newText": "_MAX_EXT",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_REPORT_ERRMODE",
                "insertText": "_REPORT_ERRMODE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_REPORT_ERRMODE",
                "score": 0.3610164225101471,
                "sortText": "414728db_REPORT_ERRMODE",
                "textEdit": {
                    "newText": "_REPORT_ERRMODE",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_WRITE_ABORT_MSG",
                "insertText": "_WRITE_ABORT_MSG",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_WRITE_ABORT_MSG",
                "score": 0.3610164225101471,
                "sortText": "414728db_WRITE_ABORT_MSG",
                "textEdit": {
                    "newText": "_WRITE_ABORT_MSG",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "__argv",
                "insertText": "__argv",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022__argv",
                "score": 0.3610164225101471,
                "sortText": "414728db__argv",
                "textEdit": {
                    "newText": "__argv",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_abs64",
                "insertText": "_abs64",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_abs64(long long Number)",
                "score": 0.2786673903465271,
                "sortText": "41715282_abs64",
                "textEdit": {
                    "newText": "_abs64",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_atodbl",
                "insertText": "_atodbl",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_atodbl(_CRT_DOUBLE *Result, char *String)",
                "score": 0.2786673903465271,
                "sortText": "41715282_atodbl",
                "textEdit": {
                    "newText": "_atodbl",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_atoflt_l",
                "insertText": "_atoflt_l",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_atoflt_l(_CRT_FLOAT *Result, const char *String, _locale_t Locale)",
                "score": 0.2786673903465271,
                "sortText": "41715282_atoflt_l",
                "textEdit": {
                    "newText": "_atoflt_l",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_atoi64",
                "insertText": "_atoi64",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_atoi64(const char *String)",
                "score": 0.2786673903465271,
                "sortText": "41715282_atoi64",
                "textEdit": {
                    "newText": "_atoi64",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_atoi_l",
                "insertText": "_atoi_l",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_atoi_l(const char *String, _locale_t Locale)",
                "score": 0.2786673903465271,
                "sortText": "41715282_atoi_l",
                "textEdit": {
                    "newText": "_atoi_l",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_atol_l",
                "insertText": "_atol_l",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_atol_l(const char *String, _locale_t Locale)",
                "score": 0.2786673903465271,
                "sortText": "41715282_atol_l",
                "textEdit": {
                    "newText": "_atol_l",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_atoldbl",
                "insertText": "_atoldbl",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_atoldbl(_LDOUBLE *Result, char *String)",
                "score": 0.2786673903465271,
                "sortText": "41715282_atoldbl",
                "textEdit": {
                    "newText": "_atoldbl",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_atoll_l",
                "insertText": "_atoll_l",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_atoll_l(const char *String, _locale_t Locale)",
                "score": 0.2786673903465271,
                "sortText": "41715282_atoll_l",
                "textEdit": {
                    "newText": "_atoll_l",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "unsigned long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_byteswap_uint64",
                "insertText": "_byteswap_uint64",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_byteswap_uint64(unsigned long long Number)",
                "score": 0.2786673903465271,
                "sortText": "41715282_byteswap_uint64",
                "textEdit": {
                    "newText": "_byteswap_uint64",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_dupenv_s",
                "insertText": "_dupenv_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_dupenv_s(char **Buffer, size_t *BufferCount, const char *VarName)",
                "score": 0.2786673903465271,
                "sortText": "41715282_dupenv_s",
                "textEdit": {
                    "newText": "_dupenv_s",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_ecvt_s",
                "insertText": "_ecvt_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_ecvt_s(char (&Buffer)[Size], double Value, int DigitCount, int *PtDec, int *PtSign)",
                "score": 0.2786673903465271,
                "sortText": "41715282_ecvt_s",
                "textEdit": {
                    "newText": "_ecvt_s",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <errno.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <errno.h>"
                },
                "filterText": "_errno",
                "insertText": "_errno",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_errno()",
                "score": 0.2786673903465271,
                "sortText": "41715282_errno",
                "textEdit": {
                    "newText": "_errno",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_fcvt_s",
                "insertText": "_fcvt_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_fcvt_s(char (&Buffer)[Size], double Value, int FractionalDigitCount, int *PtDec, int *PtSign)",
                "score": 0.2786673903465271,
                "sortText": "41715282_fcvt_s",
                "textEdit": {
                    "newText": "_fcvt_s",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_gcvt_s",
                "insertText": "_gcvt_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_gcvt_s(char (&Buffer)[Size], double Value, int DigitCount)",
                "score": 0.2786673903465271,
                "sortText": "41715282_gcvt_s",
                "textEdit": {
                    "newText": "_gcvt_s",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <errno.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <errno.h>"
                },
                "filterText": "_get_errno",
                "insertText": "_get_errno",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_get_errno(int *Value)",
                "score": 0.2786673903465271,
                "sortText": "41715282_get_errno",
                "textEdit": {
                    "newText": "_get_errno",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_get_fmode",
                "insertText": "_get_fmode",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_get_fmode(int *PMode)",
                "score": 0.2786673903465271,
                "sortText": "41715282_get_fmode",
                "textEdit": {
                    "newText": "_get_fmode",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_invalid_parameter_handler",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_get_invalid_parameter_handler",
                "insertText": "_get_invalid_parameter_handler",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_get_invalid_parameter_handler()",
                "score": 0.2786673903465271,
                "sortText": "41715282_get_invalid_parameter_handler",
                "textEdit": {
                    "newText": "_get_invalid_parameter_handler",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_purecall_handler",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_get_purecall_handler",
                "insertText": "_get_purecall_handler",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_get_purecall_handler()",
                "score": 0.2786673903465271,
                "sortText": "41715282_get_purecall_handler",
                "textEdit": {
                    "newText": "_get_purecall_handler",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_get_wpgmptr",
                "insertText": "_get_wpgmptr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_get_wpgmptr(wchar_t **Value)",
                "score": 0.2786673903465271,
                "sortText": "41715282_get_wpgmptr",
                "textEdit": {
                    "newText": "_get_wpgmptr",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_i64toa_s",
                "insertText": "_i64toa_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_i64toa_s(long long Value, char *Buffer, size_t BufferCount, int Radix)",
                "score": 0.2786673903465271,
                "sortText": "41715282_i64toa_s",
                "textEdit": {
                    "newText": "_i64toa_s",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "unsigned long",
                "filterText": "_lrotr",
                "insertText": "_lrotr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " _lrotr(unsigned long, int)",
                "score": 0.2786673903465271,
                "sortText": "41715282_lrotr",
                "textEdit": {
                    "newText": "_lrotr",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_ltoa_s",
                "insertText": "_ltoa_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_ltoa_s(long Value, char (&Buffer)[Size], int Radix)",
                "score": 0.2786673903465271,
                "sortText": "41715282_ltoa_s",
                "textEdit": {
                    "newText": "_ltoa_s",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_mblen_l",
                "insertText": "_mblen_l",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mblen_l(const char *Ch, size_t MaxCount, _locale_t Locale)",
                "score": 0.2786673903465271,
                "sortText": "41715282_mblen_l",
                "textEdit": {
                    "newText": "_mblen_l",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_mbstowcs_s_l",
                "insertText": "_mbstowcs_s_l",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mbstowcs_s_l(size_t *PtNumOfCharConverted, wchar_t *DstBuf, size_t SizeInWords, const char *SrcBuf, size_t MaxCount, _locale_t Locale)",
                "score": 0.2786673903465271,
                "sortText": "41715282_mbstowcs_s_l",
                "textEdit": {
                    "newText": "_mbstowcs_s_l",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_mbstrlen_l",
                "insertText": "_mbstrlen_l",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mbstrlen_l(const char *String, _locale_t Locale)",
                "score": 0.2786673903465271,
                "sortText": "41715282_mbstrlen_l",
                "textEdit": {
                    "newText": "_mbstrlen_l",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_mbstrnlen",
                "insertText": "_mbstrnlen",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mbstrnlen(const char *String, size_t MaxCount)",
                "score": 0.2786673903465271,
                "sortText": "41715282_mbstrnlen",
                "textEdit": {
                    "newText": "_mbstrnlen",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_mbstrnlen_l",
                "insertText": "_mbstrnlen_l",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mbstrnlen_l(const char *String, size_t MaxCount, _locale_t Locale)",
                "score": 0.2786673903465271,
                "sortText": "41715282_mbstrnlen_l",
                "textEdit": {
                    "newText": "_mbstrnlen_l",
                    "range": {
                        "end": {
                            "character": 8,
                            "line": 10
                        },
                        "start": {
                            "character": 8,
                            "line": 10
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['Muchie', 'std', 'struct', 'size_t', '_iobuf', 'numeric_limits', 'type_info', '_Nonnull', '_Null_unspecified', '_Nullable', 'alignas', 'auto', 'bool', 'char', 'char16_t', 'char32_t', 'class', 'const', 'constexpr', 'decltype', 'double', 'enum', 'explicit', 'extern', 'float', 'friend', 'inline', 'int', 'long', 'mutable', 'operator', 'private', 'protected', 'public', 'short', 'signed', 'static', 'static_assert', 'template', 'thread_local', 'typedef', 'typename', 'union', 'unsigned', 'using', 'using', 'virtual', 'void', 'volatile', 'wchar_t', 'EXIT_SUCCESS', 'MB_CUR_MAX', '_countof', '_environ', '_sys_errlist', '_wenviron', '_wpgmptr', 'sys_nerr', '_div_t', '_ldiv_t', '_lldiv_t', '_onexit_t', '_purecall_handler', 'div_t', 'ldiv_t', '_CALL_REPORTFAULT', '_CVTBUFSIZE', '_INC_STDLIB', '_MAX_DRIVE', '_MAX_EXT', '_REPORT_ERRMODE', '_WRITE_ABORT_MSG', '__argv', '_abs64', '_atodbl', '_atoflt_l', '_atoi64', '_atoi_l', '_atol_l', '_atoldbl', '_atoll_l', '_byteswap_uint64', '_dupenv_s', '_ecvt_s', '_errno', '_fcvt_s', '_gcvt_s', '_get_errno', '_get_fmode', '_get_invalid_parameter_handler', '_get_purecall_handler', '_get_wpgmptr', '_i64toa_s', '_lrotr', '_ltoa_s', '_mblen_l', '_mbstowcs_s_l', '_mbstrlen_l', '_mbstrnlen', '_mbstrnlen_l']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "no_member",
                "message": "No member named 'y' in 'Muchie'",
                "range": {
                    "end": {
                        "character": 9,
                        "line": 21
                    },
                    "start": {
                        "character": 8,
                        "line": 21
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_member",
                "message": "No member named 'y' in 'Muchie'",
                "range": {
                    "end": {
                        "character": 9,
                        "line": 28
                    },
                    "start": {
                        "character": 8,
                        "line": 28
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_member",
                "message": "No member named 'y' in 'Muchie'",
                "range": {
                    "end": {
                        "character": 9,
                        "line": 34
                    },
                    "start": {
                        "character": 8,
                        "line": 34
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 116
                    },
                    "start": {
                        "character": 21,
                        "line": 116
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 73,
                        "line": 625
                    },
                    "start": {
                        "character": 68,
                        "line": 625
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 133
                    },
                    "start": {
                        "character": 2,
                        "line": 133
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'queue' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 155
                    },
                    "start": {
                        "character": 2,
                        "line": 155
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 177
                    },
                    "start": {
                        "character": 2,
                        "line": 177
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 208
                    },
                    "start": {
                        "character": 3,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 208
                    },
                    "start": {
                        "character": 11,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 101,
                        "line": 216
                    },
                    "start": {
                        "character": 97,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 54
    }
}
Diagnostics received from LSP.
Errors received: [[21, [8, 9]], [28, [8, 9]], [34, [8, 9]], [116, [21, 26]], [625, [68, 73]], [133, [2, 7]], [143, [4, 8]], [143, [4, 8]], [155, [2, 7]], [177, [2, 7]], [205, [3, 7]], [205, [3, 7]], [207, [4, 8]], [207, [4, 8]], [208, [3, 7]], [208, [11, 15]], [216, [3, 7]], [216, [3, 7]], [216, [97, 101]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "muchie de la x la y cu costul cost"
                },
                "filterText": "Muchie",
                "insertText": "Muchie",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Muchie",
                "score": 2.66562557220459,
                "sortText": "3fd56664Muchie",
                "textEdit": {
                    "newText": "Muchie",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.885870337486267,
                "sortText": "400e9bcdstd",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 1.1117926836013794,
                "sortText": "4071b0c7struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 1.0194766521453857,
                "sortText": "407d81casize_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "_iobuf",
                "insertText": "_iobuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " _iobuf",
                "score": 0.816092848777771,
                "sortText": "40af148a_iobuf",
                "textEdit": {
                    "newText": "_iobuf",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "numeric_limits",
                "insertText": "numeric_limits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " numeric_limits<class Ty>",
                "score": 0.816092848777771,
                "sortText": "40af148anumeric_limits",
                "textEdit": {
                    "newText": "numeric_limits",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "type_info",
                "insertText": "type_info",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " type_info",
                "score": 0.816092848777771,
                "sortText": "40af148atype_info",
                "textEdit": {
                    "newText": "type_info",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.7694156765937805,
                "sortText": "40bb0793_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.7694156765937805,
                "sortText": "40bb0793_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.7694156765937805,
                "sortText": "40bb0793_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "alignas",
                "insertText": "alignas",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignas(expression)",
                "score": 0.7694156765937805,
                "sortText": "40bb0793alignas",
                "textEdit": {
                    "newText": "alignas",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.7694156765937805,
                "sortText": "40bb0793auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.7694156765937805,
                "sortText": "40bb0793bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.7694156765937805,
                "sortText": "40bb0793char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.7694156765937805,
                "sortText": "40bb0793char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.7694156765937805,
                "sortText": "40bb0793char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.7694156765937805,
                "sortText": "40bb0793class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.7694156765937805,
                "sortText": "40bb0793const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.7694156765937805,
                "sortText": "40bb0793constexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.7694156765937805,
                "sortText": "40bb0793decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.7694156765937805,
                "sortText": "40bb0793double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.7694156765937805,
                "sortText": "40bb0793enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "explicit",
                "insertText": "explicit",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " explicit",
                "score": 0.7694156765937805,
                "sortText": "40bb0793explicit",
                "textEdit": {
                    "newText": "explicit",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "extern",
                "insertText": "extern",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " extern",
                "score": 0.7694156765937805,
                "sortText": "40bb0793extern",
                "textEdit": {
                    "newText": "extern",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.7694156765937805,
                "sortText": "40bb0793float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "friend",
                "insertText": "friend",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " friend",
                "score": 0.7694156765937805,
                "sortText": "40bb0793friend",
                "textEdit": {
                    "newText": "friend",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "inline",
                "insertText": "inline",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " inline",
                "score": 0.7694156765937805,
                "sortText": "40bb0793inline",
                "textEdit": {
                    "newText": "inline",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.7694156765937805,
                "sortText": "40bb0793int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.7694156765937805,
                "sortText": "40bb0793long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "mutable",
                "insertText": "mutable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " mutable",
                "score": 0.7694156765937805,
                "sortText": "40bb0793mutable",
                "textEdit": {
                    "newText": "mutable",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.7694156765937805,
                "sortText": "40bb0793operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "private",
                "insertText": "private",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " private",
                "score": 0.7694156765937805,
                "sortText": "40bb0793private",
                "textEdit": {
                    "newText": "private",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "protected",
                "insertText": "protected",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " protected",
                "score": 0.7694156765937805,
                "sortText": "40bb0793protected",
                "textEdit": {
                    "newText": "protected",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "public",
                "insertText": "public",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " public",
                "score": 0.7694156765937805,
                "sortText": "40bb0793public",
                "textEdit": {
                    "newText": "public",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.7694156765937805,
                "sortText": "40bb0793short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.7694156765937805,
                "sortText": "40bb0793signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "static",
                "insertText": "static",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " static",
                "score": 0.7694156765937805,
                "sortText": "40bb0793static",
                "textEdit": {
                    "newText": "static",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "static_assert",
                "insertText": "static_assert",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_assert(expression, message);",
                "score": 0.7694156765937805,
                "sortText": "40bb0793static_assert",
                "textEdit": {
                    "newText": "static_assert",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "template",
                "insertText": "template",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " template",
                "score": 0.7694156765937805,
                "sortText": "40bb0793template",
                "textEdit": {
                    "newText": "template",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "thread_local",
                "insertText": "thread_local",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " thread_local",
                "score": 0.7694156765937805,
                "sortText": "40bb0793thread_local",
                "textEdit": {
                    "newText": "thread_local",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "typedef",
                "insertText": "typedef",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typedef type name;",
                "score": 0.7694156765937805,
                "sortText": "40bb0793typedef",
                "textEdit": {
                    "newText": "typedef",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.7694156765937805,
                "sortText": "40bb0793typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.7694156765937805,
                "sortText": "40bb0793union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.7694156765937805,
                "sortText": "40bb0793unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using qualifier::name;",
                "score": 0.7694156765937805,
                "sortText": "40bb0793using",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using name = type;",
                "score": 0.7694156765937805,
                "sortText": "40bb0793using",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "virtual",
                "insertText": "virtual",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " virtual",
                "score": 0.7694156765937805,
                "sortText": "40bb0793virtual",
                "textEdit": {
                    "newText": "virtual",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.7694156765937805,
                "sortText": "40bb0793void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.7694156765937805,
                "sortText": "40bb0793volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.7694156765937805,
                "sortText": "40bb0793wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "EXIT_SUCCESS",
                "insertText": "EXIT_SUCCESS",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022EXIT_SUCCESS",
                "score": 0.603100061416626,
                "sortText": "40e59b3cEXIT_SUCCESS",
                "textEdit": {
                    "newText": "EXIT_SUCCESS",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "MB_CUR_MAX",
                "insertText": "MB_CUR_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022MB_CUR_MAX",
                "score": 0.603100061416626,
                "sortText": "40e59b3cMB_CUR_MAX",
                "textEdit": {
                    "newText": "MB_CUR_MAX",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_countof",
                "insertText": "_countof",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_countof",
                "score": 0.603100061416626,
                "sortText": "40e59b3c_countof",
                "textEdit": {
                    "newText": "_countof",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_environ",
                "insertText": "_environ",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_environ",
                "score": 0.603100061416626,
                "sortText": "40e59b3c_environ",
                "textEdit": {
                    "newText": "_environ",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_sys_errlist",
                "insertText": "_sys_errlist",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_sys_errlist",
                "score": 0.603100061416626,
                "sortText": "40e59b3c_sys_errlist",
                "textEdit": {
                    "newText": "_sys_errlist",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_wenviron",
                "insertText": "_wenviron",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_wenviron",
                "score": 0.603100061416626,
                "sortText": "40e59b3c_wenviron",
                "textEdit": {
                    "newText": "_wenviron",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_wpgmptr",
                "insertText": "_wpgmptr",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_wpgmptr",
                "score": 0.603100061416626,
                "sortText": "40e59b3c_wpgmptr",
                "textEdit": {
                    "newText": "_wpgmptr",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "sys_nerr",
                "insertText": "sys_nerr",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022sys_nerr",
                "score": 0.603100061416626,
                "sortText": "40e59b3csys_nerr",
                "textEdit": {
                    "newText": "sys_nerr",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\nMath\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
                },
                "filterText": "_div_t",
                "insertText": "_div_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022_div_t",
                "score": 0.585259199142456,
                "sortText": "40ea2c74_div_t",
                "textEdit": {
                    "newText": "_div_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_ldiv_t",
                "insertText": "_ldiv_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022_ldiv_t",
                "score": 0.585259199142456,
                "sortText": "40ea2c74_ldiv_t",
                "textEdit": {
                    "newText": "_ldiv_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_lldiv_t",
                "insertText": "_lldiv_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022_lldiv_t",
                "score": 0.585259199142456,
                "sortText": "40ea2c74_lldiv_t",
                "textEdit": {
                    "newText": "_lldiv_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_onexit_t",
                "insertText": "_onexit_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022_onexit_t",
                "score": 0.585259199142456,
                "sortText": "40ea2c74_onexit_t",
                "textEdit": {
                    "newText": "_onexit_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>\na purecall handler procedure. Never returns normally"
                },
                "filterText": "_purecall_handler",
                "insertText": "_purecall_handler",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022_purecall_handler",
                "score": 0.585259199142456,
                "sortText": "40ea2c74_purecall_handler",
                "textEdit": {
                    "newText": "_purecall_handler",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\nMath\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
                },
                "filterText": "div_t",
                "insertText": "div_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022div_t",
                "score": 0.585259199142456,
                "sortText": "40ea2c74div_t",
                "textEdit": {
                    "newText": "div_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "ldiv_t",
                "insertText": "ldiv_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022ldiv_t",
                "score": 0.585259199142456,
                "sortText": "40ea2c74ldiv_t",
                "textEdit": {
                    "newText": "ldiv_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_CALL_REPORTFAULT",
                "insertText": "_CALL_REPORTFAULT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CALL_REPORTFAULT",
                "score": 0.3610164225101471,
                "sortText": "414728db_CALL_REPORTFAULT",
                "textEdit": {
                    "newText": "_CALL_REPORTFAULT",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_CVTBUFSIZE",
                "insertText": "_CVTBUFSIZE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CVTBUFSIZE",
                "score": 0.3610164225101471,
                "sortText": "414728db_CVTBUFSIZE",
                "textEdit": {
                    "newText": "_CVTBUFSIZE",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_INC_STDLIB",
                "insertText": "_INC_STDLIB",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_INC_STDLIB",
                "score": 0.3610164225101471,
                "sortText": "414728db_INC_STDLIB",
                "textEdit": {
                    "newText": "_INC_STDLIB",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_MAX_DRIVE",
                "insertText": "_MAX_DRIVE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_MAX_DRIVE",
                "score": 0.3610164225101471,
                "sortText": "414728db_MAX_DRIVE",
                "textEdit": {
                    "newText": "_MAX_DRIVE",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_MAX_EXT",
                "insertText": "_MAX_EXT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_MAX_EXT",
                "score": 0.3610164225101471,
                "sortText": "414728db_MAX_EXT",
                "textEdit": {
                    "newText": "_MAX_EXT",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_REPORT_ERRMODE",
                "insertText": "_REPORT_ERRMODE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_REPORT_ERRMODE",
                "score": 0.3610164225101471,
                "sortText": "414728db_REPORT_ERRMODE",
                "textEdit": {
                    "newText": "_REPORT_ERRMODE",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_WRITE_ABORT_MSG",
                "insertText": "_WRITE_ABORT_MSG",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_WRITE_ABORT_MSG",
                "score": 0.3610164225101471,
                "sortText": "414728db_WRITE_ABORT_MSG",
                "textEdit": {
                    "newText": "_WRITE_ABORT_MSG",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "__argv",
                "insertText": "__argv",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022__argv",
                "score": 0.3610164225101471,
                "sortText": "414728db__argv",
                "textEdit": {
                    "newText": "__argv",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_abs64",
                "insertText": "_abs64",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_abs64(long long Number)",
                "score": 0.2786673903465271,
                "sortText": "41715282_abs64",
                "textEdit": {
                    "newText": "_abs64",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_atodbl",
                "insertText": "_atodbl",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_atodbl(_CRT_DOUBLE *Result, char *String)",
                "score": 0.2786673903465271,
                "sortText": "41715282_atodbl",
                "textEdit": {
                    "newText": "_atodbl",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_atoflt_l",
                "insertText": "_atoflt_l",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_atoflt_l(_CRT_FLOAT *Result, const char *String, _locale_t Locale)",
                "score": 0.2786673903465271,
                "sortText": "41715282_atoflt_l",
                "textEdit": {
                    "newText": "_atoflt_l",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_atoi64",
                "insertText": "_atoi64",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_atoi64(const char *String)",
                "score": 0.2786673903465271,
                "sortText": "41715282_atoi64",
                "textEdit": {
                    "newText": "_atoi64",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_atoi_l",
                "insertText": "_atoi_l",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_atoi_l(const char *String, _locale_t Locale)",
                "score": 0.2786673903465271,
                "sortText": "41715282_atoi_l",
                "textEdit": {
                    "newText": "_atoi_l",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_atol_l",
                "insertText": "_atol_l",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_atol_l(const char *String, _locale_t Locale)",
                "score": 0.2786673903465271,
                "sortText": "41715282_atol_l",
                "textEdit": {
                    "newText": "_atol_l",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_atoldbl",
                "insertText": "_atoldbl",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_atoldbl(_LDOUBLE *Result, char *String)",
                "score": 0.2786673903465271,
                "sortText": "41715282_atoldbl",
                "textEdit": {
                    "newText": "_atoldbl",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_atoll_l",
                "insertText": "_atoll_l",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_atoll_l(const char *String, _locale_t Locale)",
                "score": 0.2786673903465271,
                "sortText": "41715282_atoll_l",
                "textEdit": {
                    "newText": "_atoll_l",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "unsigned long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_byteswap_uint64",
                "insertText": "_byteswap_uint64",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_byteswap_uint64(unsigned long long Number)",
                "score": 0.2786673903465271,
                "sortText": "41715282_byteswap_uint64",
                "textEdit": {
                    "newText": "_byteswap_uint64",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_dupenv_s",
                "insertText": "_dupenv_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_dupenv_s(char **Buffer, size_t *BufferCount, const char *VarName)",
                "score": 0.2786673903465271,
                "sortText": "41715282_dupenv_s",
                "textEdit": {
                    "newText": "_dupenv_s",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_ecvt_s",
                "insertText": "_ecvt_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_ecvt_s(char (&Buffer)[Size], double Value, int DigitCount, int *PtDec, int *PtSign)",
                "score": 0.2786673903465271,
                "sortText": "41715282_ecvt_s",
                "textEdit": {
                    "newText": "_ecvt_s",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <errno.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <errno.h>"
                },
                "filterText": "_errno",
                "insertText": "_errno",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_errno()",
                "score": 0.2786673903465271,
                "sortText": "41715282_errno",
                "textEdit": {
                    "newText": "_errno",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_fcvt_s",
                "insertText": "_fcvt_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_fcvt_s(char (&Buffer)[Size], double Value, int FractionalDigitCount, int *PtDec, int *PtSign)",
                "score": 0.2786673903465271,
                "sortText": "41715282_fcvt_s",
                "textEdit": {
                    "newText": "_fcvt_s",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_gcvt_s",
                "insertText": "_gcvt_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_gcvt_s(char (&Buffer)[Size], double Value, int DigitCount)",
                "score": 0.2786673903465271,
                "sortText": "41715282_gcvt_s",
                "textEdit": {
                    "newText": "_gcvt_s",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <errno.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <errno.h>"
                },
                "filterText": "_get_errno",
                "insertText": "_get_errno",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_get_errno(int *Value)",
                "score": 0.2786673903465271,
                "sortText": "41715282_get_errno",
                "textEdit": {
                    "newText": "_get_errno",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_get_fmode",
                "insertText": "_get_fmode",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_get_fmode(int *PMode)",
                "score": 0.2786673903465271,
                "sortText": "41715282_get_fmode",
                "textEdit": {
                    "newText": "_get_fmode",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_invalid_parameter_handler",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_get_invalid_parameter_handler",
                "insertText": "_get_invalid_parameter_handler",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_get_invalid_parameter_handler()",
                "score": 0.2786673903465271,
                "sortText": "41715282_get_invalid_parameter_handler",
                "textEdit": {
                    "newText": "_get_invalid_parameter_handler",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_purecall_handler",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_get_purecall_handler",
                "insertText": "_get_purecall_handler",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_get_purecall_handler()",
                "score": 0.2786673903465271,
                "sortText": "41715282_get_purecall_handler",
                "textEdit": {
                    "newText": "_get_purecall_handler",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_get_wpgmptr",
                "insertText": "_get_wpgmptr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_get_wpgmptr(wchar_t **Value)",
                "score": 0.2786673903465271,
                "sortText": "41715282_get_wpgmptr",
                "textEdit": {
                    "newText": "_get_wpgmptr",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_i64toa_s",
                "insertText": "_i64toa_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_i64toa_s(long long Value, char *Buffer, size_t BufferCount, int Radix)",
                "score": 0.2786673903465271,
                "sortText": "41715282_i64toa_s",
                "textEdit": {
                    "newText": "_i64toa_s",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "unsigned long",
                "filterText": "_lrotr",
                "insertText": "_lrotr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " _lrotr(unsigned long, int)",
                "score": 0.2786673903465271,
                "sortText": "41715282_lrotr",
                "textEdit": {
                    "newText": "_lrotr",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_ltoa_s",
                "insertText": "_ltoa_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_ltoa_s(long Value, char (&Buffer)[Size], int Radix)",
                "score": 0.2786673903465271,
                "sortText": "41715282_ltoa_s",
                "textEdit": {
                    "newText": "_ltoa_s",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_mblen_l",
                "insertText": "_mblen_l",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mblen_l(const char *Ch, size_t MaxCount, _locale_t Locale)",
                "score": 0.2786673903465271,
                "sortText": "41715282_mblen_l",
                "textEdit": {
                    "newText": "_mblen_l",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_mbstowcs_s_l",
                "insertText": "_mbstowcs_s_l",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mbstowcs_s_l(size_t *PtNumOfCharConverted, wchar_t *DstBuf, size_t SizeInWords, const char *SrcBuf, size_t MaxCount, _locale_t Locale)",
                "score": 0.2786673903465271,
                "sortText": "41715282_mbstowcs_s_l",
                "textEdit": {
                    "newText": "_mbstowcs_s_l",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_mbstrlen_l",
                "insertText": "_mbstrlen_l",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mbstrlen_l(const char *String, _locale_t Locale)",
                "score": 0.2786673903465271,
                "sortText": "41715282_mbstrlen_l",
                "textEdit": {
                    "newText": "_mbstrlen_l",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_mbstrnlen",
                "insertText": "_mbstrnlen",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mbstrnlen(const char *String, size_t MaxCount)",
                "score": 0.2786673903465271,
                "sortText": "41715282_mbstrnlen",
                "textEdit": {
                    "newText": "_mbstrnlen",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_mbstrnlen_l",
                "insertText": "_mbstrnlen_l",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mbstrnlen_l(const char *String, size_t MaxCount, _locale_t Locale)",
                "score": 0.2786673903465271,
                "sortText": "41715282_mbstrnlen_l",
                "textEdit": {
                    "newText": "_mbstrnlen_l",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['Muchie', 'std', 'struct', 'size_t', '_iobuf', 'numeric_limits', 'type_info', '_Nonnull', '_Null_unspecified', '_Nullable', 'alignas', 'auto', 'bool', 'char', 'char16_t', 'char32_t', 'class', 'const', 'constexpr', 'decltype', 'double', 'enum', 'explicit', 'extern', 'float', 'friend', 'inline', 'int', 'long', 'mutable', 'operator', 'private', 'protected', 'public', 'short', 'signed', 'static', 'static_assert', 'template', 'thread_local', 'typedef', 'typename', 'union', 'unsigned', 'using', 'using', 'virtual', 'void', 'volatile', 'wchar_t', 'EXIT_SUCCESS', 'MB_CUR_MAX', '_countof', '_environ', '_sys_errlist', '_wenviron', '_wpgmptr', 'sys_nerr', '_div_t', '_ldiv_t', '_lldiv_t', '_onexit_t', '_purecall_handler', 'div_t', 'ldiv_t', '_CALL_REPORTFAULT', '_CVTBUFSIZE', '_INC_STDLIB', '_MAX_DRIVE', '_MAX_EXT', '_REPORT_ERRMODE', '_WRITE_ABORT_MSG', '__argv', '_abs64', '_atodbl', '_atoflt_l', '_atoi64', '_atoi_l', '_atol_l', '_atoldbl', '_atoll_l', '_byteswap_uint64', '_dupenv_s', '_ecvt_s', '_errno', '_fcvt_s', '_gcvt_s', '_get_errno', '_get_fmode', '_get_invalid_parameter_handler', '_get_purecall_handler', '_get_wpgmptr', '_i64toa_s', '_lrotr', '_ltoa_s', '_mblen_l', '_mbstowcs_s_l', '_mbstrlen_l', '_mbstrnlen', '_mbstrnlen_l']
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "adopt_lock_t",
                "insertText": "adopt_lock_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022adopt_lock_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4adopt_lock_t",
                "textEdit": {
                    "newText": "adopt_lock_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_bool",
                "insertText": "atomic_bool",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_bool",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_bool",
                "textEdit": {
                    "newText": "atomic_bool",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_char",
                "insertText": "atomic_char",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_char",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_char",
                "textEdit": {
                    "newText": "atomic_char",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_char32_t",
                "insertText": "atomic_char32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_char32_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_char32_t",
                "textEdit": {
                    "newText": "atomic_char32_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag",
                "insertText": "atomic_flag",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022atomic_flag",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_flag",
                "textEdit": {
                    "newText": "atomic_flag",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int16_t",
                "insertText": "atomic_int16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int16_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_int16_t",
                "textEdit": {
                    "newText": "atomic_int16_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int32_t",
                "insertText": "atomic_int32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int32_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_int32_t",
                "textEdit": {
                    "newText": "atomic_int32_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int64_t",
                "insertText": "atomic_int64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int64_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_int64_t",
                "textEdit": {
                    "newText": "atomic_int64_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int8_t",
                "insertText": "atomic_int8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int8_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_int8_t",
                "textEdit": {
                    "newText": "atomic_int8_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast16_t",
                "insertText": "atomic_int_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast16_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_int_fast16_t",
                "textEdit": {
                    "newText": "atomic_int_fast16_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast64_t",
                "insertText": "atomic_int_fast64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast64_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_int_fast64_t",
                "textEdit": {
                    "newText": "atomic_int_fast64_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_fast8_t",
                "insertText": "atomic_int_fast8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_fast8_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_int_fast8_t",
                "textEdit": {
                    "newText": "atomic_int_fast8_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least16_t",
                "insertText": "atomic_int_least16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least16_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_int_least16_t",
                "textEdit": {
                    "newText": "atomic_int_least16_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least32_t",
                "insertText": "atomic_int_least32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least32_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_int_least32_t",
                "textEdit": {
                    "newText": "atomic_int_least32_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_int_least8_t",
                "insertText": "atomic_int_least8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_int_least8_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_int_least8_t",
                "textEdit": {
                    "newText": "atomic_int_least8_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_intmax_t",
                "insertText": "atomic_intmax_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_intmax_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_intmax_t",
                "textEdit": {
                    "newText": "atomic_intmax_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_intptr_t",
                "insertText": "atomic_intptr_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_intptr_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_intptr_t",
                "textEdit": {
                    "newText": "atomic_intptr_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_llong",
                "insertText": "atomic_llong",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_llong",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_llong",
                "textEdit": {
                    "newText": "atomic_llong",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ptrdiff_t",
                "insertText": "atomic_ptrdiff_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ptrdiff_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_ptrdiff_t",
                "textEdit": {
                    "newText": "atomic_ptrdiff_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_short",
                "insertText": "atomic_short",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_short",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_short",
                "textEdit": {
                    "newText": "atomic_short",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint",
                "insertText": "atomic_uint",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_uint",
                "textEdit": {
                    "newText": "atomic_uint",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint32_t",
                "insertText": "atomic_uint32_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint32_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_uint32_t",
                "textEdit": {
                    "newText": "atomic_uint32_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint64_t",
                "insertText": "atomic_uint64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint64_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_uint64_t",
                "textEdit": {
                    "newText": "atomic_uint64_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast16_t",
                "insertText": "atomic_uint_fast16_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast16_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_uint_fast16_t",
                "textEdit": {
                    "newText": "atomic_uint_fast16_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_fast64_t",
                "insertText": "atomic_uint_fast64_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_fast64_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_uint_fast64_t",
                "textEdit": {
                    "newText": "atomic_uint_fast64_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uint_least8_t",
                "insertText": "atomic_uint_least8_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uint_least8_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_uint_least8_t",
                "textEdit": {
                    "newText": "atomic_uint_least8_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uintmax_t",
                "insertText": "atomic_uintmax_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uintmax_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_uintmax_t",
                "textEdit": {
                    "newText": "atomic_uintmax_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_uintptr_t",
                "insertText": "atomic_uintptr_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_uintptr_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_uintptr_t",
                "textEdit": {
                    "newText": "atomic_uintptr_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ulong",
                "insertText": "atomic_ulong",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ulong",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_ulong",
                "textEdit": {
                    "newText": "atomic_ulong",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_ushort",
                "insertText": "atomic_ushort",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_ushort",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_ushort",
                "textEdit": {
                    "newText": "atomic_ushort",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_wchar_t",
                "insertText": "atomic_wchar_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_wchar_t",
                "score": 0.8582055568695068,
                "sortText": "40a44ca4atomic_wchar_t",
                "textEdit": {
                    "newText": "atomic_wchar_t",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator",
                "insertText": "allocator",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator<class Ty>",
                "score": 0.8575049638748169,
                "sortText": "40a47a8eallocator",
                "textEdit": {
                    "newText": "allocator",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocator_traits",
                "insertText": "allocator_traits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022allocator_traits<class Alloc>",
                "score": 0.8575049638748169,
                "sortText": "40a47a8eallocator_traits",
                "textEdit": {
                    "newText": "allocator_traits",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "alignas",
                "insertText": "alignas",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignas(expression)",
                "score": 0.7694156765937805,
                "sortText": "40bb0793alignas",
                "textEdit": {
                    "newText": "alignas",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.7694156765937805,
                "sortText": "40bb0793auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertText": "ATOMIC_CHAR32_T_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR32_T_LOCK_FREE",
                "score": 0.6651737093925476,
                "sortText": "40d5b72dATOMIC_CHAR32_T_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR32_T_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_CHAR_LOCK_FREE",
                "insertText": "ATOMIC_CHAR_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_CHAR_LOCK_FREE",
                "score": 0.6651737093925476,
                "sortText": "40d5b72dATOMIC_CHAR_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_CHAR_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_LONG_LOCK_FREE",
                "insertText": "ATOMIC_LONG_LOCK_FREE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022ATOMIC_LONG_LOCK_FREE",
                "score": 0.6651737093925476,
                "sortText": "40d5b72dATOMIC_LONG_LOCK_FREE",
                "textEdit": {
                    "newText": "ATOMIC_LONG_LOCK_FREE",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "ATOMIC_VAR_INIT",
                "insertText": "ATOMIC_VAR_INIT",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022ATOMIC_VAR_INIT(_Value)",
                "score": 0.6651737093925476,
                "sortText": "40d5b72dATOMIC_VAR_INIT",
                "textEdit": {
                    "newText": "ATOMIC_VAR_INIT",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "abs",
                "insertText": "abs",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022abs(const complex<Ty> &Left)",
                "score": 0.4689558446407318,
                "sortText": "410fe505abs",
                "textEdit": {
                    "newText": "abs",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>\n[valarray.transcend] Transcendentals"
                },
                "filterText": "abs",
                "insertText": "abs",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022abs(const valarray<Ty> &Left)",
                "score": 0.4689558446407318,
                "sortText": "410fe505abs",
                "textEdit": {
                    "newText": "abs",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "acos",
                "insertText": "acos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022acos(const valarray<Ty> &Left)",
                "score": 0.4689558446407318,
                "sortText": "410fe505acos",
                "textEdit": {
                    "newText": "acos",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "acos",
                "insertText": "acos",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022acos(const complex<Ty> &Left)",
                "score": 0.4689558446407318,
                "sortText": "410fe505acos",
                "textEdit": {
                    "newText": "acos",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "acosh",
                "insertText": "acosh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022acosh(const complex<Ty> &Left)",
                "score": 0.4689558446407318,
                "sortText": "410fe505acosh",
                "textEdit": {
                    "newText": "acosh",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "arg",
                "insertText": "arg",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022arg(const complex<Ty> &Left)",
                "score": 0.4689558446407318,
                "sortText": "410fe505arg",
                "textEdit": {
                    "newText": "arg",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <complex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_Upgrade_to_double<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <complex>"
                },
                "filterText": "arg",
                "insertText": "arg",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022arg(Ty Left)",
                "score": 0.4689558446407318,
                "sortText": "410fe505arg",
                "textEdit": {
                    "newText": "arg",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "add_const_t<Ty> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "as_const",
                "insertText": "as_const",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022as_const(Ty &Val)",
                "score": 0.4689558446407318,
                "sortText": "410fe505as_const",
                "textEdit": {
                    "newText": "as_const",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asin",
                "insertText": "asin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asin(const complex<Ty> &Left)",
                "score": 0.4689558446407318,
                "sortText": "410fe505asin",
                "textEdit": {
                    "newText": "asin",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asin",
                "insertText": "asin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asin(const valarray<Ty> &Left)",
                "score": 0.4689558446407318,
                "sortText": "410fe505asin",
                "textEdit": {
                    "newText": "asin",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinh",
                "insertText": "asinh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asinh(const complex<Ty> &Left)",
                "score": 0.4689558446407318,
                "sortText": "410fe505asinh",
                "textEdit": {
                    "newText": "asinh",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <future>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "future<_Invoke_result_t<decay_t<Fty>, decay_t<ArgTypes>...>>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <future>"
                },
                "filterText": "async",
                "insertText": "async",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022async(launch Policy, Fty &&Fnarg, ArgTypes &&Args...)",
                "score": 0.4689558446407318,
                "sortText": "410fe505async",
                "textEdit": {
                    "newText": "async",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <future>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "future<_Invoke_result_t<decay_t<Fty>, decay_t<ArgTypes>...>>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <future>"
                },
                "filterText": "async",
                "insertText": "async",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022async(Fty &&Fnarg, ArgTypes &&Args...)",
                "score": 0.4689558446407318,
                "sortText": "410fe505async",
                "textEdit": {
                    "newText": "async",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "atan",
                "insertText": "atan",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atan(const complex<Ty> &Left)",
                "score": 0.4689558446407318,
                "sortText": "410fe505atan",
                "textEdit": {
                    "newText": "atan",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "atan",
                "insertText": "atan",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atan(const valarray<Ty> &Left)",
                "score": 0.4689558446407318,
                "sortText": "410fe505atan",
                "textEdit": {
                    "newText": "atan",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "atan2",
                "insertText": "atan2",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atan2(const valarray<Ty> &Left, const typename valarray<Ty>::value_type &Right)",
                "score": 0.4689558446407318,
                "sortText": "410fe505atan2",
                "textEdit": {
                    "newText": "atan2",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "atan2",
                "insertText": "atan2",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atan2(const typename valarray<Ty>::value_type &Left, const valarray<Ty> &Right)",
                "score": 0.4689558446407318,
                "sortText": "410fe505atan2",
                "textEdit": {
                    "newText": "atan2",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "atan2",
                "insertText": "atan2",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atan2(const valarray<Ty> &Left, const valarray<Ty> &Right)",
                "score": 0.4689558446407318,
                "sortText": "410fe505atan2",
                "textEdit": {
                    "newText": "atan2",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "atanh",
                "insertText": "atanh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atanh(const complex<Ty> &Left)",
                "score": 0.4689558446407318,
                "sortText": "410fe505atanh",
                "textEdit": {
                    "newText": "atanh",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_exchange",
                "insertText": "atomic_exchange",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_exchange(volatile atomic<Ty> *const Mem, const _Identity_t<Ty> Value)",
                "score": 0.4689558446407318,
                "sortText": "410fe505atomic_exchange",
                "textEdit": {
                    "newText": "atomic_exchange",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_add",
                "insertText": "atomic_fetch_add",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_add(volatile atomic<Ty> *Mem, const typename atomic<Ty>::difference_type Value)",
                "score": 0.4689558446407318,
                "sortText": "410fe505atomic_fetch_add",
                "textEdit": {
                    "newText": "atomic_fetch_add",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_add_explicit",
                "insertText": "atomic_fetch_add_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_add_explicit(atomic<Ty> *Mem, const typename atomic<Ty>::difference_type Value, const memory_order Order)",
                "score": 0.4689558446407318,
                "sortText": "410fe505atomic_fetch_add_explicit",
                "textEdit": {
                    "newText": "atomic_fetch_add_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_and_explicit",
                "insertText": "atomic_fetch_and_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_and_explicit(atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value, const memory_order Order)",
                "score": 0.4689558446407318,
                "sortText": "410fe505atomic_fetch_and_explicit",
                "textEdit": {
                    "newText": "atomic_fetch_and_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_or",
                "insertText": "atomic_fetch_or",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_or(volatile atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value)",
                "score": 0.4689558446407318,
                "sortText": "410fe505atomic_fetch_or",
                "textEdit": {
                    "newText": "atomic_fetch_or",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_or_explicit",
                "insertText": "atomic_fetch_or_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_or_explicit(volatile atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value, const memory_order Order)",
                "score": 0.4689558446407318,
                "sortText": "410fe505atomic_fetch_or_explicit",
                "textEdit": {
                    "newText": "atomic_fetch_or_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_or_explicit",
                "insertText": "atomic_fetch_or_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_or_explicit(atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value, const memory_order Order)",
                "score": 0.4689558446407318,
                "sortText": "410fe505atomic_fetch_or_explicit",
                "textEdit": {
                    "newText": "atomic_fetch_or_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_sub",
                "insertText": "atomic_fetch_sub",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_sub(atomic<Ty> *Mem, const typename atomic<Ty>::difference_type Value)",
                "score": 0.4689558446407318,
                "sortText": "410fe505atomic_fetch_sub",
                "textEdit": {
                    "newText": "atomic_fetch_sub",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_fetch_xor",
                "insertText": "atomic_fetch_xor",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_fetch_xor(atomic<Ty> *Mem, const typename atomic<Ty>::value_type Value)",
                "score": 0.4689558446407318,
                "sortText": "410fe505atomic_fetch_xor",
                "textEdit": {
                    "newText": "atomic_fetch_xor",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "Ty",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_load_explicit",
                "insertText": "atomic_load_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_load_explicit(const atomic<Ty> *const Mem, const memory_order Order)",
                "score": 0.4689558446407318,
                "sortText": "410fe505atomic_load_explicit",
                "textEdit": {
                    "newText": "atomic_load_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "align",
                "insertText": "align",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022align(size_t Bound, size_t Size, void *&Ptr, size_t &Space)",
                "score": 0.3782293498516083,
                "sortText": "413e58b9align",
                "textEdit": {
                    "newText": "align",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <iterator>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <iterator>\nfrom <iterator>"
                },
                "filterText": "advance",
                "insertText": "advance",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022advance(InIt &Where, Diff Off)",
                "score": 0.3672971725463867,
                "sortText": "4143f1a0advance",
                "textEdit": {
                    "newText": "advance",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "as_const",
                "insertText": "as_const",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022as_const(const Ty &&)",
                "score": 0.3672971725463867,
                "sortText": "4143f1a0as_const",
                "textEdit": {
                    "newText": "as_const",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_compare_exchange_strong",
                "insertText": "atomic_compare_exchange_strong",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_compare_exchange_strong(volatile atomic<Ty> *const Mem, _Identity_t<Ty> *const Expected, const _Identity_t<Ty> Desired)",
                "score": 0.3672971725463867,
                "sortText": "4143f1a0atomic_compare_exchange_strong",
                "textEdit": {
                    "newText": "atomic_compare_exchange_strong",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_clear_explicit",
                "insertText": "atomic_flag_clear_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_clear_explicit(atomic_flag *const Flag, const memory_order Order)",
                "score": 0.3672971725463867,
                "sortText": "4143f1a0atomic_flag_clear_explicit",
                "textEdit": {
                    "newText": "atomic_flag_clear_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_clear_explicit",
                "insertText": "atomic_flag_clear_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_clear_explicit(volatile atomic_flag *const Flag, const memory_order Order)",
                "score": 0.3672971725463867,
                "sortText": "4143f1a0atomic_flag_clear_explicit",
                "textEdit": {
                    "newText": "atomic_flag_clear_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_test_and_set",
                "insertText": "atomic_flag_test_and_set",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_test_and_set(volatile atomic_flag *const Flag)",
                "score": 0.3672971725463867,
                "sortText": "4143f1a0atomic_flag_test_and_set",
                "textEdit": {
                    "newText": "atomic_flag_test_and_set",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_test_and_set",
                "insertText": "atomic_flag_test_and_set",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_test_and_set(atomic_flag *const Flag)",
                "score": 0.3672971725463867,
                "sortText": "4143f1a0atomic_flag_test_and_set",
                "textEdit": {
                    "newText": "atomic_flag_test_and_set",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "bool",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_flag_test_and_set_explicit",
                "insertText": "atomic_flag_test_and_set_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_flag_test_and_set_explicit(volatile atomic_flag *const Flag, const memory_order Order)",
                "score": 0.3672971725463867,
                "sortText": "4143f1a0atomic_flag_test_and_set_explicit",
                "textEdit": {
                    "newText": "atomic_flag_test_and_set_explicit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_init",
                "insertText": "atomic_init",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_init(atomic<Ty> *const Mem, const typename atomic<Ty>::value_type Value)",
                "score": 0.3672971725463867,
                "sortText": "4143f1a0atomic_init",
                "textEdit": {
                    "newText": "atomic_init",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_signal_fence",
                "insertText": "atomic_signal_fence",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_signal_fence(const memory_order Order)",
                "score": 0.3672971725463867,
                "sortText": "4143f1a0atomic_signal_fence",
                "textEdit": {
                    "newText": "atomic_signal_fence",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_store",
                "insertText": "atomic_store",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_store(atomic<Ty> *const Mem, const _Identity_t<Ty> Value)",
                "score": 0.3672971725463867,
                "sortText": "4143f1a0atomic_store",
                "textEdit": {
                    "newText": "atomic_store",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_thread_fence",
                "insertText": "atomic_thread_fence",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_thread_fence(const memory_order Order)",
                "score": 0.3672971725463867,
                "sortText": "4143f1a0atomic_thread_fence",
                "textEdit": {
                    "newText": "atomic_thread_fence",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <mutex>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "const adopt_lock_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <mutex>"
                },
                "filterText": "adopt_lock",
                "insertText": "adopt_lock",
                "insertTextFormat": 1,
                "kind": 6,
                "label": "\u2022adopt_lock",
                "score": 0.32943084836006165,
                "sortText": "415754d7adopt_lock",
                "textEdit": {
                    "newText": "adopt_lock",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>\n<stdlib.h> has abs(long) and abs(long long)"
                },
                "filterText": "abs",
                "insertText": "abs",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022abs(double Xx)",
                "score": 0.32746627926826477,
                "sortText": "41585657abs",
                "textEdit": {
                    "newText": "abs",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "abs",
                "insertText": "abs",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022abs(long double Xx)",
                "score": 0.32746627926826477,
                "sortText": "41585657abs",
                "textEdit": {
                    "newText": "abs",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "abs",
                "insertText": "abs",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022abs(float Xx)",
                "score": 0.32746627926826477,
                "sortText": "41585657abs",
                "textEdit": {
                    "newText": "abs",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <future>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "std::launch",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <future>"
                },
                "filterText": "async",
                "insertText": "launch::async",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022launch::async",
                "score": 0.2888787090778351,
                "sortText": "416c1817async",
                "textEdit": {
                    "newText": "launch::async",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <corecrt_terminate.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <corecrt_terminate.h>"
                },
                "filterText": "abort",
                "insertText": "abort",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022abort()",
                "score": 0.2786673903465271,
                "sortText": "41715282abort",
                "textEdit": {
                    "newText": "abort",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "abs",
                "insertText": "abs",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022abs(const long X)",
                "score": 0.2786673903465271,
                "sortText": "41715282abs",
                "textEdit": {
                    "newText": "abs",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "abs",
                "insertText": "abs",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022abs(const long long X)",
                "score": 0.2786673903465271,
                "sortText": "41715282abs",
                "textEdit": {
                    "newText": "abs",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "at_quick_exit",
                "insertText": "at_quick_exit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022at_quick_exit(void (*)() __attribute__((cdecl)))",
                "score": 0.2786673903465271,
                "sortText": "41715282at_quick_exit",
                "textEdit": {
                    "newText": "at_quick_exit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "atexit",
                "insertText": "atexit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atexit(void (*)() __attribute__((cdecl)))",
                "score": 0.2786673903465271,
                "sortText": "41715282atexit",
                "textEdit": {
                    "newText": "atexit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "atoi",
                "insertText": "atoi",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atoi(const char *String)",
                "score": 0.2786673903465271,
                "sortText": "41715282atoi",
                "textEdit": {
                    "newText": "atoi",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "atol",
                "insertText": "atol",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atol(const char *String)",
                "score": 0.2786673903465271,
                "sortText": "41715282atol",
                "textEdit": {
                    "newText": "atol",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "atoll",
                "insertText": "atoll",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atoll(const char *String)",
                "score": 0.2786673903465271,
                "sortText": "41715282atoll",
                "textEdit": {
                    "newText": "atoll",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "abort",
                "insertText": "abort",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022abort",
                "score": 0.23272034525871277,
                "sortText": "4191b1c2abort",
                "textEdit": {
                    "newText": "abort",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "abs",
                "insertText": "abs",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022abs",
                "score": 0.23272034525871277,
                "sortText": "4191b1c2abs",
                "textEdit": {
                    "newText": "abs",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "at_quick_exit",
                "insertText": "at_quick_exit",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022at_quick_exit",
                "score": 0.23272034525871277,
                "sortText": "4191b1c2at_quick_exit",
                "textEdit": {
                    "newText": "at_quick_exit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "atexit",
                "insertText": "atexit",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022atexit",
                "score": 0.23272034525871277,
                "sortText": "4191b1c2atexit",
                "textEdit": {
                    "newText": "atexit",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "atof",
                "insertText": "atof",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022atof",
                "score": 0.23272034525871277,
                "sortText": "4191b1c2atof",
                "textEdit": {
                    "newText": "atof",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "atoi",
                "insertText": "atoi",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022atoi",
                "score": 0.23272034525871277,
                "sortText": "4191b1c2atoi",
                "textEdit": {
                    "newText": "atoi",
                    "range": {
                        "end": {
                            "character": 11,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['adopt_lock_t', 'atomic_bool', 'atomic_char', 'atomic_char32_t', 'atomic_flag', 'atomic_int16_t', 'atomic_int32_t', 'atomic_int64_t', 'atomic_int8_t', 'atomic_int_fast16_t', 'atomic_int_fast64_t', 'atomic_int_fast8_t', 'atomic_int_least16_t', 'atomic_int_least32_t', 'atomic_int_least8_t', 'atomic_intmax_t', 'atomic_intptr_t', 'atomic_llong', 'atomic_ptrdiff_t', 'atomic_short', 'atomic_uint', 'atomic_uint32_t', 'atomic_uint64_t', 'atomic_uint_fast16_t', 'atomic_uint_fast64_t', 'atomic_uint_least8_t', 'atomic_uintmax_t', 'atomic_uintptr_t', 'atomic_ulong', 'atomic_ushort', 'atomic_wchar_t', 'allocator', 'allocator_traits', 'alignas', 'auto', 'ATOMIC_CHAR32_T_LOCK_FREE', 'ATOMIC_CHAR_LOCK_FREE', 'ATOMIC_LONG_LOCK_FREE', 'ATOMIC_VAR_INIT', 'abs', 'abs', 'acos', 'acos', 'acosh', 'arg', 'arg', 'as_const', 'asin', 'asin', 'asinh', 'async', 'async', 'atan', 'atan', 'atan2', 'atan2', 'atan2', 'atanh', 'atomic_exchange', 'atomic_fetch_add', 'atomic_fetch_add_explicit', 'atomic_fetch_and_explicit', 'atomic_fetch_or', 'atomic_fetch_or_explicit', 'atomic_fetch_or_explicit', 'atomic_fetch_sub', 'atomic_fetch_xor', 'atomic_load_explicit', 'align', 'advance', 'as_const', 'atomic_compare_exchange_strong', 'atomic_flag_clear_explicit', 'atomic_flag_clear_explicit', 'atomic_flag_test_and_set', 'atomic_flag_test_and_set', 'atomic_flag_test_and_set_explicit', 'atomic_init', 'atomic_signal_fence', 'atomic_store', 'atomic_thread_fence', 'adopt_lock', 'abs', 'abs', 'abs', 'launch::async', 'abort', 'abs', 'abs', 'at_quick_exit', 'atexit', 'atoi', 'atol', 'atoll', 'abort', 'abs', 'at_quick_exit', 'atexit', 'atof', 'atoi']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 116
                    },
                    "start": {
                        "character": 21,
                        "line": 116
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 73,
                        "line": 625
                    },
                    "start": {
                        "character": 68,
                        "line": 625
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 133
                    },
                    "start": {
                        "character": 2,
                        "line": 133
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'queue' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 155
                    },
                    "start": {
                        "character": 2,
                        "line": 155
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 177
                    },
                    "start": {
                        "character": 2,
                        "line": 177
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 208
                    },
                    "start": {
                        "character": 3,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 208
                    },
                    "start": {
                        "character": 11,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 101,
                        "line": 216
                    },
                    "start": {
                        "character": 97,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 52,
                        "line": 260
                    },
                    "start": {
                        "character": 50,
                        "line": 260
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'priority_queue' (fix available)",
                "range": {
                    "end": {
                        "character": 16,
                        "line": 260
                    },
                    "start": {
                        "character": 2,
                        "line": 260
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'pq'",
                "range": {
                    "end": {
                        "character": 52,
                        "line": 260
                    },
                    "start": {
                        "character": 50,
                        "line": 260
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 55
    }
}
Diagnostics received from LSP.
Errors received: [[116, [21, 26]], [625, [68, 73]], [133, [2, 7]], [143, [4, 8]], [143, [4, 8]], [155, [2, 7]], [177, [2, 7]], [205, [3, 7]], [205, [3, 7]], [207, [4, 8]], [207, [4, 8]], [208, [3, 7]], [208, [11, 15]], [216, [3, 7]], [216, [3, 7]], [216, [97, 101]], [260, [50, 52]], [260, [2, 16]], [260, [50, 52]], [0, [0, 0]]]
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "aligned_storage",
                "insertText": "aligned_storage",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022aligned_storage<size_t Len, size_t Align>",
                "score": 0.8582055568695068,
                "sortText": "40db397baligned_storage",
                "textEdit": {
                    "newText": "aligned_storage",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "aligned_storage_t",
                "insertText": "aligned_storage_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022aligned_storage_t<size_t Len, size_t Align>",
                "score": 0.8582055568695068,
                "sortText": "40db397baligned_storage_t",
                "textEdit": {
                    "newText": "aligned_storage_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_schar",
                "insertText": "atomic_schar",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_schar",
                "score": 0.8582055568695068,
                "sortText": "40db397batomic_schar",
                "textEdit": {
                    "newText": "atomic_schar",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_short",
                "insertText": "atomic_short",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_short",
                "score": 0.8582055568695068,
                "sortText": "40db397batomic_short",
                "textEdit": {
                    "newText": "atomic_short",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_size_t",
                "insertText": "atomic_size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_size_t",
                "score": 0.8582055568695068,
                "sortText": "40db397batomic_size_t",
                "textEdit": {
                    "newText": "atomic_size_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cassert>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cassert>"
                },
                "filterText": "assert",
                "insertText": "assert",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022assert(expression)",
                "score": 0.603100061416626,
                "sortText": "40e59b3cassert",
                "textEdit": {
                    "newText": "assert",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplinterface.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplinterface.h>"
                },
                "filterText": "atomic_size_t",
                "insertText": "Concurrency::details::atomic_size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022Concurrency::details::atomic_size_t",
                "score": 0.6444072127342224,
                "sortText": "41088c32atomic_size_t",
                "textEdit": {
                    "newText": "Concurrency::details::atomic_size_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "add_const_t<Ty> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "as_const",
                "insertText": "as_const",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022as_const(Ty &Val)",
                "score": 0.4689558446407318,
                "sortText": "410fe505as_const",
                "textEdit": {
                    "newText": "as_const",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "valarray<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asin",
                "insertText": "asin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asin(const valarray<Ty> &Left)",
                "score": 0.4689558446407318,
                "sortText": "410fe505asin",
                "textEdit": {
                    "newText": "asin",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asin",
                "insertText": "asin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asin(const complex<Ty> &Left)",
                "score": 0.4689558446407318,
                "sortText": "410fe505asin",
                "textEdit": {
                    "newText": "asin",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "complex<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinh",
                "insertText": "asinh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asinh(const complex<Ty> &Left)",
                "score": 0.4689558446407318,
                "sortText": "410fe505asinh",
                "textEdit": {
                    "newText": "asinh",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <future>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "future<_Invoke_result_t<decay_t<Fty>, decay_t<ArgTypes>...>>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <future>"
                },
                "filterText": "async",
                "insertText": "async",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022async(Fty &&Fnarg, ArgTypes &&Args...)",
                "score": 0.4689558446407318,
                "sortText": "410fe505async",
                "textEdit": {
                    "newText": "async",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <future>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "future<_Invoke_result_t<decay_t<Fty>, decay_t<ArgTypes>...>>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <future>"
                },
                "filterText": "async",
                "insertText": "async",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022async(launch Policy, Fty &&Fnarg, ArgTypes &&Args...)",
                "score": 0.4689558446407318,
                "sortText": "410fe505async",
                "textEdit": {
                    "newText": "async",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_schar",
                "insertText": "atomic_schar",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_schar",
                "score": 0.5871009826660156,
                "sortText": "411e8da0atomic_schar",
                "textEdit": {
                    "newText": "atomic_schar",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_short",
                "insertText": "atomic_short",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_short",
                "score": 0.5871009826660156,
                "sortText": "411e8da0atomic_short",
                "textEdit": {
                    "newText": "atomic_short",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_size_t",
                "insertText": "atomic_size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022atomic_size_t",
                "score": 0.5871009826660156,
                "sortText": "411e8da0atomic_size_t",
                "textEdit": {
                    "newText": "atomic_size_t",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <utility>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <utility>"
                },
                "filterText": "as_const",
                "insertText": "as_const",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022as_const(const Ty &&)",
                "score": 0.3672971725463867,
                "sortText": "4143f1a0as_const",
                "textEdit": {
                    "newText": "as_const",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "shared_ptr<Ty>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocate_shared",
                "insertText": "allocate_shared",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022allocate_shared<class Ty>(const Alloc &Al, Types &&Args...)",
                "score": 0.4689558446407318,
                "sortText": "414bebc4allocate_shared",
                "textEdit": {
                    "newText": "allocate_shared",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nThe following order matches N4950 [cmath.syn]."
                },
                "filterText": "asin",
                "insertText": "asin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asin(Ty Left)",
                "score": 0.32746627926826477,
                "sortText": "41585657asin",
                "textEdit": {
                    "newText": "asin",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asin",
                "insertText": "asin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asin(long double Xx)",
                "score": 0.32746627926826477,
                "sortText": "41585657asin",
                "textEdit": {
                    "newText": "asin",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asin",
                "insertText": "asin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asin(float Xx)",
                "score": 0.32746627926826477,
                "sortText": "41585657asin",
                "textEdit": {
                    "newText": "asin",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>\nThe following order matches N4950 [cmath.syn]."
                },
                "filterText": "asinh",
                "insertText": "asinh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asinh(Ty Left)",
                "score": 0.32746627926826477,
                "sortText": "41585657asinh",
                "textEdit": {
                    "newText": "asinh",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinh",
                "insertText": "asinh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asinh(long double Xx)",
                "score": 0.32746627926826477,
                "sortText": "41585657asinh",
                "textEdit": {
                    "newText": "asinh",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinh",
                "insertText": "asinh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asinh(float Xx)",
                "score": 0.32746627926826477,
                "sortText": "41585657asinh",
                "textEdit": {
                    "newText": "asinh",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "is_assignable",
                "insertText": "is_assignable",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022is_assignable<class To, class From>",
                "score": 0.8582055568695068,
                "sortText": "415b397bis_assignable",
                "textEdit": {
                    "newText": "is_assignable",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <future>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "std::launch",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <future>"
                },
                "filterText": "async",
                "insertText": "launch::async",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022launch::async",
                "score": 0.2888787090778351,
                "sortText": "416c1817async",
                "textEdit": {
                    "newText": "launch::async",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "static_assert",
                "insertText": "static_assert",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_assert(expression, message);",
                "score": 0.7694156765937805,
                "sortText": "416c45aestatic_assert",
                "textEdit": {
                    "newText": "static_assert",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <time.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <time.h>"
                },
                "filterText": "asctime_s",
                "insertText": "asctime_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asctime_s(char *Buffer, size_t SizeInBytes, const struct tm *Tm)",
                "score": 0.2786673903465271,
                "sortText": "41715282asctime_s",
                "textEdit": {
                    "newText": "asctime_s",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <time.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <time.h>"
                },
                "filterText": "asctime_s",
                "insertText": "asctime_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asctime_s(char (&Buffer)[Size], const struct tm *Time)",
                "score": 0.2786673903465271,
                "sortText": "41715282asctime_s",
                "textEdit": {
                    "newText": "asctime_s",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asin",
                "insertText": "asin",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asin(double X)",
                "score": 0.2786673903465271,
                "sortText": "41715282asin",
                "textEdit": {
                    "newText": "asin",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinf",
                "insertText": "asinf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asinf(float X)",
                "score": 0.2786673903465271,
                "sortText": "41715282asinf",
                "textEdit": {
                    "newText": "asinf",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinh",
                "insertText": "asinh",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asinh(double X)",
                "score": 0.2786673903465271,
                "sortText": "41715282asinh",
                "textEdit": {
                    "newText": "asinh",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "float",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinhf",
                "insertText": "asinhf",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asinhf(float X)",
                "score": 0.2786673903465271,
                "sortText": "41715282asinhf",
                "textEdit": {
                    "newText": "asinhf",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinhl",
                "insertText": "asinhl",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asinhl(long double X)",
                "score": 0.2786673903465271,
                "sortText": "41715282asinhl",
                "textEdit": {
                    "newText": "asinhl",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long double",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinl",
                "insertText": "asinl",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asinl(long double X)",
                "score": 0.2786673903465271,
                "sortText": "41715282asinl",
                "textEdit": {
                    "newText": "asinl",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_signal_fence",
                "insertText": "atomic_signal_fence",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_signal_fence(const memory_order Order)",
                "score": 0.3672971725463867,
                "sortText": "4172f538atomic_signal_fence",
                "textEdit": {
                    "newText": "atomic_signal_fence",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_store",
                "insertText": "atomic_store",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_store(shared_ptr<Ty> *Ptr, shared_ptr<Ty> Other)",
                "score": 0.3672971725463867,
                "sortText": "4172f538atomic_store",
                "textEdit": {
                    "newText": "atomic_store",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_store",
                "insertText": "atomic_store",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_store(volatile atomic<Ty> *const Mem, const _Identity_t<Ty> Value)",
                "score": 0.3672971725463867,
                "sortText": "4172f538atomic_store",
                "textEdit": {
                    "newText": "atomic_store",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_store",
                "insertText": "atomic_store",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_store(atomic<Ty> *const Mem, const _Identity_t<Ty> Value)",
                "score": 0.3672971725463867,
                "sortText": "4172f538atomic_store",
                "textEdit": {
                    "newText": "atomic_store",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_store_explicit",
                "insertText": "atomic_store_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_store_explicit(shared_ptr<Ty> *Ptr, shared_ptr<Ty> Other, memory_order)",
                "score": 0.3672971725463867,
                "sortText": "4172f538atomic_store_explicit",
                "textEdit": {
                    "newText": "atomic_store_explicit",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_store_explicit",
                "insertText": "atomic_store_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_store_explicit(atomic<Ty> *const Mem, const _Identity_t<Ty> Value, const memory_order Order)",
                "score": 0.3672971725463867,
                "sortText": "4172f538atomic_store_explicit",
                "textEdit": {
                    "newText": "atomic_store_explicit",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <atomic>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <atomic>"
                },
                "filterText": "atomic_store_explicit",
                "insertText": "atomic_store_explicit",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_store_explicit(volatile atomic<Ty> *const Mem, const _Identity_t<Ty> Value, const memory_order Order)",
                "score": 0.3672971725463867,
                "sortText": "4172f538atomic_store_explicit",
                "textEdit": {
                    "newText": "atomic_store_explicit",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <chrono>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <chrono>"
                },
                "filterText": "treat_as_floating_point",
                "insertText": "chrono::treat_as_floating_point",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022chrono::treat_as_floating_point<class Rep>",
                "score": 0.6996012926101685,
                "sortText": "4179ad32treat_as_floating_point",
                "textEdit": {
                    "newText": "chrono::treat_as_floating_point",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "deprecated": true,
                "detail": "char *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\nAppCRT Time Functions\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
                },
                "filterText": "asctime",
                "insertText": "asctime",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022asctime(const struct tm *Tm)",
                "score": 0.23694516718387604,
                "sortText": "418d5e3fasctime",
                "textEdit": {
                    "newText": "asctime",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <ctime>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <ctime>"
                },
                "filterText": "asctime",
                "insertText": "asctime",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022asctime",
                "score": 0.23272034525871277,
                "sortText": "4191b1c2asctime",
                "textEdit": {
                    "newText": "asctime",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asin",
                "insertText": "asin",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022asin",
                "score": 0.23272034525871277,
                "sortText": "4191b1c2asin",
                "textEdit": {
                    "newText": "asin",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinf",
                "insertText": "asinf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022asinf",
                "score": 0.23272034525871277,
                "sortText": "4191b1c2asinf",
                "textEdit": {
                    "newText": "asinf",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinh",
                "insertText": "asinh",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022asinh",
                "score": 0.23272034525871277,
                "sortText": "4191b1c2asinh",
                "textEdit": {
                    "newText": "asinh",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinhf",
                "insertText": "asinhf",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022asinhf",
                "score": 0.23272034525871277,
                "sortText": "4191b1c2asinhf",
                "textEdit": {
                    "newText": "asinhf",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinhl",
                "insertText": "asinhl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022asinhl",
                "score": 0.23272034525871277,
                "sortText": "4191b1c2asinhl",
                "textEdit": {
                    "newText": "asinhl",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cmath>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cmath>"
                },
                "filterText": "asinl",
                "insertText": "asinl",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022asinl",
                "score": 0.23272034525871277,
                "sortText": "4191b1c2asinl",
                "textEdit": {
                    "newText": "asinl",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdatomic.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdatomic.h>"
                },
                "filterText": "atomic_signal_fence",
                "insertText": "atomic_signal_fence",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022atomic_signal_fence(memory_order)",
                "score": 0.2795443534851074,
                "sortText": "41a94f58atomic_signal_fence",
                "textEdit": {
                    "newText": "atomic_signal_fence",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "aligned_storage",
                "insertText": "tr1::aligned_storage",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::aligned_storage",
                "score": 0.24704135954380035,
                "sortText": "41c245b1aligned_storage",
                "textEdit": {
                    "newText": "tr1::aligned_storage",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <memory>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <memory>"
                },
                "filterText": "allocate_shared",
                "insertText": "tr1::allocate_shared",
                "insertTextFormat": 1,
                "kind": 18,
                "label": "\u2022tr1::allocate_shared",
                "score": 0.24704135954380035,
                "sortText": "41c245b1allocate_shared",
                "textEdit": {
                    "newText": "tr1::allocate_shared",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <tuple>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "tuple<Types &&...>",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <tuple>"
                },
                "filterText": "forward_as_tuple",
                "insertText": "forward_as_tuple",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022forward_as_tuple(Types &&Args...)",
                "score": 0.4689558446407318,
                "sortText": "41cbebc4forward_as_tuple",
                "textEdit": {
                    "newText": "forward_as_tuple",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <type_traits>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <type_traits>"
                },
                "filterText": "is_assignable_v",
                "insertText": "is_assignable_v",
                "insertTextFormat": 1,
                "kind": 6,
                "label": "\u2022is_assignable_v<class To, class From>",
                "score": 0.32943084836006165,
                "sortText": "4202ff42is_assignable_v",
                "textEdit": {
                    "newText": "is_assignable_v",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <chrono>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <chrono>"
                },
                "filterText": "treat_as_floating_point_v",
                "insertText": "chrono::treat_as_floating_point_v",
                "insertTextFormat": 1,
                "kind": 6,
                "label": "\u2022chrono::treat_as_floating_point_v<class Rep>",
                "score": 0.2888787090778351,
                "sortText": "42222422treat_as_floating_point_v",
                "textEdit": {
                    "newText": "chrono::treat_as_floating_point_v",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplwin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "const ::std::shared_ptr<scheduler_interface> &",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplwin.h>"
                },
                "filterText": "get_ambient_scheduler",
                "insertText": "Concurrency::get_ambient_scheduler",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::get_ambient_scheduler()",
                "score": 0.3183371126651764,
                "sortText": "42dd02ebget_ambient_scheduler",
                "textEdit": {
                    "newText": "Concurrency::get_ambient_scheduler",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <pplwin.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "void",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <pplwin.h>"
                },
                "filterText": "set_ambient_scheduler",
                "insertText": "Concurrency::set_ambient_scheduler",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022Concurrency::set_ambient_scheduler(const ::std::shared_ptr<scheduler_interface> &Scheduler)",
                "score": 0.3183371126651764,
                "sortText": "42dd02ebset_ambient_scheduler",
                "textEdit": {
                    "newText": "Concurrency::set_ambient_scheduler",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nENOTSOCK"
                },
                "filterText": "not_a_socket",
                "insertText": "errc::not_a_socket",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::not_a_socket",
                "score": 0.2888787090778351,
                "sortText": "42ec1817not_a_socket",
                "textEdit": {
                    "newText": "errc::not_a_socket",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <system_error>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "std::errc",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <system_error>\nENOSTR"
                },
                "filterText": "not_a_stream",
                "insertText": "errc::not_a_stream",
                "insertTextFormat": 1,
                "kind": 13,
                "label": "\u2022errc::not_a_stream",
                "score": 0.2888787090778351,
                "sortText": "42ec1817not_a_stream",
                "textEdit": {
                    "newText": "errc::not_a_stream",
                    "range": {
                        "end": {
                            "character": 12,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['aligned_storage', 'aligned_storage_t', 'atomic_schar', 'atomic_short', 'atomic_size_t', 'assert', 'Concurrency::details::atomic_size_t', 'as_const', 'asin', 'asin', 'asinh', 'async', 'async', 'atomic_schar', 'atomic_short', 'atomic_size_t', 'as_const', 'allocate_shared', 'asin', 'asin', 'asin', 'asinh', 'asinh', 'asinh', 'is_assignable', 'launch::async', 'static_assert', 'asctime_s', 'asctime_s', 'asin', 'asinf', 'asinh', 'asinhf', 'asinhl', 'asinl', 'atomic_signal_fence', 'atomic_store', 'atomic_store', 'atomic_store', 'atomic_store_explicit', 'atomic_store_explicit', 'atomic_store_explicit', 'chrono::treat_as_floating_point', 'asctime', 'asctime', 'asin', 'asinf', 'asinh', 'asinhf', 'asinhl', 'asinl', 'atomic_signal_fence', 'tr1::aligned_storage', 'tr1::allocate_shared', 'forward_as_tuple', 'is_assignable_v', 'chrono::treat_as_floating_point_v', 'Concurrency::get_ambient_scheduler', 'Concurrency::set_ambient_scheduler', 'errc::not_a_socket', 'errc::not_a_stream']
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'as'",
                "range": {
                    "end": {
                        "character": 12,
                        "line": 10
                    },
                    "start": {
                        "character": 10,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 116
                    },
                    "start": {
                        "character": 21,
                        "line": 116
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 73,
                        "line": 625
                    },
                    "start": {
                        "character": 68,
                        "line": 625
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 133
                    },
                    "start": {
                        "character": 2,
                        "line": 133
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'queue' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 155
                    },
                    "start": {
                        "character": 2,
                        "line": 155
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 177
                    },
                    "start": {
                        "character": 2,
                        "line": 177
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 208
                    },
                    "start": {
                        "character": 3,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 208
                    },
                    "start": {
                        "character": 11,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 101,
                        "line": 216
                    },
                    "start": {
                        "character": 97,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 52,
                        "line": 260
                    },
                    "start": {
                        "character": 50,
                        "line": 260
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'priority_queue'",
                "range": {
                    "end": {
                        "character": 16,
                        "line": 260
                    },
                    "start": {
                        "character": 2,
                        "line": 260
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 57
    }
}
Diagnostics received from LSP.
Errors received: [[10, [10, 12]], [116, [21, 26]], [625, [68, 73]], [133, [2, 7]], [143, [4, 8]], [143, [4, 8]], [155, [2, 7]], [177, [2, 7]], [205, [3, 7]], [205, [3, 7]], [207, [4, 8]], [207, [4, 8]], [208, [3, 7]], [208, [11, 15]], [216, [3, 7]], [216, [3, 7]], [216, [97, 101]], [260, [50, 52]], [260, [2, 16]], [0, [0, 0]]]
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'asda'",
                "range": {
                    "end": {
                        "character": 14,
                        "line": 10
                    },
                    "start": {
                        "character": 10,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 116
                    },
                    "start": {
                        "character": 21,
                        "line": 116
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 73,
                        "line": 625
                    },
                    "start": {
                        "character": 68,
                        "line": 625
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 133
                    },
                    "start": {
                        "character": 2,
                        "line": 133
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'queue' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 155
                    },
                    "start": {
                        "character": 2,
                        "line": 155
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 177
                    },
                    "start": {
                        "character": 2,
                        "line": 177
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 208
                    },
                    "start": {
                        "character": 3,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 208
                    },
                    "start": {
                        "character": 11,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 101,
                        "line": 216
                    },
                    "start": {
                        "character": 97,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 52,
                        "line": 260
                    },
                    "start": {
                        "character": 50,
                        "line": 260
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'priority_queue'",
                "range": {
                    "end": {
                        "character": 16,
                        "line": 260
                    },
                    "start": {
                        "character": 2,
                        "line": 260
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 59
    }
}
Diagnostics received from LSP.
Errors received: [[10, [10, 14]], [116, [21, 26]], [625, [68, 73]], [133, [2, 7]], [143, [4, 8]], [143, [4, 8]], [155, [2, 7]], [177, [2, 7]], [205, [3, 7]], [205, [3, 7]], [207, [4, 8]], [207, [4, 8]], [208, [3, 7]], [208, [11, 15]], [216, [3, 7]], [216, [3, 7]], [216, [97, 101]], [260, [50, 52]], [260, [2, 16]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'asdas'",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 10
                    },
                    "start": {
                        "character": 10,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 116
                    },
                    "start": {
                        "character": 21,
                        "line": 116
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 73,
                        "line": 625
                    },
                    "start": {
                        "character": 68,
                        "line": 625
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 133
                    },
                    "start": {
                        "character": 2,
                        "line": 133
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'queue' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 155
                    },
                    "start": {
                        "character": 2,
                        "line": 155
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 177
                    },
                    "start": {
                        "character": 2,
                        "line": 177
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 208
                    },
                    "start": {
                        "character": 3,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 208
                    },
                    "start": {
                        "character": 11,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 101,
                        "line": 216
                    },
                    "start": {
                        "character": 97,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 52,
                        "line": 260
                    },
                    "start": {
                        "character": 50,
                        "line": 260
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'priority_queue'",
                "range": {
                    "end": {
                        "character": 16,
                        "line": 260
                    },
                    "start": {
                        "character": 2,
                        "line": 260
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 60
    }
}
Diagnostics received from LSP.
Errors received: [[10, [10, 15]], [116, [21, 26]], [625, [68, 73]], [133, [2, 7]], [143, [4, 8]], [143, [4, 8]], [155, [2, 7]], [177, [2, 7]], [205, [3, 7]], [205, [3, 7]], [207, [4, 8]], [207, [4, 8]], [208, [3, 7]], [208, [11, 15]], [216, [3, 7]], [216, [3, 7]], [216, [97, 101]], [260, [50, 52]], [260, [2, 16]], [0, [0, 0]]]
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'asdasd'",
                "range": {
                    "end": {
                        "character": 16,
                        "line": 10
                    },
                    "start": {
                        "character": 10,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 116
                    },
                    "start": {
                        "character": 21,
                        "line": 116
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 73,
                        "line": 625
                    },
                    "start": {
                        "character": 68,
                        "line": 625
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 133
                    },
                    "start": {
                        "character": 2,
                        "line": 133
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'queue' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 155
                    },
                    "start": {
                        "character": 2,
                        "line": 155
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 177
                    },
                    "start": {
                        "character": 2,
                        "line": 177
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 208
                    },
                    "start": {
                        "character": 3,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 208
                    },
                    "start": {
                        "character": 11,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 101,
                        "line": 216
                    },
                    "start": {
                        "character": 97,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 52,
                        "line": 260
                    },
                    "start": {
                        "character": 50,
                        "line": 260
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'priority_queue'",
                "range": {
                    "end": {
                        "character": 16,
                        "line": 260
                    },
                    "start": {
                        "character": 2,
                        "line": 260
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 61
    }
}
Diagnostics received from LSP.
Errors received: [[10, [10, 16]], [116, [21, 26]], [625, [68, 73]], [133, [2, 7]], [143, [4, 8]], [143, [4, 8]], [155, [2, 7]], [177, [2, 7]], [205, [3, 7]], [205, [3, 7]], [207, [4, 8]], [207, [4, 8]], [208, [3, 7]], [208, [11, 15]], [216, [3, 7]], [216, [3, 7]], [216, [97, 101]], [260, [50, 52]], [260, [2, 16]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'asdasda'",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 10
                    },
                    "start": {
                        "character": 10,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 116
                    },
                    "start": {
                        "character": 21,
                        "line": 116
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 73,
                        "line": 625
                    },
                    "start": {
                        "character": 68,
                        "line": 625
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 133
                    },
                    "start": {
                        "character": 2,
                        "line": 133
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'queue' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 155
                    },
                    "start": {
                        "character": 2,
                        "line": 155
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 177
                    },
                    "start": {
                        "character": 2,
                        "line": 177
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 208
                    },
                    "start": {
                        "character": 3,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 208
                    },
                    "start": {
                        "character": 11,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 101,
                        "line": 216
                    },
                    "start": {
                        "character": 97,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 52,
                        "line": 260
                    },
                    "start": {
                        "character": 50,
                        "line": 260
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'priority_queue'",
                "range": {
                    "end": {
                        "character": 16,
                        "line": 260
                    },
                    "start": {
                        "character": 2,
                        "line": 260
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 62
    }
}
Diagnostics received from LSP.
Errors received: [[10, [10, 17]], [116, [21, 26]], [625, [68, 73]], [133, [2, 7]], [143, [4, 8]], [143, [4, 8]], [155, [2, 7]], [177, [2, 7]], [205, [3, 7]], [205, [3, 7]], [207, [4, 8]], [207, [4, 8]], [208, [3, 7]], [208, [11, 15]], [216, [3, 7]], [216, [3, 7]], [216, [97, 101]], [260, [50, 52]], [260, [2, 16]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'asdasda'",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 10
                    },
                    "start": {
                        "character": 10,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_member",
                "message": "No member named 'capacitate' in 'Muchie'",
                "range": {
                    "end": {
                        "character": 18,
                        "line": 36
                    },
                    "start": {
                        "character": 8,
                        "line": 36
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 116
                    },
                    "start": {
                        "character": 21,
                        "line": 116
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 73,
                        "line": 625
                    },
                    "start": {
                        "character": 68,
                        "line": 625
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 133
                    },
                    "start": {
                        "character": 2,
                        "line": 133
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'queue' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 155
                    },
                    "start": {
                        "character": 2,
                        "line": 155
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 177
                    },
                    "start": {
                        "character": 2,
                        "line": 177
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 208
                    },
                    "start": {
                        "character": 3,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 208
                    },
                    "start": {
                        "character": 11,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 101,
                        "line": 216
                    },
                    "start": {
                        "character": 97,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 52,
                        "line": 260
                    },
                    "start": {
                        "character": 50,
                        "line": 260
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 63
    }
}
Diagnostics received from LSP.
Errors received: [[10, [10, 17]], [36, [8, 18]], [116, [21, 26]], [625, [68, 73]], [133, [2, 7]], [143, [4, 8]], [143, [4, 8]], [155, [2, 7]], [177, [2, 7]], [205, [3, 7]], [205, [3, 7]], [207, [4, 8]], [207, [4, 8]], [208, [3, 7]], [208, [11, 15]], [216, [3, 7]], [216, [3, 7]], [216, [97, 101]], [260, [50, 52]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "detail": "int",
                "filterText": "cost",
                "insertText": "cost",
                "insertTextFormat": 1,
                "kind": 5,
                "label": " cost",
                "score": 3.0992579460144043,
                "sortText": "3fb9a5c2cost",
                "textEdit": {
                    "newText": "cost",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "flux",
                "insertText": "flux",
                "insertTextFormat": 1,
                "kind": 5,
                "label": " flux",
                "score": 3.0992579460144043,
                "sortText": "3fb9a5c2flux",
                "textEdit": {
                    "newText": "flux",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "x",
                "insertText": "x",
                "insertTextFormat": 1,
                "kind": 5,
                "label": " x",
                "score": 2.617910861968994,
                "sortText": "3fd87426x",
                "textEdit": {
                    "newText": "x",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "y",
                "insertText": "y",
                "insertTextFormat": 1,
                "kind": 5,
                "label": " y",
                "score": 2.617910861968994,
                "sortText": "3fd87426y",
                "textEdit": {
                    "newText": "y",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "muchie de la x la y cu costul cost"
                },
                "filterText": "Muchie",
                "insertText": "Muchie",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Muchie",
                "score": 1.9771091938018799,
                "sortText": "4002ee16Muchie",
                "textEdit": {
                    "newText": "Muchie",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "detail": "const int",
                "filterText": "infinity",
                "insertText": "infinity",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " infinity",
                "score": 1.5306519269943237,
                "sortText": "403c1399infinity",
                "textEdit": {
                    "newText": "infinity",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "detail": "const int",
                "filterText": "infinitytMin",
                "insertText": "infinitytMin",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " infinitytMin",
                "score": 1.5306519269943237,
                "sortText": "403c1399infinitytMin",
                "textEdit": {
                    "newText": "infinitytMin",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.466963291168213,
                "sortText": "40443a8cstd",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 0.8851884603500366,
                "sortText": "409d644asize_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.885036051273346,
                "sortText": "409d6e47_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.885036051273346,
                "sortText": "409d6e47_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.885036051273346,
                "sortText": "409d6e47_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "alignof",
                "insertText": "alignof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignof(type)",
                "score": 0.885036051273346,
                "sortText": "409d6e47alignof",
                "textEdit": {
                    "newText": "alignof",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.885036051273346,
                "sortText": "409d6e47auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.885036051273346,
                "sortText": "409d6e47bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.885036051273346,
                "sortText": "409d6e47char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.885036051273346,
                "sortText": "409d6e47char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.885036051273346,
                "sortText": "409d6e47char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.885036051273346,
                "sortText": "409d6e47class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.885036051273346,
                "sortText": "409d6e47const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete [] expression",
                "score": 0.885036051273346,
                "sortText": "409d6e47delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete expression",
                "score": 0.885036051273346,
                "sortText": "409d6e47delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.885036051273346,
                "sortText": "409d6e47double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "dynamic_cast",
                "insertText": "dynamic_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " dynamic_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47dynamic_cast",
                "textEdit": {
                    "newText": "dynamic_cast",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.885036051273346,
                "sortText": "409d6e47enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "false",
                "insertText": "false",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " false",
                "score": 0.885036051273346,
                "sortText": "409d6e47false",
                "textEdit": {
                    "newText": "false",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.885036051273346,
                "sortText": "409d6e47float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.885036051273346,
                "sortText": "409d6e47int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.885036051273346,
                "sortText": "409d6e47long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type[size](expressions)",
                "score": 0.885036051273346,
                "sortText": "409d6e47new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type(expressions)",
                "score": 0.885036051273346,
                "sortText": "409d6e47new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "noexcept",
                "insertText": "noexcept",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " noexcept(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47noexcept",
                "textEdit": {
                    "newText": "noexcept",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "detail": "std::nullptr_t",
                "filterText": "nullptr",
                "insertText": "nullptr",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " nullptr",
                "score": 0.885036051273346,
                "sortText": "409d6e47nullptr",
                "textEdit": {
                    "newText": "nullptr",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.885036051273346,
                "sortText": "409d6e47operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "reinterpret_cast",
                "insertText": "reinterpret_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " reinterpret_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47reinterpret_cast",
                "textEdit": {
                    "newText": "reinterpret_cast",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.885036051273346,
                "sortText": "409d6e47short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.885036051273346,
                "sortText": "409d6e47signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof",
                "insertText": "sizeof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof(expression-or-type)",
                "score": 0.885036051273346,
                "sortText": "409d6e47sizeof",
                "textEdit": {
                    "newText": "sizeof",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof...",
                "insertText": "sizeof...",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof...(parameter-pack)",
                "score": 0.885036051273346,
                "sortText": "409d6e47sizeof...",
                "textEdit": {
                    "newText": "sizeof...",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "static_cast",
                "insertText": "static_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47static_cast",
                "textEdit": {
                    "newText": "static_cast",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.885036051273346,
                "sortText": "409d6e47struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "detail": "Muchie *",
                "filterText": "this",
                "insertText": "this",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " this",
                "score": 0.885036051273346,
                "sortText": "409d6e47this",
                "textEdit": {
                    "newText": "this",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "throw",
                "insertText": "throw",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " throw expression",
                "score": 0.885036051273346,
                "sortText": "409d6e47throw",
                "textEdit": {
                    "newText": "throw",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "true",
                "insertText": "true",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " true",
                "score": 0.885036051273346,
                "sortText": "409d6e47true",
                "textEdit": {
                    "newText": "true",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "detail": "std::type_info",
                "filterText": "typeid",
                "insertText": "typeid",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typeid(expression-or-type)",
                "score": 0.885036051273346,
                "sortText": "409d6e47typeid",
                "textEdit": {
                    "newText": "typeid",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.885036051273346,
                "sortText": "409d6e47typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.885036051273346,
                "sortText": "409d6e47union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.885036051273346,
                "sortText": "409d6e47unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.885036051273346,
                "sortText": "409d6e47void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.885036051273346,
                "sortText": "409d6e47volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.885036051273346,
                "sortText": "409d6e47wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "_iobuf",
                "insertText": "_iobuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " _iobuf",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96_iobuf",
                "textEdit": {
                    "newText": "_iobuf",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "numeric_limits",
                "insertText": "numeric_limits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " numeric_limits<class Ty>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96numeric_limits",
                "textEdit": {
                    "newText": "numeric_limits",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "type_info",
                "insertText": "type_info",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " type_info",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96type_info",
                "textEdit": {
                    "newText": "type_info",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "EXIT_SUCCESS",
                "insertText": "EXIT_SUCCESS",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022EXIT_SUCCESS",
                "score": 0.6076183319091797,
                "sortText": "40e47320EXIT_SUCCESS",
                "textEdit": {
                    "newText": "EXIT_SUCCESS",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "MB_CUR_MAX",
                "insertText": "MB_CUR_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022MB_CUR_MAX",
                "score": 0.6076183319091797,
                "sortText": "40e47320MB_CUR_MAX",
                "textEdit": {
                    "newText": "MB_CUR_MAX",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_countof",
                "insertText": "_countof",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_countof",
                "score": 0.6076183319091797,
                "sortText": "40e47320_countof",
                "textEdit": {
                    "newText": "_countof",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_environ",
                "insertText": "_environ",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_environ",
                "score": 0.6076183319091797,
                "sortText": "40e47320_environ",
                "textEdit": {
                    "newText": "_environ",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_sys_errlist",
                "insertText": "_sys_errlist",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_sys_errlist",
                "score": 0.6076183319091797,
                "sortText": "40e47320_sys_errlist",
                "textEdit": {
                    "newText": "_sys_errlist",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_wenviron",
                "insertText": "_wenviron",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_wenviron",
                "score": 0.6076183319091797,
                "sortText": "40e47320_wenviron",
                "textEdit": {
                    "newText": "_wenviron",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_wpgmptr",
                "insertText": "_wpgmptr",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_wpgmptr",
                "score": 0.6076183319091797,
                "sortText": "40e47320_wpgmptr",
                "textEdit": {
                    "newText": "_wpgmptr",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "sys_nerr",
                "insertText": "sys_nerr",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022sys_nerr",
                "score": 0.6076183319091797,
                "sortText": "40e47320sys_nerr",
                "textEdit": {
                    "newText": "sys_nerr",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\nMath\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
                },
                "filterText": "_div_t",
                "insertText": "_div_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022_div_t",
                "score": 0.4987446963787079,
                "sortText": "4100a489_div_t",
                "textEdit": {
                    "newText": "_div_t",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_ldiv_t",
                "insertText": "_ldiv_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022_ldiv_t",
                "score": 0.4987446963787079,
                "sortText": "4100a489_ldiv_t",
                "textEdit": {
                    "newText": "_ldiv_t",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_lldiv_t",
                "insertText": "_lldiv_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022_lldiv_t",
                "score": 0.4987446963787079,
                "sortText": "4100a489_lldiv_t",
                "textEdit": {
                    "newText": "_lldiv_t",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_onexit_t",
                "insertText": "_onexit_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022_onexit_t",
                "score": 0.4987446963787079,
                "sortText": "4100a489_onexit_t",
                "textEdit": {
                    "newText": "_onexit_t",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>\na purecall handler procedure. Never returns normally"
                },
                "filterText": "_purecall_handler",
                "insertText": "_purecall_handler",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022_purecall_handler",
                "score": 0.4987446963787079,
                "sortText": "4100a489_purecall_handler",
                "textEdit": {
                    "newText": "_purecall_handler",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\nMath\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
                },
                "filterText": "div_t",
                "insertText": "div_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022div_t",
                "score": 0.4987446963787079,
                "sortText": "4100a489div_t",
                "textEdit": {
                    "newText": "div_t",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "ldiv_t",
                "insertText": "ldiv_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022ldiv_t",
                "score": 0.4987446963787079,
                "sortText": "4100a489ldiv_t",
                "textEdit": {
                    "newText": "ldiv_t",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_CALL_REPORTFAULT",
                "insertText": "_CALL_REPORTFAULT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CALL_REPORTFAULT",
                "score": 0.3929157853126526,
                "sortText": "4136d3be_CALL_REPORTFAULT",
                "textEdit": {
                    "newText": "_CALL_REPORTFAULT",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_CVTBUFSIZE",
                "insertText": "_CVTBUFSIZE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CVTBUFSIZE",
                "score": 0.3929157853126526,
                "sortText": "4136d3be_CVTBUFSIZE",
                "textEdit": {
                    "newText": "_CVTBUFSIZE",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_INC_STDLIB",
                "insertText": "_INC_STDLIB",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_INC_STDLIB",
                "score": 0.3929157853126526,
                "sortText": "4136d3be_INC_STDLIB",
                "textEdit": {
                    "newText": "_INC_STDLIB",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_MAX_DRIVE",
                "insertText": "_MAX_DRIVE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_MAX_DRIVE",
                "score": 0.3929157853126526,
                "sortText": "4136d3be_MAX_DRIVE",
                "textEdit": {
                    "newText": "_MAX_DRIVE",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_MAX_EXT",
                "insertText": "_MAX_EXT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_MAX_EXT",
                "score": 0.3929157853126526,
                "sortText": "4136d3be_MAX_EXT",
                "textEdit": {
                    "newText": "_MAX_EXT",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_REPORT_ERRMODE",
                "insertText": "_REPORT_ERRMODE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_REPORT_ERRMODE",
                "score": 0.3929157853126526,
                "sortText": "4136d3be_REPORT_ERRMODE",
                "textEdit": {
                    "newText": "_REPORT_ERRMODE",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_WRITE_ABORT_MSG",
                "insertText": "_WRITE_ABORT_MSG",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_WRITE_ABORT_MSG",
                "score": 0.3929157853126526,
                "sortText": "4136d3be_WRITE_ABORT_MSG",
                "textEdit": {
                    "newText": "_WRITE_ABORT_MSG",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "__argv",
                "insertText": "__argv",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022__argv",
                "score": 0.3929157853126526,
                "sortText": "4136d3be__argv",
                "textEdit": {
                    "newText": "__argv",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_abs64",
                "insertText": "_abs64",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_abs64(long long Number)",
                "score": 0.38804352283477783,
                "sortText": "4139525c_abs64",
                "textEdit": {
                    "newText": "_abs64",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_atodbl",
                "insertText": "_atodbl",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_atodbl(_CRT_DOUBLE *Result, char *String)",
                "score": 0.38804352283477783,
                "sortText": "4139525c_atodbl",
                "textEdit": {
                    "newText": "_atodbl",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_atoflt_l",
                "insertText": "_atoflt_l",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_atoflt_l(_CRT_FLOAT *Result, const char *String, _locale_t Locale)",
                "score": 0.38804352283477783,
                "sortText": "4139525c_atoflt_l",
                "textEdit": {
                    "newText": "_atoflt_l",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_atoi64",
                "insertText": "_atoi64",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_atoi64(const char *String)",
                "score": 0.38804352283477783,
                "sortText": "4139525c_atoi64",
                "textEdit": {
                    "newText": "_atoi64",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_atoi_l",
                "insertText": "_atoi_l",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_atoi_l(const char *String, _locale_t Locale)",
                "score": 0.38804352283477783,
                "sortText": "4139525c_atoi_l",
                "textEdit": {
                    "newText": "_atoi_l",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_atol_l",
                "insertText": "_atol_l",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_atol_l(const char *String, _locale_t Locale)",
                "score": 0.38804352283477783,
                "sortText": "4139525c_atol_l",
                "textEdit": {
                    "newText": "_atol_l",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_atoldbl",
                "insertText": "_atoldbl",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_atoldbl(_LDOUBLE *Result, char *String)",
                "score": 0.38804352283477783,
                "sortText": "4139525c_atoldbl",
                "textEdit": {
                    "newText": "_atoldbl",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_atoll_l",
                "insertText": "_atoll_l",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_atoll_l(const char *String, _locale_t Locale)",
                "score": 0.38804352283477783,
                "sortText": "4139525c_atoll_l",
                "textEdit": {
                    "newText": "_atoll_l",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "unsigned long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_byteswap_uint64",
                "insertText": "_byteswap_uint64",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_byteswap_uint64(unsigned long long Number)",
                "score": 0.38804352283477783,
                "sortText": "4139525c_byteswap_uint64",
                "textEdit": {
                    "newText": "_byteswap_uint64",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_dupenv_s",
                "insertText": "_dupenv_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_dupenv_s(char **Buffer, size_t *BufferCount, const char *VarName)",
                "score": 0.38804352283477783,
                "sortText": "4139525c_dupenv_s",
                "textEdit": {
                    "newText": "_dupenv_s",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_ecvt_s",
                "insertText": "_ecvt_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_ecvt_s(char (&Buffer)[Size], double Value, int DigitCount, int *PtDec, int *PtSign)",
                "score": 0.38804352283477783,
                "sortText": "4139525c_ecvt_s",
                "textEdit": {
                    "newText": "_ecvt_s",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <errno.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <errno.h>"
                },
                "filterText": "_errno",
                "insertText": "_errno",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_errno()",
                "score": 0.38804352283477783,
                "sortText": "4139525c_errno",
                "textEdit": {
                    "newText": "_errno",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_fcvt_s",
                "insertText": "_fcvt_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_fcvt_s(char (&Buffer)[Size], double Value, int FractionalDigitCount, int *PtDec, int *PtSign)",
                "score": 0.38804352283477783,
                "sortText": "4139525c_fcvt_s",
                "textEdit": {
                    "newText": "_fcvt_s",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_gcvt_s",
                "insertText": "_gcvt_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_gcvt_s(char (&Buffer)[Size], double Value, int DigitCount)",
                "score": 0.38804352283477783,
                "sortText": "4139525c_gcvt_s",
                "textEdit": {
                    "newText": "_gcvt_s",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <errno.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <errno.h>"
                },
                "filterText": "_get_errno",
                "insertText": "_get_errno",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_get_errno(int *Value)",
                "score": 0.38804352283477783,
                "sortText": "4139525c_get_errno",
                "textEdit": {
                    "newText": "_get_errno",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_get_fmode",
                "insertText": "_get_fmode",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_get_fmode(int *PMode)",
                "score": 0.38804352283477783,
                "sortText": "4139525c_get_fmode",
                "textEdit": {
                    "newText": "_get_fmode",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_invalid_parameter_handler",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_get_invalid_parameter_handler",
                "insertText": "_get_invalid_parameter_handler",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_get_invalid_parameter_handler()",
                "score": 0.38804352283477783,
                "sortText": "4139525c_get_invalid_parameter_handler",
                "textEdit": {
                    "newText": "_get_invalid_parameter_handler",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_purecall_handler",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_get_purecall_handler",
                "insertText": "_get_purecall_handler",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_get_purecall_handler()",
                "score": 0.38804352283477783,
                "sortText": "4139525c_get_purecall_handler",
                "textEdit": {
                    "newText": "_get_purecall_handler",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_get_wpgmptr",
                "insertText": "_get_wpgmptr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_get_wpgmptr(wchar_t **Value)",
                "score": 0.38804352283477783,
                "sortText": "4139525c_get_wpgmptr",
                "textEdit": {
                    "newText": "_get_wpgmptr",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_i64toa_s",
                "insertText": "_i64toa_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_i64toa_s(long long Value, char *Buffer, size_t BufferCount, int Radix)",
                "score": 0.38804352283477783,
                "sortText": "4139525c_i64toa_s",
                "textEdit": {
                    "newText": "_i64toa_s",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "detail": "unsigned long",
                "filterText": "_lrotr",
                "insertText": "_lrotr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " _lrotr(unsigned long, int)",
                "score": 0.38804352283477783,
                "sortText": "4139525c_lrotr",
                "textEdit": {
                    "newText": "_lrotr",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['cost', 'flux', 'x', 'y', 'Muchie', 'infinity', 'infinitytMin', 'std', 'size_t', '_Nonnull', '_Null_unspecified', '_Nullable', 'alignof', 'auto', 'bool', 'char', 'char16_t', 'char32_t', 'class', 'const', 'const_cast', 'decltype', 'delete', 'delete', 'double', 'dynamic_cast', 'enum', 'false', 'float', 'int', 'long', 'new', 'new', 'noexcept', 'nullptr', 'operator', 'reinterpret_cast', 'short', 'signed', 'sizeof', 'sizeof...', 'static_cast', 'struct', 'this', 'throw', 'true', 'typeid', 'typename', 'union', 'unsigned', 'void', 'volatile', 'wchar_t', '_iobuf', 'numeric_limits', 'type_info', 'EXIT_SUCCESS', 'MB_CUR_MAX', '_countof', '_environ', '_sys_errlist', '_wenviron', '_wpgmptr', 'sys_nerr', '_div_t', '_ldiv_t', '_lldiv_t', '_onexit_t', '_purecall_handler', 'div_t', 'ldiv_t', '_CALL_REPORTFAULT', '_CVTBUFSIZE', '_INC_STDLIB', '_MAX_DRIVE', '_MAX_EXT', '_REPORT_ERRMODE', '_WRITE_ABORT_MSG', '__argv', '_abs64', '_atodbl', '_atoflt_l', '_atoi64', '_atoi_l', '_atol_l', '_atoldbl', '_atoll_l', '_byteswap_uint64', '_dupenv_s', '_ecvt_s', '_errno', '_fcvt_s', '_gcvt_s', '_get_errno', '_get_fmode', '_get_invalid_parameter_handler', '_get_purecall_handler', '_get_wpgmptr', '_i64toa_s', '_lrotr']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'asdasda'",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 10
                    },
                    "start": {
                        "character": 10,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_semi_decl_list",
                "message": "Expected ';' at end of declaration list",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 16
                    },
                    "start": {
                        "character": 1,
                        "line": 16
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_member",
                "message": "No member named 'capacitate' in 'Muchie'",
                "range": {
                    "end": {
                        "character": 18,
                        "line": 36
                    },
                    "start": {
                        "character": 8,
                        "line": 36
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 116
                    },
                    "start": {
                        "character": 21,
                        "line": 116
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 73,
                        "line": 625
                    },
                    "start": {
                        "character": 68,
                        "line": 625
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 133
                    },
                    "start": {
                        "character": 2,
                        "line": 133
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'queue' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 155
                    },
                    "start": {
                        "character": 2,
                        "line": 155
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 177
                    },
                    "start": {
                        "character": 2,
                        "line": 177
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 208
                    },
                    "start": {
                        "character": 3,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 208
                    },
                    "start": {
                        "character": 11,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 101,
                        "line": 216
                    },
                    "start": {
                        "character": 97,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 64
    }
}
Diagnostics received from LSP.
Errors received: [[10, [10, 17]], [16, [1, 7]], [36, [8, 18]], [116, [21, 26]], [625, [68, 73]], [133, [2, 7]], [143, [4, 8]], [143, [4, 8]], [155, [2, 7]], [177, [2, 7]], [205, [3, 7]], [205, [3, 7]], [207, [4, 8]], [207, [4, 8]], [208, [3, 7]], [208, [11, 15]], [216, [3, 7]], [216, [3, 7]], [216, [97, 101]], [0, [0, 0]]]
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'asdasda'",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 10
                    },
                    "start": {
                        "character": 10,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "invalid_digit",
                "message": "Invalid digit 'a' in decimal constant",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 14
                    },
                    "start": {
                        "character": 14,
                        "line": 14
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_member",
                "message": "No member named 'capacitate' in 'Muchie'",
                "range": {
                    "end": {
                        "character": 18,
                        "line": 36
                    },
                    "start": {
                        "character": 8,
                        "line": 36
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 116
                    },
                    "start": {
                        "character": 21,
                        "line": 116
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 73,
                        "line": 625
                    },
                    "start": {
                        "character": 68,
                        "line": 625
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 133
                    },
                    "start": {
                        "character": 2,
                        "line": 133
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'queue' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 155
                    },
                    "start": {
                        "character": 2,
                        "line": 155
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 177
                    },
                    "start": {
                        "character": 2,
                        "line": 177
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 208
                    },
                    "start": {
                        "character": 3,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 208
                    },
                    "start": {
                        "character": 11,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 101,
                        "line": 216
                    },
                    "start": {
                        "character": 97,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 65
    }
}
Diagnostics received from LSP.
Errors received: [[10, [10, 17]], [14, [14, 15]], [36, [8, 18]], [116, [21, 26]], [625, [68, 73]], [133, [2, 7]], [143, [4, 8]], [143, [4, 8]], [155, [2, 7]], [177, [2, 7]], [205, [3, 7]], [205, [3, 7]], [207, [4, 8]], [207, [4, 8]], [208, [3, 7]], [208, [11, 15]], [216, [3, 7]], [216, [3, 7]], [216, [97, 101]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "detail": "int",
                "filterText": "cost",
                "insertText": "cost",
                "insertTextFormat": 1,
                "kind": 5,
                "label": " cost",
                "score": 3.0992579460144043,
                "sortText": "3fb9a5c2cost",
                "textEdit": {
                    "newText": "cost",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "flux",
                "insertText": "flux",
                "insertTextFormat": 1,
                "kind": 5,
                "label": " flux",
                "score": 3.0992579460144043,
                "sortText": "3fb9a5c2flux",
                "textEdit": {
                    "newText": "flux",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "x",
                "insertText": "x",
                "insertTextFormat": 1,
                "kind": 5,
                "label": " x",
                "score": 2.617910861968994,
                "sortText": "3fd87426x",
                "textEdit": {
                    "newText": "x",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "detail": "int",
                "filterText": "y",
                "insertText": "y",
                "insertTextFormat": 1,
                "kind": 5,
                "label": " y",
                "score": 2.617910861968994,
                "sortText": "3fd87426y",
                "textEdit": {
                    "newText": "y",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "muchie de la x la y cu costul cost"
                },
                "filterText": "Muchie",
                "insertText": "Muchie",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Muchie",
                "score": 1.9771091938018799,
                "sortText": "4002ee16Muchie",
                "textEdit": {
                    "newText": "Muchie",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "detail": "const int",
                "filterText": "infinity",
                "insertText": "infinity",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " infinity",
                "score": 1.5306519269943237,
                "sortText": "403c1399infinity",
                "textEdit": {
                    "newText": "infinity",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "detail": "const int",
                "filterText": "infinitytMin",
                "insertText": "infinitytMin",
                "insertTextFormat": 1,
                "kind": 6,
                "label": " infinitytMin",
                "score": 1.5306519269943237,
                "sortText": "403c1399infinitytMin",
                "textEdit": {
                    "newText": "infinitytMin",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.466963291168213,
                "sortText": "40443a8cstd",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 0.8851884603500366,
                "sortText": "409d644asize_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.885036051273346,
                "sortText": "409d6e47_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.885036051273346,
                "sortText": "409d6e47_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.885036051273346,
                "sortText": "409d6e47_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "alignof",
                "insertText": "alignof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignof(type)",
                "score": 0.885036051273346,
                "sortText": "409d6e47alignof",
                "textEdit": {
                    "newText": "alignof",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.885036051273346,
                "sortText": "409d6e47auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.885036051273346,
                "sortText": "409d6e47bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.885036051273346,
                "sortText": "409d6e47char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.885036051273346,
                "sortText": "409d6e47char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.885036051273346,
                "sortText": "409d6e47char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.885036051273346,
                "sortText": "409d6e47class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.885036051273346,
                "sortText": "409d6e47const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "const_cast",
                "insertText": "const_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " const_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47const_cast",
                "textEdit": {
                    "newText": "const_cast",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete [] expression",
                "score": 0.885036051273346,
                "sortText": "409d6e47delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "delete",
                "insertText": "delete",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " delete expression",
                "score": 0.885036051273346,
                "sortText": "409d6e47delete",
                "textEdit": {
                    "newText": "delete",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.885036051273346,
                "sortText": "409d6e47double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "dynamic_cast",
                "insertText": "dynamic_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " dynamic_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47dynamic_cast",
                "textEdit": {
                    "newText": "dynamic_cast",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.885036051273346,
                "sortText": "409d6e47enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "false",
                "insertText": "false",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " false",
                "score": 0.885036051273346,
                "sortText": "409d6e47false",
                "textEdit": {
                    "newText": "false",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.885036051273346,
                "sortText": "409d6e47float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.885036051273346,
                "sortText": "409d6e47int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.885036051273346,
                "sortText": "409d6e47long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type(expressions)",
                "score": 0.885036051273346,
                "sortText": "409d6e47new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "new",
                "insertText": "new",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " new type[size](expressions)",
                "score": 0.885036051273346,
                "sortText": "409d6e47new",
                "textEdit": {
                    "newText": "new",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "noexcept",
                "insertText": "noexcept",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " noexcept(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47noexcept",
                "textEdit": {
                    "newText": "noexcept",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "detail": "std::nullptr_t",
                "filterText": "nullptr",
                "insertText": "nullptr",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " nullptr",
                "score": 0.885036051273346,
                "sortText": "409d6e47nullptr",
                "textEdit": {
                    "newText": "nullptr",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.885036051273346,
                "sortText": "409d6e47operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "reinterpret_cast",
                "insertText": "reinterpret_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " reinterpret_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47reinterpret_cast",
                "textEdit": {
                    "newText": "reinterpret_cast",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.885036051273346,
                "sortText": "409d6e47short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.885036051273346,
                "sortText": "409d6e47signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof",
                "insertText": "sizeof",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof(expression-or-type)",
                "score": 0.885036051273346,
                "sortText": "409d6e47sizeof",
                "textEdit": {
                    "newText": "sizeof",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "detail": "size_t",
                "filterText": "sizeof...",
                "insertText": "sizeof...",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " sizeof...(parameter-pack)",
                "score": 0.885036051273346,
                "sortText": "409d6e47sizeof...",
                "textEdit": {
                    "newText": "sizeof...",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "static_cast",
                "insertText": "static_cast",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_cast<type>(expression)",
                "score": 0.885036051273346,
                "sortText": "409d6e47static_cast",
                "textEdit": {
                    "newText": "static_cast",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 0.885036051273346,
                "sortText": "409d6e47struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "detail": "Muchie *",
                "filterText": "this",
                "insertText": "this",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " this",
                "score": 0.885036051273346,
                "sortText": "409d6e47this",
                "textEdit": {
                    "newText": "this",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "detail": "void",
                "filterText": "throw",
                "insertText": "throw",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " throw expression",
                "score": 0.885036051273346,
                "sortText": "409d6e47throw",
                "textEdit": {
                    "newText": "throw",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "detail": "bool",
                "filterText": "true",
                "insertText": "true",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " true",
                "score": 0.885036051273346,
                "sortText": "409d6e47true",
                "textEdit": {
                    "newText": "true",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "detail": "std::type_info",
                "filterText": "typeid",
                "insertText": "typeid",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typeid(expression-or-type)",
                "score": 0.885036051273346,
                "sortText": "409d6e47typeid",
                "textEdit": {
                    "newText": "typeid",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.885036051273346,
                "sortText": "409d6e47typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.885036051273346,
                "sortText": "409d6e47union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.885036051273346,
                "sortText": "409d6e47unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.885036051273346,
                "sortText": "409d6e47void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.885036051273346,
                "sortText": "409d6e47volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.885036051273346,
                "sortText": "409d6e47wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "_iobuf",
                "insertText": "_iobuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " _iobuf",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96_iobuf",
                "textEdit": {
                    "newText": "_iobuf",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "numeric_limits",
                "insertText": "numeric_limits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " numeric_limits<class Ty>",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96numeric_limits",
                "textEdit": {
                    "newText": "numeric_limits",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "filterText": "type_info",
                "insertText": "type_info",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " type_info",
                "score": 0.6956239938735962,
                "sortText": "40cdeb96type_info",
                "textEdit": {
                    "newText": "type_info",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "EXIT_SUCCESS",
                "insertText": "EXIT_SUCCESS",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022EXIT_SUCCESS",
                "score": 0.6076183319091797,
                "sortText": "40e47320EXIT_SUCCESS",
                "textEdit": {
                    "newText": "EXIT_SUCCESS",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "MB_CUR_MAX",
                "insertText": "MB_CUR_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022MB_CUR_MAX",
                "score": 0.6076183319091797,
                "sortText": "40e47320MB_CUR_MAX",
                "textEdit": {
                    "newText": "MB_CUR_MAX",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_countof",
                "insertText": "_countof",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_countof",
                "score": 0.6076183319091797,
                "sortText": "40e47320_countof",
                "textEdit": {
                    "newText": "_countof",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_environ",
                "insertText": "_environ",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_environ",
                "score": 0.6076183319091797,
                "sortText": "40e47320_environ",
                "textEdit": {
                    "newText": "_environ",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_sys_errlist",
                "insertText": "_sys_errlist",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_sys_errlist",
                "score": 0.6076183319091797,
                "sortText": "40e47320_sys_errlist",
                "textEdit": {
                    "newText": "_sys_errlist",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_wenviron",
                "insertText": "_wenviron",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_wenviron",
                "score": 0.6076183319091797,
                "sortText": "40e47320_wenviron",
                "textEdit": {
                    "newText": "_wenviron",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_wpgmptr",
                "insertText": "_wpgmptr",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_wpgmptr",
                "score": 0.6076183319091797,
                "sortText": "40e47320_wpgmptr",
                "textEdit": {
                    "newText": "_wpgmptr",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "sys_nerr",
                "insertText": "sys_nerr",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022sys_nerr",
                "score": 0.6076183319091797,
                "sortText": "40e47320sys_nerr",
                "textEdit": {
                    "newText": "sys_nerr",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\nMath\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
                },
                "filterText": "_div_t",
                "insertText": "_div_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022_div_t",
                "score": 0.4987446963787079,
                "sortText": "4100a489_div_t",
                "textEdit": {
                    "newText": "_div_t",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_ldiv_t",
                "insertText": "_ldiv_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022_ldiv_t",
                "score": 0.4987446963787079,
                "sortText": "4100a489_ldiv_t",
                "textEdit": {
                    "newText": "_ldiv_t",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_lldiv_t",
                "insertText": "_lldiv_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022_lldiv_t",
                "score": 0.4987446963787079,
                "sortText": "4100a489_lldiv_t",
                "textEdit": {
                    "newText": "_lldiv_t",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_onexit_t",
                "insertText": "_onexit_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022_onexit_t",
                "score": 0.4987446963787079,
                "sortText": "4100a489_onexit_t",
                "textEdit": {
                    "newText": "_onexit_t",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>\na purecall handler procedure. Never returns normally"
                },
                "filterText": "_purecall_handler",
                "insertText": "_purecall_handler",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022_purecall_handler",
                "score": 0.4987446963787079,
                "sortText": "4100a489_purecall_handler",
                "textEdit": {
                    "newText": "_purecall_handler",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\nMath\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
                },
                "filterText": "div_t",
                "insertText": "div_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022div_t",
                "score": 0.4987446963787079,
                "sortText": "4100a489div_t",
                "textEdit": {
                    "newText": "div_t",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "ldiv_t",
                "insertText": "ldiv_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022ldiv_t",
                "score": 0.4987446963787079,
                "sortText": "4100a489ldiv_t",
                "textEdit": {
                    "newText": "ldiv_t",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_CALL_REPORTFAULT",
                "insertText": "_CALL_REPORTFAULT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CALL_REPORTFAULT",
                "score": 0.3929157853126526,
                "sortText": "4136d3be_CALL_REPORTFAULT",
                "textEdit": {
                    "newText": "_CALL_REPORTFAULT",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_CVTBUFSIZE",
                "insertText": "_CVTBUFSIZE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CVTBUFSIZE",
                "score": 0.3929157853126526,
                "sortText": "4136d3be_CVTBUFSIZE",
                "textEdit": {
                    "newText": "_CVTBUFSIZE",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_INC_STDLIB",
                "insertText": "_INC_STDLIB",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_INC_STDLIB",
                "score": 0.3929157853126526,
                "sortText": "4136d3be_INC_STDLIB",
                "textEdit": {
                    "newText": "_INC_STDLIB",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_MAX_DRIVE",
                "insertText": "_MAX_DRIVE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_MAX_DRIVE",
                "score": 0.3929157853126526,
                "sortText": "4136d3be_MAX_DRIVE",
                "textEdit": {
                    "newText": "_MAX_DRIVE",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_MAX_EXT",
                "insertText": "_MAX_EXT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_MAX_EXT",
                "score": 0.3929157853126526,
                "sortText": "4136d3be_MAX_EXT",
                "textEdit": {
                    "newText": "_MAX_EXT",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_REPORT_ERRMODE",
                "insertText": "_REPORT_ERRMODE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_REPORT_ERRMODE",
                "score": 0.3929157853126526,
                "sortText": "4136d3be_REPORT_ERRMODE",
                "textEdit": {
                    "newText": "_REPORT_ERRMODE",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_WRITE_ABORT_MSG",
                "insertText": "_WRITE_ABORT_MSG",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_WRITE_ABORT_MSG",
                "score": 0.3929157853126526,
                "sortText": "4136d3be_WRITE_ABORT_MSG",
                "textEdit": {
                    "newText": "_WRITE_ABORT_MSG",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "__argv",
                "insertText": "__argv",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022__argv",
                "score": 0.3929157853126526,
                "sortText": "4136d3be__argv",
                "textEdit": {
                    "newText": "__argv",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_abs64",
                "insertText": "_abs64",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_abs64(long long Number)",
                "score": 0.38804352283477783,
                "sortText": "4139525c_abs64",
                "textEdit": {
                    "newText": "_abs64",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_atodbl",
                "insertText": "_atodbl",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_atodbl(_CRT_DOUBLE *Result, char *String)",
                "score": 0.38804352283477783,
                "sortText": "4139525c_atodbl",
                "textEdit": {
                    "newText": "_atodbl",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_atoflt_l",
                "insertText": "_atoflt_l",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_atoflt_l(_CRT_FLOAT *Result, const char *String, _locale_t Locale)",
                "score": 0.38804352283477783,
                "sortText": "4139525c_atoflt_l",
                "textEdit": {
                    "newText": "_atoflt_l",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_atoi64",
                "insertText": "_atoi64",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_atoi64(const char *String)",
                "score": 0.38804352283477783,
                "sortText": "4139525c_atoi64",
                "textEdit": {
                    "newText": "_atoi64",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_atoi_l",
                "insertText": "_atoi_l",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_atoi_l(const char *String, _locale_t Locale)",
                "score": 0.38804352283477783,
                "sortText": "4139525c_atoi_l",
                "textEdit": {
                    "newText": "_atoi_l",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_atol_l",
                "insertText": "_atol_l",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_atol_l(const char *String, _locale_t Locale)",
                "score": 0.38804352283477783,
                "sortText": "4139525c_atol_l",
                "textEdit": {
                    "newText": "_atol_l",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_atoldbl",
                "insertText": "_atoldbl",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_atoldbl(_LDOUBLE *Result, char *String)",
                "score": 0.38804352283477783,
                "sortText": "4139525c_atoldbl",
                "textEdit": {
                    "newText": "_atoldbl",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_atoll_l",
                "insertText": "_atoll_l",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_atoll_l(const char *String, _locale_t Locale)",
                "score": 0.38804352283477783,
                "sortText": "4139525c_atoll_l",
                "textEdit": {
                    "newText": "_atoll_l",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "unsigned long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_byteswap_uint64",
                "insertText": "_byteswap_uint64",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_byteswap_uint64(unsigned long long Number)",
                "score": 0.38804352283477783,
                "sortText": "4139525c_byteswap_uint64",
                "textEdit": {
                    "newText": "_byteswap_uint64",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_dupenv_s",
                "insertText": "_dupenv_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_dupenv_s(char **Buffer, size_t *BufferCount, const char *VarName)",
                "score": 0.38804352283477783,
                "sortText": "4139525c_dupenv_s",
                "textEdit": {
                    "newText": "_dupenv_s",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_ecvt_s",
                "insertText": "_ecvt_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_ecvt_s(char (&Buffer)[Size], double Value, int DigitCount, int *PtDec, int *PtSign)",
                "score": 0.38804352283477783,
                "sortText": "4139525c_ecvt_s",
                "textEdit": {
                    "newText": "_ecvt_s",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <errno.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <errno.h>"
                },
                "filterText": "_errno",
                "insertText": "_errno",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_errno()",
                "score": 0.38804352283477783,
                "sortText": "4139525c_errno",
                "textEdit": {
                    "newText": "_errno",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_fcvt_s",
                "insertText": "_fcvt_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_fcvt_s(char (&Buffer)[Size], double Value, int FractionalDigitCount, int *PtDec, int *PtSign)",
                "score": 0.38804352283477783,
                "sortText": "4139525c_fcvt_s",
                "textEdit": {
                    "newText": "_fcvt_s",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_gcvt_s",
                "insertText": "_gcvt_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_gcvt_s(char (&Buffer)[Size], double Value, int DigitCount)",
                "score": 0.38804352283477783,
                "sortText": "4139525c_gcvt_s",
                "textEdit": {
                    "newText": "_gcvt_s",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <errno.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <errno.h>"
                },
                "filterText": "_get_errno",
                "insertText": "_get_errno",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_get_errno(int *Value)",
                "score": 0.38804352283477783,
                "sortText": "4139525c_get_errno",
                "textEdit": {
                    "newText": "_get_errno",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_get_fmode",
                "insertText": "_get_fmode",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_get_fmode(int *PMode)",
                "score": 0.38804352283477783,
                "sortText": "4139525c_get_fmode",
                "textEdit": {
                    "newText": "_get_fmode",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_invalid_parameter_handler",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_get_invalid_parameter_handler",
                "insertText": "_get_invalid_parameter_handler",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_get_invalid_parameter_handler()",
                "score": 0.38804352283477783,
                "sortText": "4139525c_get_invalid_parameter_handler",
                "textEdit": {
                    "newText": "_get_invalid_parameter_handler",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_purecall_handler",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_get_purecall_handler",
                "insertText": "_get_purecall_handler",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_get_purecall_handler()",
                "score": 0.38804352283477783,
                "sortText": "4139525c_get_purecall_handler",
                "textEdit": {
                    "newText": "_get_purecall_handler",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_get_wpgmptr",
                "insertText": "_get_wpgmptr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_get_wpgmptr(wchar_t **Value)",
                "score": 0.38804352283477783,
                "sortText": "4139525c_get_wpgmptr",
                "textEdit": {
                    "newText": "_get_wpgmptr",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_i64toa_s",
                "insertText": "_i64toa_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_i64toa_s(long long Value, char *Buffer, size_t BufferCount, int Radix)",
                "score": 0.38804352283477783,
                "sortText": "4139525c_i64toa_s",
                "textEdit": {
                    "newText": "_i64toa_s",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            },
            {
                "detail": "unsigned long",
                "filterText": "_lrotr",
                "insertText": "_lrotr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " _lrotr(unsigned long, int)",
                "score": 0.38804352283477783,
                "sortText": "4139525c_lrotr",
                "textEdit": {
                    "newText": "_lrotr",
                    "range": {
                        "end": {
                            "character": 15,
                            "line": 14
                        },
                        "start": {
                            "character": 15,
                            "line": 14
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['cost', 'flux', 'x', 'y', 'Muchie', 'infinity', 'infinitytMin', 'std', 'size_t', '_Nonnull', '_Null_unspecified', '_Nullable', 'alignof', 'auto', 'bool', 'char', 'char16_t', 'char32_t', 'class', 'const', 'const_cast', 'decltype', 'delete', 'delete', 'double', 'dynamic_cast', 'enum', 'false', 'float', 'int', 'long', 'new', 'new', 'noexcept', 'nullptr', 'operator', 'reinterpret_cast', 'short', 'signed', 'sizeof', 'sizeof...', 'static_cast', 'struct', 'this', 'throw', 'true', 'typeid', 'typename', 'union', 'unsigned', 'void', 'volatile', 'wchar_t', '_iobuf', 'numeric_limits', 'type_info', 'EXIT_SUCCESS', 'MB_CUR_MAX', '_countof', '_environ', '_sys_errlist', '_wenviron', '_wpgmptr', 'sys_nerr', '_div_t', '_ldiv_t', '_lldiv_t', '_onexit_t', '_purecall_handler', 'div_t', 'ldiv_t', '_CALL_REPORTFAULT', '_CVTBUFSIZE', '_INC_STDLIB', '_MAX_DRIVE', '_MAX_EXT', '_REPORT_ERRMODE', '_WRITE_ABORT_MSG', '__argv', '_abs64', '_atodbl', '_atoflt_l', '_atoi64', '_atoi_l', '_atol_l', '_atoldbl', '_atoll_l', '_byteswap_uint64', '_dupenv_s', '_ecvt_s', '_errno', '_fcvt_s', '_gcvt_s', '_get_errno', '_get_fmode', '_get_invalid_parameter_handler', '_get_purecall_handler', '_get_wpgmptr', '_i64toa_s', '_lrotr']
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'asdasda'",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 10
                    },
                    "start": {
                        "character": 10,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "invalid_digit",
                "message": "Invalid digit 'a' in decimal constant",
                "range": {
                    "end": {
                        "character": 16,
                        "line": 14
                    },
                    "start": {
                        "character": 14,
                        "line": 14
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_member",
                "message": "No member named 'capacitate' in 'Muchie'",
                "range": {
                    "end": {
                        "character": 18,
                        "line": 36
                    },
                    "start": {
                        "character": 8,
                        "line": 36
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 116
                    },
                    "start": {
                        "character": 21,
                        "line": 116
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 73,
                        "line": 625
                    },
                    "start": {
                        "character": 68,
                        "line": 625
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 133
                    },
                    "start": {
                        "character": 2,
                        "line": 133
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'queue' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 155
                    },
                    "start": {
                        "character": 2,
                        "line": 155
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 177
                    },
                    "start": {
                        "character": 2,
                        "line": 177
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 208
                    },
                    "start": {
                        "character": 3,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 208
                    },
                    "start": {
                        "character": 11,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 101,
                        "line": 216
                    },
                    "start": {
                        "character": 97,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 66
    }
}
Diagnostics received from LSP.
Errors received: [[10, [10, 17]], [14, [14, 16]], [36, [8, 18]], [116, [21, 26]], [625, [68, 73]], [133, [2, 7]], [143, [4, 8]], [143, [4, 8]], [155, [2, 7]], [177, [2, 7]], [205, [3, 7]], [205, [3, 7]], [207, [4, 8]], [207, [4, 8]], [208, [3, 7]], [208, [11, 15]], [216, [3, 7]], [216, [3, 7]], [216, [97, 101]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": false,
        "items": []
    }
}
Received a completion response from LSP.
Completions received: []
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'asdasda'",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 10
                    },
                    "start": {
                        "character": 10,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "invalid_digit",
                "message": "Invalid digit 'a' in decimal constant",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 14
                    },
                    "start": {
                        "character": 14,
                        "line": 14
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_member",
                "message": "No member named 'capacitate' in 'Muchie'",
                "range": {
                    "end": {
                        "character": 18,
                        "line": 36
                    },
                    "start": {
                        "character": 8,
                        "line": 36
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 116
                    },
                    "start": {
                        "character": 21,
                        "line": 116
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 73,
                        "line": 625
                    },
                    "start": {
                        "character": 68,
                        "line": 625
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 133
                    },
                    "start": {
                        "character": 2,
                        "line": 133
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'queue' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 155
                    },
                    "start": {
                        "character": 2,
                        "line": 155
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 177
                    },
                    "start": {
                        "character": 2,
                        "line": 177
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 208
                    },
                    "start": {
                        "character": 3,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 208
                    },
                    "start": {
                        "character": 11,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 101,
                        "line": 216
                    },
                    "start": {
                        "character": 97,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 67
    }
}
Diagnostics received from LSP.
Errors received: [[10, [10, 17]], [14, [14, 15]], [36, [8, 18]], [116, [21, 26]], [625, [68, 73]], [133, [2, 7]], [143, [4, 8]], [143, [4, 8]], [155, [2, 7]], [177, [2, 7]], [205, [3, 7]], [205, [3, 7]], [207, [4, 8]], [207, [4, 8]], [208, [3, 7]], [208, [11, 15]], [216, [3, 7]], [216, [3, 7]], [216, [97, 101]], [0, [0, 0]]]
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "unknown_typename",
                "message": "Unknown type name 'asdasda'",
                "range": {
                    "end": {
                        "character": 17,
                        "line": 10
                    },
                    "start": {
                        "character": 10,
                        "line": 10
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_semi_decl_list",
                "message": "Expected ';' at end of declaration list",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 16
                    },
                    "start": {
                        "character": 1,
                        "line": 16
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_member",
                "message": "No member named 'capacitate' in 'Muchie'",
                "range": {
                    "end": {
                        "character": 18,
                        "line": 36
                    },
                    "start": {
                        "character": 8,
                        "line": 36
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 116
                    },
                    "start": {
                        "character": 21,
                        "line": 116
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 73,
                        "line": 625
                    },
                    "start": {
                        "character": 68,
                        "line": 625
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 133
                    },
                    "start": {
                        "character": 2,
                        "line": 133
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'queue' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 155
                    },
                    "start": {
                        "character": 2,
                        "line": 155
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 177
                    },
                    "start": {
                        "character": 2,
                        "line": 177
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 208
                    },
                    "start": {
                        "character": 3,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 208
                    },
                    "start": {
                        "character": 11,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 101,
                        "line": 216
                    },
                    "start": {
                        "character": 97,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 69
    }
}
Diagnostics received from LSP.
Errors received: [[10, [10, 17]], [16, [1, 7]], [36, [8, 18]], [116, [21, 26]], [625, [68, 73]], [133, [2, 7]], [143, [4, 8]], [143, [4, 8]], [155, [2, 7]], [177, [2, 7]], [205, [3, 7]], [205, [3, 7]], [207, [4, 8]], [207, [4, 8]], [208, [3, 7]], [208, [11, 15]], [216, [3, 7]], [216, [3, 7]], [216, [97, 101]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Request sent with method textDocument/completion
Handling response from LSP
Received response: {
    "id": 1,
    "jsonrpc": "2.0",
    "result": {
        "isIncomplete": true,
        "items": [
            {
                "documentation": {
                    "kind": "plaintext",
                    "value": "muchie de la x la y cu costul cost"
                },
                "filterText": "Muchie",
                "insertText": "Muchie",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " Muchie",
                "score": 2.66562557220459,
                "sortText": "3fd56664Muchie",
                "textEdit": {
                    "newText": "Muchie",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "std",
                "insertText": "std",
                "insertTextFormat": 1,
                "kind": 9,
                "label": " std",
                "score": 1.885870337486267,
                "sortText": "400e9bcdstd",
                "textEdit": {
                    "newText": "std",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "struct",
                "insertText": "struct",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " struct",
                "score": 1.1117926836013794,
                "sortText": "4071b0c7struct",
                "textEdit": {
                    "newText": "struct",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "size_t",
                "insertText": "size_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": " size_t",
                "score": 1.0194766521453857,
                "sortText": "407d81casize_t",
                "textEdit": {
                    "newText": "size_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "_iobuf",
                "insertText": "_iobuf",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " _iobuf",
                "score": 0.816092848777771,
                "sortText": "40af148a_iobuf",
                "textEdit": {
                    "newText": "_iobuf",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "numeric_limits",
                "insertText": "numeric_limits",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " numeric_limits<class Ty>",
                "score": 0.816092848777771,
                "sortText": "40af148anumeric_limits",
                "textEdit": {
                    "newText": "numeric_limits",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "type_info",
                "insertText": "type_info",
                "insertTextFormat": 1,
                "kind": 7,
                "label": " type_info",
                "score": 0.816092848777771,
                "sortText": "40af148atype_info",
                "textEdit": {
                    "newText": "type_info",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "_Nonnull",
                "insertText": "_Nonnull",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nonnull",
                "score": 0.7694156765937805,
                "sortText": "40bb0793_Nonnull",
                "textEdit": {
                    "newText": "_Nonnull",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "_Null_unspecified",
                "insertText": "_Null_unspecified",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Null_unspecified",
                "score": 0.7694156765937805,
                "sortText": "40bb0793_Null_unspecified",
                "textEdit": {
                    "newText": "_Null_unspecified",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "_Nullable",
                "insertText": "_Nullable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " _Nullable",
                "score": 0.7694156765937805,
                "sortText": "40bb0793_Nullable",
                "textEdit": {
                    "newText": "_Nullable",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "alignas",
                "insertText": "alignas",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " alignas(expression)",
                "score": 0.7694156765937805,
                "sortText": "40bb0793alignas",
                "textEdit": {
                    "newText": "alignas",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "auto",
                "insertText": "auto",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " auto",
                "score": 0.7694156765937805,
                "sortText": "40bb0793auto",
                "textEdit": {
                    "newText": "auto",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "bool",
                "insertText": "bool",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " bool",
                "score": 0.7694156765937805,
                "sortText": "40bb0793bool",
                "textEdit": {
                    "newText": "bool",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "char",
                "insertText": "char",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char",
                "score": 0.7694156765937805,
                "sortText": "40bb0793char",
                "textEdit": {
                    "newText": "char",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "char16_t",
                "insertText": "char16_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char16_t",
                "score": 0.7694156765937805,
                "sortText": "40bb0793char16_t",
                "textEdit": {
                    "newText": "char16_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "char32_t",
                "insertText": "char32_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " char32_t",
                "score": 0.7694156765937805,
                "sortText": "40bb0793char32_t",
                "textEdit": {
                    "newText": "char32_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "class",
                "insertText": "class",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " class",
                "score": 0.7694156765937805,
                "sortText": "40bb0793class",
                "textEdit": {
                    "newText": "class",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "const",
                "insertText": "const",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " const",
                "score": 0.7694156765937805,
                "sortText": "40bb0793const",
                "textEdit": {
                    "newText": "const",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "constexpr",
                "insertText": "constexpr",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " constexpr",
                "score": 0.7694156765937805,
                "sortText": "40bb0793constexpr",
                "textEdit": {
                    "newText": "constexpr",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "decltype",
                "insertText": "decltype",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " decltype(expression)",
                "score": 0.7694156765937805,
                "sortText": "40bb0793decltype",
                "textEdit": {
                    "newText": "decltype",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "double",
                "insertText": "double",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " double",
                "score": 0.7694156765937805,
                "sortText": "40bb0793double",
                "textEdit": {
                    "newText": "double",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "enum",
                "insertText": "enum",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " enum",
                "score": 0.7694156765937805,
                "sortText": "40bb0793enum",
                "textEdit": {
                    "newText": "enum",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "explicit",
                "insertText": "explicit",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " explicit",
                "score": 0.7694156765937805,
                "sortText": "40bb0793explicit",
                "textEdit": {
                    "newText": "explicit",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "extern",
                "insertText": "extern",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " extern",
                "score": 0.7694156765937805,
                "sortText": "40bb0793extern",
                "textEdit": {
                    "newText": "extern",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "float",
                "insertText": "float",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " float",
                "score": 0.7694156765937805,
                "sortText": "40bb0793float",
                "textEdit": {
                    "newText": "float",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "friend",
                "insertText": "friend",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " friend",
                "score": 0.7694156765937805,
                "sortText": "40bb0793friend",
                "textEdit": {
                    "newText": "friend",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "inline",
                "insertText": "inline",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " inline",
                "score": 0.7694156765937805,
                "sortText": "40bb0793inline",
                "textEdit": {
                    "newText": "inline",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "int",
                "insertText": "int",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " int",
                "score": 0.7694156765937805,
                "sortText": "40bb0793int",
                "textEdit": {
                    "newText": "int",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "long",
                "insertText": "long",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " long",
                "score": 0.7694156765937805,
                "sortText": "40bb0793long",
                "textEdit": {
                    "newText": "long",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "mutable",
                "insertText": "mutable",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " mutable",
                "score": 0.7694156765937805,
                "sortText": "40bb0793mutable",
                "textEdit": {
                    "newText": "mutable",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "operator",
                "insertText": "operator",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " operator",
                "score": 0.7694156765937805,
                "sortText": "40bb0793operator",
                "textEdit": {
                    "newText": "operator",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "private",
                "insertText": "private",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " private",
                "score": 0.7694156765937805,
                "sortText": "40bb0793private",
                "textEdit": {
                    "newText": "private",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "protected",
                "insertText": "protected",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " protected",
                "score": 0.7694156765937805,
                "sortText": "40bb0793protected",
                "textEdit": {
                    "newText": "protected",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "public",
                "insertText": "public",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " public",
                "score": 0.7694156765937805,
                "sortText": "40bb0793public",
                "textEdit": {
                    "newText": "public",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "short",
                "insertText": "short",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " short",
                "score": 0.7694156765937805,
                "sortText": "40bb0793short",
                "textEdit": {
                    "newText": "short",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "signed",
                "insertText": "signed",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " signed",
                "score": 0.7694156765937805,
                "sortText": "40bb0793signed",
                "textEdit": {
                    "newText": "signed",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "static",
                "insertText": "static",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " static",
                "score": 0.7694156765937805,
                "sortText": "40bb0793static",
                "textEdit": {
                    "newText": "static",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "static_assert",
                "insertText": "static_assert",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " static_assert(expression, message);",
                "score": 0.7694156765937805,
                "sortText": "40bb0793static_assert",
                "textEdit": {
                    "newText": "static_assert",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "template",
                "insertText": "template",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " template",
                "score": 0.7694156765937805,
                "sortText": "40bb0793template",
                "textEdit": {
                    "newText": "template",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "thread_local",
                "insertText": "thread_local",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " thread_local",
                "score": 0.7694156765937805,
                "sortText": "40bb0793thread_local",
                "textEdit": {
                    "newText": "thread_local",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "typedef",
                "insertText": "typedef",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typedef type name;",
                "score": 0.7694156765937805,
                "sortText": "40bb0793typedef",
                "textEdit": {
                    "newText": "typedef",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "typename",
                "insertText": "typename",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " typename name",
                "score": 0.7694156765937805,
                "sortText": "40bb0793typename",
                "textEdit": {
                    "newText": "typename",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "union",
                "insertText": "union",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " union",
                "score": 0.7694156765937805,
                "sortText": "40bb0793union",
                "textEdit": {
                    "newText": "union",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "unsigned",
                "insertText": "unsigned",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " unsigned",
                "score": 0.7694156765937805,
                "sortText": "40bb0793unsigned",
                "textEdit": {
                    "newText": "unsigned",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using qualifier::name;",
                "score": 0.7694156765937805,
                "sortText": "40bb0793using",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "using",
                "insertText": "using",
                "insertTextFormat": 1,
                "kind": 15,
                "label": " using name = type;",
                "score": 0.7694156765937805,
                "sortText": "40bb0793using",
                "textEdit": {
                    "newText": "using",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "virtual",
                "insertText": "virtual",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " virtual",
                "score": 0.7694156765937805,
                "sortText": "40bb0793virtual",
                "textEdit": {
                    "newText": "virtual",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "void",
                "insertText": "void",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " void",
                "score": 0.7694156765937805,
                "sortText": "40bb0793void",
                "textEdit": {
                    "newText": "void",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "volatile",
                "insertText": "volatile",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " volatile",
                "score": 0.7694156765937805,
                "sortText": "40bb0793volatile",
                "textEdit": {
                    "newText": "volatile",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "filterText": "wchar_t",
                "insertText": "wchar_t",
                "insertTextFormat": 1,
                "kind": 14,
                "label": " wchar_t",
                "score": 0.7694156765937805,
                "sortText": "40bb0793wchar_t",
                "textEdit": {
                    "newText": "wchar_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "EXIT_SUCCESS",
                "insertText": "EXIT_SUCCESS",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022EXIT_SUCCESS",
                "score": 0.603100061416626,
                "sortText": "40e59b3cEXIT_SUCCESS",
                "textEdit": {
                    "newText": "EXIT_SUCCESS",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "MB_CUR_MAX",
                "insertText": "MB_CUR_MAX",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022MB_CUR_MAX",
                "score": 0.603100061416626,
                "sortText": "40e59b3cMB_CUR_MAX",
                "textEdit": {
                    "newText": "MB_CUR_MAX",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_countof",
                "insertText": "_countof",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_countof",
                "score": 0.603100061416626,
                "sortText": "40e59b3c_countof",
                "textEdit": {
                    "newText": "_countof",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_environ",
                "insertText": "_environ",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_environ",
                "score": 0.603100061416626,
                "sortText": "40e59b3c_environ",
                "textEdit": {
                    "newText": "_environ",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_sys_errlist",
                "insertText": "_sys_errlist",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_sys_errlist",
                "score": 0.603100061416626,
                "sortText": "40e59b3c_sys_errlist",
                "textEdit": {
                    "newText": "_sys_errlist",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_wenviron",
                "insertText": "_wenviron",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_wenviron",
                "score": 0.603100061416626,
                "sortText": "40e59b3c_wenviron",
                "textEdit": {
                    "newText": "_wenviron",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_wpgmptr",
                "insertText": "_wpgmptr",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_wpgmptr",
                "score": 0.603100061416626,
                "sortText": "40e59b3c_wpgmptr",
                "textEdit": {
                    "newText": "_wpgmptr",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "sys_nerr",
                "insertText": "sys_nerr",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022sys_nerr",
                "score": 0.603100061416626,
                "sortText": "40e59b3csys_nerr",
                "textEdit": {
                    "newText": "sys_nerr",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\nMath\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
                },
                "filterText": "_div_t",
                "insertText": "_div_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022_div_t",
                "score": 0.585259199142456,
                "sortText": "40ea2c74_div_t",
                "textEdit": {
                    "newText": "_div_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_ldiv_t",
                "insertText": "_ldiv_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022_ldiv_t",
                "score": 0.585259199142456,
                "sortText": "40ea2c74_ldiv_t",
                "textEdit": {
                    "newText": "_ldiv_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_lldiv_t",
                "insertText": "_lldiv_t",
                "insertTextFormat": 1,
                "kind": 7,
                "label": "\u2022_lldiv_t",
                "score": 0.585259199142456,
                "sortText": "40ea2c74_lldiv_t",
                "textEdit": {
                    "newText": "_lldiv_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_onexit_t",
                "insertText": "_onexit_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022_onexit_t",
                "score": 0.585259199142456,
                "sortText": "40ea2c74_onexit_t",
                "textEdit": {
                    "newText": "_onexit_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>\na purecall handler procedure. Never returns normally"
                },
                "filterText": "_purecall_handler",
                "insertText": "_purecall_handler",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022_purecall_handler",
                "score": 0.585259199142456,
                "sortText": "40ea2c74_purecall_handler",
                "textEdit": {
                    "newText": "_purecall_handler",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\nMath\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"
                },
                "filterText": "div_t",
                "insertText": "div_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022div_t",
                "score": 0.585259199142456,
                "sortText": "40ea2c74div_t",
                "textEdit": {
                    "newText": "div_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <cstdlib>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <cstdlib>"
                },
                "filterText": "ldiv_t",
                "insertText": "ldiv_t",
                "insertTextFormat": 1,
                "kind": 8,
                "label": "\u2022ldiv_t",
                "score": 0.585259199142456,
                "sortText": "40ea2c74ldiv_t",
                "textEdit": {
                    "newText": "ldiv_t",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_CALL_REPORTFAULT",
                "insertText": "_CALL_REPORTFAULT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CALL_REPORTFAULT",
                "score": 0.3610164225101471,
                "sortText": "414728db_CALL_REPORTFAULT",
                "textEdit": {
                    "newText": "_CALL_REPORTFAULT",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_CVTBUFSIZE",
                "insertText": "_CVTBUFSIZE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_CVTBUFSIZE",
                "score": 0.3610164225101471,
                "sortText": "414728db_CVTBUFSIZE",
                "textEdit": {
                    "newText": "_CVTBUFSIZE",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_INC_STDLIB",
                "insertText": "_INC_STDLIB",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_INC_STDLIB",
                "score": 0.3610164225101471,
                "sortText": "414728db_INC_STDLIB",
                "textEdit": {
                    "newText": "_INC_STDLIB",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_MAX_DRIVE",
                "insertText": "_MAX_DRIVE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_MAX_DRIVE",
                "score": 0.3610164225101471,
                "sortText": "414728db_MAX_DRIVE",
                "textEdit": {
                    "newText": "_MAX_DRIVE",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_MAX_EXT",
                "insertText": "_MAX_EXT",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_MAX_EXT",
                "score": 0.3610164225101471,
                "sortText": "414728db_MAX_EXT",
                "textEdit": {
                    "newText": "_MAX_EXT",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_REPORT_ERRMODE",
                "insertText": "_REPORT_ERRMODE",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_REPORT_ERRMODE",
                "score": 0.3610164225101471,
                "sortText": "414728db_REPORT_ERRMODE",
                "textEdit": {
                    "newText": "_REPORT_ERRMODE",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_WRITE_ABORT_MSG",
                "insertText": "_WRITE_ABORT_MSG",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022_WRITE_ABORT_MSG",
                "score": 0.3610164225101471,
                "sortText": "414728db_WRITE_ABORT_MSG",
                "textEdit": {
                    "newText": "_WRITE_ABORT_MSG",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "__argv",
                "insertText": "__argv",
                "insertTextFormat": 1,
                "kind": 1,
                "label": "\u2022__argv",
                "score": 0.3610164225101471,
                "sortText": "414728db__argv",
                "textEdit": {
                    "newText": "__argv",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_abs64",
                "insertText": "_abs64",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_abs64(long long Number)",
                "score": 0.2786673903465271,
                "sortText": "41715282_abs64",
                "textEdit": {
                    "newText": "_abs64",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_atodbl",
                "insertText": "_atodbl",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_atodbl(_CRT_DOUBLE *Result, char *String)",
                "score": 0.2786673903465271,
                "sortText": "41715282_atodbl",
                "textEdit": {
                    "newText": "_atodbl",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_atoflt_l",
                "insertText": "_atoflt_l",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_atoflt_l(_CRT_FLOAT *Result, const char *String, _locale_t Locale)",
                "score": 0.2786673903465271,
                "sortText": "41715282_atoflt_l",
                "textEdit": {
                    "newText": "_atoflt_l",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_atoi64",
                "insertText": "_atoi64",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_atoi64(const char *String)",
                "score": 0.2786673903465271,
                "sortText": "41715282_atoi64",
                "textEdit": {
                    "newText": "_atoi64",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_atoi_l",
                "insertText": "_atoi_l",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_atoi_l(const char *String, _locale_t Locale)",
                "score": 0.2786673903465271,
                "sortText": "41715282_atoi_l",
                "textEdit": {
                    "newText": "_atoi_l",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_atol_l",
                "insertText": "_atol_l",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_atol_l(const char *String, _locale_t Locale)",
                "score": 0.2786673903465271,
                "sortText": "41715282_atol_l",
                "textEdit": {
                    "newText": "_atol_l",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_atoldbl",
                "insertText": "_atoldbl",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_atoldbl(_LDOUBLE *Result, char *String)",
                "score": 0.2786673903465271,
                "sortText": "41715282_atoldbl",
                "textEdit": {
                    "newText": "_atoldbl",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_atoll_l",
                "insertText": "_atoll_l",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_atoll_l(const char *String, _locale_t Locale)",
                "score": 0.2786673903465271,
                "sortText": "41715282_atoll_l",
                "textEdit": {
                    "newText": "_atoll_l",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "unsigned long long",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_byteswap_uint64",
                "insertText": "_byteswap_uint64",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_byteswap_uint64(unsigned long long Number)",
                "score": 0.2786673903465271,
                "sortText": "41715282_byteswap_uint64",
                "textEdit": {
                    "newText": "_byteswap_uint64",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_dupenv_s",
                "insertText": "_dupenv_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_dupenv_s(char **Buffer, size_t *BufferCount, const char *VarName)",
                "score": 0.2786673903465271,
                "sortText": "41715282_dupenv_s",
                "textEdit": {
                    "newText": "_dupenv_s",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_ecvt_s",
                "insertText": "_ecvt_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_ecvt_s(char (&Buffer)[Size], double Value, int DigitCount, int *PtDec, int *PtSign)",
                "score": 0.2786673903465271,
                "sortText": "41715282_ecvt_s",
                "textEdit": {
                    "newText": "_ecvt_s",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <errno.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int *",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <errno.h>"
                },
                "filterText": "_errno",
                "insertText": "_errno",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_errno()",
                "score": 0.2786673903465271,
                "sortText": "41715282_errno",
                "textEdit": {
                    "newText": "_errno",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_fcvt_s",
                "insertText": "_fcvt_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_fcvt_s(char (&Buffer)[Size], double Value, int FractionalDigitCount, int *PtDec, int *PtSign)",
                "score": 0.2786673903465271,
                "sortText": "41715282_fcvt_s",
                "textEdit": {
                    "newText": "_fcvt_s",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_gcvt_s",
                "insertText": "_gcvt_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_gcvt_s(char (&Buffer)[Size], double Value, int DigitCount)",
                "score": 0.2786673903465271,
                "sortText": "41715282_gcvt_s",
                "textEdit": {
                    "newText": "_gcvt_s",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <errno.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <errno.h>"
                },
                "filterText": "_get_errno",
                "insertText": "_get_errno",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_get_errno(int *Value)",
                "score": 0.2786673903465271,
                "sortText": "41715282_get_errno",
                "textEdit": {
                    "newText": "_get_errno",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_get_fmode",
                "insertText": "_get_fmode",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_get_fmode(int *PMode)",
                "score": 0.2786673903465271,
                "sortText": "41715282_get_fmode",
                "textEdit": {
                    "newText": "_get_fmode",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_invalid_parameter_handler",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_get_invalid_parameter_handler",
                "insertText": "_get_invalid_parameter_handler",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_get_invalid_parameter_handler()",
                "score": 0.2786673903465271,
                "sortText": "41715282_get_invalid_parameter_handler",
                "textEdit": {
                    "newText": "_get_invalid_parameter_handler",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "_purecall_handler",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_get_purecall_handler",
                "insertText": "_get_purecall_handler",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_get_purecall_handler()",
                "score": 0.2786673903465271,
                "sortText": "41715282_get_purecall_handler",
                "textEdit": {
                    "newText": "_get_purecall_handler",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_get_wpgmptr",
                "insertText": "_get_wpgmptr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_get_wpgmptr(wchar_t **Value)",
                "score": 0.2786673903465271,
                "sortText": "41715282_get_wpgmptr",
                "textEdit": {
                    "newText": "_get_wpgmptr",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_i64toa_s",
                "insertText": "_i64toa_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_i64toa_s(long long Value, char *Buffer, size_t BufferCount, int Radix)",
                "score": 0.2786673903465271,
                "sortText": "41715282_i64toa_s",
                "textEdit": {
                    "newText": "_i64toa_s",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "detail": "unsigned long",
                "filterText": "_lrotr",
                "insertText": "_lrotr",
                "insertTextFormat": 1,
                "kind": 3,
                "label": " _lrotr(unsigned long, int)",
                "score": 0.2786673903465271,
                "sortText": "41715282_lrotr",
                "textEdit": {
                    "newText": "_lrotr",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_ltoa_s",
                "insertText": "_ltoa_s",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_ltoa_s(long Value, char (&Buffer)[Size], int Radix)",
                "score": 0.2786673903465271,
                "sortText": "41715282_ltoa_s",
                "textEdit": {
                    "newText": "_ltoa_s",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "int",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_mblen_l",
                "insertText": "_mblen_l",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mblen_l(const char *Ch, size_t MaxCount, _locale_t Locale)",
                "score": 0.2786673903465271,
                "sortText": "41715282_mblen_l",
                "textEdit": {
                    "newText": "_mblen_l",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "errno_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_mbstowcs_s_l",
                "insertText": "_mbstowcs_s_l",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mbstowcs_s_l(size_t *PtNumOfCharConverted, wchar_t *DstBuf, size_t SizeInWords, const char *SrcBuf, size_t MaxCount, _locale_t Locale)",
                "score": 0.2786673903465271,
                "sortText": "41715282_mbstowcs_s_l",
                "textEdit": {
                    "newText": "_mbstowcs_s_l",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_mbstrlen_l",
                "insertText": "_mbstrlen_l",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mbstrlen_l(const char *String, _locale_t Locale)",
                "score": 0.2786673903465271,
                "sortText": "41715282_mbstrlen_l",
                "textEdit": {
                    "newText": "_mbstrlen_l",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_mbstrnlen",
                "insertText": "_mbstrnlen",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mbstrnlen(const char *String, size_t MaxCount)",
                "score": 0.2786673903465271,
                "sortText": "41715282_mbstrnlen",
                "textEdit": {
                    "newText": "_mbstrnlen",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            },
            {
                "additionalTextEdits": [
                    {
                        "newText": "#include <stdlib.h>\n",
                        "range": {
                            "end": {
                                "character": 0,
                                "line": 0
                            },
                            "start": {
                                "character": 0,
                                "line": 0
                            }
                        }
                    }
                ],
                "detail": "size_t",
                "documentation": {
                    "kind": "plaintext",
                    "value": "From <stdlib.h>"
                },
                "filterText": "_mbstrnlen_l",
                "insertText": "_mbstrnlen_l",
                "insertTextFormat": 1,
                "kind": 3,
                "label": "\u2022_mbstrnlen_l(const char *String, size_t MaxCount, _locale_t Locale)",
                "score": 0.2786673903465271,
                "sortText": "41715282_mbstrnlen_l",
                "textEdit": {
                    "newText": "_mbstrnlen_l",
                    "range": {
                        "end": {
                            "character": 10,
                            "line": 10
                        },
                        "start": {
                            "character": 10,
                            "line": 10
                        }
                    }
                }
            }
        ]
    }
}
Received a completion response from LSP.
Completions received: ['Muchie', 'std', 'struct', 'size_t', '_iobuf', 'numeric_limits', 'type_info', '_Nonnull', '_Null_unspecified', '_Nullable', 'alignas', 'auto', 'bool', 'char', 'char16_t', 'char32_t', 'class', 'const', 'constexpr', 'decltype', 'double', 'enum', 'explicit', 'extern', 'float', 'friend', 'inline', 'int', 'long', 'mutable', 'operator', 'private', 'protected', 'public', 'short', 'signed', 'static', 'static_assert', 'template', 'thread_local', 'typedef', 'typename', 'union', 'unsigned', 'using', 'using', 'virtual', 'void', 'volatile', 'wchar_t', 'EXIT_SUCCESS', 'MB_CUR_MAX', '_countof', '_environ', '_sys_errlist', '_wenviron', '_wpgmptr', 'sys_nerr', '_div_t', '_ldiv_t', '_lldiv_t', '_onexit_t', '_purecall_handler', 'div_t', 'ldiv_t', '_CALL_REPORTFAULT', '_CVTBUFSIZE', '_INC_STDLIB', '_MAX_DRIVE', '_MAX_EXT', '_REPORT_ERRMODE', '_WRITE_ABORT_MSG', '__argv', '_abs64', '_atodbl', '_atoflt_l', '_atoi64', '_atoi_l', '_atol_l', '_atoldbl', '_atoll_l', '_byteswap_uint64', '_dupenv_s', '_ecvt_s', '_errno', '_fcvt_s', '_gcvt_s', '_get_errno', '_get_fmode', '_get_invalid_parameter_handler', '_get_purecall_handler', '_get_wpgmptr', '_i64toa_s', '_lrotr', '_ltoa_s', '_mblen_l', '_mbstowcs_s_l', '_mbstrlen_l', '_mbstrnlen', '_mbstrnlen_l']
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_semi_decl_list",
                "message": "Expected ';' at end of declaration list",
                "range": {
                    "end": {
                        "character": 4,
                        "line": 13
                    },
                    "start": {
                        "character": 1,
                        "line": 13
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_semi_decl_list",
                "message": "Expected ';' at end of declaration list",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 16
                    },
                    "start": {
                        "character": 1,
                        "line": 16
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_member",
                "message": "No member named 'capacitate' in 'Muchie'",
                "range": {
                    "end": {
                        "character": 18,
                        "line": 36
                    },
                    "start": {
                        "character": 8,
                        "line": 36
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 116
                    },
                    "start": {
                        "character": 21,
                        "line": 116
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 73,
                        "line": 625
                    },
                    "start": {
                        "character": 68,
                        "line": 625
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 133
                    },
                    "start": {
                        "character": 2,
                        "line": 133
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'queue' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 155
                    },
                    "start": {
                        "character": 2,
                        "line": 155
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 177
                    },
                    "start": {
                        "character": 2,
                        "line": 177
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 208
                    },
                    "start": {
                        "character": 3,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 208
                    },
                    "start": {
                        "character": 11,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 101,
                        "line": 216
                    },
                    "start": {
                        "character": 97,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 74
    }
}
Diagnostics received from LSP.
Errors received: [[13, [1, 4]], [16, [1, 7]], [36, [8, 18]], [116, [21, 26]], [625, [68, 73]], [133, [2, 7]], [143, [4, 8]], [143, [4, 8]], [155, [2, 7]], [177, [2, 7]], [205, [3, 7]], [205, [3, 7]], [207, [4, 8]], [207, [4, 8]], [208, [3, 7]], [208, [11, 15]], [216, [3, 7]], [216, [3, 7]], [216, [97, 101]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "expected_semi_decl_list",
                "message": "Expected ';' at end of declaration list",
                "range": {
                    "end": {
                        "character": 4,
                        "line": 13
                    },
                    "start": {
                        "character": 1,
                        "line": 13
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_member",
                "message": "No member named 'capacitate' in 'Muchie'",
                "range": {
                    "end": {
                        "character": 18,
                        "line": 36
                    },
                    "start": {
                        "character": 8,
                        "line": 36
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 116
                    },
                    "start": {
                        "character": 21,
                        "line": 116
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 73,
                        "line": 625
                    },
                    "start": {
                        "character": 68,
                        "line": 625
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 133
                    },
                    "start": {
                        "character": 2,
                        "line": 133
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'queue' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 155
                    },
                    "start": {
                        "character": 2,
                        "line": 155
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 177
                    },
                    "start": {
                        "character": 2,
                        "line": 177
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 208
                    },
                    "start": {
                        "character": 3,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 208
                    },
                    "start": {
                        "character": 11,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 101,
                        "line": 216
                    },
                    "start": {
                        "character": 97,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 52,
                        "line": 260
                    },
                    "start": {
                        "character": 50,
                        "line": 260
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 76
    }
}
Diagnostics received from LSP.
Errors received: [[13, [1, 4]], [36, [8, 18]], [116, [21, 26]], [625, [68, 73]], [133, [2, 7]], [143, [4, 8]], [143, [4, 8]], [155, [2, 7]], [177, [2, 7]], [205, [3, 7]], [205, [3, 7]], [207, [4, 8]], [207, [4, 8]], [208, [3, 7]], [208, [11, 15]], [216, [3, 7]], [216, [3, 7]], [216, [97, 101]], [260, [50, 52]], [0, [0, 0]]]
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Updated temporary file C:\Users\andre\AppData\Local\Temp\tmpzj63bvvq.cpp
Request sent with method textDocument/didChange
Handling response from LSP
Received response: {
    "jsonrpc": "2.0",
    "method": "textDocument/publishDiagnostics",
    "params": {
        "diagnostics": [
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 26,
                        "line": 116
                    },
                    "start": {
                        "character": 21,
                        "line": 116
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 73,
                        "line": 625
                    },
                    "start": {
                        "character": 68,
                        "line": 625
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 133
                    },
                    "start": {
                        "character": 2,
                        "line": 133
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 143
                    },
                    "start": {
                        "character": 4,
                        "line": 143
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'queue' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 155
                    },
                    "start": {
                        "character": 2,
                        "line": 155
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "no_template",
                "message": "No template named 'stack' (fix available)",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 177
                    },
                    "start": {
                        "character": 2,
                        "line": 177
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 205
                    },
                    "start": {
                        "character": 3,
                        "line": 205
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 8,
                        "line": 207
                    },
                    "start": {
                        "character": 4,
                        "line": 207
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 208
                    },
                    "start": {
                        "character": 3,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 15,
                        "line": 208
                    },
                    "start": {
                        "character": 11,
                        "line": 208
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use_suggest",
                "message": "Use of undeclared identifier 'cout'; did you mean 'count'? (fixes available)\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: 'count' declared here",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "ovl_unresolvable",
                "message": "Reference to overloaded function could not be resolved; did you mean to call it?\n\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.43.34808\\include\\xutility:6315:45:\nnote: possible target for call",
                "range": {
                    "end": {
                        "character": 7,
                        "line": 216
                    },
                    "start": {
                        "character": 3,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'endl' (fix available)",
                "range": {
                    "end": {
                        "character": 101,
                        "line": 216
                    },
                    "start": {
                        "character": 97,
                        "line": 216
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "expected_semi_after_expr",
                "message": "Expected ';' after expression (fix available)",
                "range": {
                    "end": {
                        "character": 52,
                        "line": 260
                    },
                    "start": {
                        "character": 50,
                        "line": 260
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'priority_queue' (fix available)",
                "range": {
                    "end": {
                        "character": 16,
                        "line": 260
                    },
                    "start": {
                        "character": 2,
                        "line": 260
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "undeclared_var_use",
                "message": "Use of undeclared identifier 'pq'",
                "range": {
                    "end": {
                        "character": 52,
                        "line": 260
                    },
                    "start": {
                        "character": 50,
                        "line": 260
                    }
                },
                "severity": 1,
                "source": "clang"
            },
            {
                "code": "fatal_too_many_errors",
                "message": "Too many errors emitted, stopping now",
                "range": {
                    "end": {
                        "character": 0,
                        "line": 0
                    },
                    "start": {
                        "character": 0,
                        "line": 0
                    }
                },
                "severity": 1,
                "source": "clang"
            }
        ],
        "uri": "file://C:/Users/andre/AppData/Local/Temp/tmpzj63bvvq.cpp",
        "version": 78
    }
}
Diagnostics received from LSP.
Errors received: [[116, [21, 26]], [625, [68, 73]], [133, [2, 7]], [143, [4, 8]], [143, [4, 8]], [155, [2, 7]], [177, [2, 7]], [205, [3, 7]], [205, [3, 7]], [207, [4, 8]], [207, [4, 8]], [208, [3, 7]], [208, [11, 15]], [216, [3, 7]], [216, [3, 7]], [216, [97, 101]], [260, [50, 52]], [260, [2, 16]], [260, [50, 52]], [0, [0, 0]]]
